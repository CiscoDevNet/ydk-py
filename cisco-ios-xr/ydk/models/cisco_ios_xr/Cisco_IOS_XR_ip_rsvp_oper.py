""" Cisco_IOS_XR_ip_rsvp_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ip\-rsvp package operational data.

This module contains definitions
for the following management objects\:
  rsvp\-standby\: RSVP operational data for standby role
  rsvp\: rsvp

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, YLeafList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYModelError



class IgpteLibBwModelEnum(Enum):
    """
    IgpteLibBwModelEnum

    Bandwidth model

    .. data:: rdm = 0

    	Russian Dolls Model

    .. data:: mam = 1

    	Maximum Allocation Model

    .. data:: not_set = 2

    	No model set

    """

    rdm = 0

    mam = 1

    not_set = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['IgpteLibBwModelEnum']


class RsvpMgmtAssociationEnum(Enum):
    """
    RsvpMgmtAssociationEnum

    RSVP ASSOCIATION Types

    .. data:: none = 0

    	No ASSOCIATION Object present

    .. data:: ipv4 = 1

    	IPv4 ASSOCIATION Type

    .. data:: ipv6 = 2

    	IPv6 ASSOCIATION Type

    .. data:: extended_ipv4 = 3

    	EXTENDED IPv4 ASSOCIATION Type

    .. data:: extended_ipv6 = 4

    	EXTENDED IPv6 ASSOCIATION Type

    """

    none = 0

    ipv4 = 1

    ipv6 = 2

    extended_ipv4 = 3

    extended_ipv6 = 4


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtAssociationEnum']


class RsvpMgmtAuthChallengeStatusEnum(Enum):
    """
    RsvpMgmtAuthChallengeStatusEnum

    RSVP Authentication Challenge Status

    .. data:: rsvp_mgmt_auth_cs_not_cfg = 0

    	Not configured

    .. data:: rsvp_mgmt_auth_cs_completed = 1

    	Complete

    .. data:: rsvp_mgmt_auth_cs_in_progress = 2

    	In Progress

    .. data:: rsvp_mgmt_auth_cs_failure = 3

    	Failed

    .. data:: rsvp_mgmt_auth_cs_not_supported = 4

    	Not supported

    """

    rsvp_mgmt_auth_cs_not_cfg = 0

    rsvp_mgmt_auth_cs_completed = 1

    rsvp_mgmt_auth_cs_in_progress = 2

    rsvp_mgmt_auth_cs_failure = 3

    rsvp_mgmt_auth_cs_not_supported = 4


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtAuthChallengeStatusEnum']


class RsvpMgmtAuthDirectionEnum(Enum):
    """
    RsvpMgmtAuthDirectionEnum

    RSVP Authentication Direction Types

    .. data:: rsvp_mgmt_auth_direction_send = 0

    	Send

    .. data:: rsvp_mgmt_auth_direction_recv = 1

    	Receive

    """

    rsvp_mgmt_auth_direction_send = 0

    rsvp_mgmt_auth_direction_recv = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtAuthDirectionEnum']


class RsvpMgmtAuthKiEnum(Enum):
    """
    RsvpMgmtAuthKiEnum

    RSVP Authentication KeyInfo Type

    .. data:: rsvp_mgmt_auth_ki_type_none = 0

    	None

    .. data:: rsvp_mgmt_auth_ki_type_global = 1

    	Global

    .. data:: rsvp_mgmt_auth_ki_type_interface = 2

    	Interface

    .. data:: rsvp_mgmt_auth_ki_type_neighbor = 3

    	Neighbor

    """

    rsvp_mgmt_auth_ki_type_none = 0

    rsvp_mgmt_auth_ki_type_global = 1

    rsvp_mgmt_auth_ki_type_interface = 2

    rsvp_mgmt_auth_ki_type_neighbor = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtAuthKiEnum']


class RsvpMgmtDsteModesEnum(Enum):
    """
    RsvpMgmtDsteModesEnum

    RSVP DSTE modes

    .. data:: pre_standard = 1

    	pre standard

    .. data:: standard = 3

    	standard

    """

    pre_standard = 1

    standard = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtDsteModesEnum']


class RsvpMgmtEroSubobjEnum(Enum):
    """
    RsvpMgmtEroSubobjEnum

    RSVP ERO Types

    .. data:: rsvp_mgmt_ero_type_ipv4 = 1

    	IPv4 ERO Type

    .. data:: rsvp_mgmt_ero_type_un_num = 4

    	Unnumbered ERO Type

    """

    rsvp_mgmt_ero_type_ipv4 = 1

    rsvp_mgmt_ero_type_un_num = 4


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtEroSubobjEnum']


class RsvpMgmtEroSubobjStatusEnum(Enum):
    """
    RsvpMgmtEroSubobjStatusEnum

    RSVP ERO Status

    .. data:: rsvp_mgmt_ero_status_not_available = 0

    	ERO is not available in topology

    .. data:: rsvp_mgmt_ero_status_available = 1

    	ERO is available in topology

    .. data:: rsvp_mgmt_ero_status_bw_not_available = 2

    	ERO doesn't have bw available in topology

    """

    rsvp_mgmt_ero_status_not_available = 0

    rsvp_mgmt_ero_status_available = 1

    rsvp_mgmt_ero_status_bw_not_available = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtEroSubobjStatusEnum']


class RsvpMgmtFilterEnum(Enum):
    """
    RsvpMgmtFilterEnum

    RSVP Filter Types

    .. data:: rsvp_mgmt_filter_type_ipv4 = 1

    	IPv4 FilterSpec Type

    .. data:: rsvp_mgmt_filter_type_p2mp_lsp_ipv4 = 12

    	P2MP LSP IPv4 FilterSpec Type

    """

    rsvp_mgmt_filter_type_ipv4 = 1

    rsvp_mgmt_filter_type_p2mp_lsp_ipv4 = 12


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtFilterEnum']


class RsvpMgmtFlowSpecEnum(Enum):
    """
    RsvpMgmtFlowSpecEnum

    RSVP Generic FlowSpec Types

    .. data:: g709otn = 5

    	G709 OTN FlowSpec Type

    """

    g709otn = 5


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtFlowSpecEnum']


class RsvpMgmtFrrStateEnumEnum(Enum):
    """
    RsvpMgmtFrrStateEnumEnum

    RSVP FRR States

    .. data:: ready_state = 0

    	Ready State

    .. data:: pending_state = 1

    	Pending

    .. data:: active_state = 2

    	Active State

    """

    ready_state = 0

    pending_state = 1

    active_state = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtFrrStateEnumEnum']


class RsvpMgmtGenericLabelEnum(Enum):
    """
    RsvpMgmtGenericLabelEnum

    RSVP Generic Label Types

    .. data:: rsvp_mgmt_label_type_gmpls = 2

    	Generalized Label Type

    """

    rsvp_mgmt_label_type_gmpls = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtGenericLabelEnum']


class RsvpMgmtGrAppEnum(Enum):
    """
    RsvpMgmtGrAppEnum

    RSVP Graceful Restart application type

    .. data:: ouni = 0

    	Application is OUNI

    .. data:: gmpls = 1

    	Application is GMPLS

    """

    ouni = 0

    gmpls = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtGrAppEnum']


class RsvpMgmtHelloDownReasonEnum(Enum):
    """
    RsvpMgmtHelloDownReasonEnum

    Reasons why RSVP Hellos went down

    .. data:: not_applicable = 0

    	Not applicable. This means RSVP Hellos are up

    .. data:: wrong_destination_instance = 1

    	Incorrect destination instance in received

    	Hellos

    .. data:: wrong_source_instance = 2

    	Incorrect source instance in received Hellos

    .. data:: hello_missed = 3

    	Hellos not being received

    .. data:: interface_down = 4

    	Interface went down

    .. data:: neighbor_disabled_hello = 5

    	Neighbor disabled Hellos

    .. data:: control_channel_down = 6

    	Control channel went down

    """

    not_applicable = 0

    wrong_destination_instance = 1

    wrong_source_instance = 2

    hello_missed = 3

    interface_down = 4

    neighbor_disabled_hello = 5

    control_channel_down = 6


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtHelloDownReasonEnum']


class RsvpMgmtHelloInstanceEnum(Enum):
    """
    RsvpMgmtHelloInstanceEnum

    RSVP Hello instance types

    .. data:: active = 0

    	Hello requests and ACKs are sent

    .. data:: passive = 1

    	Hello ACKs only are sent

    """

    active = 0

    passive = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtHelloInstanceEnum']


class RsvpMgmtHelloInstanceOwnerEnum(Enum):
    """
    RsvpMgmtHelloInstanceOwnerEnum

    RSVP Hello instance owner

    .. data:: mpls_graceful_restart = 0

    	MPLS Graceful Restart

    .. data:: mpls_ouni = 1

    	MPLS OUNI

    """

    mpls_graceful_restart = 0

    mpls_ouni = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtHelloInstanceOwnerEnum']


class RsvpMgmtHelloStateEnum(Enum):
    """
    RsvpMgmtHelloStateEnum

    RSVP Hello instance states

    .. data:: hello_state_init = 0

    	No Hello messages ever received from neighbor

    .. data:: hello_state_up = 1

    	Receiving expected Hello messages from neighbor

    .. data:: hello_state_down = 2

    	Stopped receiving expected Hello messages from

    	neighbor

    """

    hello_state_init = 0

    hello_state_up = 1

    hello_state_down = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtHelloStateEnum']


class RsvpMgmtQosServiceEnumEnum(Enum):
    """
    RsvpMgmtQosServiceEnumEnum

    QOS Types

    .. data:: rsvp_mgmt_qos_unknown = 0

    	QOS Unknown

    .. data:: rsvp_mgmt_qos_guaranteed = 3

    	QOS Guaranteed

    .. data:: rsvp_mgmt_qos_controlled_load = 5

    	QOS Controlled Load

    .. data:: rsvp_mgmt_qos_qualitative = 6

    	QOS Qualitative

    """

    rsvp_mgmt_qos_unknown = 0

    rsvp_mgmt_qos_guaranteed = 3

    rsvp_mgmt_qos_controlled_load = 5

    rsvp_mgmt_qos_qualitative = 6


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtQosServiceEnumEnum']


class RsvpMgmtReservationTypeEnumEnum(Enum):
    """
    RsvpMgmtReservationTypeEnumEnum

    RSVP Reservation Types

    .. data:: rsvp_mgmt_ff_option = 10

    	Single Reservation

    .. data:: rsvp_mgmt_wf_option = 17

    	Shared Reservation, Unlimited Scope

    .. data:: rsvp_mgmt_se_option = 18

    	Shared Reservation, Limited Scope

    """

    rsvp_mgmt_ff_option = 10

    rsvp_mgmt_wf_option = 17

    rsvp_mgmt_se_option = 18


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtReservationTypeEnumEnum']


class RsvpMgmtRestartStateEnum(Enum):
    """
    RsvpMgmtRestartStateEnum

    RSVP GR (Graceful Restart) Restart states

    .. data:: done = 0

    	Restart is done

    .. data:: recovery = 1

    	Neighbor is in recovery

    .. data:: abort = 2

    	Neighbor recovery aborted

    """

    done = 0

    recovery = 1

    abort = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtRestartStateEnum']


class RsvpMgmtRroSubobjEnum(Enum):
    """
    RsvpMgmtRroSubobjEnum

    RSVP RRO Types

    .. data:: ipv4rro_type = 1

    	IPv4 RRO Type

    .. data:: label_rro_type = 3

    	Label RRO Type

    .. data:: unnumbered_rro_type = 4

    	Unnumbered RRO Type

    .. data:: srlg_rro_type = 34

    	SRLG RRO Type

    """

    ipv4rro_type = 1

    label_rro_type = 3

    unnumbered_rro_type = 4

    srlg_rro_type = 34


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtRroSubobjEnum']


class RsvpMgmtSessionEnum(Enum):
    """
    RsvpMgmtSessionEnum

    RSVP Session Types

    .. data:: rsvp_mgmt_session_type_udp_ipv4 = 1

    	UDP IPv4 Session Type

    .. data:: rsvp_mgmt_session_type_lsp_ipv4 = 7

    	LSP IPv4 Session Type

    .. data:: rsvp_mgmt_session_type_uni_ipv4 = 9

    	UNI IPv4 Session Type

    .. data:: rsvp_mgmt_session_type_p2mp_lsp_ipv4 = 13

    	P2MP LSP IPv4 Session Type

    """

    rsvp_mgmt_session_type_udp_ipv4 = 1

    rsvp_mgmt_session_type_lsp_ipv4 = 7

    rsvp_mgmt_session_type_uni_ipv4 = 9

    rsvp_mgmt_session_type_p2mp_lsp_ipv4 = 13


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtSessionEnum']


class RsvpMgmtTspecEnum(Enum):
    """
    RsvpMgmtTspecEnum

    RSVP Generic Sender Tspec Types

    .. data:: g709otn = 5

    	G709 OTN Sender Tspec Type

    .. data:: intsrv = 12

    	Int-Serv Sender Tspec Type

    """

    g709otn = 5

    intsrv = 12


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpMgmtTspecEnum']


class RsvpModeEnum(Enum):
    """
    RsvpModeEnum

    Rsvp mode

    .. data:: send = 0

    	Send

    .. data:: receive = 1

    	Receive

    """

    send = 0

    receive = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpModeEnum']


class RsvpProcNsrNotReadyReasonEnum(Enum):
    """
    RsvpProcNsrNotReadyReasonEnum

    Rsvp proc nsr not ready reason

    .. data:: collab_time_out = 0

    	Collab connection time out

    .. data:: collab_conntection_idt = 1

    	Collab connection down or IDT not done

    .. data:: nsr_peer_not_connected = 2

    	NSR peer not connected

    .. data:: nsr_peer_not_in_sync = 3

    	NSR peer not in sync

    """

    collab_time_out = 0

    collab_conntection_idt = 1

    nsr_peer_not_connected = 2

    nsr_peer_not_in_sync = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpProcNsrNotReadyReasonEnum']


class RsvpProcRoleEnum(Enum):
    """
    RsvpProcRoleEnum

    RSVP Process Role

    .. data:: unknown = 0

    	Unknown

    .. data:: v1_active = 1

    	V1 Active

    .. data:: v1_standby = 2

    	V1 Standby

    .. data:: v2_active = 3

    	V2 Active

    .. data:: v2_standby = 4

    	V2 Standby

    .. data:: v1_active_post_big_bang = 5

    	V1 Active post big-bang

    .. data:: v1_standby_post_big_bang = 6

    	V1 Standbyi post big-bang

    .. data:: count = 7

    	Count

    """

    unknown = 0

    v1_active = 1

    v1_standby = 2

    v2_active = 3

    v2_standby = 4

    v1_active_post_big_bang = 5

    v1_standby_post_big_bang = 6

    count = 7


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpProcRoleEnum']


class RsvpSessionEnum(Enum):
    """
    RsvpSessionEnum

    Rsvp session

    .. data:: ipv4 = 1

    	Show IPv4 sessions only

    .. data:: p2p_lsp_ipv4 = 7

    	Show IPv4 P2P LSP sessions only

    .. data:: ouni_ipv4 = 9

    	Show IPv4 OUNI sessions only

    .. data:: p2mp_lsp_ipv4 = 13

    	Show IPv4 P2MP LSP sessions only

    """

    ipv4 = 1

    p2p_lsp_ipv4 = 7

    ouni_ipv4 = 9

    p2mp_lsp_ipv4 = 13


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpSessionEnum']


class RsvpSyncStatusEnum(Enum):
    """
    RsvpSyncStatusEnum

    Rsvp sync status

    .. data:: not_ready = 0

    	Not Ready

    .. data:: ready = 1

    	Ready

    """

    not_ready = 0

    ready = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpSyncStatusEnum']


class RsvpTimerStateEnum(Enum):
    """
    RsvpTimerStateEnum

    RSVP Timer States

    .. data:: rsvp_timer_running_and_sleeping = 1

    	RSVP timer running and sleeping

    .. data:: rsvp_timer_running = 2

    	RSVP timer running

    .. data:: rsvp_timer_not_running = 3

    	RSVP timer not running

    """

    rsvp_timer_running_and_sleeping = 1

    rsvp_timer_running = 2

    rsvp_timer_not_running = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpTimerStateEnum']



class RsvpStandby(object):
    """
    RSVP operational data for standby role
    
    .. attribute:: authentication_briefs
    
    	Table for Authentication related information
    	**type**\:   :py:class:`AuthenticationBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationBriefs>`
    
    .. attribute:: authentication_details
    
    	Table for detailed authentication related information
    	**type**\:   :py:class:`AuthenticationDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails>`
    
    .. attribute:: counters
    
    	Counters
    	**type**\:   :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters>`
    
    .. attribute:: frr_summary
    
    	Fast Re\-Route Summary State Information
    	**type**\:   :py:class:`FrrSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.FrrSummary>`
    
    .. attribute:: frrs
    
    	Table of detailed info about Fast Re\-route states
    	**type**\:   :py:class:`Frrs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs>`
    
    .. attribute:: global_neighbor_briefs
    
    	Table of brief info about global neighbors
    	**type**\:   :py:class:`GlobalNeighborBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborBriefs>`
    
    .. attribute:: global_neighbor_details
    
    	Table of detailed info about global neighbors
    	**type**\:   :py:class:`GlobalNeighborDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails>`
    
    .. attribute:: graceful_restart
    
    	Info about graceful\-restart
    	**type**\:   :py:class:`GracefulRestart <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GracefulRestart>`
    
    .. attribute:: hello_instance_briefs
    
    	Table of brief info about hello instances
    	**type**\:   :py:class:`HelloInstanceBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInstanceBriefs>`
    
    .. attribute:: hello_instance_details
    
    	Table of detailed info about hello instances
    	**type**\:   :py:class:`HelloInstanceDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInstanceDetails>`
    
    .. attribute:: hello_interface_instance_briefs
    
    	Table of brief info about i/f\-based hello instances
    	**type**\:   :py:class:`HelloInterfaceInstanceBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInterfaceInstanceBriefs>`
    
    .. attribute:: hello_interface_instance_details
    
    	Table of detailed info about i/f\-based hello instances
    	**type**\:   :py:class:`HelloInterfaceInstanceDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInterfaceInstanceDetails>`
    
    .. attribute:: interface_briefs
    
    	Table of brief info about RSVP\-enabled interfaces
    	**type**\:   :py:class:`InterfaceBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceBriefs>`
    
    .. attribute:: interface_detaileds
    
    	Table of detailed info about RSVP\-enabled interfaces
    	**type**\:   :py:class:`InterfaceDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds>`
    
    .. attribute:: interface_neighbor_briefs
    
    	Table of brief info about I/F neighbors
    	**type**\:   :py:class:`InterfaceNeighborBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceNeighborBriefs>`
    
    .. attribute:: interface_neighbor_details
    
    	Table of detailed info about I/F neighbors
    	**type**\:   :py:class:`InterfaceNeighborDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceNeighborDetails>`
    
    .. attribute:: interface_summaries
    
    	Table of summary info about RSVP\-enabled interfaces
    	**type**\:   :py:class:`InterfaceSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceSummaries>`
    
    .. attribute:: nsr
    
    	RSVP NSR information
    	**type**\:   :py:class:`Nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Nsr>`
    
    .. attribute:: open_config
    
    	OpenConfig info
    	**type**\:   :py:class:`OpenConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.OpenConfig>`
    
    .. attribute:: psb_briefs
    
    	Table of brief info about path state blocks
    	**type**\:   :py:class:`PsbBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs>`
    
    .. attribute:: psb_detaileds
    
    	Table of detailed info about path state blocks
    	**type**\:   :py:class:`PsbDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds>`
    
    .. attribute:: request_briefs
    
    	Table of brief info about requests
    	**type**\:   :py:class:`RequestBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs>`
    
    .. attribute:: request_details
    
    	Table of detail info about requests
    	**type**\:   :py:class:`RequestDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails>`
    
    .. attribute:: rsb_briefs
    
    	Table of brief info about reservation state blocks
    	**type**\:   :py:class:`RsbBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs>`
    
    .. attribute:: rsb_detaileds
    
    	Table of detailed info about reservation state blocks
    	**type**\:   :py:class:`RsbDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds>`
    
    .. attribute:: session_briefs
    
    	Table of brief info about sessions
    	**type**\:   :py:class:`SessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs>`
    
    .. attribute:: session_detaileds
    
    	Table of detailed info about sessions
    	**type**\:   :py:class:`SessionDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds>`
    
    .. attribute:: summary
    
    	RSVP summary information
    	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary>`
    
    

    """

    _prefix = 'ip-rsvp-oper'
    _revision = '2015-11-09'

    def __init__(self):
        self.authentication_briefs = RsvpStandby.AuthenticationBriefs()
        self.authentication_briefs.parent = self
        self.authentication_details = RsvpStandby.AuthenticationDetails()
        self.authentication_details.parent = self
        self.counters = RsvpStandby.Counters()
        self.counters.parent = self
        self.frr_summary = RsvpStandby.FrrSummary()
        self.frr_summary.parent = self
        self.frrs = RsvpStandby.Frrs()
        self.frrs.parent = self
        self.global_neighbor_briefs = RsvpStandby.GlobalNeighborBriefs()
        self.global_neighbor_briefs.parent = self
        self.global_neighbor_details = RsvpStandby.GlobalNeighborDetails()
        self.global_neighbor_details.parent = self
        self.graceful_restart = RsvpStandby.GracefulRestart()
        self.graceful_restart.parent = self
        self.hello_instance_briefs = RsvpStandby.HelloInstanceBriefs()
        self.hello_instance_briefs.parent = self
        self.hello_instance_details = RsvpStandby.HelloInstanceDetails()
        self.hello_instance_details.parent = self
        self.hello_interface_instance_briefs = RsvpStandby.HelloInterfaceInstanceBriefs()
        self.hello_interface_instance_briefs.parent = self
        self.hello_interface_instance_details = RsvpStandby.HelloInterfaceInstanceDetails()
        self.hello_interface_instance_details.parent = self
        self.interface_briefs = RsvpStandby.InterfaceBriefs()
        self.interface_briefs.parent = self
        self.interface_detaileds = RsvpStandby.InterfaceDetaileds()
        self.interface_detaileds.parent = self
        self.interface_neighbor_briefs = RsvpStandby.InterfaceNeighborBriefs()
        self.interface_neighbor_briefs.parent = self
        self.interface_neighbor_details = RsvpStandby.InterfaceNeighborDetails()
        self.interface_neighbor_details.parent = self
        self.interface_summaries = RsvpStandby.InterfaceSummaries()
        self.interface_summaries.parent = self
        self.nsr = RsvpStandby.Nsr()
        self.nsr.parent = self
        self.open_config = RsvpStandby.OpenConfig()
        self.open_config.parent = self
        self.psb_briefs = RsvpStandby.PsbBriefs()
        self.psb_briefs.parent = self
        self.psb_detaileds = RsvpStandby.PsbDetaileds()
        self.psb_detaileds.parent = self
        self.request_briefs = RsvpStandby.RequestBriefs()
        self.request_briefs.parent = self
        self.request_details = RsvpStandby.RequestDetails()
        self.request_details.parent = self
        self.rsb_briefs = RsvpStandby.RsbBriefs()
        self.rsb_briefs.parent = self
        self.rsb_detaileds = RsvpStandby.RsbDetaileds()
        self.rsb_detaileds.parent = self
        self.session_briefs = RsvpStandby.SessionBriefs()
        self.session_briefs.parent = self
        self.session_detaileds = RsvpStandby.SessionDetaileds()
        self.session_detaileds.parent = self
        self.summary = RsvpStandby.Summary()
        self.summary.parent = self


    class InterfaceNeighborBriefs(object):
        """
        Table of brief info about I/F neighbors
        
        .. attribute:: interface_neighbor_brief
        
        	Brief info for a single interface neighbor
        	**type**\: list of    :py:class:`InterfaceNeighborBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceNeighborBriefs.InterfaceNeighborBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.interface_neighbor_brief = YList()
            self.interface_neighbor_brief.parent = self
            self.interface_neighbor_brief.name = 'interface_neighbor_brief'


        class InterfaceNeighborBrief(object):
            """
            Brief info for a single interface neighbor
            
            .. attribute:: neighbor_address  <key>
            
            	Address of global neighbor
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_neighbor_list_compact
            
            	Compact list of I/F Neighbors
            	**type**\: list of    :py:class:`InterfaceNeighborListCompact <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceNeighborBriefs.InterfaceNeighborBrief.InterfaceNeighborListCompact>`
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.neighbor_address = None
                self.interface_neighbor_list_compact = YList()
                self.interface_neighbor_list_compact.parent = self
                self.interface_neighbor_list_compact.name = 'interface_neighbor_list_compact'
                self.node_address = None


            class InterfaceNeighborListCompact(object):
                """
                Compact list of I/F Neighbors
                
                .. attribute:: interface_neighbor_address
                
                	Interface Neighbor address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_interface_name
                
                	Neighbor's Interface handle
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_neighbor_address = None
                    self.neighbor_interface_name = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-list-compact'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_neighbor_address is not None:
                        return True

                    if self.neighbor_interface_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.InterfaceNeighborBriefs.InterfaceNeighborBrief.InterfaceNeighborListCompact']['meta_info']

            @property
            def _common_path(self):
                if self.neighbor_address is None:
                    raise YPYModelError('Key property neighbor_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-briefs/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-brief[Cisco-IOS-XR-ip-rsvp-oper:neighbor-address = ' + str(self.neighbor_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.neighbor_address is not None:
                    return True

                if self.interface_neighbor_list_compact is not None:
                    for child_ref in self.interface_neighbor_list_compact:
                        if child_ref._has_data():
                            return True

                if self.node_address is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.InterfaceNeighborBriefs.InterfaceNeighborBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.interface_neighbor_brief is not None:
                for child_ref in self.interface_neighbor_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.InterfaceNeighborBriefs']['meta_info']


    class AuthenticationBriefs(object):
        """
        Table for Authentication related information
        
        .. attribute:: authentication_brief
        
        	Brief Authentication information
        	**type**\: list of    :py:class:`AuthenticationBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationBriefs.AuthenticationBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.authentication_brief = YList()
            self.authentication_brief.parent = self
            self.authentication_brief.name = 'authentication_brief'


        class AuthenticationBrief(object):
            """
            Brief Authentication information
            
            .. attribute:: destination_address  <key>
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_name  <key>
            
            	InterfaceName
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: mode_id  <key>
            
            	Mode (Tx or Rx)
            	**type**\:   :py:class:`RsvpModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpModeEnum>`
            
            .. attribute:: source_address  <key>
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: direction
            
            	Direction
            	**type**\:   :py:class:`RsvpMgmtAuthDirectionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthDirectionEnum>`
            
            .. attribute:: key_id
            
            	Key ID
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: key_id_valid
            
            	Key validity
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: key_source
            
            	Key source
            	**type**\:  str
            
            .. attribute:: key_type
            
            	Key type
            	**type**\:   :py:class:`RsvpMgmtAuthKiEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthKiEnum>`
            
            .. attribute:: neighbor_address
            
            	Neighbor address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.interface_name = None
                self.mode_id = None
                self.source_address = None
                self.destination_address_xr = None
                self.direction = None
                self.key_id = None
                self.key_id_valid = None
                self.key_source = None
                self.key_type = None
                self.neighbor_address = None
                self.source_address_xr = None

            @property
            def _common_path(self):
                if self.destination_address is None:
                    raise YPYModelError('Key property destination_address is None')
                if self.interface_name is None:
                    raise YPYModelError('Key property interface_name is None')
                if self.mode_id is None:
                    raise YPYModelError('Key property mode_id is None')
                if self.source_address is None:
                    raise YPYModelError('Key property source_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:authentication-briefs/Cisco-IOS-XR-ip-rsvp-oper:authentication-brief[Cisco-IOS-XR-ip-rsvp-oper:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + '][Cisco-IOS-XR-ip-rsvp-oper:mode-id = ' + str(self.mode_id) + '][Cisco-IOS-XR-ip-rsvp-oper:source-address = ' + str(self.source_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.mode_id is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.destination_address_xr is not None:
                    return True

                if self.direction is not None:
                    return True

                if self.key_id is not None:
                    return True

                if self.key_id_valid is not None:
                    return True

                if self.key_source is not None:
                    return True

                if self.key_type is not None:
                    return True

                if self.neighbor_address is not None:
                    return True

                if self.source_address_xr is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.AuthenticationBriefs.AuthenticationBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:authentication-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.authentication_brief is not None:
                for child_ref in self.authentication_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.AuthenticationBriefs']['meta_info']


    class SessionBriefs(object):
        """
        Table of brief info about sessions
        
        .. attribute:: session_brief
        
        	Brief info about session
        	**type**\: list of    :py:class:`SessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs.SessionBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_brief = YList()
            self.session_brief.parent = self
            self.session_brief.name = 'session_brief'


        class SessionBrief(object):
            """
            Brief info about session
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: detail_list_size
            
            	Number of elements in detail list
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: ps_bs
            
            	Number of path state block states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: requests
            
            	Number of request states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: rs_bs
            
            	Number of reservation state block states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs.SessionBrief.Session>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.detail_list_size = None
                self.extended_tunnel_id = None
                self.p2mp_id = None
                self.protocol = None
                self.ps_bs = None
                self.requests = None
                self.rs_bs = None
                self.session = RsvpStandby.SessionBriefs.SessionBrief.Session()
                self.session.parent = self
                self.session_type = None
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-briefs/Cisco-IOS-XR-ip-rsvp-oper:session-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-briefs/Cisco-IOS-XR-ip-rsvp-oper:session-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-briefs/Cisco-IOS-XR-ip-rsvp-oper:session-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-briefs/Cisco-IOS-XR-ip-rsvp-oper:session-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-briefs/Cisco-IOS-XR-ip-rsvp-oper:session-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-briefs/Cisco-IOS-XR-ip-rsvp-oper:session-brief/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.SessionBriefs.SessionBrief.Session']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-briefs/Cisco-IOS-XR-ip-rsvp-oper:session-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.detail_list_size is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.protocol is not None:
                    return True

                if self.ps_bs is not None:
                    return True

                if self.requests is not None:
                    return True

                if self.rs_bs is not None:
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.SessionBriefs.SessionBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_brief is not None:
                for child_ref in self.session_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.SessionBriefs']['meta_info']


    class PsbDetaileds(object):
        """
        Table of detailed info about path state blocks
        
        .. attribute:: psb_detailed
        
        	Detailed info for a single path state block
        	**type**\: list of    :py:class:`PsbDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.psb_detailed = YList()
            self.psb_detailed.parent = self
            self.psb_detailed.name = 'psb_detailed'


        class PsbDetailed(object):
            """
            Detailed info for a single path state block
            
            .. attribute:: backup_tunnel_name
            
            	Path Backup Tunnel
            	**type**\:  str
            
            .. attribute:: class_type
            
            	DS\-TE Class\-Type
            	**type**\:   :py:class:`ClassType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.ClassType>`
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: expiry_time
            
            	Expiry Time
            	**type**\:   :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.ExpiryTime>`
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: generic_traffic_spec
            
            	RSVP Generic Traffic Spec Info
            	**type**\:   :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec>`
            
            .. attribute:: header
            
            	RSVP Header Info
            	**type**\:   :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Header>`
            
            .. attribute:: hop
            
            	Path Hop Info
            	**type**\:   :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Hop>`
            
            .. attribute:: in_ero
            
            	Incoming Explicit Route Sub Objects
            	**type**\: list of    :py:class:`InEro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.InEro>`
            
            .. attribute:: input_interface
            
            	Path Input Interface
            	**type**\:  str
            
            .. attribute:: is_in_ero_valid
            
            	Incoming ERO validity
            	**type**\:  bool
            
            .. attribute:: is_out_ero_valid
            
            	Outgoing ERO validity
            	**type**\:  bool
            
            .. attribute:: label_info
            
            	Label Information
            	**type**\:   :py:class:`LabelInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo>`
            
            .. attribute:: out_ero
            
            	Outgoing Explicit Route Sub Objects
            	**type**\: list of    :py:class:`OutEro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.OutEro>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: path_flags
            
            	Path Flags
            	**type**\:   :py:class:`PathFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.PathFlags>`
            
            .. attribute:: pfc
            
            	Path Forwarding Contexts
            	**type**\: list of    :py:class:`Pfc <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Pfc>`
            
            .. attribute:: policy_flags
            
            	Policy Flags
            	**type**\:   :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.PolicyFlags>`
            
            .. attribute:: policy_query_flags
            
            	Policy Query Flags
            	**type**\:   :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.PolicyQueryFlags>`
            
            .. attribute:: policy_source_info
            
            	Policy Sources Info
            	**type**\:   :py:class:`PolicySourceInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.PolicySourceInfo>`
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Session>`
            
            .. attribute:: session_attribute
            
            	RSVP Session Attribute
            	**type**\:   :py:class:`SessionAttribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: template
            
            	RSVP Template
            	**type**\:   :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Template>`
            
            .. attribute:: traffic_spec
            
            	RSVP Traffic Spec Info
            	**type**\:   :py:class:`TrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.TrafficSpec>`
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.backup_tunnel_name = None
                self.class_type = RsvpStandby.PsbDetaileds.PsbDetailed.ClassType()
                self.class_type.parent = self
                self.destination_address = None
                self.destination_port = None
                self.expiry_time = RsvpStandby.PsbDetaileds.PsbDetailed.ExpiryTime()
                self.expiry_time.parent = self
                self.extended_tunnel_id = None
                self.generic_traffic_spec = RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec()
                self.generic_traffic_spec.parent = self
                self.header = RsvpStandby.PsbDetaileds.PsbDetailed.Header()
                self.header.parent = self
                self.hop = RsvpStandby.PsbDetaileds.PsbDetailed.Hop()
                self.hop.parent = self
                self.in_ero = YList()
                self.in_ero.parent = self
                self.in_ero.name = 'in_ero'
                self.input_interface = None
                self.is_in_ero_valid = None
                self.is_out_ero_valid = None
                self.label_info = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo()
                self.label_info.parent = self
                self.out_ero = YList()
                self.out_ero.parent = self
                self.out_ero.name = 'out_ero'
                self.p2mp_id = None
                self.path_flags = RsvpStandby.PsbDetaileds.PsbDetailed.PathFlags()
                self.path_flags.parent = self
                self.pfc = YList()
                self.pfc.parent = self
                self.pfc.name = 'pfc'
                self.policy_flags = RsvpStandby.PsbDetaileds.PsbDetailed.PolicyFlags()
                self.policy_flags.parent = self
                self.policy_query_flags = RsvpStandby.PsbDetaileds.PsbDetailed.PolicyQueryFlags()
                self.policy_query_flags.parent = self
                self.policy_source_info = RsvpStandby.PsbDetaileds.PsbDetailed.PolicySourceInfo()
                self.policy_source_info.parent = self
                self.protocol = None
                self.s2l_sub_lsp = RsvpStandby.PsbDetaileds.PsbDetailed.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = RsvpStandby.PsbDetaileds.PsbDetailed.Session()
                self.session.parent = self
                self.session_attribute = RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute()
                self.session_attribute.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.sub_group_id = None
                self.sub_group_origin = None
                self.template = RsvpStandby.PsbDetaileds.PsbDetailed.Template()
                self.template.parent = self
                self.traffic_spec = RsvpStandby.PsbDetaileds.PsbDetailed.TrafficSpec()
                self.traffic_spec.parent = self
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.S2LSubLsp']['meta_info']


            class Template(object):
                """
                RSVP Template
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:   :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_filter = RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter()
                    self.rsvp_filter.parent = self


                class RsvpFilter(object):
                    """
                    RSVP Filter
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:   :py:class:`RsvpMgmtFilterEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilterEnum>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:   :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:   :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.filter_type = None
                        self.p2mp_ipv4_session = RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self.udp_ipv4_session = RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self


                    class UdpIpv4Session(object):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.source_address = None
                            self.source_port = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:udp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session']['meta_info']


                    class P2MpIpv4Session(object):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.p2mp_sub_group_origin = None
                            self.source_address = None
                            self.source_port = None
                            self.sub_group_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:p2mp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.p2mp_sub_group_origin is not None:
                                return True

                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            if self.sub_group_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.filter_type is not None:
                            return True

                        if self.p2mp_ipv4_session is not None and self.p2mp_ipv4_session._has_data():
                            return True

                        if self.udp_ipv4_session is not None and self.udp_ipv4_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:template'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_filter is not None and self.rsvp_filter._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Template']['meta_info']


            class SessionAttribute(object):
                """
                RSVP Session Attribute
                
                .. attribute:: reservation_priority
                
                	Reservation Priority
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: sess_attribute_flags
                
                	Session Attributes
                	**type**\:   :py:class:`SessAttributeFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags>`
                
                .. attribute:: setup_priority
                
                	Setup Priority
                	**type**\:  int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.reservation_priority = None
                    self.sess_attribute_flags = RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags()
                    self.sess_attribute_flags.parent = self
                    self.setup_priority = None


                class SessAttributeFlags(object):
                    """
                    Session Attributes
                    
                    .. attribute:: is_bandwidth_protect
                    
                    	Bandwidth Protection
                    	**type**\:  bool
                    
                    .. attribute:: is_local_protect
                    
                    	Local Protection
                    	**type**\:  bool
                    
                    .. attribute:: is_node_protect
                    
                    	Node Protection
                    	**type**\:  bool
                    
                    .. attribute:: is_record_labels
                    
                    	Records Labels
                    	**type**\:  bool
                    
                    .. attribute:: is_shared_explicit_requested
                    
                    	Shared Explicit Requested
                    	**type**\:  bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.is_bandwidth_protect = None
                        self.is_local_protect = None
                        self.is_node_protect = None
                        self.is_record_labels = None
                        self.is_shared_explicit_requested = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session-attribute/Cisco-IOS-XR-ip-rsvp-oper:sess-attribute-flags'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.is_bandwidth_protect is not None:
                            return True

                        if self.is_local_protect is not None:
                            return True

                        if self.is_node_protect is not None:
                            return True

                        if self.is_record_labels is not None:
                            return True

                        if self.is_shared_explicit_requested is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session-attribute'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.reservation_priority is not None:
                        return True

                    if self.sess_attribute_flags is not None and self.sess_attribute_flags._has_data():
                        return True

                    if self.setup_priority is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute']['meta_info']


            class TrafficSpec(object):
                """
                RSVP Traffic Spec Info
                
                .. attribute:: traffic_average_rate
                
                	Traffic Average Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_max_burst
                
                	Traffic Maximum Burst
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: traffic_max_unit
                
                	Traffic Maximum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_min_unit
                
                	Traffic Minimum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_peak_rate
                
                	Traffic Peak Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.traffic_average_rate = None
                    self.traffic_max_burst = None
                    self.traffic_max_unit = None
                    self.traffic_min_unit = None
                    self.traffic_peak_rate = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:traffic-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.traffic_average_rate is not None:
                        return True

                    if self.traffic_max_burst is not None:
                        return True

                    if self.traffic_max_unit is not None:
                        return True

                    if self.traffic_min_unit is not None:
                        return True

                    if self.traffic_peak_rate is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.TrafficSpec']['meta_info']


            class GenericTrafficSpec(object):
                """
                RSVP Generic Traffic Spec Info
                
                .. attribute:: g709otn_tspec
                
                	G709 OTN Sender Tspec
                	**type**\:   :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec>`
                
                .. attribute:: intsrv_tspec
                
                	Integrated Services Sender Tspec
                	**type**\:   :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec>`
                
                .. attribute:: tspec_type
                
                	TspecType
                	**type**\:   :py:class:`RsvpMgmtTspecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspecEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.g709otn_tspec = RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec()
                    self.g709otn_tspec.parent = self
                    self.intsrv_tspec = RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec()
                    self.intsrv_tspec.parent = self
                    self.tspec_type = None


                class G709OtnTspec(object):
                    """
                    G709 OTN Sender Tspec
                    
                    .. attribute:: traffic_bit_rate
                    
                    	G709 OTN Traffic Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_multiplier
                    
                    	G709 OTN Traffic Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_nvc
                    
                    	G709 OTN Traffic NVC
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_signal_type
                    
                    	G709 OTN Traffic Signal Type (Refer G709 v3)
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.traffic_bit_rate = None
                        self.traffic_multiplier = None
                        self.traffic_nvc = None
                        self.traffic_signal_type = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-tspec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.traffic_bit_rate is not None:
                            return True

                        if self.traffic_multiplier is not None:
                            return True

                        if self.traffic_nvc is not None:
                            return True

                        if self.traffic_signal_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec']['meta_info']


                class IntsrvTspec(object):
                    """
                    Integrated Services Sender Tspec
                    
                    .. attribute:: traffic_average_rate
                    
                    	Traffic Average Rate in bytes per second
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_max_burst
                    
                    	Traffic Maximum Burst
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_max_unit
                    
                    	Traffic Maximum Unit
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_min_unit
                    
                    	Traffic Minimum Unit
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_peak_rate
                    
                    	Traffic Peak Rate in bytes per second
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.traffic_average_rate = None
                        self.traffic_max_burst = None
                        self.traffic_max_unit = None
                        self.traffic_min_unit = None
                        self.traffic_peak_rate = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:intsrv-tspec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.traffic_average_rate is not None:
                            return True

                        if self.traffic_max_burst is not None:
                            return True

                        if self.traffic_max_unit is not None:
                            return True

                        if self.traffic_min_unit is not None:
                            return True

                        if self.traffic_peak_rate is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.g709otn_tspec is not None and self.g709otn_tspec._has_data():
                        return True

                    if self.intsrv_tspec is not None and self.intsrv_tspec._has_data():
                        return True

                    if self.tspec_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec']['meta_info']


            class PathFlags(object):
                """
                Path Flags
                
                .. attribute:: is_bidirectional
                
                	Bidirectional
                	**type**\:  bool
                
                .. attribute:: is_local_repair
                
                	Rerouted
                	**type**\:  bool
                
                .. attribute:: is_local_sender
                
                	Local Sender
                	**type**\:  bool
                
                .. attribute:: is_lockout
                
                	Locked Out
                	**type**\:  bool
                
                .. attribute:: is_message_id_valid
                
                	MessageID Valid
                	**type**\:  bool
                
                .. attribute:: is_non_rsvp_hop_upstream
                
                	Non\-RSVP Hop Upstream
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_bidirectional = None
                    self.is_local_repair = None
                    self.is_local_sender = None
                    self.is_lockout = None
                    self.is_message_id_valid = None
                    self.is_non_rsvp_hop_upstream = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:path-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_bidirectional is not None:
                        return True

                    if self.is_local_repair is not None:
                        return True

                    if self.is_local_sender is not None:
                        return True

                    if self.is_lockout is not None:
                        return True

                    if self.is_message_id_valid is not None:
                        return True

                    if self.is_non_rsvp_hop_upstream is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.PathFlags']['meta_info']


            class Hop(object):
                """
                Path Hop Info
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:hop'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.neighbor_address is not None:
                        return True

                    if self.neighbor_logical_interface_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Hop']['meta_info']


            class PolicySourceInfo(object):
                """
                Policy Sources Info
                
                .. attribute:: is_cable
                
                	Policy Source is Cable
                	**type**\:  bool
                
                .. attribute:: is_cops
                
                	Policy Source is COPS
                	**type**\:  bool
                
                .. attribute:: is_default
                
                	Policy Source is Default
                	**type**\:  bool
                
                .. attribute:: is_local
                
                	Policy Source is Local
                	**type**\:  bool
                
                .. attribute:: is_te_link
                
                	Policy Source is TE Link
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_cable = None
                    self.is_cops = None
                    self.is_default = None
                    self.is_local = None
                    self.is_te_link = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:policy-source-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_cable is not None:
                        return True

                    if self.is_cops is not None:
                        return True

                    if self.is_default is not None:
                        return True

                    if self.is_local is not None:
                        return True

                    if self.is_te_link is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.PolicySourceInfo']['meta_info']


            class Header(object):
                """
                RSVP Header Info
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\:  int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ip_source_address = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.rsvp_header_flags = None
                    self.rsvp_message_type = None
                    self.rsvp_ttl = None
                    self.rsvp_version = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:header'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ip_source_address is not None:
                        return True

                    if self.ip_tos is not None:
                        return True

                    if self.ip_ttl is not None:
                        return True

                    if self.rsvp_header_flags is not None:
                        return True

                    if self.rsvp_message_type is not None:
                        return True

                    if self.rsvp_ttl is not None:
                        return True

                    if self.rsvp_version is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Header']['meta_info']


            class ExpiryTime(object):
                """
                Expiry Time
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:expiry-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.ExpiryTime']['meta_info']


            class PolicyFlags(object):
                """
                Policy Flags
                
                .. attribute:: is_accepted
                
                	Accepted
                	**type**\:  bool
                
                .. attribute:: is_forwarding
                
                	Forwarding
                	**type**\:  bool
                
                .. attribute:: is_installed
                
                	Installed
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_accepted = None
                    self.is_forwarding = None
                    self.is_installed = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:policy-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_accepted is not None:
                        return True

                    if self.is_forwarding is not None:
                        return True

                    if self.is_installed is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.PolicyFlags']['meta_info']


            class PolicyQueryFlags(object):
                """
                Policy Query Flags
                
                .. attribute:: is_bypass
                
                	Bypass
                	**type**\:  bool
                
                .. attribute:: is_needed
                
                	Needed
                	**type**\:  bool
                
                .. attribute:: is_report_required
                
                	Report Required
                	**type**\:  bool
                
                .. attribute:: is_resync
                
                	Resynchronization
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_bypass = None
                    self.is_needed = None
                    self.is_report_required = None
                    self.is_resync = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:policy-query-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_bypass is not None:
                        return True

                    if self.is_needed is not None:
                        return True

                    if self.is_report_required is not None:
                        return True

                    if self.is_resync is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.PolicyQueryFlags']['meta_info']


            class LabelInfo(object):
                """
                Label Information
                
                .. attribute:: generic_local_downstream_label
                
                	Generic Local Downstream Label
                	**type**\:   :py:class:`GenericLocalDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel>`
                
                .. attribute:: generic_local_upstream_label
                
                	Generic Local Upstream Label
                	**type**\:   :py:class:`GenericLocalUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel>`
                
                .. attribute:: generic_merge_point_label
                
                	Generic MergePoint Label
                	**type**\:   :py:class:`GenericMergePointLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel>`
                
                .. attribute:: generic_outgoing_downstream_label
                
                	Generic Outgoing Downstream Label
                	**type**\:   :py:class:`GenericOutgoingDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel>`
                
                .. attribute:: generic_outgoing_upstream_label
                
                	Generic Outgoing Upstream Label
                	**type**\:   :py:class:`GenericOutgoingUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel>`
                
                .. attribute:: generic_recovery_label
                
                	Generic Recovery Label
                	**type**\:   :py:class:`GenericRecoveryLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel>`
                
                .. attribute:: is_valid
                
                	Is the label information valid
                	**type**\:  bool
                
                .. attribute:: local_downstream_label
                
                	Local Downstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_upstream_label
                
                	Local Upstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_wrap_label
                
                	LSP Wrap Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: merge_point_label
                
                	MergePoint Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_downstream_label
                
                	Outgoing Downstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_upstream_label
                
                	Outgoing Upstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: recovery_label
                
                	Recovery Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.generic_local_downstream_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel()
                    self.generic_local_downstream_label.parent = self
                    self.generic_local_upstream_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel()
                    self.generic_local_upstream_label.parent = self
                    self.generic_merge_point_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel()
                    self.generic_merge_point_label.parent = self
                    self.generic_outgoing_downstream_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel()
                    self.generic_outgoing_downstream_label.parent = self
                    self.generic_outgoing_upstream_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel()
                    self.generic_outgoing_upstream_label.parent = self
                    self.generic_recovery_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel()
                    self.generic_recovery_label.parent = self
                    self.is_valid = None
                    self.local_downstream_label = None
                    self.local_upstream_label = None
                    self.lsp_wrap_label = None
                    self.merge_point_label = None
                    self.outgoing_downstream_label = None
                    self.outgoing_upstream_label = None
                    self.recovery_label = None


                class GenericLocalDownstreamLabel(object):
                    """
                    Generic Local Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-downstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-downstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel']['meta_info']


                class GenericOutgoingDownstreamLabel(object):
                    """
                    Generic Outgoing Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-downstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-downstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel']['meta_info']


                class GenericMergePointLabel(object):
                    """
                    Generic MergePoint Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-merge-point-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-merge-point-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel']['meta_info']


                class GenericOutgoingUpstreamLabel(object):
                    """
                    Generic Outgoing Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-upstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-upstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel']['meta_info']


                class GenericLocalUpstreamLabel(object):
                    """
                    Generic Local Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-upstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-upstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel']['meta_info']


                class GenericRecoveryLabel(object):
                    """
                    Generic Recovery Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-recovery-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-recovery-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.generic_local_downstream_label is not None and self.generic_local_downstream_label._has_data():
                        return True

                    if self.generic_local_upstream_label is not None and self.generic_local_upstream_label._has_data():
                        return True

                    if self.generic_merge_point_label is not None and self.generic_merge_point_label._has_data():
                        return True

                    if self.generic_outgoing_downstream_label is not None and self.generic_outgoing_downstream_label._has_data():
                        return True

                    if self.generic_outgoing_upstream_label is not None and self.generic_outgoing_upstream_label._has_data():
                        return True

                    if self.generic_recovery_label is not None and self.generic_recovery_label._has_data():
                        return True

                    if self.is_valid is not None:
                        return True

                    if self.local_downstream_label is not None:
                        return True

                    if self.local_upstream_label is not None:
                        return True

                    if self.lsp_wrap_label is not None:
                        return True

                    if self.merge_point_label is not None:
                        return True

                    if self.outgoing_downstream_label is not None:
                        return True

                    if self.outgoing_upstream_label is not None:
                        return True

                    if self.recovery_label is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo']['meta_info']


            class ClassType(object):
                """
                DS\-TE Class\-Type
                
                .. attribute:: class_type
                
                	DS\-TE Class\-Type
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: is_class_type_info_valid
                
                	Is the Class\-Type information valid
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.class_type = None
                    self.is_class_type_info_valid = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:class-type'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.class_type is not None:
                        return True

                    if self.is_class_type_info_valid is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.ClassType']['meta_info']


            class Pfc(object):
                """
                Path Forwarding Contexts
                
                .. attribute:: output_interface
                
                	Output interface
                	**type**\:  str
                
                .. attribute:: policy_flags
                
                	Policy Flags
                	**type**\:   :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags>`
                
                .. attribute:: policy_query_flags
                
                	Policy Query Flags
                	**type**\:   :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.output_interface = None
                    self.policy_flags = RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags()
                    self.policy_flags.parent = self
                    self.policy_query_flags = RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags()
                    self.policy_query_flags.parent = self


                class PolicyFlags(object):
                    """
                    Policy Flags
                    
                    .. attribute:: is_accepted
                    
                    	Accepted
                    	**type**\:  bool
                    
                    .. attribute:: is_forwarding
                    
                    	Forwarding
                    	**type**\:  bool
                    
                    .. attribute:: is_installed
                    
                    	Installed
                    	**type**\:  bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.is_accepted = None
                        self.is_forwarding = None
                        self.is_installed = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:pfc/Cisco-IOS-XR-ip-rsvp-oper:policy-flags'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.is_accepted is not None:
                            return True

                        if self.is_forwarding is not None:
                            return True

                        if self.is_installed is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags']['meta_info']


                class PolicyQueryFlags(object):
                    """
                    Policy Query Flags
                    
                    .. attribute:: is_bypass
                    
                    	Bypass
                    	**type**\:  bool
                    
                    .. attribute:: is_needed
                    
                    	Needed
                    	**type**\:  bool
                    
                    .. attribute:: is_report_required
                    
                    	Report Required
                    	**type**\:  bool
                    
                    .. attribute:: is_resync
                    
                    	Resynchronization
                    	**type**\:  bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.is_bypass = None
                        self.is_needed = None
                        self.is_report_required = None
                        self.is_resync = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:pfc/Cisco-IOS-XR-ip-rsvp-oper:policy-query-flags'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.is_bypass is not None:
                            return True

                        if self.is_needed is not None:
                            return True

                        if self.is_report_required is not None:
                            return True

                        if self.is_resync is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:pfc'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.output_interface is not None:
                        return True

                    if self.policy_flags is not None and self.policy_flags._has_data():
                        return True

                    if self.policy_query_flags is not None and self.policy_query_flags._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.Pfc']['meta_info']


            class InEro(object):
                """
                Incoming Explicit Route Sub Objects
                
                .. attribute:: ero_type
                
                	EROType
                	**type**\:   :py:class:`RsvpMgmtEroSubobjEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjEnum>`
                
                .. attribute:: ipv4ero_sub_object
                
                	IPV4 ERO Sub Object
                	**type**\:   :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject>`
                
                .. attribute:: unnumbered_ero_sub_object
                
                	Unnumbered ERO Sub Object
                	**type**\:   :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ero_type = None
                    self.ipv4ero_sub_object = RsvpStandby.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject()
                    self.ipv4ero_sub_object.parent = self
                    self.unnumbered_ero_sub_object = RsvpStandby.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject()
                    self.unnumbered_ero_sub_object.parent = self


                class Ipv4EroSubObject(object):
                    """
                    IPV4 ERO Sub Object
                    
                    .. attribute:: ero_address
                    
                    	The ERO IPV4 Address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\:  bool
                    
                    .. attribute:: prefix_length
                    
                    	ERO Prefix Length
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ero_address = None
                        self.is_strict_route = None
                        self.prefix_length = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:in-ero/Cisco-IOS-XR-ip-rsvp-oper:ipv4ero-sub-object'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ero_address is not None:
                            return True

                        if self.is_strict_route is not None:
                            return True

                        if self.prefix_length is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject']['meta_info']


                class UnnumberedEroSubObject(object):
                    """
                    Unnumbered ERO Sub Object
                    
                    .. attribute:: ero_interface_id
                    
                    	The Interface ID in ERO
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ero_router_id
                    
                    	The Router ID in ERO
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\:  bool
                    
                    .. attribute:: status
                    
                    	Status of ERO
                    	**type**\:   :py:class:`RsvpMgmtEroSubobjStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatusEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ero_interface_id = None
                        self.ero_router_id = None
                        self.is_strict_route = None
                        self.status = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:in-ero/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-ero-sub-object'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ero_interface_id is not None:
                            return True

                        if self.ero_router_id is not None:
                            return True

                        if self.is_strict_route is not None:
                            return True

                        if self.status is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:in-ero'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ero_type is not None:
                        return True

                    if self.ipv4ero_sub_object is not None and self.ipv4ero_sub_object._has_data():
                        return True

                    if self.unnumbered_ero_sub_object is not None and self.unnumbered_ero_sub_object._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.InEro']['meta_info']


            class OutEro(object):
                """
                Outgoing Explicit Route Sub Objects
                
                .. attribute:: ero_type
                
                	EROType
                	**type**\:   :py:class:`RsvpMgmtEroSubobjEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjEnum>`
                
                .. attribute:: ipv4ero_sub_object
                
                	IPV4 ERO Sub Object
                	**type**\:   :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject>`
                
                .. attribute:: unnumbered_ero_sub_object
                
                	Unnumbered ERO Sub Object
                	**type**\:   :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ero_type = None
                    self.ipv4ero_sub_object = RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject()
                    self.ipv4ero_sub_object.parent = self
                    self.unnumbered_ero_sub_object = RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject()
                    self.unnumbered_ero_sub_object.parent = self


                class Ipv4EroSubObject(object):
                    """
                    IPV4 ERO Sub Object
                    
                    .. attribute:: ero_address
                    
                    	The ERO IPV4 Address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\:  bool
                    
                    .. attribute:: prefix_length
                    
                    	ERO Prefix Length
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ero_address = None
                        self.is_strict_route = None
                        self.prefix_length = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:out-ero/Cisco-IOS-XR-ip-rsvp-oper:ipv4ero-sub-object'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ero_address is not None:
                            return True

                        if self.is_strict_route is not None:
                            return True

                        if self.prefix_length is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject']['meta_info']


                class UnnumberedEroSubObject(object):
                    """
                    Unnumbered ERO Sub Object
                    
                    .. attribute:: ero_interface_id
                    
                    	The Interface ID in ERO
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ero_router_id
                    
                    	The Router ID in ERO
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\:  bool
                    
                    .. attribute:: status
                    
                    	Status of ERO
                    	**type**\:   :py:class:`RsvpMgmtEroSubobjStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatusEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ero_interface_id = None
                        self.ero_router_id = None
                        self.is_strict_route = None
                        self.status = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:out-ero/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-ero-sub-object'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ero_interface_id is not None:
                            return True

                        if self.ero_router_id is not None:
                            return True

                        if self.is_strict_route is not None:
                            return True

                        if self.status is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:out-ero'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ero_type is not None:
                        return True

                    if self.ipv4ero_sub_object is not None and self.ipv4ero_sub_object._has_data():
                        return True

                    if self.unnumbered_ero_sub_object is not None and self.unnumbered_ero_sub_object._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed.OutEro']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.backup_tunnel_name is not None:
                    return True

                if self.class_type is not None and self.class_type._has_data():
                    return True

                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.expiry_time is not None and self.expiry_time._has_data():
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.generic_traffic_spec is not None and self.generic_traffic_spec._has_data():
                    return True

                if self.header is not None and self.header._has_data():
                    return True

                if self.hop is not None and self.hop._has_data():
                    return True

                if self.in_ero is not None:
                    for child_ref in self.in_ero:
                        if child_ref._has_data():
                            return True

                if self.input_interface is not None:
                    return True

                if self.is_in_ero_valid is not None:
                    return True

                if self.is_out_ero_valid is not None:
                    return True

                if self.label_info is not None and self.label_info._has_data():
                    return True

                if self.out_ero is not None:
                    for child_ref in self.out_ero:
                        if child_ref._has_data():
                            return True

                if self.p2mp_id is not None:
                    return True

                if self.path_flags is not None and self.path_flags._has_data():
                    return True

                if self.pfc is not None:
                    for child_ref in self.pfc:
                        if child_ref._has_data():
                            return True

                if self.policy_flags is not None and self.policy_flags._has_data():
                    return True

                if self.policy_query_flags is not None and self.policy_query_flags._has_data():
                    return True

                if self.policy_source_info is not None and self.policy_source_info._has_data():
                    return True

                if self.protocol is not None:
                    return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_attribute is not None and self.session_attribute._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.template is not None and self.template._has_data():
                    return True

                if self.traffic_spec is not None and self.traffic_spec._has_data():
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.PsbDetaileds.PsbDetailed']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.psb_detailed is not None:
                for child_ref in self.psb_detailed:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.PsbDetaileds']['meta_info']


    class FrrSummary(object):
        """
        Fast Re\-Route Summary State Information
        
        .. attribute:: path_states
        
        	Path state counters
        	**type**\:   :py:class:`PathStates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.FrrSummary.PathStates>`
        
        .. attribute:: reservation_states
        
        	Rerservation state counters
        	**type**\:   :py:class:`ReservationStates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.FrrSummary.ReservationStates>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.path_states = RsvpStandby.FrrSummary.PathStates()
            self.path_states.parent = self
            self.reservation_states = RsvpStandby.FrrSummary.ReservationStates()
            self.reservation_states.parent = self


        class PathStates(object):
            """
            Path state counters
            
            .. attribute:: active_instances
            
            	Number of active instances of this state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: active_wait_instances
            
            	Number of instances of this state awaiting Path messages to be sent out or Resv messages to be received
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: ready_instances
            
            	Number of ready instances of this state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total
            
            	Total number of instances of this state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.active_instances = None
                self.active_wait_instances = None
                self.ready_instances = None
                self.total = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:frr-summary/Cisco-IOS-XR-ip-rsvp-oper:path-states'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.active_instances is not None:
                    return True

                if self.active_wait_instances is not None:
                    return True

                if self.ready_instances is not None:
                    return True

                if self.total is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.FrrSummary.PathStates']['meta_info']


        class ReservationStates(object):
            """
            Rerservation state counters
            
            .. attribute:: active_instances
            
            	Number of active instances of this state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: active_wait_instances
            
            	Number of instances of this state awaiting Path messages to be sent out or Resv messages to be received
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: ready_instances
            
            	Number of ready instances of this state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total
            
            	Total number of instances of this state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.active_instances = None
                self.active_wait_instances = None
                self.ready_instances = None
                self.total = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:frr-summary/Cisco-IOS-XR-ip-rsvp-oper:reservation-states'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.active_instances is not None:
                    return True

                if self.active_wait_instances is not None:
                    return True

                if self.ready_instances is not None:
                    return True

                if self.total is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.FrrSummary.ReservationStates']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:frr-summary'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.path_states is not None and self.path_states._has_data():
                return True

            if self.reservation_states is not None and self.reservation_states._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.FrrSummary']['meta_info']


    class RsbDetaileds(object):
        """
        Table of detailed info about reservation state
        blocks
        
        .. attribute:: rsb_detailed
        
        	Detailed info for a single reservation state block
        	**type**\: list of    :py:class:`RsbDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.rsb_detailed = YList()
            self.rsb_detailed.parent = self
            self.rsb_detailed.name = 'rsb_detailed'


        class RsbDetailed(object):
            """
            Detailed info for a single reservation state
            block
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: expiry_time
            
            	Expiry Time
            	**type**\:   :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.ExpiryTime>`
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:   :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Filter>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:   :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Information
            	**type**\:   :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec>`
            
            .. attribute:: header
            
            	RSVP Header Information
            	**type**\:   :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Header>`
            
            .. attribute:: hop
            
            	Hop Infomation
            	**type**\:   :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Hop>`
            
            .. attribute:: input_adjusted_interface
            
            	Input Adjusted Interface
            	**type**\:  str
            
            .. attribute:: input_physical_interface
            
            	Input Physical Interface
            	**type**\:  str
            
            .. attribute:: label_info
            
            	Label Information
            	**type**\:   :py:class:`LabelInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: policy_flags
            
            	RSVP Policy Flags
            	**type**\:   :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.PolicyFlags>`
            
            .. attribute:: policy_query_flags
            
            	RSVP Query Flags
            	**type**\:   :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.PolicyQueryFlags>`
            
            .. attribute:: policy_sources
            
            	RSVP Policy Sources
            	**type**\:   :py:class:`PolicySources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.PolicySources>`
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: rsb_flags
            
            	Reservation State Block Flags
            	**type**\:   :py:class:`RsbFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.RsbFlags>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Session>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:   :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Style>`
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.expiry_time = RsvpStandby.RsbDetaileds.RsbDetailed.ExpiryTime()
                self.expiry_time.parent = self
                self.extended_tunnel_id = None
                self.filter = RsvpStandby.RsbDetaileds.RsbDetailed.Filter()
                self.filter.parent = self
                self.flow_spec = RsvpStandby.RsbDetaileds.RsbDetailed.FlowSpec()
                self.flow_spec.parent = self
                self.generic_flow_spec = RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self.header = RsvpStandby.RsbDetaileds.RsbDetailed.Header()
                self.header.parent = self
                self.hop = RsvpStandby.RsbDetaileds.RsbDetailed.Hop()
                self.hop.parent = self
                self.input_adjusted_interface = None
                self.input_physical_interface = None
                self.label_info = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo()
                self.label_info.parent = self
                self.p2mp_id = None
                self.policy_flags = RsvpStandby.RsbDetaileds.RsbDetailed.PolicyFlags()
                self.policy_flags.parent = self
                self.policy_query_flags = RsvpStandby.RsbDetaileds.RsbDetailed.PolicyQueryFlags()
                self.policy_query_flags.parent = self
                self.policy_sources = RsvpStandby.RsbDetaileds.RsbDetailed.PolicySources()
                self.policy_sources.parent = self
                self.protocol = None
                self.rsb_flags = RsvpStandby.RsbDetaileds.RsbDetailed.RsbFlags()
                self.rsb_flags.parent = self
                self.s2l_sub_lsp = RsvpStandby.RsbDetaileds.RsbDetailed.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = RsvpStandby.RsbDetaileds.RsbDetailed.Session()
                self.session.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.style = RsvpStandby.RsbDetaileds.RsbDetailed.Style()
                self.style.parent = self
                self.sub_group_id = None
                self.sub_group_origin = None
                self.vrf_name = None


            class FlowSpec(object):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:   :py:class:`RsvpMgmtQosServiceEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnumEnum>`
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_max_unit = None
                    self.flow_min_unit = None
                    self.flow_peak_rate = None
                    self.flow_qos = None
                    self.flow_requested_rate = None
                    self.flow_slack = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_average_rate is not None:
                        return True

                    if self.flow_max_burst is not None:
                        return True

                    if self.flow_max_unit is not None:
                        return True

                    if self.flow_min_unit is not None:
                        return True

                    if self.flow_peak_rate is not None:
                        return True

                    if self.flow_qos is not None:
                        return True

                    if self.flow_requested_rate is not None:
                        return True

                    if self.flow_slack is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.FlowSpec']['meta_info']


            class GenericFlowSpec(object):
                """
                Generic Flow Spec Information
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:   :py:class:`RsvpMgmtFlowSpecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpecEnum>`
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:   :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_spec_type = None
                    self.g709otn_flow_spec = RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self


                class G709OtnFlowSpec(object):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.flow_bit_rate = None
                        self.flow_multiplier = None
                        self.flow_nvc = None
                        self.flow_signal_type = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-flow-spec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.flow_bit_rate is not None:
                            return True

                        if self.flow_multiplier is not None:
                            return True

                        if self.flow_nvc is not None:
                            return True

                        if self.flow_signal_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_spec_type is not None:
                        return True

                    if self.g709otn_flow_spec is not None and self.g709otn_flow_spec._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec']['meta_info']


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.S2LSubLsp']['meta_info']


            class Style(object):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:   :py:class:`RsvpMgmtReservationTypeEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnumEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.reservation_type = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:style'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.reservation_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.Style']['meta_info']


            class Filter(object):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:   :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_filter = RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self


                class RsvpFilter(object):
                    """
                    RSVP Filter
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:   :py:class:`RsvpMgmtFilterEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilterEnum>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:   :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:   :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.filter_type = None
                        self.p2mp_ipv4_session = RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self.udp_ipv4_session = RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self


                    class UdpIpv4Session(object):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.source_address = None
                            self.source_port = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:udp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session']['meta_info']


                    class P2MpIpv4Session(object):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.p2mp_sub_group_origin = None
                            self.source_address = None
                            self.source_port = None
                            self.sub_group_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:p2mp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.p2mp_sub_group_origin is not None:
                                return True

                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            if self.sub_group_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.filter_type is not None:
                            return True

                        if self.p2mp_ipv4_session is not None and self.p2mp_ipv4_session._has_data():
                            return True

                        if self.udp_ipv4_session is not None and self.udp_ipv4_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:filter'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_filter is not None and self.rsvp_filter._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.Filter']['meta_info']


            class RsbFlags(object):
                """
                Reservation State Block Flags
                
                .. attribute:: is_local_receiver
                
                	Local Receiver
                	**type**\:  bool
                
                .. attribute:: is_local_repair
                
                	Rerouted
                	**type**\:  bool
                
                .. attribute:: is_lockout
                
                	Locked Out
                	**type**\:  bool
                
                .. attribute:: is_merge_point
                
                	Is node a Merge Point
                	**type**\:  bool
                
                .. attribute:: is_message_id_valid
                
                	MessageID Valid
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_local_receiver = None
                    self.is_local_repair = None
                    self.is_lockout = None
                    self.is_merge_point = None
                    self.is_message_id_valid = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:rsb-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_local_receiver is not None:
                        return True

                    if self.is_local_repair is not None:
                        return True

                    if self.is_lockout is not None:
                        return True

                    if self.is_merge_point is not None:
                        return True

                    if self.is_message_id_valid is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.RsbFlags']['meta_info']


            class Hop(object):
                """
                Hop Infomation
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:hop'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.neighbor_address is not None:
                        return True

                    if self.neighbor_logical_interface_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.Hop']['meta_info']


            class PolicySources(object):
                """
                RSVP Policy Sources
                
                .. attribute:: is_cable
                
                	Policy Source is Cable
                	**type**\:  bool
                
                .. attribute:: is_cops
                
                	Policy Source is COPS
                	**type**\:  bool
                
                .. attribute:: is_default
                
                	Policy Source is Default
                	**type**\:  bool
                
                .. attribute:: is_local
                
                	Policy Source is Local
                	**type**\:  bool
                
                .. attribute:: is_te_link
                
                	Policy Source is TE Link
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_cable = None
                    self.is_cops = None
                    self.is_default = None
                    self.is_local = None
                    self.is_te_link = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:policy-sources'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_cable is not None:
                        return True

                    if self.is_cops is not None:
                        return True

                    if self.is_default is not None:
                        return True

                    if self.is_local is not None:
                        return True

                    if self.is_te_link is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.PolicySources']['meta_info']


            class Header(object):
                """
                RSVP Header Information
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\:  int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ip_source_address = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.rsvp_header_flags = None
                    self.rsvp_message_type = None
                    self.rsvp_ttl = None
                    self.rsvp_version = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:header'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ip_source_address is not None:
                        return True

                    if self.ip_tos is not None:
                        return True

                    if self.ip_ttl is not None:
                        return True

                    if self.rsvp_header_flags is not None:
                        return True

                    if self.rsvp_message_type is not None:
                        return True

                    if self.rsvp_ttl is not None:
                        return True

                    if self.rsvp_version is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.Header']['meta_info']


            class PolicyFlags(object):
                """
                RSVP Policy Flags
                
                .. attribute:: is_accepted
                
                	Accepted
                	**type**\:  bool
                
                .. attribute:: is_forwarding
                
                	Forwarding
                	**type**\:  bool
                
                .. attribute:: is_installed
                
                	Installed
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_accepted = None
                    self.is_forwarding = None
                    self.is_installed = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:policy-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_accepted is not None:
                        return True

                    if self.is_forwarding is not None:
                        return True

                    if self.is_installed is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.PolicyFlags']['meta_info']


            class ExpiryTime(object):
                """
                Expiry Time
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:expiry-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.ExpiryTime']['meta_info']


            class PolicyQueryFlags(object):
                """
                RSVP Query Flags
                
                .. attribute:: is_bypass
                
                	Bypass
                	**type**\:  bool
                
                .. attribute:: is_needed
                
                	Needed
                	**type**\:  bool
                
                .. attribute:: is_report_required
                
                	Report Required
                	**type**\:  bool
                
                .. attribute:: is_resync
                
                	Resynchronization
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_bypass = None
                    self.is_needed = None
                    self.is_report_required = None
                    self.is_resync = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:policy-query-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_bypass is not None:
                        return True

                    if self.is_needed is not None:
                        return True

                    if self.is_report_required is not None:
                        return True

                    if self.is_resync is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.PolicyQueryFlags']['meta_info']


            class LabelInfo(object):
                """
                Label Information
                
                .. attribute:: generic_local_downstream_label
                
                	Generic Local Downstream Label
                	**type**\:   :py:class:`GenericLocalDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel>`
                
                .. attribute:: generic_local_upstream_label
                
                	Generic Local Upstream Label
                	**type**\:   :py:class:`GenericLocalUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel>`
                
                .. attribute:: generic_merge_point_label
                
                	Generic MergePoint Label
                	**type**\:   :py:class:`GenericMergePointLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel>`
                
                .. attribute:: generic_outgoing_downstream_label
                
                	Generic Outgoing Downstream Label
                	**type**\:   :py:class:`GenericOutgoingDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel>`
                
                .. attribute:: generic_outgoing_upstream_label
                
                	Generic Outgoing Upstream Label
                	**type**\:   :py:class:`GenericOutgoingUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel>`
                
                .. attribute:: generic_recovery_label
                
                	Generic Recovery Label
                	**type**\:   :py:class:`GenericRecoveryLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel>`
                
                .. attribute:: is_valid
                
                	Is the label information valid
                	**type**\:  bool
                
                .. attribute:: local_downstream_label
                
                	Local Downstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_upstream_label
                
                	Local Upstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_wrap_label
                
                	LSP Wrap Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: merge_point_label
                
                	MergePoint Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_downstream_label
                
                	Outgoing Downstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_upstream_label
                
                	Outgoing Upstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: recovery_label
                
                	Recovery Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.generic_local_downstream_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel()
                    self.generic_local_downstream_label.parent = self
                    self.generic_local_upstream_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel()
                    self.generic_local_upstream_label.parent = self
                    self.generic_merge_point_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel()
                    self.generic_merge_point_label.parent = self
                    self.generic_outgoing_downstream_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel()
                    self.generic_outgoing_downstream_label.parent = self
                    self.generic_outgoing_upstream_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel()
                    self.generic_outgoing_upstream_label.parent = self
                    self.generic_recovery_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel()
                    self.generic_recovery_label.parent = self
                    self.is_valid = None
                    self.local_downstream_label = None
                    self.local_upstream_label = None
                    self.lsp_wrap_label = None
                    self.merge_point_label = None
                    self.outgoing_downstream_label = None
                    self.outgoing_upstream_label = None
                    self.recovery_label = None


                class GenericLocalDownstreamLabel(object):
                    """
                    Generic Local Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-downstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-downstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel']['meta_info']


                class GenericOutgoingDownstreamLabel(object):
                    """
                    Generic Outgoing Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-downstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-downstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel']['meta_info']


                class GenericMergePointLabel(object):
                    """
                    Generic MergePoint Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-merge-point-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-merge-point-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel']['meta_info']


                class GenericOutgoingUpstreamLabel(object):
                    """
                    Generic Outgoing Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-upstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-upstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel']['meta_info']


                class GenericLocalUpstreamLabel(object):
                    """
                    Generic Local Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-upstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-upstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel']['meta_info']


                class GenericRecoveryLabel(object):
                    """
                    Generic Recovery Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-recovery-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-recovery-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.generic_local_downstream_label is not None and self.generic_local_downstream_label._has_data():
                        return True

                    if self.generic_local_upstream_label is not None and self.generic_local_upstream_label._has_data():
                        return True

                    if self.generic_merge_point_label is not None and self.generic_merge_point_label._has_data():
                        return True

                    if self.generic_outgoing_downstream_label is not None and self.generic_outgoing_downstream_label._has_data():
                        return True

                    if self.generic_outgoing_upstream_label is not None and self.generic_outgoing_upstream_label._has_data():
                        return True

                    if self.generic_recovery_label is not None and self.generic_recovery_label._has_data():
                        return True

                    if self.is_valid is not None:
                        return True

                    if self.local_downstream_label is not None:
                        return True

                    if self.local_upstream_label is not None:
                        return True

                    if self.lsp_wrap_label is not None:
                        return True

                    if self.merge_point_label is not None:
                        return True

                    if self.outgoing_downstream_label is not None:
                        return True

                    if self.outgoing_upstream_label is not None:
                        return True

                    if self.recovery_label is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.expiry_time is not None and self.expiry_time._has_data():
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.filter is not None and self.filter._has_data():
                    return True

                if self.flow_spec is not None and self.flow_spec._has_data():
                    return True

                if self.generic_flow_spec is not None and self.generic_flow_spec._has_data():
                    return True

                if self.header is not None and self.header._has_data():
                    return True

                if self.hop is not None and self.hop._has_data():
                    return True

                if self.input_adjusted_interface is not None:
                    return True

                if self.input_physical_interface is not None:
                    return True

                if self.label_info is not None and self.label_info._has_data():
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.policy_flags is not None and self.policy_flags._has_data():
                    return True

                if self.policy_query_flags is not None and self.policy_query_flags._has_data():
                    return True

                if self.policy_sources is not None and self.policy_sources._has_data():
                    return True

                if self.protocol is not None:
                    return True

                if self.rsb_flags is not None and self.rsb_flags._has_data():
                    return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.style is not None and self.style._has_data():
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.RsbDetaileds.RsbDetailed']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.rsb_detailed is not None:
                for child_ref in self.rsb_detailed:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.RsbDetaileds']['meta_info']


    class InterfaceSummaries(object):
        """
        Table of summary info about RSVP\-enabled
        interfaces
        
        .. attribute:: interface_summary
        
        	Summary info about an RSVP\-enabled interface
        	**type**\: list of    :py:class:`InterfaceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceSummaries.InterfaceSummary>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.interface_summary = YList()
            self.interface_summary.parent = self
            self.interface_summary.name = 'interface_summary'


        class InterfaceSummary(object):
            """
            Summary info about an RSVP\-enabled interface
            
            .. attribute:: interface_name  <key>
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:   :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\:  str
            
            .. attribute:: paths_in
            
            	Number of locally created and incoming path states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: paths_out
            
            	Number of outgoing path states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: reservations_in
            
            	Number of locally created and incoming reservation states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: reservations_out
            
            	Number of outgoing reservation states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.interface_name = None
                self.bandwidth_information = RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation()
                self.bandwidth_information.parent = self
                self.interface_name_xr = None
                self.paths_in = None
                self.paths_out = None
                self.reservations_in = None
                self.reservations_out = None


            class BandwidthInformation(object):
                """
                Interface bandwidth information
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:   :py:class:`RsvpMgmtDsteModesEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModesEnum>`
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:   :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:   :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.dste_mode = None
                    self.pre_standard_dste_interface = RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self.standard_dste_interface = RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self


                class PreStandardDsteInterface(object):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_subpool_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:pre-standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_subpool_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_subpool_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface']['meta_info']


                class StandardDsteInterface(object):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc0_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc1_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_pool0_bandwidth is not None:
                            return True

                        if self.max_pool1_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:bandwidth-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dste_mode is not None:
                        return True

                    if self.pre_standard_dste_interface is not None and self.pre_standard_dste_interface._has_data():
                        return True

                    if self.standard_dste_interface is not None and self.standard_dste_interface._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation']['meta_info']

            @property
            def _common_path(self):
                if self.interface_name is None:
                    raise YPYModelError('Key property interface_name is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:interface-summaries/Cisco-IOS-XR-ip-rsvp-oper:interface-summary[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interface_name is not None:
                    return True

                if self.bandwidth_information is not None and self.bandwidth_information._has_data():
                    return True

                if self.interface_name_xr is not None:
                    return True

                if self.paths_in is not None:
                    return True

                if self.paths_out is not None:
                    return True

                if self.reservations_in is not None:
                    return True

                if self.reservations_out is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.InterfaceSummaries.InterfaceSummary']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:interface-summaries'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.interface_summary is not None:
                for child_ref in self.interface_summary:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.InterfaceSummaries']['meta_info']


    class HelloInstanceBriefs(object):
        """
        Table of brief info about hello instances
        
        .. attribute:: hello_instance_brief
        
        	Brief info for a single hello instance
        	**type**\: list of    :py:class:`HelloInstanceBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInstanceBriefs.HelloInstanceBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.hello_instance_brief = YList()
            self.hello_instance_brief.parent = self
            self.hello_instance_brief.name = 'hello_instance_brief'


        class HelloInstanceBrief(object):
            """
            Brief info for a single hello instance
            
            .. attribute:: destination_address  <key>
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_address  <key>
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:   :py:class:`RsvpMgmtHelloInstanceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstanceEnum>`
            
            .. attribute:: lost_communication_total
            
            	Total number of times communication got lost
            	**type**\:  int
            
            	**range:** 0..65535
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor Hello state
            	**type**\:   :py:class:`RsvpMgmtHelloStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloStateEnum>`
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.source_address = None
                self.destination_address_xr = None
                self.hello_interface = None
                self.instance_type = None
                self.lost_communication_total = None
                self.neighbor_hello_state = None
                self.source_address_xr = None

            @property
            def _common_path(self):
                if self.destination_address is None:
                    raise YPYModelError('Key property destination_address is None')
                if self.source_address is None:
                    raise YPYModelError('Key property source_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:hello-instance-briefs/Cisco-IOS-XR-ip-rsvp-oper:hello-instance-brief[Cisco-IOS-XR-ip-rsvp-oper:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ip-rsvp-oper:source-address = ' + str(self.source_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.destination_address_xr is not None:
                    return True

                if self.hello_interface is not None:
                    return True

                if self.instance_type is not None:
                    return True

                if self.lost_communication_total is not None:
                    return True

                if self.neighbor_hello_state is not None:
                    return True

                if self.source_address_xr is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.HelloInstanceBriefs.HelloInstanceBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:hello-instance-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.hello_instance_brief is not None:
                for child_ref in self.hello_instance_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.HelloInstanceBriefs']['meta_info']


    class AuthenticationDetails(object):
        """
        Table for detailed authentication related
        information
        
        .. attribute:: authentication_detail
        
        	Brief Authentication information
        	**type**\: list of    :py:class:`AuthenticationDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails.AuthenticationDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.authentication_detail = YList()
            self.authentication_detail.parent = self
            self.authentication_detail.name = 'authentication_detail'


        class AuthenticationDetail(object):
            """
            Brief Authentication information
            
            .. attribute:: destination_address  <key>
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_name  <key>
            
            	InterfaceName
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: mode_id  <key>
            
            	Mode (Tx or Rx)
            	**type**\:   :py:class:`RsvpModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpModeEnum>`
            
            .. attribute:: source_address  <key>
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: auth_compact
            
            	Basic authentication data
            	**type**\:   :py:class:`AuthCompact <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails.AuthenticationDetail.AuthCompact>`
            
            .. attribute:: challenge_status
            
            	Challenge status
            	**type**\:   :py:class:`RsvpMgmtAuthChallengeStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthChallengeStatusEnum>`
            
            .. attribute:: direction_info
            
            	direction info
            	**type**\:   :py:class:`DirectionInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo>`
            
            .. attribute:: key_digest_info
            
            	Direction
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: key_status
            
            	Key status
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: lifetime
            
            	Lifetime (seconds)
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: lifetime_left
            
            	Remaining lifetime (seconds)
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.interface_name = None
                self.mode_id = None
                self.source_address = None
                self.auth_compact = RsvpStandby.AuthenticationDetails.AuthenticationDetail.AuthCompact()
                self.auth_compact.parent = self
                self.challenge_status = None
                self.direction_info = RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo()
                self.direction_info.parent = self
                self.key_digest_info = None
                self.key_status = None
                self.lifetime = None
                self.lifetime_left = None


            class AuthCompact(object):
                """
                Basic authentication data
                
                .. attribute:: destination_address_xr
                
                	Destination address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: direction
                
                	Direction
                	**type**\:   :py:class:`RsvpMgmtAuthDirectionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthDirectionEnum>`
                
                .. attribute:: key_id
                
                	Key ID
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: key_id_valid
                
                	Key validity
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: key_source
                
                	Key source
                	**type**\:  str
                
                .. attribute:: key_type
                
                	Key type
                	**type**\:   :py:class:`RsvpMgmtAuthKiEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthKiEnum>`
                
                .. attribute:: neighbor_address
                
                	Neighbor address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: source_address_xr
                
                	Source address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.destination_address_xr = None
                    self.direction = None
                    self.key_id = None
                    self.key_id_valid = None
                    self.key_source = None
                    self.key_type = None
                    self.neighbor_address = None
                    self.source_address_xr = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:auth-compact'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.destination_address_xr is not None:
                        return True

                    if self.direction is not None:
                        return True

                    if self.key_id is not None:
                        return True

                    if self.key_id_valid is not None:
                        return True

                    if self.key_source is not None:
                        return True

                    if self.key_type is not None:
                        return True

                    if self.neighbor_address is not None:
                        return True

                    if self.source_address_xr is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.AuthenticationDetails.AuthenticationDetail.AuthCompact']['meta_info']


            class DirectionInfo(object):
                """
                direction info
                
                .. attribute:: auth_direction
                
                	AuthDirection
                	**type**\:   :py:class:`RsvpMgmtAuthDirectionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthDirectionEnum>`
                
                .. attribute:: receive_info
                
                	receive info
                	**type**\:   :py:class:`ReceiveInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo>`
                
                .. attribute:: send_info
                
                	send info
                	**type**\:   :py:class:`SendInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.auth_direction = None
                    self.receive_info = RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo()
                    self.receive_info.parent = self
                    self.send_info = RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo()
                    self.send_info.parent = self


                class SendInfo(object):
                    """
                    send info
                    
                    .. attribute:: counters
                    
                    	Counters
                    	**type**\:   :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters>`
                    
                    .. attribute:: sequence
                    
                    	Sequence number
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.counters = RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters()
                        self.counters.parent = self
                        self.sequence = None


                    class Counters(object):
                        """
                        Counters
                        
                        .. attribute:: authentication_challenge_responses_sent
                        
                        	Challenge responses sent
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_failures
                        
                        	Failures
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_send_challenges_received
                        
                        	Challenges received
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_sent
                        
                        	Messages sent
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.authentication_challenge_responses_sent = None
                            self.authentication_failures = None
                            self.authentication_send_challenges_received = None
                            self.authentication_sent = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:counters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.authentication_challenge_responses_sent is not None:
                                return True

                            if self.authentication_failures is not None:
                                return True

                            if self.authentication_send_challenges_received is not None:
                                return True

                            if self.authentication_sent is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:send-info'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.counters is not None and self.counters._has_data():
                            return True

                        if self.sequence is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo']['meta_info']


                class ReceiveInfo(object):
                    """
                    receive info
                    
                    .. attribute:: counters
                    
                    	Counters
                    	**type**\:   :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters>`
                    
                    .. attribute:: sequence
                    
                    	Sequence number
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: sequence_window
                    
                    	Sequence window
                    	**type**\:  list of int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: sequence_window_count
                    
                    	Sequence window count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: sequence_window_size
                    
                    	Sequence window size
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.counters = RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters()
                        self.counters.parent = self
                        self.sequence = None
                        self.sequence_window = YLeafList()
                        self.sequence_window.parent = self
                        self.sequence_window.name = 'sequence_window'
                        self.sequence_window_count = None
                        self.sequence_window_size = None


                    class Counters(object):
                        """
                        Counters
                        
                        .. attribute:: authentication_received_bad_digest
                        
                        	Authentication received with bad digest
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_bad_message_format
                        
                        	Authentication received with bad mesage format
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenge_response
                        
                        	Challenge responses received
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenge_timeouts
                        
                        	Challenge timeouts
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenges_resent
                        
                        	Challenges resent
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenges_response_duplicate
                        
                        	Duplicate challenge responses received
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenges_sent
                        
                        	Challenges sent
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_during_challenge
                        
                        	Authentication received during challenge
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_incomplete
                        
                        	Authentication received incomplete
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_no_integrity
                        
                        	Authentication received with no integrity
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_response_late
                        
                        	Challenge responses received late
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_sequence_number_duplicate
                        
                        	Authentication received with duplicate sequence number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_sequence_number_outof_range
                        
                        	Authentication received with sequence number out of range
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_valid_messages
                        
                        	Valid messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_wrong_challenges_response
                        
                        	Incorect challenge responses received
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_wrong_digest_type
                        
                        	Authentication received with wrong digest type
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.authentication_received_bad_digest = None
                            self.authentication_received_bad_message_format = None
                            self.authentication_received_challenge_response = None
                            self.authentication_received_challenge_timeouts = None
                            self.authentication_received_challenges_resent = None
                            self.authentication_received_challenges_response_duplicate = None
                            self.authentication_received_challenges_sent = None
                            self.authentication_received_during_challenge = None
                            self.authentication_received_incomplete = None
                            self.authentication_received_no_integrity = None
                            self.authentication_received_response_late = None
                            self.authentication_received_sequence_number_duplicate = None
                            self.authentication_received_sequence_number_outof_range = None
                            self.authentication_received_valid_messages = None
                            self.authentication_received_wrong_challenges_response = None
                            self.authentication_received_wrong_digest_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:counters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.authentication_received_bad_digest is not None:
                                return True

                            if self.authentication_received_bad_message_format is not None:
                                return True

                            if self.authentication_received_challenge_response is not None:
                                return True

                            if self.authentication_received_challenge_timeouts is not None:
                                return True

                            if self.authentication_received_challenges_resent is not None:
                                return True

                            if self.authentication_received_challenges_response_duplicate is not None:
                                return True

                            if self.authentication_received_challenges_sent is not None:
                                return True

                            if self.authentication_received_during_challenge is not None:
                                return True

                            if self.authentication_received_incomplete is not None:
                                return True

                            if self.authentication_received_no_integrity is not None:
                                return True

                            if self.authentication_received_response_late is not None:
                                return True

                            if self.authentication_received_sequence_number_duplicate is not None:
                                return True

                            if self.authentication_received_sequence_number_outof_range is not None:
                                return True

                            if self.authentication_received_valid_messages is not None:
                                return True

                            if self.authentication_received_wrong_challenges_response is not None:
                                return True

                            if self.authentication_received_wrong_digest_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:receive-info'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.counters is not None and self.counters._has_data():
                            return True

                        if self.sequence is not None:
                            return True

                        if self.sequence_window is not None:
                            for child in self.sequence_window:
                                if child is not None:
                                    return True

                        if self.sequence_window_count is not None:
                            return True

                        if self.sequence_window_size is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:direction-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.auth_direction is not None:
                        return True

                    if self.receive_info is not None and self.receive_info._has_data():
                        return True

                    if self.send_info is not None and self.send_info._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo']['meta_info']

            @property
            def _common_path(self):
                if self.destination_address is None:
                    raise YPYModelError('Key property destination_address is None')
                if self.interface_name is None:
                    raise YPYModelError('Key property interface_name is None')
                if self.mode_id is None:
                    raise YPYModelError('Key property mode_id is None')
                if self.source_address is None:
                    raise YPYModelError('Key property source_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:authentication-details/Cisco-IOS-XR-ip-rsvp-oper:authentication-detail[Cisco-IOS-XR-ip-rsvp-oper:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + '][Cisco-IOS-XR-ip-rsvp-oper:mode-id = ' + str(self.mode_id) + '][Cisco-IOS-XR-ip-rsvp-oper:source-address = ' + str(self.source_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.mode_id is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.auth_compact is not None and self.auth_compact._has_data():
                    return True

                if self.challenge_status is not None:
                    return True

                if self.direction_info is not None and self.direction_info._has_data():
                    return True

                if self.key_digest_info is not None:
                    return True

                if self.key_status is not None:
                    return True

                if self.lifetime is not None:
                    return True

                if self.lifetime_left is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.AuthenticationDetails.AuthenticationDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:authentication-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.authentication_detail is not None:
                for child_ref in self.authentication_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.AuthenticationDetails']['meta_info']


    class RsbBriefs(object):
        """
        Table of brief info about reservation state
        blocks
        
        .. attribute:: rsb_brief
        
        	Brief info for a single reservation state block
        	**type**\: list of    :py:class:`RsbBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.rsb_brief = YList()
            self.rsb_brief.parent = self
            self.rsb_brief.name = 'rsb_brief'


        class RsbBrief(object):
            """
            Brief info for a single reservation state block
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:   :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Filter>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:   :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Info
            	**type**\:   :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec>`
            
            .. attribute:: input_interface
            
            	Reservation Input Interface
            	**type**\:  str
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Session>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:   :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Style>`
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.extended_tunnel_id = None
                self.filter = RsvpStandby.RsbBriefs.RsbBrief.Filter()
                self.filter.parent = self
                self.flow_spec = RsvpStandby.RsbBriefs.RsbBrief.FlowSpec()
                self.flow_spec.parent = self
                self.generic_flow_spec = RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self.input_interface = None
                self.p2mp_id = None
                self.protocol = None
                self.s2l_sub_lsp = RsvpStandby.RsbBriefs.RsbBrief.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = RsvpStandby.RsbBriefs.RsbBrief.Session()
                self.session.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.style = RsvpStandby.RsbBriefs.RsbBrief.Style()
                self.style.parent = self
                self.sub_group_id = None
                self.sub_group_origin = None
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.S2LSubLsp']['meta_info']


            class FlowSpec(object):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:   :py:class:`RsvpMgmtQosServiceEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnumEnum>`
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_max_unit = None
                    self.flow_min_unit = None
                    self.flow_peak_rate = None
                    self.flow_qos = None
                    self.flow_requested_rate = None
                    self.flow_slack = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_average_rate is not None:
                        return True

                    if self.flow_max_burst is not None:
                        return True

                    if self.flow_max_unit is not None:
                        return True

                    if self.flow_min_unit is not None:
                        return True

                    if self.flow_peak_rate is not None:
                        return True

                    if self.flow_qos is not None:
                        return True

                    if self.flow_requested_rate is not None:
                        return True

                    if self.flow_slack is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.FlowSpec']['meta_info']


            class GenericFlowSpec(object):
                """
                Generic Flow Spec Info
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:   :py:class:`RsvpMgmtFlowSpecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpecEnum>`
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:   :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_spec_type = None
                    self.g709otn_flow_spec = RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self


                class G709OtnFlowSpec(object):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.flow_bit_rate = None
                        self.flow_multiplier = None
                        self.flow_nvc = None
                        self.flow_signal_type = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-flow-spec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.flow_bit_rate is not None:
                            return True

                        if self.flow_multiplier is not None:
                            return True

                        if self.flow_nvc is not None:
                            return True

                        if self.flow_signal_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_spec_type is not None:
                        return True

                    if self.g709otn_flow_spec is not None and self.g709otn_flow_spec._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec']['meta_info']


            class Style(object):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:   :py:class:`RsvpMgmtReservationTypeEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnumEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.reservation_type = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:style'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.reservation_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.Style']['meta_info']


            class Filter(object):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:   :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_filter = RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self


                class RsvpFilter(object):
                    """
                    RSVP Filter
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:   :py:class:`RsvpMgmtFilterEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilterEnum>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:   :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:   :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.filter_type = None
                        self.p2mp_ipv4_session = RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self.udp_ipv4_session = RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self


                    class UdpIpv4Session(object):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.source_address = None
                            self.source_port = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:udp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session']['meta_info']


                    class P2MpIpv4Session(object):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.p2mp_sub_group_origin = None
                            self.source_address = None
                            self.source_port = None
                            self.sub_group_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:p2mp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.p2mp_sub_group_origin is not None:
                                return True

                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            if self.sub_group_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.filter_type is not None:
                            return True

                        if self.p2mp_ipv4_session is not None and self.p2mp_ipv4_session._has_data():
                            return True

                        if self.udp_ipv4_session is not None and self.udp_ipv4_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:filter'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_filter is not None and self.rsvp_filter._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief.Filter']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.filter is not None and self.filter._has_data():
                    return True

                if self.flow_spec is not None and self.flow_spec._has_data():
                    return True

                if self.generic_flow_spec is not None and self.generic_flow_spec._has_data():
                    return True

                if self.input_interface is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.protocol is not None:
                    return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.style is not None and self.style._has_data():
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.RsbBriefs.RsbBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.rsb_brief is not None:
                for child_ref in self.rsb_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.RsbBriefs']['meta_info']


    class OpenConfig(object):
        """
        OpenConfig info
        
        .. attribute:: global_counters
        
        	Platform wide RSVP statistics and counters
        	**type**\:   :py:class:`GlobalCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.OpenConfig.GlobalCounters>`
        
        .. attribute:: interface_counters
        
        	Table of info about RSVP\-enabled interface counters for OpenConfig
        	**type**\:   :py:class:`InterfaceCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.OpenConfig.InterfaceCounters>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.global_counters = RsvpStandby.OpenConfig.GlobalCounters()
            self.global_counters.parent = self
            self.interface_counters = RsvpStandby.OpenConfig.InterfaceCounters()
            self.interface_counters.parent = self


        class GlobalCounters(object):
            """
            Platform wide RSVP statistics and counters
            
            .. attribute:: in_ack_messages
            
            	Global count of ack messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_hello_messages
            
            	Global count of hello messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_path_error_messages
            
            	Global count of path error messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_path_messages
            
            	Global count of path messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_path_tear_messages
            
            	Global count of path tear messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_reservation_error_messages
            
            	Global count of reservation error messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_reservation_messages
            
            	Global count of reservation messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_reservation_tear_messages
            
            	Global count of reservation tear messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_srefresh_messages
            
            	Global count of srefresh messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_ack_messages
            
            	Global count of ack messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_hello_messages
            
            	Global count of hello messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_path_error_messages
            
            	Global count of path error messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_path_messages
            
            	Global count of path messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_path_tear_messages
            
            	Global count of path tear messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_reservation_error_messages
            
            	Global count of reservation error messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_reservation_messages
            
            	Global count of reservation messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_reservation_tear_messages
            
            	Global count of reservation tear messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_srefresh_messages
            
            	Global count of srefresh messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: path_timeouts
            
            	Global count of Path Timeouts
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: rate_limited_messages
            
            	Global count of rate limited messages
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: reservation_timeouts
            
            	Global count of reservation timeouts
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.in_ack_messages = None
                self.in_hello_messages = None
                self.in_path_error_messages = None
                self.in_path_messages = None
                self.in_path_tear_messages = None
                self.in_reservation_error_messages = None
                self.in_reservation_messages = None
                self.in_reservation_tear_messages = None
                self.in_srefresh_messages = None
                self.out_ack_messages = None
                self.out_hello_messages = None
                self.out_path_error_messages = None
                self.out_path_messages = None
                self.out_path_tear_messages = None
                self.out_reservation_error_messages = None
                self.out_reservation_messages = None
                self.out_reservation_tear_messages = None
                self.out_srefresh_messages = None
                self.path_timeouts = None
                self.rate_limited_messages = None
                self.reservation_timeouts = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:open-config/Cisco-IOS-XR-ip-rsvp-oper:global-counters'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.in_ack_messages is not None:
                    return True

                if self.in_hello_messages is not None:
                    return True

                if self.in_path_error_messages is not None:
                    return True

                if self.in_path_messages is not None:
                    return True

                if self.in_path_tear_messages is not None:
                    return True

                if self.in_reservation_error_messages is not None:
                    return True

                if self.in_reservation_messages is not None:
                    return True

                if self.in_reservation_tear_messages is not None:
                    return True

                if self.in_srefresh_messages is not None:
                    return True

                if self.out_ack_messages is not None:
                    return True

                if self.out_hello_messages is not None:
                    return True

                if self.out_path_error_messages is not None:
                    return True

                if self.out_path_messages is not None:
                    return True

                if self.out_path_tear_messages is not None:
                    return True

                if self.out_reservation_error_messages is not None:
                    return True

                if self.out_reservation_messages is not None:
                    return True

                if self.out_reservation_tear_messages is not None:
                    return True

                if self.out_srefresh_messages is not None:
                    return True

                if self.path_timeouts is not None:
                    return True

                if self.rate_limited_messages is not None:
                    return True

                if self.reservation_timeouts is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.OpenConfig.GlobalCounters']['meta_info']


        class InterfaceCounters(object):
            """
            Table of info about RSVP\-enabled interface
            counters for OpenConfig
            
            .. attribute:: interface_counter
            
            	Info about an RSVP\-enabled interface counters
            	**type**\: list of    :py:class:`InterfaceCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.OpenConfig.InterfaceCounters.InterfaceCounter>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.interface_counter = YList()
                self.interface_counter.parent = self
                self.interface_counter.name = 'interface_counter'


            class InterfaceCounter(object):
                """
                Info about an RSVP\-enabled interface counters
                
                .. attribute:: interface_name  <key>
                
                	Interface name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: in_ack_messages
                
                	Per interface count of ack messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_hello_messages
                
                	Per interface count of hello messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_path_error_messages
                
                	Per interface count of path error messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_path_messages
                
                	Per interface count of path messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_path_tear_messages
                
                	Per interface count of path tear messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_reservation_error_messages
                
                	Per interface count of reservation error messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_reservation_messages
                
                	Per interface count of reservation messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_reservation_tear_messages
                
                	Per interface count of reservation tear messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_srefresh_messages
                
                	Per interface count of srefresh messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: interface_name_xr
                
                	Interface name
                	**type**\:  str
                
                .. attribute:: out_ack_messages
                
                	Per interface count of ack messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_hello_messages
                
                	Per interface count of hello messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_path_error_messages
                
                	Per interface count of path error messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_path_messages
                
                	Per interface count of path messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_path_tear_messages
                
                	Per interface count of path tear messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_reservation_error_messages
                
                	Per interface count of reservation error messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_reservation_messages
                
                	Per interface count of reservation messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_reservation_tear_messages
                
                	Per interface count of reservation tear messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_srefresh_messages
                
                	Per interface count of srefresh messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_name = None
                    self.in_ack_messages = None
                    self.in_hello_messages = None
                    self.in_path_error_messages = None
                    self.in_path_messages = None
                    self.in_path_tear_messages = None
                    self.in_reservation_error_messages = None
                    self.in_reservation_messages = None
                    self.in_reservation_tear_messages = None
                    self.in_srefresh_messages = None
                    self.interface_name_xr = None
                    self.out_ack_messages = None
                    self.out_hello_messages = None
                    self.out_path_error_messages = None
                    self.out_path_messages = None
                    self.out_path_tear_messages = None
                    self.out_reservation_error_messages = None
                    self.out_reservation_messages = None
                    self.out_reservation_tear_messages = None
                    self.out_srefresh_messages = None

                @property
                def _common_path(self):
                    if self.interface_name is None:
                        raise YPYModelError('Key property interface_name is None')

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:open-config/Cisco-IOS-XR-ip-rsvp-oper:interface-counters/Cisco-IOS-XR-ip-rsvp-oper:interface-counter[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_name is not None:
                        return True

                    if self.in_ack_messages is not None:
                        return True

                    if self.in_hello_messages is not None:
                        return True

                    if self.in_path_error_messages is not None:
                        return True

                    if self.in_path_messages is not None:
                        return True

                    if self.in_path_tear_messages is not None:
                        return True

                    if self.in_reservation_error_messages is not None:
                        return True

                    if self.in_reservation_messages is not None:
                        return True

                    if self.in_reservation_tear_messages is not None:
                        return True

                    if self.in_srefresh_messages is not None:
                        return True

                    if self.interface_name_xr is not None:
                        return True

                    if self.out_ack_messages is not None:
                        return True

                    if self.out_hello_messages is not None:
                        return True

                    if self.out_path_error_messages is not None:
                        return True

                    if self.out_path_messages is not None:
                        return True

                    if self.out_path_tear_messages is not None:
                        return True

                    if self.out_reservation_error_messages is not None:
                        return True

                    if self.out_reservation_messages is not None:
                        return True

                    if self.out_reservation_tear_messages is not None:
                        return True

                    if self.out_srefresh_messages is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.OpenConfig.InterfaceCounters.InterfaceCounter']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:open-config/Cisco-IOS-XR-ip-rsvp-oper:interface-counters'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interface_counter is not None:
                    for child_ref in self.interface_counter:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.OpenConfig.InterfaceCounters']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:open-config'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.global_counters is not None and self.global_counters._has_data():
                return True

            if self.interface_counters is not None and self.interface_counters._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.OpenConfig']['meta_info']


    class Counters(object):
        """
        Counters
        
        .. attribute:: database
        
        	Summary information for all RSVP database counters
        	**type**\:   :py:class:`Database <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.Database>`
        
        .. attribute:: event_syncs
        
        	Table containing event sync counters
        	**type**\:   :py:class:`EventSyncs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.EventSyncs>`
        
        .. attribute:: interface_events
        
        	Event counters
        	**type**\:   :py:class:`InterfaceEvents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceEvents>`
        
        .. attribute:: interface_messages
        
        	Table of message counters
        	**type**\:   :py:class:`InterfaceMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceMessages>`
        
        .. attribute:: issu
        
        	Summary information for all RSVP ISSU counters
        	**type**\:   :py:class:`Issu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.Issu>`
        
        .. attribute:: message_summary
        
        	Summary information for all RSVP message counters
        	**type**\:   :py:class:`MessageSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.MessageSummary>`
        
        .. attribute:: nsr
        
        	Summary information for all RSVP NSR counters
        	**type**\:   :py:class:`Nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.Nsr>`
        
        .. attribute:: out_of_resource
        
        	Out of resource counters
        	**type**\:   :py:class:`OutOfResource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.OutOfResource>`
        
        .. attribute:: prefix_filtering
        
        	Prefix filtering counters
        	**type**\:   :py:class:`PrefixFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.database = RsvpStandby.Counters.Database()
            self.database.parent = self
            self.event_syncs = RsvpStandby.Counters.EventSyncs()
            self.event_syncs.parent = self
            self.interface_events = RsvpStandby.Counters.InterfaceEvents()
            self.interface_events.parent = self
            self.interface_messages = RsvpStandby.Counters.InterfaceMessages()
            self.interface_messages.parent = self
            self.issu = RsvpStandby.Counters.Issu()
            self.issu.parent = self
            self.message_summary = RsvpStandby.Counters.MessageSummary()
            self.message_summary.parent = self
            self.nsr = RsvpStandby.Counters.Nsr()
            self.nsr.parent = self
            self.out_of_resource = RsvpStandby.Counters.OutOfResource()
            self.out_of_resource.parent = self
            self.prefix_filtering = RsvpStandby.Counters.PrefixFiltering()
            self.prefix_filtering.parent = self


        class InterfaceMessages(object):
            """
            Table of message counters
            
            .. attribute:: interface_message
            
            	Interface message counters
            	**type**\: list of    :py:class:`InterfaceMessage <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceMessages.InterfaceMessage>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.interface_message = YList()
                self.interface_message.parent = self
                self.interface_message.name = 'interface_message'


            class InterfaceMessage(object):
                """
                Interface message counters
                
                .. attribute:: interface_name  <key>
                
                	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: bundle_received_messages
                
                	Count of Bundle messages received
                	**type**\:   :py:class:`BundleReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages>`
                
                .. attribute:: bundle_transmitted_messages
                
                	Count of Bundle messages transmitted
                	**type**\:   :py:class:`BundleTransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages>`
                
                .. attribute:: out_of_order_messages
                
                	Count of Out of Order messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: rate_limited_messages
                
                	Count of Rate Limited messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: received_messages
                
                	Count of messages received
                	**type**\:   :py:class:`ReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages>`
                
                .. attribute:: retransmitted_messages
                
                	Count of messages retransmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: transmitted_messages
                
                	Count of messages transmitted
                	**type**\:   :py:class:`TransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_name = None
                    self.bundle_received_messages = RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages()
                    self.bundle_received_messages.parent = self
                    self.bundle_transmitted_messages = RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages()
                    self.bundle_transmitted_messages.parent = self
                    self.out_of_order_messages = None
                    self.rate_limited_messages = None
                    self.received_messages = RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages()
                    self.received_messages.parent = self
                    self.retransmitted_messages = None
                    self.transmitted_messages = RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages()
                    self.transmitted_messages.parent = self


                class ReceivedMessages(object):
                    """
                    Count of messages received
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ack = None
                        self.bundle = None
                        self.challenge = None
                        self.hello = None
                        self.path = None
                        self.path_error = None
                        self.path_tear = None
                        self.reservation = None
                        self.reservation_confirm = None
                        self.reservation_error = None
                        self.reservation_tear = None
                        self.response = None
                        self.srefresh = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:received-messages'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ack is not None:
                            return True

                        if self.bundle is not None:
                            return True

                        if self.challenge is not None:
                            return True

                        if self.hello is not None:
                            return True

                        if self.path is not None:
                            return True

                        if self.path_error is not None:
                            return True

                        if self.path_tear is not None:
                            return True

                        if self.reservation is not None:
                            return True

                        if self.reservation_confirm is not None:
                            return True

                        if self.reservation_error is not None:
                            return True

                        if self.reservation_tear is not None:
                            return True

                        if self.response is not None:
                            return True

                        if self.srefresh is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages']['meta_info']


                class TransmittedMessages(object):
                    """
                    Count of messages transmitted
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ack = None
                        self.bundle = None
                        self.challenge = None
                        self.hello = None
                        self.path = None
                        self.path_error = None
                        self.path_tear = None
                        self.reservation = None
                        self.reservation_confirm = None
                        self.reservation_error = None
                        self.reservation_tear = None
                        self.response = None
                        self.srefresh = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:transmitted-messages'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ack is not None:
                            return True

                        if self.bundle is not None:
                            return True

                        if self.challenge is not None:
                            return True

                        if self.hello is not None:
                            return True

                        if self.path is not None:
                            return True

                        if self.path_error is not None:
                            return True

                        if self.path_tear is not None:
                            return True

                        if self.reservation is not None:
                            return True

                        if self.reservation_confirm is not None:
                            return True

                        if self.reservation_error is not None:
                            return True

                        if self.reservation_tear is not None:
                            return True

                        if self.response is not None:
                            return True

                        if self.srefresh is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages']['meta_info']


                class BundleReceivedMessages(object):
                    """
                    Count of Bundle messages received
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ack = None
                        self.bundle = None
                        self.challenge = None
                        self.hello = None
                        self.path = None
                        self.path_error = None
                        self.path_tear = None
                        self.reservation = None
                        self.reservation_confirm = None
                        self.reservation_error = None
                        self.reservation_tear = None
                        self.response = None
                        self.srefresh = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:bundle-received-messages'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ack is not None:
                            return True

                        if self.bundle is not None:
                            return True

                        if self.challenge is not None:
                            return True

                        if self.hello is not None:
                            return True

                        if self.path is not None:
                            return True

                        if self.path_error is not None:
                            return True

                        if self.path_tear is not None:
                            return True

                        if self.reservation is not None:
                            return True

                        if self.reservation_confirm is not None:
                            return True

                        if self.reservation_error is not None:
                            return True

                        if self.reservation_tear is not None:
                            return True

                        if self.response is not None:
                            return True

                        if self.srefresh is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages']['meta_info']


                class BundleTransmittedMessages(object):
                    """
                    Count of Bundle messages transmitted
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ack = None
                        self.bundle = None
                        self.challenge = None
                        self.hello = None
                        self.path = None
                        self.path_error = None
                        self.path_tear = None
                        self.reservation = None
                        self.reservation_confirm = None
                        self.reservation_error = None
                        self.reservation_tear = None
                        self.response = None
                        self.srefresh = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:bundle-transmitted-messages'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ack is not None:
                            return True

                        if self.bundle is not None:
                            return True

                        if self.challenge is not None:
                            return True

                        if self.hello is not None:
                            return True

                        if self.path is not None:
                            return True

                        if self.path_error is not None:
                            return True

                        if self.path_tear is not None:
                            return True

                        if self.reservation is not None:
                            return True

                        if self.reservation_confirm is not None:
                            return True

                        if self.reservation_error is not None:
                            return True

                        if self.reservation_tear is not None:
                            return True

                        if self.response is not None:
                            return True

                        if self.srefresh is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages']['meta_info']

                @property
                def _common_path(self):
                    if self.interface_name is None:
                        raise YPYModelError('Key property interface_name is None')

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:interface-messages/Cisco-IOS-XR-ip-rsvp-oper:interface-message[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_name is not None:
                        return True

                    if self.bundle_received_messages is not None and self.bundle_received_messages._has_data():
                        return True

                    if self.bundle_transmitted_messages is not None and self.bundle_transmitted_messages._has_data():
                        return True

                    if self.out_of_order_messages is not None:
                        return True

                    if self.rate_limited_messages is not None:
                        return True

                    if self.received_messages is not None and self.received_messages._has_data():
                        return True

                    if self.retransmitted_messages is not None:
                        return True

                    if self.transmitted_messages is not None and self.transmitted_messages._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Counters.InterfaceMessages.InterfaceMessage']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:interface-messages'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interface_message is not None:
                    for child_ref in self.interface_message:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.Counters.InterfaceMessages']['meta_info']


        class MessageSummary(object):
            """
            Summary information for all RSVP message
            counters
            
            .. attribute:: bundle_received_messages
            
            	Count of Bundle messages received
            	**type**\:   :py:class:`BundleReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.MessageSummary.BundleReceivedMessages>`
            
            .. attribute:: bundle_transmitted_messages
            
            	Count of Bundle messages transmitted
            	**type**\:   :py:class:`BundleTransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.MessageSummary.BundleTransmittedMessages>`
            
            .. attribute:: out_of_order_messages
            
            	Count of Out of Order messages
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: rate_limited_messages
            
            	Count of Rate Limited messages
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: received_messages
            
            	Count of messages received
            	**type**\:   :py:class:`ReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.MessageSummary.ReceivedMessages>`
            
            .. attribute:: retransmitted_messages
            
            	Count of messages retransmitted
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: transmitted_messages
            
            	Count of messages transmitted
            	**type**\:   :py:class:`TransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.MessageSummary.TransmittedMessages>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.bundle_received_messages = RsvpStandby.Counters.MessageSummary.BundleReceivedMessages()
                self.bundle_received_messages.parent = self
                self.bundle_transmitted_messages = RsvpStandby.Counters.MessageSummary.BundleTransmittedMessages()
                self.bundle_transmitted_messages.parent = self
                self.out_of_order_messages = None
                self.rate_limited_messages = None
                self.received_messages = RsvpStandby.Counters.MessageSummary.ReceivedMessages()
                self.received_messages.parent = self
                self.retransmitted_messages = None
                self.transmitted_messages = RsvpStandby.Counters.MessageSummary.TransmittedMessages()
                self.transmitted_messages.parent = self


            class ReceivedMessages(object):
                """
                Count of messages received
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ack = None
                    self.bundle = None
                    self.challenge = None
                    self.hello = None
                    self.path = None
                    self.path_error = None
                    self.path_tear = None
                    self.reservation = None
                    self.reservation_confirm = None
                    self.reservation_error = None
                    self.reservation_tear = None
                    self.response = None
                    self.srefresh = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:message-summary/Cisco-IOS-XR-ip-rsvp-oper:received-messages'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ack is not None:
                        return True

                    if self.bundle is not None:
                        return True

                    if self.challenge is not None:
                        return True

                    if self.hello is not None:
                        return True

                    if self.path is not None:
                        return True

                    if self.path_error is not None:
                        return True

                    if self.path_tear is not None:
                        return True

                    if self.reservation is not None:
                        return True

                    if self.reservation_confirm is not None:
                        return True

                    if self.reservation_error is not None:
                        return True

                    if self.reservation_tear is not None:
                        return True

                    if self.response is not None:
                        return True

                    if self.srefresh is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Counters.MessageSummary.ReceivedMessages']['meta_info']


            class TransmittedMessages(object):
                """
                Count of messages transmitted
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ack = None
                    self.bundle = None
                    self.challenge = None
                    self.hello = None
                    self.path = None
                    self.path_error = None
                    self.path_tear = None
                    self.reservation = None
                    self.reservation_confirm = None
                    self.reservation_error = None
                    self.reservation_tear = None
                    self.response = None
                    self.srefresh = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:message-summary/Cisco-IOS-XR-ip-rsvp-oper:transmitted-messages'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ack is not None:
                        return True

                    if self.bundle is not None:
                        return True

                    if self.challenge is not None:
                        return True

                    if self.hello is not None:
                        return True

                    if self.path is not None:
                        return True

                    if self.path_error is not None:
                        return True

                    if self.path_tear is not None:
                        return True

                    if self.reservation is not None:
                        return True

                    if self.reservation_confirm is not None:
                        return True

                    if self.reservation_error is not None:
                        return True

                    if self.reservation_tear is not None:
                        return True

                    if self.response is not None:
                        return True

                    if self.srefresh is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Counters.MessageSummary.TransmittedMessages']['meta_info']


            class BundleReceivedMessages(object):
                """
                Count of Bundle messages received
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ack = None
                    self.bundle = None
                    self.challenge = None
                    self.hello = None
                    self.path = None
                    self.path_error = None
                    self.path_tear = None
                    self.reservation = None
                    self.reservation_confirm = None
                    self.reservation_error = None
                    self.reservation_tear = None
                    self.response = None
                    self.srefresh = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:message-summary/Cisco-IOS-XR-ip-rsvp-oper:bundle-received-messages'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ack is not None:
                        return True

                    if self.bundle is not None:
                        return True

                    if self.challenge is not None:
                        return True

                    if self.hello is not None:
                        return True

                    if self.path is not None:
                        return True

                    if self.path_error is not None:
                        return True

                    if self.path_tear is not None:
                        return True

                    if self.reservation is not None:
                        return True

                    if self.reservation_confirm is not None:
                        return True

                    if self.reservation_error is not None:
                        return True

                    if self.reservation_tear is not None:
                        return True

                    if self.response is not None:
                        return True

                    if self.srefresh is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Counters.MessageSummary.BundleReceivedMessages']['meta_info']


            class BundleTransmittedMessages(object):
                """
                Count of Bundle messages transmitted
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ack = None
                    self.bundle = None
                    self.challenge = None
                    self.hello = None
                    self.path = None
                    self.path_error = None
                    self.path_tear = None
                    self.reservation = None
                    self.reservation_confirm = None
                    self.reservation_error = None
                    self.reservation_tear = None
                    self.response = None
                    self.srefresh = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:message-summary/Cisco-IOS-XR-ip-rsvp-oper:bundle-transmitted-messages'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ack is not None:
                        return True

                    if self.bundle is not None:
                        return True

                    if self.challenge is not None:
                        return True

                    if self.hello is not None:
                        return True

                    if self.path is not None:
                        return True

                    if self.path_error is not None:
                        return True

                    if self.path_tear is not None:
                        return True

                    if self.reservation is not None:
                        return True

                    if self.reservation_confirm is not None:
                        return True

                    if self.reservation_error is not None:
                        return True

                    if self.reservation_tear is not None:
                        return True

                    if self.response is not None:
                        return True

                    if self.srefresh is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Counters.MessageSummary.BundleTransmittedMessages']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:message-summary'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.bundle_received_messages is not None and self.bundle_received_messages._has_data():
                    return True

                if self.bundle_transmitted_messages is not None and self.bundle_transmitted_messages._has_data():
                    return True

                if self.out_of_order_messages is not None:
                    return True

                if self.rate_limited_messages is not None:
                    return True

                if self.received_messages is not None and self.received_messages._has_data():
                    return True

                if self.retransmitted_messages is not None:
                    return True

                if self.transmitted_messages is not None and self.transmitted_messages._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.Counters.MessageSummary']['meta_info']


        class PrefixFiltering(object):
            """
            Prefix filtering counters
            
            .. attribute:: accesses
            
            	AccessList specific prefix filtering counters
            	**type**\:   :py:class:`Accesses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Accesses>`
            
            .. attribute:: interfaces
            
            	Interface specific prefix filtering counters
            	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.accesses = RsvpStandby.Counters.PrefixFiltering.Accesses()
                self.accesses.parent = self
                self.interfaces = RsvpStandby.Counters.PrefixFiltering.Interfaces()
                self.interfaces.parent = self


            class Accesses(object):
                """
                AccessList specific prefix filtering counters
                
                .. attribute:: access
                
                	Prefix filtering counters for a specific AccessList
                	**type**\: list of    :py:class:`Access <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Accesses.Access>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.access = YList()
                    self.access.parent = self
                    self.access.name = 'access'


                class Access(object):
                    """
                    Prefix filtering counters for a specific
                    AccessList
                    
                    .. attribute:: access_list_name  <key>
                    
                    	AccessList Name
                    	**type**\:  str
                    
                    	**length:** 1..65
                    
                    .. attribute:: dropped
                    
                    	Count of messages dropped
                    	**type**\:   :py:class:`Dropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Dropped>`
                    
                    .. attribute:: forwarded
                    
                    	Count of messages which got forwarded
                    	**type**\:   :py:class:`Forwarded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Forwarded>`
                    
                    .. attribute:: locally_destined
                    
                    	Count of locally destined messages
                    	**type**\:   :py:class:`LocallyDestined <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Accesses.Access.LocallyDestined>`
                    
                    .. attribute:: total
                    
                    	Count of total messages
                    	**type**\:   :py:class:`Total <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Total>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.access_list_name = None
                        self.dropped = RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Dropped()
                        self.dropped.parent = self
                        self.forwarded = RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Forwarded()
                        self.forwarded.parent = self
                        self.locally_destined = RsvpStandby.Counters.PrefixFiltering.Accesses.Access.LocallyDestined()
                        self.locally_destined.parent = self
                        self.total = RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Total()
                        self.total.parent = self


                    class Forwarded(object):
                        """
                        Count of messages which got forwarded
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:forwarded'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Forwarded']['meta_info']


                    class LocallyDestined(object):
                        """
                        Count of locally destined messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:locally-destined'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Accesses.Access.LocallyDestined']['meta_info']


                    class Dropped(object):
                        """
                        Count of messages dropped
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:dropped'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Dropped']['meta_info']


                    class Total(object):
                        """
                        Count of total messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:total'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Total']['meta_info']

                    @property
                    def _common_path(self):
                        if self.access_list_name is None:
                            raise YPYModelError('Key property access_list_name is None')

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:accesses/Cisco-IOS-XR-ip-rsvp-oper:access[Cisco-IOS-XR-ip-rsvp-oper:access-list-name = ' + str(self.access_list_name) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.access_list_name is not None:
                            return True

                        if self.dropped is not None and self.dropped._has_data():
                            return True

                        if self.forwarded is not None and self.forwarded._has_data():
                            return True

                        if self.locally_destined is not None and self.locally_destined._has_data():
                            return True

                        if self.total is not None and self.total._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Accesses.Access']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:accesses'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.access is not None:
                        for child_ref in self.access:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Accesses']['meta_info']


            class Interfaces(object):
                """
                Interface specific prefix filtering counters
                
                .. attribute:: interfaces
                
                	Table of interface specific prefix filtering counters
                	**type**\:   :py:class:`Interfaces_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_>`
                
                .. attribute:: summary
                
                	Summary of prefix filtering counts for all interfaces
                	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interfaces = RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_()
                    self.interfaces.parent = self
                    self.summary = RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary()
                    self.summary.parent = self


                class Summary(object):
                    """
                    Summary of prefix filtering counts for all
                    interfaces
                    
                    .. attribute:: default_action_dropped
                    
                    	Count of messages which got dropped due to default ACL action
                    	**type**\:   :py:class:`DefaultActionDropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped>`
                    
                    .. attribute:: default_action_processed
                    
                    	Count of messages which were processed due to default ACL action
                    	**type**\:   :py:class:`DefaultActionProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed>`
                    
                    .. attribute:: dropped
                    
                    	Count of messages dropped
                    	**type**\:   :py:class:`Dropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Dropped>`
                    
                    .. attribute:: forwarded
                    
                    	Count of messages which got forwarded
                    	**type**\:   :py:class:`Forwarded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Forwarded>`
                    
                    .. attribute:: locally_destined
                    
                    	Count of locally destined messages
                    	**type**\:   :py:class:`LocallyDestined <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined>`
                    
                    .. attribute:: total
                    
                    	Count of total messages
                    	**type**\:   :py:class:`Total <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Total>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.default_action_dropped = RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped()
                        self.default_action_dropped.parent = self
                        self.default_action_processed = RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed()
                        self.default_action_processed.parent = self
                        self.dropped = RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Dropped()
                        self.dropped.parent = self
                        self.forwarded = RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Forwarded()
                        self.forwarded.parent = self
                        self.locally_destined = RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined()
                        self.locally_destined.parent = self
                        self.total = RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Total()
                        self.total.parent = self


                    class Forwarded(object):
                        """
                        Count of messages which got forwarded
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:forwarded'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Forwarded']['meta_info']


                    class LocallyDestined(object):
                        """
                        Count of locally destined messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:locally-destined'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined']['meta_info']


                    class Dropped(object):
                        """
                        Count of messages dropped
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:dropped'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Dropped']['meta_info']


                    class DefaultActionDropped(object):
                        """
                        Count of messages which got dropped due to
                        default ACL action
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:default-action-dropped'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped']['meta_info']


                    class DefaultActionProcessed(object):
                        """
                        Count of messages which were processed due to
                        default ACL action
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:default-action-processed'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed']['meta_info']


                    class Total(object):
                        """
                        Count of total messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:total'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Total']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.default_action_dropped is not None and self.default_action_dropped._has_data():
                            return True

                        if self.default_action_processed is not None and self.default_action_processed._has_data():
                            return True

                        if self.dropped is not None and self.dropped._has_data():
                            return True

                        if self.forwarded is not None and self.forwarded._has_data():
                            return True

                        if self.locally_destined is not None and self.locally_destined._has_data():
                            return True

                        if self.total is not None and self.total._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary']['meta_info']


                class Interfaces_(object):
                    """
                    Table of interface specific prefix filtering
                    counters
                    
                    .. attribute:: interface
                    
                    	Prefix filtering counters for a specific interface
                    	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.interface = YList()
                        self.interface.parent = self
                        self.interface.name = 'interface'


                    class Interface(object):
                        """
                        Prefix filtering counters for a specific
                        interface
                        
                        .. attribute:: interface_name  <key>
                        
                        	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: default_action_dropped
                        
                        	Count of messages which got dropped due to default ACL action
                        	**type**\:   :py:class:`DefaultActionDropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped>`
                        
                        .. attribute:: default_action_processed
                        
                        	Count of messages which were processed due to default ACL action
                        	**type**\:   :py:class:`DefaultActionProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed>`
                        
                        .. attribute:: dropped
                        
                        	Count of messages dropped
                        	**type**\:   :py:class:`Dropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped>`
                        
                        .. attribute:: forwarded
                        
                        	Count of messages which got forwarded
                        	**type**\:   :py:class:`Forwarded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded>`
                        
                        .. attribute:: locally_destined
                        
                        	Count of locally destined messages
                        	**type**\:   :py:class:`LocallyDestined <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined>`
                        
                        .. attribute:: total
                        
                        	Count of total messages
                        	**type**\:   :py:class:`Total <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.interface_name = None
                            self.default_action_dropped = RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped()
                            self.default_action_dropped.parent = self
                            self.default_action_processed = RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed()
                            self.default_action_processed.parent = self
                            self.dropped = RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped()
                            self.dropped.parent = self
                            self.forwarded = RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded()
                            self.forwarded.parent = self
                            self.locally_destined = RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined()
                            self.locally_destined.parent = self
                            self.total = RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total()
                            self.total.parent = self


                        class Forwarded(object):
                            """
                            Count of messages which got forwarded
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:forwarded'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path is not None:
                                    return True

                                if self.path_tear is not None:
                                    return True

                                if self.reservation_confirm is not None:
                                    return True

                                if self.total is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded']['meta_info']


                        class LocallyDestined(object):
                            """
                            Count of locally destined messages
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:locally-destined'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path is not None:
                                    return True

                                if self.path_tear is not None:
                                    return True

                                if self.reservation_confirm is not None:
                                    return True

                                if self.total is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined']['meta_info']


                        class Dropped(object):
                            """
                            Count of messages dropped
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:dropped'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path is not None:
                                    return True

                                if self.path_tear is not None:
                                    return True

                                if self.reservation_confirm is not None:
                                    return True

                                if self.total is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped']['meta_info']


                        class DefaultActionDropped(object):
                            """
                            Count of messages which got dropped due to
                            default ACL action
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:default-action-dropped'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path is not None:
                                    return True

                                if self.path_tear is not None:
                                    return True

                                if self.reservation_confirm is not None:
                                    return True

                                if self.total is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped']['meta_info']


                        class DefaultActionProcessed(object):
                            """
                            Count of messages which were processed due to
                            default ACL action
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:default-action-processed'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path is not None:
                                    return True

                                if self.path_tear is not None:
                                    return True

                                if self.reservation_confirm is not None:
                                    return True

                                if self.total is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed']['meta_info']


                        class Total(object):
                            """
                            Count of total messages
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:total'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path is not None:
                                    return True

                                if self.path_tear is not None:
                                    return True

                                if self.reservation_confirm is not None:
                                    return True

                                if self.total is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total']['meta_info']

                        @property
                        def _common_path(self):
                            if self.interface_name is None:
                                raise YPYModelError('Key property interface_name is None')

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:interface[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.interface_name is not None:
                                return True

                            if self.default_action_dropped is not None and self.default_action_dropped._has_data():
                                return True

                            if self.default_action_processed is not None and self.default_action_processed._has_data():
                                return True

                            if self.dropped is not None and self.dropped._has_data():
                                return True

                            if self.forwarded is not None and self.forwarded._has_data():
                                return True

                            if self.locally_destined is not None and self.locally_destined._has_data():
                                return True

                            if self.total is not None and self.total._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:interfaces'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interface is not None:
                            for child_ref in self.interface:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interfaces is not None and self.interfaces._has_data():
                        return True

                    if self.summary is not None and self.summary._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Counters.PrefixFiltering.Interfaces']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.accesses is not None and self.accesses._has_data():
                    return True

                if self.interfaces is not None and self.interfaces._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.Counters.PrefixFiltering']['meta_info']


        class OutOfResource(object):
            """
            Out of resource counters
            
            .. attribute:: interfaces
            
            	Interface specific out of resource counters
            	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.OutOfResource.Interfaces>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.interfaces = RsvpStandby.Counters.OutOfResource.Interfaces()
                self.interfaces.parent = self


            class Interfaces(object):
                """
                Interface specific out of resource counters
                
                .. attribute:: interfaces
                
                	Table of interface specific out of resource counters
                	**type**\:   :py:class:`Interfaces_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.OutOfResource.Interfaces.Interfaces_>`
                
                .. attribute:: summary
                
                	Summary of out of resource counts for all interfaces
                	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.OutOfResource.Interfaces.Summary>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interfaces = RsvpStandby.Counters.OutOfResource.Interfaces.Interfaces_()
                    self.interfaces.parent = self
                    self.summary = RsvpStandby.Counters.OutOfResource.Interfaces.Summary()
                    self.summary.parent = self


                class Summary(object):
                    """
                    Summary of out of resource counts for all
                    interfaces
                    
                    .. attribute:: dropped_path_messages
                    
                    	Count of Path messages dropped due to an out of resource condition
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.dropped_path_messages = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:out-of-resource/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dropped_path_messages is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.Counters.OutOfResource.Interfaces.Summary']['meta_info']


                class Interfaces_(object):
                    """
                    Table of interface specific out of resource
                    counters
                    
                    .. attribute:: interface
                    
                    	Out of resource counters for a specific interface
                    	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.OutOfResource.Interfaces.Interfaces_.Interface>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.interface = YList()
                        self.interface.parent = self
                        self.interface.name = 'interface'


                    class Interface(object):
                        """
                        Out of resource counters for a specific
                        interface
                        
                        .. attribute:: interface_name  <key>
                        
                        	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: dropped_path_messages
                        
                        	Count of Path messages dropped due to an out of resource condition
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.interface_name = None
                            self.dropped_path_messages = None

                        @property
                        def _common_path(self):
                            if self.interface_name is None:
                                raise YPYModelError('Key property interface_name is None')

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:out-of-resource/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:interface[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.interface_name is not None:
                                return True

                            if self.dropped_path_messages is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Counters.OutOfResource.Interfaces.Interfaces_.Interface']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:out-of-resource/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:interfaces'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interface is not None:
                            for child_ref in self.interface:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.Counters.OutOfResource.Interfaces.Interfaces_']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:out-of-resource/Cisco-IOS-XR-ip-rsvp-oper:interfaces'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interfaces is not None and self.interfaces._has_data():
                        return True

                    if self.summary is not None and self.summary._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Counters.OutOfResource.Interfaces']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:out-of-resource'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interfaces is not None and self.interfaces._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.Counters.OutOfResource']['meta_info']


        class InterfaceEvents(object):
            """
            Event counters
            
            .. attribute:: interface_event
            
            	Event counters for an interface
            	**type**\: list of    :py:class:`InterfaceEvent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceEvents.InterfaceEvent>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.interface_event = YList()
                self.interface_event.parent = self
                self.interface_event.name = 'interface_event'


            class InterfaceEvent(object):
                """
                Event counters for an interface
                
                .. attribute:: interface_name  <key>
                
                	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: expired_paths
                
                	Counter for Expired Path states
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: expired_reservations
                
                	Counter for Expired Reservation states
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: nac_ks
                
                	Counter for NACKs received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_name = None
                    self.expired_paths = None
                    self.expired_reservations = None
                    self.nac_ks = None

                @property
                def _common_path(self):
                    if self.interface_name is None:
                        raise YPYModelError('Key property interface_name is None')

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:interface-events/Cisco-IOS-XR-ip-rsvp-oper:interface-event[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_name is not None:
                        return True

                    if self.expired_paths is not None:
                        return True

                    if self.expired_reservations is not None:
                        return True

                    if self.nac_ks is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Counters.InterfaceEvents.InterfaceEvent']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:interface-events'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interface_event is not None:
                    for child_ref in self.interface_event:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.Counters.InterfaceEvents']['meta_info']


        class Nsr(object):
            """
            Summary information for all RSVP NSR counters
            
            .. attribute:: last_cleared_timestamp
            
            	The timestamp, in seconds, when these statistics are cleared              since 00\:00\:00 UTC, January 1, 1970
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: last_idt_states
            
            	Last IDT number of states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: rsvp_process_role
            
            	Process role
            	**type**\:   :py:class:`RsvpProcRoleEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRoleEnum>`
            
            .. attribute:: total_deletions
            
            	Total number of deletions
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_id_ts
            
            	Total number of IDTs
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_nacks
            
            	Total number of NACKs
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: total_states
            
            	Total number of states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.last_cleared_timestamp = None
                self.last_idt_states = None
                self.rsvp_process_role = None
                self.total_deletions = None
                self.total_id_ts = None
                self.total_nacks = None
                self.total_states = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:nsr'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.last_cleared_timestamp is not None:
                    return True

                if self.last_idt_states is not None:
                    return True

                if self.rsvp_process_role is not None:
                    return True

                if self.total_deletions is not None:
                    return True

                if self.total_id_ts is not None:
                    return True

                if self.total_nacks is not None:
                    return True

                if self.total_states is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.Counters.Nsr']['meta_info']


        class Issu(object):
            """
            Summary information for all RSVP ISSU counters
            
            .. attribute:: last_cleared_timestamp
            
            	The timestamp, in seconds, when these statistics are cleared              since 00\:00\:00 UTC, January 1, 1970
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: last_idt_states
            
            	Last IDT number of states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: rsvp_process_role
            
            	Process role
            	**type**\:   :py:class:`RsvpProcRoleEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRoleEnum>`
            
            .. attribute:: total_deletions
            
            	Total number of deletions
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_id_ts
            
            	Total number of IDTs
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_nacks
            
            	Total number of NACKs
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: total_states
            
            	Total number of states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.last_cleared_timestamp = None
                self.last_idt_states = None
                self.rsvp_process_role = None
                self.total_deletions = None
                self.total_id_ts = None
                self.total_nacks = None
                self.total_states = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:issu'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.last_cleared_timestamp is not None:
                    return True

                if self.last_idt_states is not None:
                    return True

                if self.rsvp_process_role is not None:
                    return True

                if self.total_deletions is not None:
                    return True

                if self.total_id_ts is not None:
                    return True

                if self.total_nacks is not None:
                    return True

                if self.total_states is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.Counters.Issu']['meta_info']


        class Database(object):
            """
            Summary information for all RSVP database
            counters
            
            .. attribute:: incoming_paths
            
            	Number of locally created and incoming path states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: incoming_reservations
            
            	Number of locally created and incoming reservation states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: interfaces
            
            	Number of Interfaces
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_paths
            
            	Number of outgoing path states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_reservations
            
            	Number of outgoing reservation states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: sessions
            
            	Number of sessions
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.incoming_paths = None
                self.incoming_reservations = None
                self.interfaces = None
                self.outgoing_paths = None
                self.outgoing_reservations = None
                self.sessions = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:database'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.incoming_paths is not None:
                    return True

                if self.incoming_reservations is not None:
                    return True

                if self.interfaces is not None:
                    return True

                if self.outgoing_paths is not None:
                    return True

                if self.outgoing_reservations is not None:
                    return True

                if self.sessions is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.Counters.Database']['meta_info']


        class EventSyncs(object):
            """
            Table containing event sync counters
            
            .. attribute:: event_sync
            
            	Event sync counters
            	**type**\: list of    :py:class:`EventSync <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.EventSyncs.EventSync>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.event_sync = YList()
                self.event_sync.parent = self
                self.event_sync.name = 'event_sync'


            class EventSync(object):
                """
                Event sync counters
                
                .. attribute:: interface_name  <key>
                
                	Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: expired_paths
                
                	Counter for Expired Path states
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: expired_reservations
                
                	Counter for Expired Reservation states
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: nac_ks
                
                	Counter for NACKs received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_name = None
                    self.expired_paths = None
                    self.expired_reservations = None
                    self.nac_ks = None

                @property
                def _common_path(self):
                    if self.interface_name is None:
                        raise YPYModelError('Key property interface_name is None')

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:event-syncs/Cisco-IOS-XR-ip-rsvp-oper:event-sync[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_name is not None:
                        return True

                    if self.expired_paths is not None:
                        return True

                    if self.expired_reservations is not None:
                        return True

                    if self.nac_ks is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Counters.EventSyncs.EventSync']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:event-syncs'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.event_sync is not None:
                    for child_ref in self.event_sync:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.Counters.EventSyncs']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:counters'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.database is not None and self.database._has_data():
                return True

            if self.event_syncs is not None and self.event_syncs._has_data():
                return True

            if self.interface_events is not None and self.interface_events._has_data():
                return True

            if self.interface_messages is not None and self.interface_messages._has_data():
                return True

            if self.issu is not None and self.issu._has_data():
                return True

            if self.message_summary is not None and self.message_summary._has_data():
                return True

            if self.nsr is not None and self.nsr._has_data():
                return True

            if self.out_of_resource is not None and self.out_of_resource._has_data():
                return True

            if self.prefix_filtering is not None and self.prefix_filtering._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.Counters']['meta_info']


    class InterfaceDetaileds(object):
        """
        Table of detailed info about RSVP\-enabled
        interfaces
        
        .. attribute:: interface_detailed
        
        	Detailed info about an RSVP\-enabled interface
        	**type**\: list of    :py:class:`InterfaceDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.interface_detailed = YList()
            self.interface_detailed.parent = self
            self.interface_detailed.name = 'interface_detailed'


        class InterfaceDetailed(object):
            """
            Detailed info about an RSVP\-enabled interface
            
            .. attribute:: interface_name  <key>
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: ack_hold_time
            
            	ACK hold time in msec
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: ack_max_size
            
            	Max size for ACK message
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:   :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation>`
            
            .. attribute:: bundle_message_max_size
            
            	Max size in bytes of a single Bundle message
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: expiry_drops_tolerated
            
            	Number of missed messages tolerated
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: expiry_interval
            
            	Expiry interval in msecs
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: millisecond
            
            .. attribute:: expiry_states
            
            	Number of states for expiry check
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: expiry_timer_state
            
            	Expiry timer state
            	**type**\:   :py:class:`RsvpTimerStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerStateEnum>`
            
            .. attribute:: flags
            
            	Interface flags
            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed.Flags>`
            
            .. attribute:: integrity_receive_password
            
            	Integrity receive password
            	**type**\:  str
            
            	**length:** 0..40
            
            .. attribute:: integrity_receive_password_optional
            
            	Integrity recv password optional
            	**type**\:  int
            
            	**range:** 0..255
            
            .. attribute:: integrity_send_password
            
            	Integrity send password
            	**type**\:  str
            
            	**length:** 0..40
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\:  str
            
            .. attribute:: neighbor_array
            
            	Neighbor array
            	**type**\: list of    :py:class:`NeighborArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray>`
            
            .. attribute:: out_of_band_expiry_drops_tolerated
            
            	Number of out\-of\-band missed messages tolerated
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: out_of_band_refresh_interval
            
            	Out\-of\-band Refresh interval in msecs
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: pacing_interval
            
            	Pacing interval in msecs
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: pacing_message_rate
            
            	No. of messages per interval
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: pacing_messages
            
            	Number of messages deferred for pacing
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: pacing_timer_state
            
            	State of pacing timer
            	**type**\:   :py:class:`RsvpTimerStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerStateEnum>`
            
            .. attribute:: refresh_interval
            
            	Refresh interval in msecs
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: millisecond
            
            .. attribute:: refresh_timer_state
            
            	Refresh timer state
            	**type**\:   :py:class:`RsvpTimerStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerStateEnum>`
            
            .. attribute:: retransmit_time
            
            	Retransmit time in msec
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: signalling_ip_tos
            
            	IP TOS (precedence/DSCP) to use in signalling messages
            	**type**\:  int
            
            	**range:** 0..255
            
            .. attribute:: summary_refresh_max_size
            
            	Max size in bytes of a single SRefresh
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: summary_refresh_timer_state
            
            	Summary refresh timer state
            	**type**\:   :py:class:`RsvpTimerStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerStateEnum>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.interface_name = None
                self.ack_hold_time = None
                self.ack_max_size = None
                self.bandwidth_information = RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation()
                self.bandwidth_information.parent = self
                self.bundle_message_max_size = None
                self.expiry_drops_tolerated = None
                self.expiry_interval = None
                self.expiry_states = None
                self.expiry_timer_state = None
                self.flags = RsvpStandby.InterfaceDetaileds.InterfaceDetailed.Flags()
                self.flags.parent = self
                self.integrity_receive_password = None
                self.integrity_receive_password_optional = None
                self.integrity_send_password = None
                self.interface_name_xr = None
                self.neighbor_array = YList()
                self.neighbor_array.parent = self
                self.neighbor_array.name = 'neighbor_array'
                self.out_of_band_expiry_drops_tolerated = None
                self.out_of_band_refresh_interval = None
                self.pacing_interval = None
                self.pacing_message_rate = None
                self.pacing_messages = None
                self.pacing_timer_state = None
                self.refresh_interval = None
                self.refresh_timer_state = None
                self.retransmit_time = None
                self.signalling_ip_tos = None
                self.summary_refresh_max_size = None
                self.summary_refresh_timer_state = None


            class BandwidthInformation(object):
                """
                Interface bandwidth information
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:   :py:class:`RsvpMgmtDsteModesEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModesEnum>`
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:   :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:   :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.dste_mode = None
                    self.pre_standard_dste_interface = RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self.standard_dste_interface = RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self


                class PreStandardDsteInterface(object):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_subpool_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:pre-standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_subpool_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_subpool_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface']['meta_info']


                class StandardDsteInterface(object):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc0_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc1_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_pool0_bandwidth is not None:
                            return True

                        if self.max_pool1_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:bandwidth-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dste_mode is not None:
                        return True

                    if self.pre_standard_dste_interface is not None and self.pre_standard_dste_interface._has_data():
                        return True

                    if self.standard_dste_interface is not None and self.standard_dste_interface._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation']['meta_info']


            class Flags(object):
                """
                Interface flags
                
                .. attribute:: is_backup_tunnel
                
                	This is backup tunnel
                	**type**\:  bool
                
                .. attribute:: is_interface_created
                
                	Interface is created
                	**type**\:  bool
                
                .. attribute:: is_interface_down
                
                	Interface is DOWN
                	**type**\:  bool
                
                .. attribute:: is_message_bundling_enabled
                
                	Use bundling for outgoing RSVP messages
                	**type**\:  bool
                
                .. attribute:: is_mpls_enabled
                
                	MPLS enabled on interface
                	**type**\:  bool
                
                .. attribute:: is_non_default_vrf
                
                	Interface is defined in non\-Default VRF
                	**type**\:  bool
                
                .. attribute:: is_pacing_enabled
                
                	Message pacing enabled
                	**type**\:  bool
                
                .. attribute:: is_refresh_enabled
                
                	Refresh enabled
                	**type**\:  bool
                
                .. attribute:: is_refresh_reduction_enabled
                
                	Refresh Reduction enabled
                	**type**\:  bool
                
                .. attribute:: is_rel_s_refresh_enabled
                
                	Use reliable xmt for SRefresh
                	**type**\:  bool
                
                .. attribute:: is_rsvp_configured
                
                	RSVP explicitly configured
                	**type**\:  bool
                
                .. attribute:: is_s_refresh_enabled
                
                	Summary Refresh enabled
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_backup_tunnel = None
                    self.is_interface_created = None
                    self.is_interface_down = None
                    self.is_message_bundling_enabled = None
                    self.is_mpls_enabled = None
                    self.is_non_default_vrf = None
                    self.is_pacing_enabled = None
                    self.is_refresh_enabled = None
                    self.is_refresh_reduction_enabled = None
                    self.is_rel_s_refresh_enabled = None
                    self.is_rsvp_configured = None
                    self.is_s_refresh_enabled = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_backup_tunnel is not None:
                        return True

                    if self.is_interface_created is not None:
                        return True

                    if self.is_interface_down is not None:
                        return True

                    if self.is_message_bundling_enabled is not None:
                        return True

                    if self.is_mpls_enabled is not None:
                        return True

                    if self.is_non_default_vrf is not None:
                        return True

                    if self.is_pacing_enabled is not None:
                        return True

                    if self.is_refresh_enabled is not None:
                        return True

                    if self.is_refresh_reduction_enabled is not None:
                        return True

                    if self.is_rel_s_refresh_enabled is not None:
                        return True

                    if self.is_rsvp_configured is not None:
                        return True

                    if self.is_s_refresh_enabled is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.InterfaceDetaileds.InterfaceDetailed.Flags']['meta_info']


            class NeighborArray(object):
                """
                Neighbor array
                
                .. attribute:: expiry_time
                
                	Expiry time
                	**type**\:   :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime>`
                
                .. attribute:: is_neighbor_refresh_reduction_capable
                
                	Is neighbor capable of Refresh Reduction
                	**type**\:  bool
                
                .. attribute:: message_ids
                
                	Number of MessageIDs
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_message_id
                
                	List of Neighbor MessageIDs
                	**type**\: list of    :py:class:`NeighborMessageId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray.NeighborMessageId>`
                
                .. attribute:: outgoing_states
                
                	Number of outgoing states to the neighbour
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.expiry_time = RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime()
                    self.expiry_time.parent = self
                    self.is_neighbor_refresh_reduction_capable = None
                    self.message_ids = None
                    self.neighbor_address = None
                    self.neighbor_message_id = YList()
                    self.neighbor_message_id.parent = self
                    self.neighbor_message_id.name = 'neighbor_message_id'
                    self.outgoing_states = None


                class ExpiryTime(object):
                    """
                    Expiry time
                    
                    .. attribute:: nanoseconds
                    
                    	Time Value in Nano\-seconds
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	Time Value in Seconds
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:expiry-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime']['meta_info']


                class NeighborMessageId(object):
                    """
                    List of Neighbor MessageIDs
                    
                    .. attribute:: message_id
                    
                    	Message ID
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.message_id = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:neighbor-message-id'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.message_id is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray.NeighborMessageId']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:neighbor-array'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.expiry_time is not None and self.expiry_time._has_data():
                        return True

                    if self.is_neighbor_refresh_reduction_capable is not None:
                        return True

                    if self.message_ids is not None:
                        return True

                    if self.neighbor_address is not None:
                        return True

                    if self.neighbor_message_id is not None:
                        for child_ref in self.neighbor_message_id:
                            if child_ref._has_data():
                                return True

                    if self.outgoing_states is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray']['meta_info']

            @property
            def _common_path(self):
                if self.interface_name is None:
                    raise YPYModelError('Key property interface_name is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:interface-detaileds/Cisco-IOS-XR-ip-rsvp-oper:interface-detailed[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interface_name is not None:
                    return True

                if self.ack_hold_time is not None:
                    return True

                if self.ack_max_size is not None:
                    return True

                if self.bandwidth_information is not None and self.bandwidth_information._has_data():
                    return True

                if self.bundle_message_max_size is not None:
                    return True

                if self.expiry_drops_tolerated is not None:
                    return True

                if self.expiry_interval is not None:
                    return True

                if self.expiry_states is not None:
                    return True

                if self.expiry_timer_state is not None:
                    return True

                if self.flags is not None and self.flags._has_data():
                    return True

                if self.integrity_receive_password is not None:
                    return True

                if self.integrity_receive_password_optional is not None:
                    return True

                if self.integrity_send_password is not None:
                    return True

                if self.interface_name_xr is not None:
                    return True

                if self.neighbor_array is not None:
                    for child_ref in self.neighbor_array:
                        if child_ref._has_data():
                            return True

                if self.out_of_band_expiry_drops_tolerated is not None:
                    return True

                if self.out_of_band_refresh_interval is not None:
                    return True

                if self.pacing_interval is not None:
                    return True

                if self.pacing_message_rate is not None:
                    return True

                if self.pacing_messages is not None:
                    return True

                if self.pacing_timer_state is not None:
                    return True

                if self.refresh_interval is not None:
                    return True

                if self.refresh_timer_state is not None:
                    return True

                if self.retransmit_time is not None:
                    return True

                if self.signalling_ip_tos is not None:
                    return True

                if self.summary_refresh_max_size is not None:
                    return True

                if self.summary_refresh_timer_state is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.InterfaceDetaileds.InterfaceDetailed']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:interface-detaileds'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.interface_detailed is not None:
                for child_ref in self.interface_detailed:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.InterfaceDetaileds']['meta_info']


    class GracefulRestart(object):
        """
        Info about graceful\-restart
        
        .. attribute:: global_neighbors
        
        	Global neighbor count
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: hello_interval
        
        	Interval at which hello messages are sent
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: is_gr_enabled
        
        	Whether GR is enabled
        	**type**\:  bool
        
        .. attribute:: is_recovery_timer_running
        
        	Whether recovery timer is running
        	**type**\:  bool
        
        .. attribute:: local_node_address
        
        	Local node address
        	**type**\: list of    :py:class:`LocalNodeAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GracefulRestart.LocalNodeAddress>`
        
        .. attribute:: missed_hellos
        
        	Max number of hellos missed before hellos declared down
        	**type**\:  int
        
        	**range:** 0..255
        
        .. attribute:: pending_states
        
        	Total number of pending states
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: recovery_time
        
        	Recovery time (milliseconds)
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        	**units**\: millisecond
        
        .. attribute:: recovery_time_left
        
        	How much recovery timer remains
        	**type**\:   :py:class:`RecoveryTimeLeft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GracefulRestart.RecoveryTimeLeft>`
        
        .. attribute:: recovery_timer_exp_time
        
        	Time at which recovery timer will expire
        	**type**\:   :py:class:`RecoveryTimerExpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GracefulRestart.RecoveryTimerExpTime>`
        
        .. attribute:: restart_time
        
        	Restart time (milliseconds)
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        	**units**\: millisecond
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.global_neighbors = None
            self.hello_interval = None
            self.is_gr_enabled = None
            self.is_recovery_timer_running = None
            self.local_node_address = YList()
            self.local_node_address.parent = self
            self.local_node_address.name = 'local_node_address'
            self.missed_hellos = None
            self.pending_states = None
            self.recovery_time = None
            self.recovery_time_left = RsvpStandby.GracefulRestart.RecoveryTimeLeft()
            self.recovery_time_left.parent = self
            self.recovery_timer_exp_time = RsvpStandby.GracefulRestart.RecoveryTimerExpTime()
            self.recovery_timer_exp_time.parent = self
            self.restart_time = None


        class RecoveryTimeLeft(object):
            """
            How much recovery timer remains
            
            .. attribute:: nanoseconds
            
            	Time Value in Nano\-seconds
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: nanosecond
            
            .. attribute:: seconds
            
            	Time Value in Seconds
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: second
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.nanoseconds = None
                self.seconds = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:graceful-restart/Cisco-IOS-XR-ip-rsvp-oper:recovery-time-left'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.nanoseconds is not None:
                    return True

                if self.seconds is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.GracefulRestart.RecoveryTimeLeft']['meta_info']


        class RecoveryTimerExpTime(object):
            """
            Time at which recovery timer will expire
            
            .. attribute:: nanoseconds
            
            	Time Value in Nano\-seconds
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: nanosecond
            
            .. attribute:: seconds
            
            	Time Value in Seconds
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: second
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.nanoseconds = None
                self.seconds = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:graceful-restart/Cisco-IOS-XR-ip-rsvp-oper:recovery-timer-exp-time'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.nanoseconds is not None:
                    return True

                if self.seconds is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.GracefulRestart.RecoveryTimerExpTime']['meta_info']


        class LocalNodeAddress(object):
            """
            Local node address
            
            .. attribute:: application_type
            
            	GR local node\-id app type
            	**type**\:   :py:class:`RsvpMgmtGrAppEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGrAppEnum>`
            
            .. attribute:: local_node_ip_address
            
            	Local node address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.application_type = None
                self.local_node_ip_address = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:graceful-restart/Cisco-IOS-XR-ip-rsvp-oper:local-node-address'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.application_type is not None:
                    return True

                if self.local_node_ip_address is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.GracefulRestart.LocalNodeAddress']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:graceful-restart'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.global_neighbors is not None:
                return True

            if self.hello_interval is not None:
                return True

            if self.is_gr_enabled is not None:
                return True

            if self.is_recovery_timer_running is not None:
                return True

            if self.local_node_address is not None:
                for child_ref in self.local_node_address:
                    if child_ref._has_data():
                        return True

            if self.missed_hellos is not None:
                return True

            if self.pending_states is not None:
                return True

            if self.recovery_time is not None:
                return True

            if self.recovery_time_left is not None and self.recovery_time_left._has_data():
                return True

            if self.recovery_timer_exp_time is not None and self.recovery_timer_exp_time._has_data():
                return True

            if self.restart_time is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.GracefulRestart']['meta_info']


    class HelloInterfaceInstanceBriefs(object):
        """
        Table of brief info about i/f\-based hello
        instances
        
        .. attribute:: hello_interface_instance_brief
        
        	Brief info for a single interface\-based hello instance
        	**type**\: list of    :py:class:`HelloInterfaceInstanceBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.hello_interface_instance_brief = YList()
            self.hello_interface_instance_brief.parent = self
            self.hello_interface_instance_brief.name = 'hello_interface_instance_brief'


        class HelloInterfaceInstanceBrief(object):
            """
            Brief info for a single interface\-based hello
            instance
            
            .. attribute:: destination_address  <key>
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_address  <key>
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:   :py:class:`RsvpMgmtHelloInstanceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstanceEnum>`
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.source_address = None
                self.destination_address_xr = None
                self.hello_interface = None
                self.instance_type = None
                self.source_address_xr = None

            @property
            def _common_path(self):
                if self.destination_address is None:
                    raise YPYModelError('Key property destination_address is None')
                if self.source_address is None:
                    raise YPYModelError('Key property source_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:hello-interface-instance-briefs/Cisco-IOS-XR-ip-rsvp-oper:hello-interface-instance-brief[Cisco-IOS-XR-ip-rsvp-oper:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ip-rsvp-oper:source-address = ' + str(self.source_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.destination_address_xr is not None:
                    return True

                if self.hello_interface is not None:
                    return True

                if self.instance_type is not None:
                    return True

                if self.source_address_xr is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.HelloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:hello-interface-instance-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.hello_interface_instance_brief is not None:
                for child_ref in self.hello_interface_instance_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.HelloInterfaceInstanceBriefs']['meta_info']


    class HelloInterfaceInstanceDetails(object):
        """
        Table of detailed info about i/f\-based hello
        instances
        
        .. attribute:: hello_interface_instance_detail
        
        	Detailed info for a single interface\-based hello instance
        	**type**\: list of    :py:class:`HelloInterfaceInstanceDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.hello_interface_instance_detail = YList()
            self.hello_interface_instance_detail.parent = self
            self.hello_interface_instance_detail.name = 'hello_interface_instance_detail'


        class HelloInterfaceInstanceDetail(object):
            """
            Detailed info for a single interface\-based
            hello instance
            
            .. attribute:: destination_address  <key>
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_address  <key>
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_instance
            
            	Destination Instance
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: hello_global_neighbor_id
            
            	Global Neighbor ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: hello_messages_received
            
            	Number of hello messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: hello_messages_sent
            
            	Number of hello messages sent
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:   :py:class:`RsvpMgmtHelloInstanceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstanceEnum>`
            
            .. attribute:: last_message_sent_time
            
            	Last Ack/msg sent time
            	**type**\:   :py:class:`LastMessageSentTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime>`
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_instance
            
            	Source Instance
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.source_address = None
                self.destination_address_xr = None
                self.destination_instance = None
                self.hello_global_neighbor_id = None
                self.hello_interface = None
                self.hello_messages_received = None
                self.hello_messages_sent = None
                self.instance_type = None
                self.last_message_sent_time = RsvpStandby.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime()
                self.last_message_sent_time.parent = self
                self.source_address_xr = None
                self.source_instance = None


            class LastMessageSentTime(object):
                """
                Last Ack/msg sent time
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:last-message-sent-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime']['meta_info']

            @property
            def _common_path(self):
                if self.destination_address is None:
                    raise YPYModelError('Key property destination_address is None')
                if self.source_address is None:
                    raise YPYModelError('Key property source_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:hello-interface-instance-details/Cisco-IOS-XR-ip-rsvp-oper:hello-interface-instance-detail[Cisco-IOS-XR-ip-rsvp-oper:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ip-rsvp-oper:source-address = ' + str(self.source_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.destination_address_xr is not None:
                    return True

                if self.destination_instance is not None:
                    return True

                if self.hello_global_neighbor_id is not None:
                    return True

                if self.hello_interface is not None:
                    return True

                if self.hello_messages_received is not None:
                    return True

                if self.hello_messages_sent is not None:
                    return True

                if self.instance_type is not None:
                    return True

                if self.last_message_sent_time is not None and self.last_message_sent_time._has_data():
                    return True

                if self.source_address_xr is not None:
                    return True

                if self.source_instance is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:hello-interface-instance-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.hello_interface_instance_detail is not None:
                for child_ref in self.hello_interface_instance_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.HelloInterfaceInstanceDetails']['meta_info']


    class InterfaceNeighborDetails(object):
        """
        Table of detailed info about I/F neighbors
        
        .. attribute:: interface_neighbor_detail
        
        	Detailed info for a single interface neighbor
        	**type**\: list of    :py:class:`InterfaceNeighborDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceNeighborDetails.InterfaceNeighborDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.interface_neighbor_detail = YList()
            self.interface_neighbor_detail.parent = self
            self.interface_neighbor_detail.name = 'interface_neighbor_detail'


        class InterfaceNeighborDetail(object):
            """
            Detailed info for a single interface neighbor
            
            .. attribute:: neighbor_address  <key>
            
            	Address of global neighbor
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_neighbor_list_detail
            
            	Detail list of I/F Neighbors
            	**type**\: list of    :py:class:`InterfaceNeighborListDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceNeighborDetails.InterfaceNeighborDetail.InterfaceNeighborListDetail>`
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.neighbor_address = None
                self.interface_neighbor_list_detail = YList()
                self.interface_neighbor_list_detail.parent = self
                self.interface_neighbor_list_detail.name = 'interface_neighbor_list_detail'
                self.node_address = None


            class InterfaceNeighborListDetail(object):
                """
                Detail list of I/F Neighbors
                
                .. attribute:: interface_neighbor_address
                
                	Interface Neighbor address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: is_rr_enabled
                
                	Is Neighbor's RR enable
                	**type**\:  bool
                
                .. attribute:: neighbor_epoch
                
                	Neighbor's epoch value
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: neighbor_interface_name
                
                	Neighbor's Interface handle
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: out_of_order_messages
                
                	Number of out of order msgs
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: retransmitted_messages
                
                	Number of retransmitted msgs
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_neighbor_address = None
                    self.is_rr_enabled = None
                    self.neighbor_epoch = None
                    self.neighbor_interface_name = None
                    self.out_of_order_messages = None
                    self.retransmitted_messages = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-list-detail'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_neighbor_address is not None:
                        return True

                    if self.is_rr_enabled is not None:
                        return True

                    if self.neighbor_epoch is not None:
                        return True

                    if self.neighbor_interface_name is not None:
                        return True

                    if self.out_of_order_messages is not None:
                        return True

                    if self.retransmitted_messages is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.InterfaceNeighborDetails.InterfaceNeighborDetail.InterfaceNeighborListDetail']['meta_info']

            @property
            def _common_path(self):
                if self.neighbor_address is None:
                    raise YPYModelError('Key property neighbor_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-details/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-detail[Cisco-IOS-XR-ip-rsvp-oper:neighbor-address = ' + str(self.neighbor_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.neighbor_address is not None:
                    return True

                if self.interface_neighbor_list_detail is not None:
                    for child_ref in self.interface_neighbor_list_detail:
                        if child_ref._has_data():
                            return True

                if self.node_address is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.InterfaceNeighborDetails.InterfaceNeighborDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.interface_neighbor_detail is not None:
                for child_ref in self.interface_neighbor_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.InterfaceNeighborDetails']['meta_info']


    class Nsr(object):
        """
        RSVP NSR information
        
        .. attribute:: status
        
        	RSVP NSR status information
        	**type**\:   :py:class:`Status <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Nsr.Status>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.status = RsvpStandby.Nsr.Status()
            self.status.parent = self


        class Status(object):
            """
            RSVP NSR status information
            
            .. attribute:: idt_status
            
            	IDT status
            	**type**\:   :py:class:`IdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Nsr.Status.IdtStatus>`
            
            .. attribute:: previous_idt_status
            
            	Previous IDT status
            	**type**\:   :py:class:`PreviousIdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Nsr.Status.PreviousIdtStatus>`
            
            .. attribute:: role
            
            	Process role
            	**type**\:   :py:class:`RsvpProcRoleEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRoleEnum>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.idt_status = RsvpStandby.Nsr.Status.IdtStatus()
                self.idt_status.parent = self
                self.previous_idt_status = RsvpStandby.Nsr.Status.PreviousIdtStatus()
                self.previous_idt_status.parent = self
                self.role = None


            class IdtStatus(object):
                """
                IDT status
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:   :py:class:`RsvpProcNsrNotReadyReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReasonEnum>`
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:   :py:class:`RsvpSyncStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatusEnum>`
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.declare_time = None
                    self.idt_end_time = None
                    self.idt_start_time = None
                    self.not_ready_reason = None
                    self.sync_status = None
                    self.withdraw_time = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:nsr/Cisco-IOS-XR-ip-rsvp-oper:status/Cisco-IOS-XR-ip-rsvp-oper:idt-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.declare_time is not None:
                        return True

                    if self.idt_end_time is not None:
                        return True

                    if self.idt_start_time is not None:
                        return True

                    if self.not_ready_reason is not None:
                        return True

                    if self.sync_status is not None:
                        return True

                    if self.withdraw_time is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Nsr.Status.IdtStatus']['meta_info']


            class PreviousIdtStatus(object):
                """
                Previous IDT status
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:   :py:class:`RsvpProcNsrNotReadyReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReasonEnum>`
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:   :py:class:`RsvpSyncStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatusEnum>`
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.declare_time = None
                    self.idt_end_time = None
                    self.idt_start_time = None
                    self.not_ready_reason = None
                    self.sync_status = None
                    self.withdraw_time = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:nsr/Cisco-IOS-XR-ip-rsvp-oper:status/Cisco-IOS-XR-ip-rsvp-oper:previous-idt-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.declare_time is not None:
                        return True

                    if self.idt_end_time is not None:
                        return True

                    if self.idt_start_time is not None:
                        return True

                    if self.not_ready_reason is not None:
                        return True

                    if self.sync_status is not None:
                        return True

                    if self.withdraw_time is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Nsr.Status.PreviousIdtStatus']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:nsr/Cisco-IOS-XR-ip-rsvp-oper:status'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.idt_status is not None and self.idt_status._has_data():
                    return True

                if self.previous_idt_status is not None and self.previous_idt_status._has_data():
                    return True

                if self.role is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.Nsr.Status']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:nsr'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.status is not None and self.status._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.Nsr']['meta_info']


    class Summary(object):
        """
        RSVP summary information
        
        .. attribute:: database_counters
        
        	All database counters
        	**type**\:   :py:class:`DatabaseCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary.DatabaseCounters>`
        
        .. attribute:: interfaces
        
        	Total interfaces
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: issu_status
        
        	Issu status
        	**type**\:   :py:class:`IssuStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary.IssuStatus>`
        
        .. attribute:: ls_ps
        
        	Total LSPs
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: nsr_status
        
        	NSR status
        	**type**\:   :py:class:`NsrStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary.NsrStatus>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.database_counters = RsvpStandby.Summary.DatabaseCounters()
            self.database_counters.parent = self
            self.interfaces = None
            self.issu_status = RsvpStandby.Summary.IssuStatus()
            self.issu_status.parent = self
            self.ls_ps = None
            self.nsr_status = RsvpStandby.Summary.NsrStatus()
            self.nsr_status.parent = self


        class IssuStatus(object):
            """
            Issu status
            
            .. attribute:: idt_status
            
            	IDT status
            	**type**\:   :py:class:`IdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary.IssuStatus.IdtStatus>`
            
            .. attribute:: previous_idt_status
            
            	Previous IDT status
            	**type**\:   :py:class:`PreviousIdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary.IssuStatus.PreviousIdtStatus>`
            
            .. attribute:: role
            
            	Process role
            	**type**\:   :py:class:`RsvpProcRoleEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRoleEnum>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.idt_status = RsvpStandby.Summary.IssuStatus.IdtStatus()
                self.idt_status.parent = self
                self.previous_idt_status = RsvpStandby.Summary.IssuStatus.PreviousIdtStatus()
                self.previous_idt_status.parent = self
                self.role = None


            class IdtStatus(object):
                """
                IDT status
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:   :py:class:`RsvpProcNsrNotReadyReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReasonEnum>`
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:   :py:class:`RsvpSyncStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatusEnum>`
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.declare_time = None
                    self.idt_end_time = None
                    self.idt_start_time = None
                    self.not_ready_reason = None
                    self.sync_status = None
                    self.withdraw_time = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:issu-status/Cisco-IOS-XR-ip-rsvp-oper:idt-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.declare_time is not None:
                        return True

                    if self.idt_end_time is not None:
                        return True

                    if self.idt_start_time is not None:
                        return True

                    if self.not_ready_reason is not None:
                        return True

                    if self.sync_status is not None:
                        return True

                    if self.withdraw_time is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Summary.IssuStatus.IdtStatus']['meta_info']


            class PreviousIdtStatus(object):
                """
                Previous IDT status
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:   :py:class:`RsvpProcNsrNotReadyReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReasonEnum>`
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:   :py:class:`RsvpSyncStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatusEnum>`
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.declare_time = None
                    self.idt_end_time = None
                    self.idt_start_time = None
                    self.not_ready_reason = None
                    self.sync_status = None
                    self.withdraw_time = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:issu-status/Cisco-IOS-XR-ip-rsvp-oper:previous-idt-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.declare_time is not None:
                        return True

                    if self.idt_end_time is not None:
                        return True

                    if self.idt_start_time is not None:
                        return True

                    if self.not_ready_reason is not None:
                        return True

                    if self.sync_status is not None:
                        return True

                    if self.withdraw_time is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Summary.IssuStatus.PreviousIdtStatus']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:issu-status'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.idt_status is not None and self.idt_status._has_data():
                    return True

                if self.previous_idt_status is not None and self.previous_idt_status._has_data():
                    return True

                if self.role is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.Summary.IssuStatus']['meta_info']


        class NsrStatus(object):
            """
            NSR status
            
            .. attribute:: idt_status
            
            	IDT status
            	**type**\:   :py:class:`IdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary.NsrStatus.IdtStatus>`
            
            .. attribute:: previous_idt_status
            
            	Previous IDT status
            	**type**\:   :py:class:`PreviousIdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary.NsrStatus.PreviousIdtStatus>`
            
            .. attribute:: role
            
            	Process role
            	**type**\:   :py:class:`RsvpProcRoleEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRoleEnum>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.idt_status = RsvpStandby.Summary.NsrStatus.IdtStatus()
                self.idt_status.parent = self
                self.previous_idt_status = RsvpStandby.Summary.NsrStatus.PreviousIdtStatus()
                self.previous_idt_status.parent = self
                self.role = None


            class IdtStatus(object):
                """
                IDT status
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:   :py:class:`RsvpProcNsrNotReadyReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReasonEnum>`
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:   :py:class:`RsvpSyncStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatusEnum>`
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.declare_time = None
                    self.idt_end_time = None
                    self.idt_start_time = None
                    self.not_ready_reason = None
                    self.sync_status = None
                    self.withdraw_time = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:nsr-status/Cisco-IOS-XR-ip-rsvp-oper:idt-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.declare_time is not None:
                        return True

                    if self.idt_end_time is not None:
                        return True

                    if self.idt_start_time is not None:
                        return True

                    if self.not_ready_reason is not None:
                        return True

                    if self.sync_status is not None:
                        return True

                    if self.withdraw_time is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Summary.NsrStatus.IdtStatus']['meta_info']


            class PreviousIdtStatus(object):
                """
                Previous IDT status
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:   :py:class:`RsvpProcNsrNotReadyReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReasonEnum>`
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:   :py:class:`RsvpSyncStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatusEnum>`
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.declare_time = None
                    self.idt_end_time = None
                    self.idt_start_time = None
                    self.not_ready_reason = None
                    self.sync_status = None
                    self.withdraw_time = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:nsr-status/Cisco-IOS-XR-ip-rsvp-oper:previous-idt-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.declare_time is not None:
                        return True

                    if self.idt_end_time is not None:
                        return True

                    if self.idt_start_time is not None:
                        return True

                    if self.not_ready_reason is not None:
                        return True

                    if self.sync_status is not None:
                        return True

                    if self.withdraw_time is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Summary.NsrStatus.PreviousIdtStatus']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:nsr-status'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.idt_status is not None and self.idt_status._has_data():
                    return True

                if self.previous_idt_status is not None and self.previous_idt_status._has_data():
                    return True

                if self.role is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.Summary.NsrStatus']['meta_info']


        class DatabaseCounters(object):
            """
            All database counters
            
            .. attribute:: incoming_paths
            
            	Number of locally created and incoming path states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: incoming_reservations
            
            	Number of locally created and incoming reservation states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: interfaces
            
            	Number of Interfaces
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_paths
            
            	Number of outgoing path states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_reservations
            
            	Number of outgoing reservation states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: sessions
            
            	Number of sessions
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.incoming_paths = None
                self.incoming_reservations = None
                self.interfaces = None
                self.outgoing_paths = None
                self.outgoing_reservations = None
                self.sessions = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:database-counters'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.incoming_paths is not None:
                    return True

                if self.incoming_reservations is not None:
                    return True

                if self.interfaces is not None:
                    return True

                if self.outgoing_paths is not None:
                    return True

                if self.outgoing_reservations is not None:
                    return True

                if self.sessions is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.Summary.DatabaseCounters']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:summary'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.database_counters is not None and self.database_counters._has_data():
                return True

            if self.interfaces is not None:
                return True

            if self.issu_status is not None and self.issu_status._has_data():
                return True

            if self.ls_ps is not None:
                return True

            if self.nsr_status is not None and self.nsr_status._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.Summary']['meta_info']


    class Frrs(object):
        """
        Table of detailed info about Fast Re\-route
        states
        
        .. attribute:: frr
        
        	Detailed info for a single Fast Re\-route state
        	**type**\: list of    :py:class:`Frr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.frr = YList()
            self.frr.parent = self
            self.frr.name = 'frr'


        class Frr(object):
            """
            Detailed info for a single Fast Re\-route state
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: path_status
            
            	RSVP FRR Path States
            	**type**\:   :py:class:`RsvpMgmtFrrStateEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFrrStateEnumEnum>`
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: reservation_status
            
            	RSVP FRR Reservation States
            	**type**\:   :py:class:`RsvpMgmtFrrStateEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFrrStateEnumEnum>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr.Session>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.extended_tunnel_id = None
                self.p2mp_id = None
                self.path_status = None
                self.protocol = None
                self.reservation_status = None
                self.s2l_sub_lsp = RsvpStandby.Frrs.Frr.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = RsvpStandby.Frrs.Frr.Session()
                self.session.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.sub_group_id = None
                self.sub_group_origin = None
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = RsvpStandby.Frrs.Frr.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.Frrs.Frr.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Frrs.Frr.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.Frrs.Frr.S2LSubLsp']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.path_status is not None:
                    return True

                if self.protocol is not None:
                    return True

                if self.reservation_status is not None:
                    return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.Frrs.Frr']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:frrs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.frr is not None:
                for child_ref in self.frr:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.Frrs']['meta_info']


    class RequestBriefs(object):
        """
        Table of brief info about requests
        
        .. attribute:: request_brief
        
        	Brief info for a request
        	**type**\: list of    :py:class:`RequestBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.request_brief = YList()
            self.request_brief.parent = self
            self.request_brief.name = 'request_brief'


        class RequestBrief(object):
            """
            Brief info for a request
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:   :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Filter>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:   :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Information
            	**type**\:   :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec>`
            
            .. attribute:: output_interface
            
            	Output Interface
            	**type**\:  str
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Session>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:   :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Style>`
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.extended_tunnel_id = None
                self.filter = RsvpStandby.RequestBriefs.RequestBrief.Filter()
                self.filter.parent = self
                self.flow_spec = RsvpStandby.RequestBriefs.RequestBrief.FlowSpec()
                self.flow_spec.parent = self
                self.generic_flow_spec = RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self.output_interface = None
                self.p2mp_id = None
                self.protocol = None
                self.s2l_sub_lsp = RsvpStandby.RequestBriefs.RequestBrief.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = RsvpStandby.RequestBriefs.RequestBrief.Session()
                self.session.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.style = RsvpStandby.RequestBriefs.RequestBrief.Style()
                self.style.parent = self
                self.sub_group_id = None
                self.sub_group_origin = None
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.S2LSubLsp']['meta_info']


            class FlowSpec(object):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:   :py:class:`RsvpMgmtQosServiceEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnumEnum>`
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_max_unit = None
                    self.flow_min_unit = None
                    self.flow_peak_rate = None
                    self.flow_qos = None
                    self.flow_requested_rate = None
                    self.flow_slack = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_average_rate is not None:
                        return True

                    if self.flow_max_burst is not None:
                        return True

                    if self.flow_max_unit is not None:
                        return True

                    if self.flow_min_unit is not None:
                        return True

                    if self.flow_peak_rate is not None:
                        return True

                    if self.flow_qos is not None:
                        return True

                    if self.flow_requested_rate is not None:
                        return True

                    if self.flow_slack is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.FlowSpec']['meta_info']


            class GenericFlowSpec(object):
                """
                Generic Flow Spec Information
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:   :py:class:`RsvpMgmtFlowSpecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpecEnum>`
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:   :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_spec_type = None
                    self.g709otn_flow_spec = RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self


                class G709OtnFlowSpec(object):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.flow_bit_rate = None
                        self.flow_multiplier = None
                        self.flow_nvc = None
                        self.flow_signal_type = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-flow-spec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.flow_bit_rate is not None:
                            return True

                        if self.flow_multiplier is not None:
                            return True

                        if self.flow_nvc is not None:
                            return True

                        if self.flow_signal_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_spec_type is not None:
                        return True

                    if self.g709otn_flow_spec is not None and self.g709otn_flow_spec._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec']['meta_info']


            class Filter(object):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:   :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_filter = RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self


                class RsvpFilter(object):
                    """
                    RSVP Filter
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:   :py:class:`RsvpMgmtFilterEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilterEnum>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:   :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:   :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.filter_type = None
                        self.p2mp_ipv4_session = RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self.udp_ipv4_session = RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self


                    class UdpIpv4Session(object):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.source_address = None
                            self.source_port = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:udp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session']['meta_info']


                    class P2MpIpv4Session(object):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.p2mp_sub_group_origin = None
                            self.source_address = None
                            self.source_port = None
                            self.sub_group_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:p2mp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.p2mp_sub_group_origin is not None:
                                return True

                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            if self.sub_group_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.filter_type is not None:
                            return True

                        if self.p2mp_ipv4_session is not None and self.p2mp_ipv4_session._has_data():
                            return True

                        if self.udp_ipv4_session is not None and self.udp_ipv4_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:filter'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_filter is not None and self.rsvp_filter._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.Filter']['meta_info']


            class Style(object):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:   :py:class:`RsvpMgmtReservationTypeEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnumEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.reservation_type = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:style'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.reservation_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief.Style']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.filter is not None and self.filter._has_data():
                    return True

                if self.flow_spec is not None and self.flow_spec._has_data():
                    return True

                if self.generic_flow_spec is not None and self.generic_flow_spec._has_data():
                    return True

                if self.output_interface is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.protocol is not None:
                    return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.style is not None and self.style._has_data():
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.RequestBriefs.RequestBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.request_brief is not None:
                for child_ref in self.request_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.RequestBriefs']['meta_info']


    class RequestDetails(object):
        """
        Table of detail info about requests
        
        .. attribute:: request_detail
        
        	Detail info for a request
        	**type**\: list of    :py:class:`RequestDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.request_detail = YList()
            self.request_detail.parent = self
            self.request_detail.name = 'request_detail'


        class RequestDetail(object):
            """
            Detail info for a request
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:   :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Filter>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:   :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Information
            	**type**\:   :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec>`
            
            .. attribute:: header
            
            	RSVP Header Information
            	**type**\:   :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Header>`
            
            .. attribute:: hop
            
            	Hop Infomation
            	**type**\:   :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Hop>`
            
            .. attribute:: output_interface
            
            	output Interface
            	**type**\:  str
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: policy_flags
            
            	RSVP Policy Flags
            	**type**\:   :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.PolicyFlags>`
            
            .. attribute:: policy_query_flags
            
            	RSVP Query Flags
            	**type**\:   :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.PolicyQueryFlags>`
            
            .. attribute:: policy_sources
            
            	RSVP Policy Sources
            	**type**\:   :py:class:`PolicySources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.PolicySources>`
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: psb_key
            
            	List of RSB keys
            	**type**\: list of    :py:class:`PsbKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.PsbKey>`
            
            .. attribute:: req_flags
            
            	Request flags
            	**type**\:   :py:class:`ReqFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.ReqFlags>`
            
            .. attribute:: rsb_key
            
            	List of RSB keys
            	**type**\: list of    :py:class:`RsbKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.RsbKey>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Session>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:   :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Style>`
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.extended_tunnel_id = None
                self.filter = RsvpStandby.RequestDetails.RequestDetail.Filter()
                self.filter.parent = self
                self.flow_spec = RsvpStandby.RequestDetails.RequestDetail.FlowSpec()
                self.flow_spec.parent = self
                self.generic_flow_spec = RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self.header = RsvpStandby.RequestDetails.RequestDetail.Header()
                self.header.parent = self
                self.hop = RsvpStandby.RequestDetails.RequestDetail.Hop()
                self.hop.parent = self
                self.output_interface = None
                self.p2mp_id = None
                self.policy_flags = RsvpStandby.RequestDetails.RequestDetail.PolicyFlags()
                self.policy_flags.parent = self
                self.policy_query_flags = RsvpStandby.RequestDetails.RequestDetail.PolicyQueryFlags()
                self.policy_query_flags.parent = self
                self.policy_sources = RsvpStandby.RequestDetails.RequestDetail.PolicySources()
                self.policy_sources.parent = self
                self.protocol = None
                self.psb_key = YList()
                self.psb_key.parent = self
                self.psb_key.name = 'psb_key'
                self.req_flags = RsvpStandby.RequestDetails.RequestDetail.ReqFlags()
                self.req_flags.parent = self
                self.rsb_key = YList()
                self.rsb_key.parent = self
                self.rsb_key.name = 'rsb_key'
                self.s2l_sub_lsp = RsvpStandby.RequestDetails.RequestDetail.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = RsvpStandby.RequestDetails.RequestDetail.Session()
                self.session.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.style = RsvpStandby.RequestDetails.RequestDetail.Style()
                self.style.parent = self
                self.sub_group_id = None
                self.sub_group_origin = None
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.S2LSubLsp']['meta_info']


            class FlowSpec(object):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:   :py:class:`RsvpMgmtQosServiceEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnumEnum>`
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_max_unit = None
                    self.flow_min_unit = None
                    self.flow_peak_rate = None
                    self.flow_qos = None
                    self.flow_requested_rate = None
                    self.flow_slack = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_average_rate is not None:
                        return True

                    if self.flow_max_burst is not None:
                        return True

                    if self.flow_max_unit is not None:
                        return True

                    if self.flow_min_unit is not None:
                        return True

                    if self.flow_peak_rate is not None:
                        return True

                    if self.flow_qos is not None:
                        return True

                    if self.flow_requested_rate is not None:
                        return True

                    if self.flow_slack is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.FlowSpec']['meta_info']


            class GenericFlowSpec(object):
                """
                Generic Flow Spec Information
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:   :py:class:`RsvpMgmtFlowSpecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpecEnum>`
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:   :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_spec_type = None
                    self.g709otn_flow_spec = RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self


                class G709OtnFlowSpec(object):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.flow_bit_rate = None
                        self.flow_multiplier = None
                        self.flow_nvc = None
                        self.flow_signal_type = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-flow-spec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.flow_bit_rate is not None:
                            return True

                        if self.flow_multiplier is not None:
                            return True

                        if self.flow_nvc is not None:
                            return True

                        if self.flow_signal_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_spec_type is not None:
                        return True

                    if self.g709otn_flow_spec is not None and self.g709otn_flow_spec._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec']['meta_info']


            class Filter(object):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:   :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_filter = RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self


                class RsvpFilter(object):
                    """
                    RSVP Filter
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:   :py:class:`RsvpMgmtFilterEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilterEnum>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:   :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:   :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.filter_type = None
                        self.p2mp_ipv4_session = RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self.udp_ipv4_session = RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self


                    class UdpIpv4Session(object):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.source_address = None
                            self.source_port = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:udp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session']['meta_info']


                    class P2MpIpv4Session(object):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.p2mp_sub_group_origin = None
                            self.source_address = None
                            self.source_port = None
                            self.sub_group_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:p2mp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.p2mp_sub_group_origin is not None:
                                return True

                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            if self.sub_group_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.filter_type is not None:
                            return True

                        if self.p2mp_ipv4_session is not None and self.p2mp_ipv4_session._has_data():
                            return True

                        if self.udp_ipv4_session is not None and self.udp_ipv4_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:filter'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_filter is not None and self.rsvp_filter._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.Filter']['meta_info']


            class Style(object):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:   :py:class:`RsvpMgmtReservationTypeEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnumEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.reservation_type = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:style'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.reservation_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.Style']['meta_info']


            class ReqFlags(object):
                """
                Request flags
                
                .. attribute:: is_ack_outstanding
                
                	Is ACK message outstanding
                	**type**\:  bool
                
                .. attribute:: is_label_request_in_path
                
                	The Path message contains Label Request
                	**type**\:  bool
                
                .. attribute:: is_local_receiver
                
                	Local Receiver
                	**type**\:  bool
                
                .. attribute:: is_merge_point
                
                	Is node a Merge Point
                	**type**\:  bool
                
                .. attribute:: is_message_id_allocated
                
                	Is MessageID allocated
                	**type**\:  bool
                
                .. attribute:: is_nack_received
                
                	A NACK message was received
                	**type**\:  bool
                
                .. attribute:: is_paced
                
                	Message is paced
                	**type**\:  bool
                
                .. attribute:: is_record_label_in_path
                
                	Path has Session\-Attr object with Record Labels set
                	**type**\:  bool
                
                .. attribute:: is_refreshing
                
                	Is neighbor refreshing
                	**type**\:  bool
                
                .. attribute:: is_retransmit
                
                	Retransmit the message
                	**type**\:  bool
                
                .. attribute:: is_rro_in_path
                
                	The Path message contains RRO
                	**type**\:  bool
                
                .. attribute:: is_send_confirm
                
                	Send Confirm message
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_ack_outstanding = None
                    self.is_label_request_in_path = None
                    self.is_local_receiver = None
                    self.is_merge_point = None
                    self.is_message_id_allocated = None
                    self.is_nack_received = None
                    self.is_paced = None
                    self.is_record_label_in_path = None
                    self.is_refreshing = None
                    self.is_retransmit = None
                    self.is_rro_in_path = None
                    self.is_send_confirm = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:req-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_ack_outstanding is not None:
                        return True

                    if self.is_label_request_in_path is not None:
                        return True

                    if self.is_local_receiver is not None:
                        return True

                    if self.is_merge_point is not None:
                        return True

                    if self.is_message_id_allocated is not None:
                        return True

                    if self.is_nack_received is not None:
                        return True

                    if self.is_paced is not None:
                        return True

                    if self.is_record_label_in_path is not None:
                        return True

                    if self.is_refreshing is not None:
                        return True

                    if self.is_retransmit is not None:
                        return True

                    if self.is_rro_in_path is not None:
                        return True

                    if self.is_send_confirm is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.ReqFlags']['meta_info']


            class Hop(object):
                """
                Hop Infomation
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:hop'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.neighbor_address is not None:
                        return True

                    if self.neighbor_logical_interface_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.Hop']['meta_info']


            class Header(object):
                """
                RSVP Header Information
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\:  int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ip_source_address = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.rsvp_header_flags = None
                    self.rsvp_message_type = None
                    self.rsvp_ttl = None
                    self.rsvp_version = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:header'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ip_source_address is not None:
                        return True

                    if self.ip_tos is not None:
                        return True

                    if self.ip_ttl is not None:
                        return True

                    if self.rsvp_header_flags is not None:
                        return True

                    if self.rsvp_message_type is not None:
                        return True

                    if self.rsvp_ttl is not None:
                        return True

                    if self.rsvp_version is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.Header']['meta_info']


            class PolicySources(object):
                """
                RSVP Policy Sources
                
                .. attribute:: is_cable
                
                	Policy Source is Cable
                	**type**\:  bool
                
                .. attribute:: is_cops
                
                	Policy Source is COPS
                	**type**\:  bool
                
                .. attribute:: is_default
                
                	Policy Source is Default
                	**type**\:  bool
                
                .. attribute:: is_local
                
                	Policy Source is Local
                	**type**\:  bool
                
                .. attribute:: is_te_link
                
                	Policy Source is TE Link
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_cable = None
                    self.is_cops = None
                    self.is_default = None
                    self.is_local = None
                    self.is_te_link = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:policy-sources'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_cable is not None:
                        return True

                    if self.is_cops is not None:
                        return True

                    if self.is_default is not None:
                        return True

                    if self.is_local is not None:
                        return True

                    if self.is_te_link is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.PolicySources']['meta_info']


            class PolicyFlags(object):
                """
                RSVP Policy Flags
                
                .. attribute:: is_accepted
                
                	Accepted
                	**type**\:  bool
                
                .. attribute:: is_forwarding
                
                	Forwarding
                	**type**\:  bool
                
                .. attribute:: is_installed
                
                	Installed
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_accepted = None
                    self.is_forwarding = None
                    self.is_installed = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:policy-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_accepted is not None:
                        return True

                    if self.is_forwarding is not None:
                        return True

                    if self.is_installed is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.PolicyFlags']['meta_info']


            class PolicyQueryFlags(object):
                """
                RSVP Query Flags
                
                .. attribute:: is_bypass
                
                	Bypass
                	**type**\:  bool
                
                .. attribute:: is_needed
                
                	Needed
                	**type**\:  bool
                
                .. attribute:: is_report_required
                
                	Report Required
                	**type**\:  bool
                
                .. attribute:: is_resync
                
                	Resynchronization
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_bypass = None
                    self.is_needed = None
                    self.is_report_required = None
                    self.is_resync = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:policy-query-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_bypass is not None:
                        return True

                    if self.is_needed is not None:
                        return True

                    if self.is_report_required is not None:
                        return True

                    if self.is_resync is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.PolicyQueryFlags']['meta_info']


            class PsbKey(object):
                """
                List of RSB keys
                
                .. attribute:: destination_address
                
                	Destination address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: destination_port_or_tunnel_id
                
                	Destination Port or Tunnel ID. For the LSP and OUNI session types this represents the Tunnel ID whereas for the UDP session type this represents the Destination Port
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: extended_tunnel_id
                
                	Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this represents the Extended Tunnel ID
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: p2mp_id
                
                	Point\-to\-multipoint ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: p2mp_sub_group_origin
                
                	Point to Multipoint SubGroup Origin
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: protocol
                
                	Protocol. UDP session type this represents the Protocol (UDP not supported at present)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: session_type
                
                	Session Type (e.g. LSP, OUNI or UDP)
                	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                
                .. attribute:: source_address
                
                	Source Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: source_port_or_lsp_id
                
                	Source Port or LSP\_ID. For the LSP and OUNI session types this represents the LSP\_ID whereas for the UDP session type this represents the SourcePort
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: sub_group_id
                
                	Point to Multipoint Subgroup ID
                	**type**\:  int
                
                	**range:** 0..65535
                
                .. attribute:: vrfid
                
                	Signalling VRF ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.destination_address = None
                    self.destination_port_or_tunnel_id = None
                    self.extended_tunnel_id = None
                    self.p2mp_id = None
                    self.p2mp_sub_group_origin = None
                    self.protocol = None
                    self.session_type = None
                    self.source_address = None
                    self.source_port_or_lsp_id = None
                    self.sub_group_id = None
                    self.vrfid = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:psb-key'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.destination_address is not None:
                        return True

                    if self.destination_port_or_tunnel_id is not None:
                        return True

                    if self.extended_tunnel_id is not None:
                        return True

                    if self.p2mp_id is not None:
                        return True

                    if self.p2mp_sub_group_origin is not None:
                        return True

                    if self.protocol is not None:
                        return True

                    if self.session_type is not None:
                        return True

                    if self.source_address is not None:
                        return True

                    if self.source_port_or_lsp_id is not None:
                        return True

                    if self.sub_group_id is not None:
                        return True

                    if self.vrfid is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.PsbKey']['meta_info']


            class RsbKey(object):
                """
                List of RSB keys
                
                .. attribute:: destination_address
                
                	Destination address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: destination_port_or_tunnel_id
                
                	Destination Port or Tunnel ID. For the LSP and OUNI session types this represents the Tunnel ID whereas for the UDP session type this represents the Destination Port
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: extended_tunnel_id
                
                	Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this represents the Extended Tunnel ID
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: p2mp_id
                
                	Point\-to\-multipoint ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: p2mp_sub_group_origin
                
                	Point to Multipoint SubGroup Origin
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: protocol
                
                	Protocol. UDP session type this represents the Protocol (UDP not supported at present)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: session_type
                
                	Session Type (e.g. LSP, OUNI or UDP)
                	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                
                .. attribute:: source_address
                
                	Source Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: source_port_or_lsp_id
                
                	Source Port or LSP\_ID. For the LSP and OUNI session types this represents the LSP\_ID whereas for the UDP session type this represents the SourcePort
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: sub_group_id
                
                	Point to Multipoint Subgroup ID
                	**type**\:  int
                
                	**range:** 0..65535
                
                .. attribute:: vrfid
                
                	Signalling VRF ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.destination_address = None
                    self.destination_port_or_tunnel_id = None
                    self.extended_tunnel_id = None
                    self.p2mp_id = None
                    self.p2mp_sub_group_origin = None
                    self.protocol = None
                    self.session_type = None
                    self.source_address = None
                    self.source_port_or_lsp_id = None
                    self.sub_group_id = None
                    self.vrfid = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:rsb-key'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.destination_address is not None:
                        return True

                    if self.destination_port_or_tunnel_id is not None:
                        return True

                    if self.extended_tunnel_id is not None:
                        return True

                    if self.p2mp_id is not None:
                        return True

                    if self.p2mp_sub_group_origin is not None:
                        return True

                    if self.protocol is not None:
                        return True

                    if self.session_type is not None:
                        return True

                    if self.source_address is not None:
                        return True

                    if self.source_port_or_lsp_id is not None:
                        return True

                    if self.sub_group_id is not None:
                        return True

                    if self.vrfid is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail.RsbKey']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.filter is not None and self.filter._has_data():
                    return True

                if self.flow_spec is not None and self.flow_spec._has_data():
                    return True

                if self.generic_flow_spec is not None and self.generic_flow_spec._has_data():
                    return True

                if self.header is not None and self.header._has_data():
                    return True

                if self.hop is not None and self.hop._has_data():
                    return True

                if self.output_interface is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.policy_flags is not None and self.policy_flags._has_data():
                    return True

                if self.policy_query_flags is not None and self.policy_query_flags._has_data():
                    return True

                if self.policy_sources is not None and self.policy_sources._has_data():
                    return True

                if self.protocol is not None:
                    return True

                if self.psb_key is not None:
                    for child_ref in self.psb_key:
                        if child_ref._has_data():
                            return True

                if self.req_flags is not None and self.req_flags._has_data():
                    return True

                if self.rsb_key is not None:
                    for child_ref in self.rsb_key:
                        if child_ref._has_data():
                            return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.style is not None and self.style._has_data():
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.RequestDetails.RequestDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:request-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.request_detail is not None:
                for child_ref in self.request_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.RequestDetails']['meta_info']


    class InterfaceBriefs(object):
        """
        Table of brief info about RSVP\-enabled
        interfaces
        
        .. attribute:: interface_brief
        
        	Brief info about an RSVP\-enabled interface
        	**type**\: list of    :py:class:`InterfaceBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceBriefs.InterfaceBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.interface_brief = YList()
            self.interface_brief.parent = self
            self.interface_brief.name = 'interface_brief'


        class InterfaceBrief(object):
            """
            Brief info about an RSVP\-enabled interface
            
            .. attribute:: interface_name  <key>
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:   :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\:  str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.interface_name = None
                self.bandwidth_information = RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation()
                self.bandwidth_information.parent = self
                self.interface_name_xr = None


            class BandwidthInformation(object):
                """
                Interface bandwidth information
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:   :py:class:`RsvpMgmtDsteModesEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModesEnum>`
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:   :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:   :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.dste_mode = None
                    self.pre_standard_dste_interface = RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self.standard_dste_interface = RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self


                class PreStandardDsteInterface(object):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_subpool_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:pre-standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_subpool_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_subpool_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface']['meta_info']


                class StandardDsteInterface(object):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc0_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc1_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_pool0_bandwidth is not None:
                            return True

                        if self.max_pool1_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:bandwidth-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dste_mode is not None:
                        return True

                    if self.pre_standard_dste_interface is not None and self.pre_standard_dste_interface._has_data():
                        return True

                    if self.standard_dste_interface is not None and self.standard_dste_interface._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation']['meta_info']

            @property
            def _common_path(self):
                if self.interface_name is None:
                    raise YPYModelError('Key property interface_name is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:interface-briefs/Cisco-IOS-XR-ip-rsvp-oper:interface-brief[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interface_name is not None:
                    return True

                if self.bandwidth_information is not None and self.bandwidth_information._has_data():
                    return True

                if self.interface_name_xr is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.InterfaceBriefs.InterfaceBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:interface-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.interface_brief is not None:
                for child_ref in self.interface_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.InterfaceBriefs']['meta_info']


    class SessionDetaileds(object):
        """
        Table of detailed info about sessions
        
        .. attribute:: session_detailed
        
        	Detailed info about session
        	**type**\: list of    :py:class:`SessionDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_detailed = YList()
            self.session_detailed.parent = self
            self.session_detailed.name = 'session_detailed'


        class SessionDetailed(object):
            """
            Detailed info about session
            
            .. attribute:: compact
            
            	Compact session data
            	**type**\:   :py:class:`Compact <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.Compact>`
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: psb_rsb_info
            
            	Path and Reservation Info
            	**type**\: list of    :py:class:`PsbRsbInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.S2LSubLsp>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.compact = RsvpStandby.SessionDetaileds.SessionDetailed.Compact()
                self.compact.parent = self
                self.destination_address = None
                self.destination_port = None
                self.extended_tunnel_id = None
                self.p2mp_id = None
                self.protocol = None
                self.psb_rsb_info = YList()
                self.psb_rsb_info.parent = self
                self.psb_rsb_info.name = 'psb_rsb_info'
                self.s2l_sub_lsp = RsvpStandby.SessionDetaileds.SessionDetailed.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session_type = None
                self.vrf_name = None


            class Compact(object):
                """
                Compact session data
                
                .. attribute:: detail_list_size
                
                	Number of elements in detail list
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: ps_bs
                
                	Number of path state block states
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: requests
                
                	Number of request states
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: rs_bs
                
                	Number of reservation state block states
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: session
                
                	RSVP Session Information
                	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.detail_list_size = None
                    self.ps_bs = None
                    self.requests = None
                    self.rs_bs = None
                    self.session = RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session()
                    self.session.parent = self


                class Session(object):
                    """
                    RSVP Session Information
                    
                    .. attribute:: rsvp_session
                    
                    	RSVP Session
                    	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.rsvp_session = RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession()
                        self.rsvp_session.parent = self


                    class RsvpSession(object):
                        """
                        RSVP Session
                        
                        .. attribute:: ipv4
                        
                        	UDP IPv4 session
                        	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4>`
                        
                        .. attribute:: ipv4_lsp_session
                        
                        	IPv4 LSP session
                        	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession>`
                        
                        .. attribute:: ipv4_p2mp_lsp_session
                        
                        	IPv4 P2MP LSP session
                        	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession>`
                        
                        .. attribute:: ipv4_uni_session
                        
                        	IPv4 UNI session
                        	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession>`
                        
                        .. attribute:: session_type
                        
                        	SessionType
                        	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ipv4 = RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4()
                            self.ipv4.parent = self
                            self.ipv4_lsp_session = RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession()
                            self.ipv4_lsp_session.parent = self
                            self.ipv4_p2mp_lsp_session = RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession()
                            self.ipv4_p2mp_lsp_session.parent = self
                            self.ipv4_uni_session = RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession()
                            self.ipv4_uni_session.parent = self
                            self.session_type = None


                        class Ipv4(object):
                            """
                            UDP IPv4 session
                            
                            .. attribute:: destination_address
                            
                            	Destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: destination_port
                            
                            	The Session Destination Port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: protocol
                            
                            	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.destination_address = None
                                self.destination_port = None
                                self.protocol = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:compact/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.destination_address is not None:
                                    return True

                                if self.destination_port is not None:
                                    return True

                                if self.protocol is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4']['meta_info']


                        class Ipv4LspSession(object):
                            """
                            IPv4 LSP session
                            
                            .. attribute:: destination_address
                            
                            	Destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: extended_tunnel_id
                            
                            	The Session Extended Tunnel ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: tunnel_id
                            
                            	The Session Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.destination_address = None
                                self.extended_tunnel_id = None
                                self.tunnel_id = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:compact/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.destination_address is not None:
                                    return True

                                if self.extended_tunnel_id is not None:
                                    return True

                                if self.tunnel_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession']['meta_info']


                        class Ipv4UniSession(object):
                            """
                            IPv4 UNI session
                            
                            .. attribute:: destination_address
                            
                            	Destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: extended_address
                            
                            	The Session Extended Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: tunnel_id
                            
                            	The Session Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.destination_address = None
                                self.extended_address = None
                                self.tunnel_id = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:compact/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.destination_address is not None:
                                    return True

                                if self.extended_address is not None:
                                    return True

                                if self.tunnel_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession']['meta_info']


                        class Ipv4P2MpLspSession(object):
                            """
                            IPv4 P2MP LSP session
                            
                            .. attribute:: extended_tunnel_id
                            
                            	The Session Extended Tunnel ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: p2mp_id
                            
                            	The Point to Multipoint ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_id
                            
                            	The Session Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.extended_tunnel_id = None
                                self.p2mp_id = None
                                self.tunnel_id = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:compact/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.extended_tunnel_id is not None:
                                    return True

                                if self.p2mp_id is not None:
                                    return True

                                if self.tunnel_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:compact/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4 is not None and self.ipv4._has_data():
                                return True

                            if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                                return True

                            if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                                return True

                            if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                                return True

                            if self.session_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:compact/Cisco-IOS-XR-ip-rsvp-oper:session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.rsvp_session is not None and self.rsvp_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:compact'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.detail_list_size is not None:
                        return True

                    if self.ps_bs is not None:
                        return True

                    if self.requests is not None:
                        return True

                    if self.rs_bs is not None:
                        return True

                    if self.session is not None and self.session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.Compact']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.S2LSubLsp']['meta_info']


            class PsbRsbInfo(object):
                """
                Path and Reservation Info
                
                .. attribute:: psb_info
                
                	Path Info
                	**type**\: list of    :py:class:`PsbInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo>`
                
                .. attribute:: rsb_info
                
                	Reservation Info
                	**type**\: list of    :py:class:`RsbInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.psb_info = YList()
                    self.psb_info.parent = self
                    self.psb_info.name = 'psb_info'
                    self.rsb_info = YList()
                    self.rsb_info.parent = self
                    self.rsb_info.name = 'rsb_info'


                class PsbInfo(object):
                    """
                    Path Info
                    
                    .. attribute:: association
                    
                    	Association object
                    	**type**\:   :py:class:`Association <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association>`
                    
                    .. attribute:: destination_address
                    
                    	Destination address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ero
                    
                    	Explicit Route Sub Objects
                    	**type**\: list of    :py:class:`Ero <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero>`
                    
                    .. attribute:: generic_in_label
                    
                    	Generic Label for inbound traffic
                    	**type**\:   :py:class:`GenericInLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel>`
                    
                    .. attribute:: generic_traffic_spec
                    
                    	Generic Traffic Spec object
                    	**type**\:   :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec>`
                    
                    .. attribute:: in_interface
                    
                    	Interface on which inbound message was received
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: in_label
                    
                    	Label for inbound traffic
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: incoming_interface_address
                    
                    	IP address of Path's incoming interface
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: is_bad_address
                    
                    	Address validity
                    	**type**\:  bool
                    
                    .. attribute:: is_ero_valid
                    
                    	ERO validity
                    	**type**\:  bool
                    
                    .. attribute:: is_rro_valid
                    
                    	RRO validity
                    	**type**\:  bool
                    
                    .. attribute:: is_traffic_spec_valid
                    
                    	Traffic Spec validity
                    	**type**\:  bool
                    
                    .. attribute:: is_valid
                    
                    	Entry validity
                    	**type**\:  bool
                    
                    .. attribute:: lsp_id
                    
                    	LSP ID
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: lsp_wrap_label
                    
                    	LSP Wrap Label
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: p2mp_sub_group_origin
                    
                    	Point to Multipoint SubGroup Origin
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: protection
                    
                    	Protection object
                    	**type**\:   :py:class:`Protection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection>`
                    
                    .. attribute:: reverse_lsp
                    
                    	Reverse LSP object
                    	**type**\:   :py:class:`ReverseLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp>`
                    
                    .. attribute:: rro
                    
                    	Record Route Sub Objects
                    	**type**\: list of    :py:class:`Rro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro>`
                    
                    .. attribute:: sub_group_id
                    
                    	Point to Multipoint Subgroup ID
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_spec
                    
                    	Traffic Spec object
                    	**type**\:   :py:class:`TrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec>`
                    
                    .. attribute:: tunnel_name
                    
                    	Tunnel name
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.association = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association()
                        self.association.parent = self
                        self.destination_address = None
                        self.ero = YList()
                        self.ero.parent = self
                        self.ero.name = 'ero'
                        self.generic_in_label = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel()
                        self.generic_in_label.parent = self
                        self.generic_traffic_spec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec()
                        self.generic_traffic_spec.parent = self
                        self.in_interface = None
                        self.in_label = None
                        self.incoming_interface_address = None
                        self.is_bad_address = None
                        self.is_ero_valid = None
                        self.is_rro_valid = None
                        self.is_traffic_spec_valid = None
                        self.is_valid = None
                        self.lsp_id = None
                        self.lsp_wrap_label = None
                        self.p2mp_sub_group_origin = None
                        self.protection = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection()
                        self.protection.parent = self
                        self.reverse_lsp = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp()
                        self.reverse_lsp.parent = self
                        self.rro = YList()
                        self.rro.parent = self
                        self.rro.name = 'rro'
                        self.sub_group_id = None
                        self.traffic_spec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec()
                        self.traffic_spec.parent = self
                        self.tunnel_name = None


                    class GenericInLabel(object):
                        """
                        Generic Label for inbound traffic
                        
                        .. attribute:: generalized_label
                        
                        	Generalized Label
                        	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel>`
                        
                        .. attribute:: generic_label_type
                        
                        	GenericLabelType
                        	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.generalized_label = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel()
                            self.generalized_label.parent = self
                            self.generic_label_type = None


                        class GeneralizedLabel(object):
                            """
                            Generalized Label
                            
                            .. attribute:: value
                            
                            	Generalized Label Value
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.value = YLeafList()
                                self.value.parent = self
                                self.value.name = 'value'

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-in-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.value is not None:
                                    for child in self.value:
                                        if child is not None:
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-in-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.generalized_label is not None and self.generalized_label._has_data():
                                return True

                            if self.generic_label_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel']['meta_info']


                    class TrafficSpec(object):
                        """
                        Traffic Spec object
                        
                        .. attribute:: traffic_average_rate
                        
                        	Traffic Average Rate in bytes per second
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: traffic_max_burst
                        
                        	Traffic Maximum Burst
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: traffic_max_unit
                        
                        	Traffic Maximum Unit
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: traffic_min_unit
                        
                        	Traffic Minimum Unit
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: traffic_peak_rate
                        
                        	Traffic Peak Rate in bytes per second
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.traffic_average_rate = None
                            self.traffic_max_burst = None
                            self.traffic_max_unit = None
                            self.traffic_min_unit = None
                            self.traffic_peak_rate = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:traffic-spec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.traffic_average_rate is not None:
                                return True

                            if self.traffic_max_burst is not None:
                                return True

                            if self.traffic_max_unit is not None:
                                return True

                            if self.traffic_min_unit is not None:
                                return True

                            if self.traffic_peak_rate is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec']['meta_info']


                    class GenericTrafficSpec(object):
                        """
                        Generic Traffic Spec object
                        
                        .. attribute:: g709otn_tspec
                        
                        	G709 OTN Sender Tspec
                        	**type**\:   :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec>`
                        
                        .. attribute:: intsrv_tspec
                        
                        	Integrated Services Sender Tspec
                        	**type**\:   :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec>`
                        
                        .. attribute:: tspec_type
                        
                        	TspecType
                        	**type**\:   :py:class:`RsvpMgmtTspecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspecEnum>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.g709otn_tspec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec()
                            self.g709otn_tspec.parent = self
                            self.intsrv_tspec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec()
                            self.intsrv_tspec.parent = self
                            self.tspec_type = None


                        class G709OtnTspec(object):
                            """
                            G709 OTN Sender Tspec
                            
                            .. attribute:: traffic_bit_rate
                            
                            	G709 OTN Traffic Bit Rate
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: traffic_multiplier
                            
                            	G709 OTN Traffic Multiplier
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: traffic_nvc
                            
                            	G709 OTN Traffic NVC
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: traffic_signal_type
                            
                            	G709 OTN Traffic Signal Type (Refer G709 v3)
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.traffic_bit_rate = None
                                self.traffic_multiplier = None
                                self.traffic_nvc = None
                                self.traffic_signal_type = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-tspec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.traffic_bit_rate is not None:
                                    return True

                                if self.traffic_multiplier is not None:
                                    return True

                                if self.traffic_nvc is not None:
                                    return True

                                if self.traffic_signal_type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec']['meta_info']


                        class IntsrvTspec(object):
                            """
                            Integrated Services Sender Tspec
                            
                            .. attribute:: traffic_average_rate
                            
                            	Traffic Average Rate in bytes per second
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: byte/s
                            
                            .. attribute:: traffic_max_burst
                            
                            	Traffic Maximum Burst
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: traffic_max_unit
                            
                            	Traffic Maximum Unit
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: traffic_min_unit
                            
                            	Traffic Minimum Unit
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: traffic_peak_rate
                            
                            	Traffic Peak Rate in bytes per second
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: byte/s
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.traffic_average_rate = None
                                self.traffic_max_burst = None
                                self.traffic_max_unit = None
                                self.traffic_min_unit = None
                                self.traffic_peak_rate = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:intsrv-tspec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.traffic_average_rate is not None:
                                    return True

                                if self.traffic_max_burst is not None:
                                    return True

                                if self.traffic_max_unit is not None:
                                    return True

                                if self.traffic_min_unit is not None:
                                    return True

                                if self.traffic_peak_rate is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.g709otn_tspec is not None and self.g709otn_tspec._has_data():
                                return True

                            if self.intsrv_tspec is not None and self.intsrv_tspec._has_data():
                                return True

                            if self.tspec_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec']['meta_info']


                    class Association(object):
                        """
                        Association object
                        
                        .. attribute:: association_type
                        
                        	AssociationType
                        	**type**\:   :py:class:`RsvpMgmtAssociationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAssociationEnum>`
                        
                        .. attribute:: extended_ipv4
                        
                        	EXTENDED IPV4 ASSOCIATION Object
                        	**type**\:   :py:class:`ExtendedIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4>`
                        
                        .. attribute:: extended_ipv6
                        
                        	EXTENDED IPV6 ASSOCIATION Object
                        	**type**\:   :py:class:`ExtendedIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6>`
                        
                        .. attribute:: ipv4
                        
                        	IPV4 ASSOCIATION Object
                        	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4>`
                        
                        .. attribute:: ipv6
                        
                        	IPV6 ASSOCIATION Object
                        	**type**\:   :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.association_type = None
                            self.extended_ipv4 = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4()
                            self.extended_ipv4.parent = self
                            self.extended_ipv6 = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6()
                            self.extended_ipv6.parent = self
                            self.ipv4 = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4()
                            self.ipv4.parent = self
                            self.ipv6 = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6()
                            self.ipv6.parent = self


                        class Ipv4(object):
                            """
                            IPV4 ASSOCIATION Object
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV4 Source Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.id = None
                                self.source = None
                                self.type = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:association/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.id is not None:
                                    return True

                                if self.source is not None:
                                    return True

                                if self.type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4']['meta_info']


                        class Ipv6(object):
                            """
                            IPV6 ASSOCIATION Object
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV6 Source Address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.id = None
                                self.source = None
                                self.type = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:association/Cisco-IOS-XR-ip-rsvp-oper:ipv6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.id is not None:
                                    return True

                                if self.source is not None:
                                    return True

                                if self.type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6']['meta_info']


                        class ExtendedIpv4(object):
                            """
                            EXTENDED IPV4 ASSOCIATION Object
                            
                            .. attribute:: extended_id
                            
                            	Extended Association ID
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: global_source
                            
                            	Global Association Source
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV4 Source Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.extended_id = YLeafList()
                                self.extended_id.parent = self
                                self.extended_id.name = 'extended_id'
                                self.global_source = None
                                self.id = None
                                self.source = None
                                self.type = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:association/Cisco-IOS-XR-ip-rsvp-oper:extended-ipv4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.extended_id is not None:
                                    for child in self.extended_id:
                                        if child is not None:
                                            return True

                                if self.global_source is not None:
                                    return True

                                if self.id is not None:
                                    return True

                                if self.source is not None:
                                    return True

                                if self.type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4']['meta_info']


                        class ExtendedIpv6(object):
                            """
                            EXTENDED IPV6 ASSOCIATION Object
                            
                            .. attribute:: extended_id
                            
                            	Extended Association ID
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: global_source
                            
                            	Global Association Source
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV6 Source Address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.extended_id = YLeafList()
                                self.extended_id.parent = self
                                self.extended_id.name = 'extended_id'
                                self.global_source = None
                                self.id = None
                                self.source = None
                                self.type = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:association/Cisco-IOS-XR-ip-rsvp-oper:extended-ipv6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.extended_id is not None:
                                    for child in self.extended_id:
                                        if child is not None:
                                            return True

                                if self.global_source is not None:
                                    return True

                                if self.id is not None:
                                    return True

                                if self.source is not None:
                                    return True

                                if self.type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:association'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.association_type is not None:
                                return True

                            if self.extended_ipv4 is not None and self.extended_ipv4._has_data():
                                return True

                            if self.extended_ipv6 is not None and self.extended_ipv6._has_data():
                                return True

                            if self.ipv4 is not None and self.ipv4._has_data():
                                return True

                            if self.ipv6 is not None and self.ipv6._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association']['meta_info']


                    class Protection(object):
                        """
                        Protection object
                        
                        .. attribute:: link_flags
                        
                        	PROTECTION Object Link Flags
                        	**type**\:   :py:class:`LinkFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags>`
                        
                        .. attribute:: lsp_flags
                        
                        	PROTECTION Object LSP Flags
                        	**type**\:   :py:class:`LspFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags>`
                        
                        .. attribute:: n
                        
                        	Notification Bit
                        	**type**\:  bool
                        
                        .. attribute:: o
                        
                        	Operational Bit
                        	**type**\:  bool
                        
                        .. attribute:: p
                        
                        	Protecting Bit
                        	**type**\:  bool
                        
                        .. attribute:: s
                        
                        	Secondary Bit
                        	**type**\:  bool
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.link_flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags()
                            self.link_flags.parent = self
                            self.lsp_flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags()
                            self.lsp_flags.parent = self
                            self.n = None
                            self.o = None
                            self.p = None
                            self.s = None


                        class LspFlags(object):
                            """
                            PROTECTION Object LSP Flags
                            
                            .. attribute:: one_plus_one_bi
                            
                            	1+1 Bidirectional Protection
                            	**type**\:  bool
                            
                            .. attribute:: one_plus_one_uni
                            
                            	1+1 Unidirectional Protection
                            	**type**\:  bool
                            
                            .. attribute:: one_to_n_protection_et
                            
                            	1\:N Protection with Extra\-Traffic
                            	**type**\:  bool
                            
                            .. attribute:: rerouting
                            
                            	Full Rerouting
                            	**type**\:  bool
                            
                            .. attribute:: rerouting_no_et
                            
                            	Rerouting Without Extra\-Traffic
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.one_plus_one_bi = None
                                self.one_plus_one_uni = None
                                self.one_to_n_protection_et = None
                                self.rerouting = None
                                self.rerouting_no_et = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:protection/Cisco-IOS-XR-ip-rsvp-oper:lsp-flags'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.one_plus_one_bi is not None:
                                    return True

                                if self.one_plus_one_uni is not None:
                                    return True

                                if self.one_to_n_protection_et is not None:
                                    return True

                                if self.rerouting is not None:
                                    return True

                                if self.rerouting_no_et is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags']['meta_info']


                        class LinkFlags(object):
                            """
                            PROTECTION Object Link Flags
                            
                            .. attribute:: ded1_plus1
                            
                            	Dedicated 1+1 Protection
                            	**type**\:  bool
                            
                            .. attribute:: ded1_to1
                            
                            	Dedicated 1\:1 Protection
                            	**type**\:  bool
                            
                            .. attribute:: enhanced
                            
                            	Indicates Enhanced Protection Scheme
                            	**type**\:  bool
                            
                            .. attribute:: extra_traffic
                            
                            	LSP should use Links that are protecting other (primary) traffic
                            	**type**\:  bool
                            
                            .. attribute:: reserved_bit1
                            
                            	Reserved Bit 1
                            	**type**\:  bool
                            
                            .. attribute:: reserved_bit2
                            
                            	Reserved Bit 2
                            	**type**\:  bool
                            
                            .. attribute:: shared
                            
                            	Shared Link Layer Protection
                            	**type**\:  bool
                            
                            .. attribute:: unprotected
                            
                            	LSP should not use any Link Layer Protection
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ded1_plus1 = None
                                self.ded1_to1 = None
                                self.enhanced = None
                                self.extra_traffic = None
                                self.reserved_bit1 = None
                                self.reserved_bit2 = None
                                self.shared = None
                                self.unprotected = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:protection/Cisco-IOS-XR-ip-rsvp-oper:link-flags'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ded1_plus1 is not None:
                                    return True

                                if self.ded1_to1 is not None:
                                    return True

                                if self.enhanced is not None:
                                    return True

                                if self.extra_traffic is not None:
                                    return True

                                if self.reserved_bit1 is not None:
                                    return True

                                if self.reserved_bit2 is not None:
                                    return True

                                if self.shared is not None:
                                    return True

                                if self.unprotected is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:protection'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.link_flags is not None and self.link_flags._has_data():
                                return True

                            if self.lsp_flags is not None and self.lsp_flags._has_data():
                                return True

                            if self.n is not None:
                                return True

                            if self.o is not None:
                                return True

                            if self.p is not None:
                                return True

                            if self.s is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection']['meta_info']


                    class ReverseLsp(object):
                        """
                        Reverse LSP object
                        
                        .. attribute:: ero
                        
                        	Explicit Route Sub Objects
                        	**type**\: list of    :py:class:`Ero <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero>`
                        
                        .. attribute:: generic_traffic_spec
                        
                        	Generic Traffic Spec object
                        	**type**\:   :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec>`
                        
                        .. attribute:: unsup_sub_object
                        
                        	Unsupported REVERSE\_LSP Sub Objects
                        	**type**\: list of    :py:class:`UnsupSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.UnsupSubObject>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ero = YList()
                            self.ero.parent = self
                            self.ero.name = 'ero'
                            self.generic_traffic_spec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec()
                            self.generic_traffic_spec.parent = self
                            self.unsup_sub_object = YList()
                            self.unsup_sub_object.parent = self
                            self.unsup_sub_object.name = 'unsup_sub_object'


                        class GenericTrafficSpec(object):
                            """
                            Generic Traffic Spec object
                            
                            .. attribute:: g709otn_tspec
                            
                            	G709 OTN Sender Tspec
                            	**type**\:   :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec>`
                            
                            .. attribute:: intsrv_tspec
                            
                            	Integrated Services Sender Tspec
                            	**type**\:   :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec>`
                            
                            .. attribute:: tspec_type
                            
                            	TspecType
                            	**type**\:   :py:class:`RsvpMgmtTspecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspecEnum>`
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.g709otn_tspec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec()
                                self.g709otn_tspec.parent = self
                                self.intsrv_tspec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec()
                                self.intsrv_tspec.parent = self
                                self.tspec_type = None


                            class G709OtnTspec(object):
                                """
                                G709 OTN Sender Tspec
                                
                                .. attribute:: traffic_bit_rate
                                
                                	G709 OTN Traffic Bit Rate
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: traffic_multiplier
                                
                                	G709 OTN Traffic Multiplier
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_nvc
                                
                                	G709 OTN Traffic NVC
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_signal_type
                                
                                	G709 OTN Traffic Signal Type (Refer G709 v3)
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.traffic_bit_rate = None
                                    self.traffic_multiplier = None
                                    self.traffic_nvc = None
                                    self.traffic_signal_type = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-tspec'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.traffic_bit_rate is not None:
                                        return True

                                    if self.traffic_multiplier is not None:
                                        return True

                                    if self.traffic_nvc is not None:
                                        return True

                                    if self.traffic_signal_type is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec']['meta_info']


                            class IntsrvTspec(object):
                                """
                                Integrated Services Sender Tspec
                                
                                .. attribute:: traffic_average_rate
                                
                                	Traffic Average Rate in bytes per second
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: byte/s
                                
                                .. attribute:: traffic_max_burst
                                
                                	Traffic Maximum Burst
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: traffic_max_unit
                                
                                	Traffic Maximum Unit
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: traffic_min_unit
                                
                                	Traffic Minimum Unit
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: traffic_peak_rate
                                
                                	Traffic Peak Rate in bytes per second
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: byte/s
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.traffic_average_rate = None
                                    self.traffic_max_burst = None
                                    self.traffic_max_unit = None
                                    self.traffic_min_unit = None
                                    self.traffic_peak_rate = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:intsrv-tspec'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.traffic_average_rate is not None:
                                        return True

                                    if self.traffic_max_burst is not None:
                                        return True

                                    if self.traffic_max_unit is not None:
                                        return True

                                    if self.traffic_min_unit is not None:
                                        return True

                                    if self.traffic_peak_rate is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.g709otn_tspec is not None and self.g709otn_tspec._has_data():
                                    return True

                                if self.intsrv_tspec is not None and self.intsrv_tspec._has_data():
                                    return True

                                if self.tspec_type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec']['meta_info']


                        class Ero(object):
                            """
                            Explicit Route Sub Objects
                            
                            .. attribute:: ero_type
                            
                            	EROType
                            	**type**\:   :py:class:`RsvpMgmtEroSubobjEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjEnum>`
                            
                            .. attribute:: ipv4ero_sub_object
                            
                            	IPV4 ERO Sub Object
                            	**type**\:   :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject>`
                            
                            .. attribute:: unnumbered_ero_sub_object
                            
                            	Unnumbered ERO Sub Object
                            	**type**\:   :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject>`
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ero_type = None
                                self.ipv4ero_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject()
                                self.ipv4ero_sub_object.parent = self
                                self.unnumbered_ero_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject()
                                self.unnumbered_ero_sub_object.parent = self


                            class Ipv4EroSubObject(object):
                                """
                                IPV4 ERO Sub Object
                                
                                .. attribute:: ero_address
                                
                                	The ERO IPV4 Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: is_strict_route
                                
                                	ERO Entry Is Strict
                                	**type**\:  bool
                                
                                .. attribute:: prefix_length
                                
                                	ERO Prefix Length
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.ero_address = None
                                    self.is_strict_route = None
                                    self.prefix_length = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp/Cisco-IOS-XR-ip-rsvp-oper:ero/Cisco-IOS-XR-ip-rsvp-oper:ipv4ero-sub-object'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.ero_address is not None:
                                        return True

                                    if self.is_strict_route is not None:
                                        return True

                                    if self.prefix_length is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject']['meta_info']


                            class UnnumberedEroSubObject(object):
                                """
                                Unnumbered ERO Sub Object
                                
                                .. attribute:: ero_interface_id
                                
                                	The Interface ID in ERO
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ero_router_id
                                
                                	The Router ID in ERO
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: is_strict_route
                                
                                	ERO Entry Is Strict
                                	**type**\:  bool
                                
                                .. attribute:: status
                                
                                	Status of ERO
                                	**type**\:   :py:class:`RsvpMgmtEroSubobjStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatusEnum>`
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.ero_interface_id = None
                                    self.ero_router_id = None
                                    self.is_strict_route = None
                                    self.status = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp/Cisco-IOS-XR-ip-rsvp-oper:ero/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-ero-sub-object'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.ero_interface_id is not None:
                                        return True

                                    if self.ero_router_id is not None:
                                        return True

                                    if self.is_strict_route is not None:
                                        return True

                                    if self.status is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp/Cisco-IOS-XR-ip-rsvp-oper:ero'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ero_type is not None:
                                    return True

                                if self.ipv4ero_sub_object is not None and self.ipv4ero_sub_object._has_data():
                                    return True

                                if self.unnumbered_ero_sub_object is not None and self.unnumbered_ero_sub_object._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero']['meta_info']


                        class UnsupSubObject(object):
                            """
                            Unsupported REVERSE\_LSP Sub Objects
                            
                            .. attribute:: rsvp_mgmt_rev_lsp_unsupported_subobj
                            
                            	rsvp mgmt rev lsp unsupported subobj
                            	**type**\:  list of int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.rsvp_mgmt_rev_lsp_unsupported_subobj = YLeafList()
                                self.rsvp_mgmt_rev_lsp_unsupported_subobj.parent = self
                                self.rsvp_mgmt_rev_lsp_unsupported_subobj.name = 'rsvp_mgmt_rev_lsp_unsupported_subobj'

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp/Cisco-IOS-XR-ip-rsvp-oper:unsup-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.rsvp_mgmt_rev_lsp_unsupported_subobj is not None:
                                    for child in self.rsvp_mgmt_rev_lsp_unsupported_subobj:
                                        if child is not None:
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.UnsupSubObject']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ero is not None:
                                for child_ref in self.ero:
                                    if child_ref._has_data():
                                        return True

                            if self.generic_traffic_spec is not None and self.generic_traffic_spec._has_data():
                                return True

                            if self.unsup_sub_object is not None:
                                for child_ref in self.unsup_sub_object:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp']['meta_info']


                    class Ero(object):
                        """
                        Explicit Route Sub Objects
                        
                        .. attribute:: ero_type
                        
                        	EROType
                        	**type**\:   :py:class:`RsvpMgmtEroSubobjEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjEnum>`
                        
                        .. attribute:: ipv4ero_sub_object
                        
                        	IPV4 ERO Sub Object
                        	**type**\:   :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject>`
                        
                        .. attribute:: unnumbered_ero_sub_object
                        
                        	Unnumbered ERO Sub Object
                        	**type**\:   :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ero_type = None
                            self.ipv4ero_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject()
                            self.ipv4ero_sub_object.parent = self
                            self.unnumbered_ero_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject()
                            self.unnumbered_ero_sub_object.parent = self


                        class Ipv4EroSubObject(object):
                            """
                            IPV4 ERO Sub Object
                            
                            .. attribute:: ero_address
                            
                            	The ERO IPV4 Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: is_strict_route
                            
                            	ERO Entry Is Strict
                            	**type**\:  bool
                            
                            .. attribute:: prefix_length
                            
                            	ERO Prefix Length
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ero_address = None
                                self.is_strict_route = None
                                self.prefix_length = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:ero/Cisco-IOS-XR-ip-rsvp-oper:ipv4ero-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ero_address is not None:
                                    return True

                                if self.is_strict_route is not None:
                                    return True

                                if self.prefix_length is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject']['meta_info']


                        class UnnumberedEroSubObject(object):
                            """
                            Unnumbered ERO Sub Object
                            
                            .. attribute:: ero_interface_id
                            
                            	The Interface ID in ERO
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ero_router_id
                            
                            	The Router ID in ERO
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: is_strict_route
                            
                            	ERO Entry Is Strict
                            	**type**\:  bool
                            
                            .. attribute:: status
                            
                            	Status of ERO
                            	**type**\:   :py:class:`RsvpMgmtEroSubobjStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatusEnum>`
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ero_interface_id = None
                                self.ero_router_id = None
                                self.is_strict_route = None
                                self.status = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:ero/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-ero-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ero_interface_id is not None:
                                    return True

                                if self.ero_router_id is not None:
                                    return True

                                if self.is_strict_route is not None:
                                    return True

                                if self.status is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:ero'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ero_type is not None:
                                return True

                            if self.ipv4ero_sub_object is not None and self.ipv4ero_sub_object._has_data():
                                return True

                            if self.unnumbered_ero_sub_object is not None and self.unnumbered_ero_sub_object._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero']['meta_info']


                    class Rro(object):
                        """
                        Record Route Sub Objects
                        
                        .. attribute:: ipv4rro_sub_object
                        
                        	IPV4 RRO Sub Object
                        	**type**\:   :py:class:`Ipv4RroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject>`
                        
                        .. attribute:: label_rro_sub_object
                        
                        	Label RRO Sub Object
                        	**type**\:   :py:class:`LabelRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject>`
                        
                        .. attribute:: rro_type
                        
                        	RROType
                        	**type**\:   :py:class:`RsvpMgmtRroSubobjEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRroSubobjEnum>`
                        
                        .. attribute:: srlg_rro_sub_object
                        
                        	SRLG RRO Sub Object
                        	**type**\:   :py:class:`SrlgRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject>`
                        
                        .. attribute:: unnumbered_rro_sub_object
                        
                        	Unnumbered RRO Sub Object
                        	**type**\:   :py:class:`UnnumberedRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ipv4rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject()
                            self.ipv4rro_sub_object.parent = self
                            self.label_rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject()
                            self.label_rro_sub_object.parent = self
                            self.rro_type = None
                            self.srlg_rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject()
                            self.srlg_rro_sub_object.parent = self
                            self.unnumbered_rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject()
                            self.unnumbered_rro_sub_object.parent = self


                        class Ipv4RroSubObject(object):
                            """
                            IPV4 RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO IPV4 Subobject Flags
                            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags>`
                            
                            .. attribute:: rro_address
                            
                            	The RRO IPV4 Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags()
                                self.flags.parent = self
                                self.rro_address = None


                            class Flags(object):
                                """
                                The RRO IPV4 Subobject Flags
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\:  bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_id = None
                                    self.is_node_protection_available = None
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:ipv4rro-sub-object/Cisco-IOS-XR-ip-rsvp-oper:flags'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_bandwidth_protected is not None:
                                        return True

                                    if self.is_node_id is not None:
                                        return True

                                    if self.is_node_protection_available is not None:
                                        return True

                                    if self.is_protection_available is not None:
                                        return True

                                    if self.is_protection_in_use is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:ipv4rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.flags is not None and self.flags._has_data():
                                    return True

                                if self.rro_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject']['meta_info']


                        class LabelRroSubObject(object):
                            """
                            Label RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Label Flags
                            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags>`
                            
                            .. attribute:: is_label_variable_length
                            
                            	Is the RRO Subobject Label Variable Length
                            	**type**\:  bool
                            
                            .. attribute:: label
                            
                            	The RRO Subobject Label Value
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: variable_length_label
                            
                            	The RRO Subobject Variable Length Label
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags()
                                self.flags.parent = self
                                self.is_label_variable_length = None
                                self.label = None
                                self.variable_length_label = YLeafList()
                                self.variable_length_label.parent = self
                                self.variable_length_label.name = 'variable_length_label'


                            class Flags(object):
                                """
                                The RRO Subobject Label Flags
                                
                                .. attribute:: is_global_label
                                
                                	Label is Global across all interfaces
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_global_label = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:label-rro-sub-object/Cisco-IOS-XR-ip-rsvp-oper:flags'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_global_label is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:label-rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.flags is not None and self.flags._has_data():
                                    return True

                                if self.is_label_variable_length is not None:
                                    return True

                                if self.label is not None:
                                    return True

                                if self.variable_length_label is not None:
                                    for child in self.variable_length_label:
                                        if child is not None:
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject']['meta_info']


                        class UnnumberedRroSubObject(object):
                            """
                            Unnumbered RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Unnumbered Flags
                            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags>`
                            
                            .. attribute:: interface_address
                            
                            	The RRO Interface Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: interface_id
                            
                            	The RRO Interface ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags()
                                self.flags.parent = self
                                self.interface_address = None
                                self.interface_id = None


                            class Flags(object):
                                """
                                The RRO Subobject Unnumbered Flags
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\:  bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_id = None
                                    self.is_node_protection_available = None
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-rro-sub-object/Cisco-IOS-XR-ip-rsvp-oper:flags'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_bandwidth_protected is not None:
                                        return True

                                    if self.is_node_id is not None:
                                        return True

                                    if self.is_node_protection_available is not None:
                                        return True

                                    if self.is_protection_available is not None:
                                        return True

                                    if self.is_protection_in_use is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.flags is not None and self.flags._has_data():
                                    return True

                                if self.interface_address is not None:
                                    return True

                                if self.interface_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject']['meta_info']


                        class SrlgRroSubObject(object):
                            """
                            SRLG RRO Sub Object
                            
                            .. attribute:: srl_gs
                            
                            	The RRO Subobject SRLGs
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.srl_gs = YLeafList()
                                self.srl_gs.parent = self
                                self.srl_gs.name = 'srl_gs'

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:srlg-rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.srl_gs is not None:
                                    for child in self.srl_gs:
                                        if child is not None:
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4rro_sub_object is not None and self.ipv4rro_sub_object._has_data():
                                return True

                            if self.label_rro_sub_object is not None and self.label_rro_sub_object._has_data():
                                return True

                            if self.rro_type is not None:
                                return True

                            if self.srlg_rro_sub_object is not None and self.srlg_rro_sub_object._has_data():
                                return True

                            if self.unnumbered_rro_sub_object is not None and self.unnumbered_rro_sub_object._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.association is not None and self.association._has_data():
                            return True

                        if self.destination_address is not None:
                            return True

                        if self.ero is not None:
                            for child_ref in self.ero:
                                if child_ref._has_data():
                                    return True

                        if self.generic_in_label is not None and self.generic_in_label._has_data():
                            return True

                        if self.generic_traffic_spec is not None and self.generic_traffic_spec._has_data():
                            return True

                        if self.in_interface is not None:
                            return True

                        if self.in_label is not None:
                            return True

                        if self.incoming_interface_address is not None:
                            return True

                        if self.is_bad_address is not None:
                            return True

                        if self.is_ero_valid is not None:
                            return True

                        if self.is_rro_valid is not None:
                            return True

                        if self.is_traffic_spec_valid is not None:
                            return True

                        if self.is_valid is not None:
                            return True

                        if self.lsp_id is not None:
                            return True

                        if self.lsp_wrap_label is not None:
                            return True

                        if self.p2mp_sub_group_origin is not None:
                            return True

                        if self.protection is not None and self.protection._has_data():
                            return True

                        if self.reverse_lsp is not None and self.reverse_lsp._has_data():
                            return True

                        if self.rro is not None:
                            for child_ref in self.rro:
                                if child_ref._has_data():
                                    return True

                        if self.sub_group_id is not None:
                            return True

                        if self.traffic_spec is not None and self.traffic_spec._has_data():
                            return True

                        if self.tunnel_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo']['meta_info']


                class RsbInfo(object):
                    """
                    Reservation Info
                    
                    .. attribute:: backup_interface
                    
                    	Backup tunnel interface
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: backup_label
                    
                    	Backup label
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: destination_address
                    
                    	Destination address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: flow_spec
                    
                    	Flow spec object
                    	**type**\:   :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec>`
                    
                    .. attribute:: generic_flow_spec
                    
                    	Generic Flow Spec object
                    	**type**\:   :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec>`
                    
                    .. attribute:: generic_out_label
                    
                    	Generic Label for outbound traffic
                    	**type**\:   :py:class:`GenericOutLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel>`
                    
                    .. attribute:: is_flow_spec_valid
                    
                    	FlowSpec validity
                    	**type**\:  bool
                    
                    .. attribute:: is_rro_valid
                    
                    	RRO validity
                    	**type**\:  bool
                    
                    .. attribute:: is_valid
                    
                    	Entry validity
                    	**type**\:  bool
                    
                    .. attribute:: out_interface
                    
                    	Interface on which outbound message was sent
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: out_label
                    
                    	Label for outbound traffic
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: rro
                    
                    	Record route object
                    	**type**\: list of    :py:class:`Rro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.backup_interface = None
                        self.backup_label = None
                        self.destination_address = None
                        self.flow_spec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec()
                        self.flow_spec.parent = self
                        self.generic_flow_spec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec()
                        self.generic_flow_spec.parent = self
                        self.generic_out_label = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel()
                        self.generic_out_label.parent = self
                        self.is_flow_spec_valid = None
                        self.is_rro_valid = None
                        self.is_valid = None
                        self.out_interface = None
                        self.out_label = None
                        self.rro = YList()
                        self.rro.parent = self
                        self.rro.name = 'rro'


                    class GenericOutLabel(object):
                        """
                        Generic Label for outbound traffic
                        
                        .. attribute:: generalized_label
                        
                        	Generalized Label
                        	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel>`
                        
                        .. attribute:: generic_label_type
                        
                        	GenericLabelType
                        	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.generalized_label = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel()
                            self.generalized_label.parent = self
                            self.generic_label_type = None


                        class GeneralizedLabel(object):
                            """
                            Generalized Label
                            
                            .. attribute:: value
                            
                            	Generalized Label Value
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.value = YLeafList()
                                self.value.parent = self
                                self.value.name = 'value'

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-out-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.value is not None:
                                    for child in self.value:
                                        if child is not None:
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-out-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.generalized_label is not None and self.generalized_label._has_data():
                                return True

                            if self.generic_label_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel']['meta_info']


                    class FlowSpec(object):
                        """
                        Flow spec object
                        
                        .. attribute:: flow_average_rate
                        
                        	The Flow Average Rate in bytes per second
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: flow_max_burst
                        
                        	The Flow Maximum Burst
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: flow_max_unit
                        
                        	The Flow Maximum Unit
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: flow_min_unit
                        
                        	The Flow Minimum Unit
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: flow_peak_rate
                        
                        	The Flow Peak Rate in bytes per second
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: flow_qos
                        
                        	The Flow Quality of Service
                        	**type**\:   :py:class:`RsvpMgmtQosServiceEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnumEnum>`
                        
                        .. attribute:: flow_requested_rate
                        
                        	The Flow Requested Rate in bytes per second
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: flow_slack
                        
                        	The Flow Slack
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.flow_average_rate = None
                            self.flow_max_burst = None
                            self.flow_max_unit = None
                            self.flow_min_unit = None
                            self.flow_peak_rate = None
                            self.flow_qos = None
                            self.flow_requested_rate = None
                            self.flow_slack = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:flow-spec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.flow_average_rate is not None:
                                return True

                            if self.flow_max_burst is not None:
                                return True

                            if self.flow_max_unit is not None:
                                return True

                            if self.flow_min_unit is not None:
                                return True

                            if self.flow_peak_rate is not None:
                                return True

                            if self.flow_qos is not None:
                                return True

                            if self.flow_requested_rate is not None:
                                return True

                            if self.flow_slack is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec']['meta_info']


                    class GenericFlowSpec(object):
                        """
                        Generic Flow Spec object
                        
                        .. attribute:: flow_spec_type
                        
                        	FlowSpecType
                        	**type**\:   :py:class:`RsvpMgmtFlowSpecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpecEnum>`
                        
                        .. attribute:: g709otn_flow_spec
                        
                        	G709 OTN FlowSpec
                        	**type**\:   :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.flow_spec_type = None
                            self.g709otn_flow_spec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec()
                            self.g709otn_flow_spec.parent = self


                        class G709OtnFlowSpec(object):
                            """
                            G709 OTN FlowSpec
                            
                            .. attribute:: flow_bit_rate
                            
                            	G709 OTN Flow Bit Rate
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: flow_multiplier
                            
                            	G709 OTN Flow Multiplier
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: flow_nvc
                            
                            	G709 OTN Flow NVC
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: flow_signal_type
                            
                            	G709 OTN Flow Signal Type (Refer G709 v3)
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.flow_bit_rate = None
                                self.flow_multiplier = None
                                self.flow_nvc = None
                                self.flow_signal_type = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-flow-spec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.flow_bit_rate is not None:
                                    return True

                                if self.flow_multiplier is not None:
                                    return True

                                if self.flow_nvc is not None:
                                    return True

                                if self.flow_signal_type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.flow_spec_type is not None:
                                return True

                            if self.g709otn_flow_spec is not None and self.g709otn_flow_spec._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec']['meta_info']


                    class Rro(object):
                        """
                        Record route object
                        
                        .. attribute:: ipv4rro_sub_object
                        
                        	IPV4 RRO Sub Object
                        	**type**\:   :py:class:`Ipv4RroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject>`
                        
                        .. attribute:: label_rro_sub_object
                        
                        	Label RRO Sub Object
                        	**type**\:   :py:class:`LabelRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject>`
                        
                        .. attribute:: rro_type
                        
                        	RROType
                        	**type**\:   :py:class:`RsvpMgmtRroSubobjEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRroSubobjEnum>`
                        
                        .. attribute:: srlg_rro_sub_object
                        
                        	SRLG RRO Sub Object
                        	**type**\:   :py:class:`SrlgRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject>`
                        
                        .. attribute:: unnumbered_rro_sub_object
                        
                        	Unnumbered RRO Sub Object
                        	**type**\:   :py:class:`UnnumberedRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ipv4rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject()
                            self.ipv4rro_sub_object.parent = self
                            self.label_rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject()
                            self.label_rro_sub_object.parent = self
                            self.rro_type = None
                            self.srlg_rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject()
                            self.srlg_rro_sub_object.parent = self
                            self.unnumbered_rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject()
                            self.unnumbered_rro_sub_object.parent = self


                        class Ipv4RroSubObject(object):
                            """
                            IPV4 RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO IPV4 Subobject Flags
                            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags>`
                            
                            .. attribute:: rro_address
                            
                            	The RRO IPV4 Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags()
                                self.flags.parent = self
                                self.rro_address = None


                            class Flags(object):
                                """
                                The RRO IPV4 Subobject Flags
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\:  bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_id = None
                                    self.is_node_protection_available = None
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:ipv4rro-sub-object/Cisco-IOS-XR-ip-rsvp-oper:flags'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_bandwidth_protected is not None:
                                        return True

                                    if self.is_node_id is not None:
                                        return True

                                    if self.is_node_protection_available is not None:
                                        return True

                                    if self.is_protection_available is not None:
                                        return True

                                    if self.is_protection_in_use is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:ipv4rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.flags is not None and self.flags._has_data():
                                    return True

                                if self.rro_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject']['meta_info']


                        class LabelRroSubObject(object):
                            """
                            Label RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Label Flags
                            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags>`
                            
                            .. attribute:: is_label_variable_length
                            
                            	Is the RRO Subobject Label Variable Length
                            	**type**\:  bool
                            
                            .. attribute:: label
                            
                            	The RRO Subobject Label Value
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: variable_length_label
                            
                            	The RRO Subobject Variable Length Label
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags()
                                self.flags.parent = self
                                self.is_label_variable_length = None
                                self.label = None
                                self.variable_length_label = YLeafList()
                                self.variable_length_label.parent = self
                                self.variable_length_label.name = 'variable_length_label'


                            class Flags(object):
                                """
                                The RRO Subobject Label Flags
                                
                                .. attribute:: is_global_label
                                
                                	Label is Global across all interfaces
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_global_label = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:label-rro-sub-object/Cisco-IOS-XR-ip-rsvp-oper:flags'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_global_label is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:label-rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.flags is not None and self.flags._has_data():
                                    return True

                                if self.is_label_variable_length is not None:
                                    return True

                                if self.label is not None:
                                    return True

                                if self.variable_length_label is not None:
                                    for child in self.variable_length_label:
                                        if child is not None:
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject']['meta_info']


                        class UnnumberedRroSubObject(object):
                            """
                            Unnumbered RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Unnumbered Flags
                            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags>`
                            
                            .. attribute:: interface_address
                            
                            	The RRO Interface Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: interface_id
                            
                            	The RRO Interface ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags()
                                self.flags.parent = self
                                self.interface_address = None
                                self.interface_id = None


                            class Flags(object):
                                """
                                The RRO Subobject Unnumbered Flags
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\:  bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_id = None
                                    self.is_node_protection_available = None
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-rro-sub-object/Cisco-IOS-XR-ip-rsvp-oper:flags'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_bandwidth_protected is not None:
                                        return True

                                    if self.is_node_id is not None:
                                        return True

                                    if self.is_node_protection_available is not None:
                                        return True

                                    if self.is_protection_available is not None:
                                        return True

                                    if self.is_protection_in_use is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.flags is not None and self.flags._has_data():
                                    return True

                                if self.interface_address is not None:
                                    return True

                                if self.interface_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject']['meta_info']


                        class SrlgRroSubObject(object):
                            """
                            SRLG RRO Sub Object
                            
                            .. attribute:: srl_gs
                            
                            	The RRO Subobject SRLGs
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.srl_gs = YLeafList()
                                self.srl_gs.parent = self
                                self.srl_gs.name = 'srl_gs'

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:srlg-rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.srl_gs is not None:
                                    for child in self.srl_gs:
                                        if child is not None:
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4rro_sub_object is not None and self.ipv4rro_sub_object._has_data():
                                return True

                            if self.label_rro_sub_object is not None and self.label_rro_sub_object._has_data():
                                return True

                            if self.rro_type is not None:
                                return True

                            if self.srlg_rro_sub_object is not None and self.srlg_rro_sub_object._has_data():
                                return True

                            if self.unnumbered_rro_sub_object is not None and self.unnumbered_rro_sub_object._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.backup_interface is not None:
                            return True

                        if self.backup_label is not None:
                            return True

                        if self.destination_address is not None:
                            return True

                        if self.flow_spec is not None and self.flow_spec._has_data():
                            return True

                        if self.generic_flow_spec is not None and self.generic_flow_spec._has_data():
                            return True

                        if self.generic_out_label is not None and self.generic_out_label._has_data():
                            return True

                        if self.is_flow_spec_valid is not None:
                            return True

                        if self.is_rro_valid is not None:
                            return True

                        if self.is_valid is not None:
                            return True

                        if self.out_interface is not None:
                            return True

                        if self.out_label is not None:
                            return True

                        if self.rro is not None:
                            for child_ref in self.rro:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.psb_info is not None:
                        for child_ref in self.psb_info:
                            if child_ref._has_data():
                                return True

                    if self.rsb_info is not None:
                        for child_ref in self.rsb_info:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.compact is not None and self.compact._has_data():
                    return True

                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.protocol is not None:
                    return True

                if self.psb_rsb_info is not None:
                    for child_ref in self.psb_rsb_info:
                        if child_ref._has_data():
                            return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.SessionDetaileds.SessionDetailed']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_detailed is not None:
                for child_ref in self.session_detailed:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.SessionDetaileds']['meta_info']


    class HelloInstanceDetails(object):
        """
        Table of detailed info about hello instances
        
        .. attribute:: hello_instance_detail
        
        	Detailed info for a single hello instance
        	**type**\: list of    :py:class:`HelloInstanceDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInstanceDetails.HelloInstanceDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.hello_instance_detail = YList()
            self.hello_instance_detail.parent = self
            self.hello_instance_detail.name = 'hello_instance_detail'


        class HelloInstanceDetail(object):
            """
            Detailed info for a single hello instance
            
            .. attribute:: destination_address  <key>
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_address  <key>
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: communication_lost_hello_missed
            
            	Lost Comm. Hello missed count
            	**type**\:  int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_interface_down
            
            	Count of lost comm. due to interface down
            	**type**\:  int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_neighbor_disabled_hello
            
            	Count of lost comm. due to nbor disabling Hellos
            	**type**\:  int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_reason
            
            	Reason why communication was lost
            	**type**\:   :py:class:`RsvpMgmtHelloDownReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloDownReasonEnum>`
            
            .. attribute:: communication_lost_time
            
            	Time when communication was lost
            	**type**\:   :py:class:`CommunicationLostTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime>`
            
            .. attribute:: communication_lost_wrong_destination_inst
            
            	Count of lost comm. due to wrong Destination Inst
            	**type**\:  int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_wrong_source_inst
            
            	Count of lost comm. due to wrong Source Inst
            	**type**\:  int
            
            	**range:** 0..65535
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_instance
            
            	Destination Instance
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: hello_instance_owner
            
            	Hello instance owner
            	**type**\:   :py:class:`RsvpMgmtHelloInstanceOwnerEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstanceOwnerEnum>`
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: hello_interval
            
            	Hello Interval
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: hello_messages_received
            
            	Number of hello messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: hello_messages_sent
            
            	Number of hello messages sent
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: hello_request_suppressed
            
            	Count of Hello Requests suppessed
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:   :py:class:`RsvpMgmtHelloInstanceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstanceEnum>`
            
            .. attribute:: missed_acks_allowed
            
            	Number of missed Hello allowed
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor Hello state
            	**type**\:   :py:class:`RsvpMgmtHelloStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloStateEnum>`
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_instance
            
            	Source Instance
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_communication_lost
            
            	Total number of times communication got lost
            	**type**\:  int
            
            	**range:** 0..65535
            
            .. attribute:: up_time
            
            	Hello up time
            	**type**\:   :py:class:`UpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.UpTime>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.source_address = None
                self.communication_lost_hello_missed = None
                self.communication_lost_interface_down = None
                self.communication_lost_neighbor_disabled_hello = None
                self.communication_lost_reason = None
                self.communication_lost_time = RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime()
                self.communication_lost_time.parent = self
                self.communication_lost_wrong_destination_inst = None
                self.communication_lost_wrong_source_inst = None
                self.destination_address_xr = None
                self.destination_instance = None
                self.hello_instance_owner = None
                self.hello_interface = None
                self.hello_interval = None
                self.hello_messages_received = None
                self.hello_messages_sent = None
                self.hello_request_suppressed = None
                self.instance_type = None
                self.missed_acks_allowed = None
                self.neighbor_hello_state = None
                self.source_address_xr = None
                self.source_instance = None
                self.total_communication_lost = None
                self.up_time = RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.UpTime()
                self.up_time.parent = self


            class UpTime(object):
                """
                Hello up time
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:up-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.UpTime']['meta_info']


            class CommunicationLostTime(object):
                """
                Time when communication was lost
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:communication-lost-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime']['meta_info']

            @property
            def _common_path(self):
                if self.destination_address is None:
                    raise YPYModelError('Key property destination_address is None')
                if self.source_address is None:
                    raise YPYModelError('Key property source_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:hello-instance-details/Cisco-IOS-XR-ip-rsvp-oper:hello-instance-detail[Cisco-IOS-XR-ip-rsvp-oper:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ip-rsvp-oper:source-address = ' + str(self.source_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.communication_lost_hello_missed is not None:
                    return True

                if self.communication_lost_interface_down is not None:
                    return True

                if self.communication_lost_neighbor_disabled_hello is not None:
                    return True

                if self.communication_lost_reason is not None:
                    return True

                if self.communication_lost_time is not None and self.communication_lost_time._has_data():
                    return True

                if self.communication_lost_wrong_destination_inst is not None:
                    return True

                if self.communication_lost_wrong_source_inst is not None:
                    return True

                if self.destination_address_xr is not None:
                    return True

                if self.destination_instance is not None:
                    return True

                if self.hello_instance_owner is not None:
                    return True

                if self.hello_interface is not None:
                    return True

                if self.hello_interval is not None:
                    return True

                if self.hello_messages_received is not None:
                    return True

                if self.hello_messages_sent is not None:
                    return True

                if self.hello_request_suppressed is not None:
                    return True

                if self.instance_type is not None:
                    return True

                if self.missed_acks_allowed is not None:
                    return True

                if self.neighbor_hello_state is not None:
                    return True

                if self.source_address_xr is not None:
                    return True

                if self.source_instance is not None:
                    return True

                if self.total_communication_lost is not None:
                    return True

                if self.up_time is not None and self.up_time._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.HelloInstanceDetails.HelloInstanceDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:hello-instance-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.hello_instance_detail is not None:
                for child_ref in self.hello_instance_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.HelloInstanceDetails']['meta_info']


    class GlobalNeighborDetails(object):
        """
        Table of detailed info about global neighbors
        
        .. attribute:: global_neighbor_detail
        
        	Detail info for a single global neighbor
        	**type**\: list of    :py:class:`GlobalNeighborDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.global_neighbor_detail = YList()
            self.global_neighbor_detail.parent = self
            self.global_neighbor_detail.name = 'global_neighbor_detail'


        class GlobalNeighborDetail(object):
            """
            Detail info for a single global neighbor
            
            .. attribute:: neighbor_address  <key>
            
            	Address of global neighbor
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: global_neighbor_flags
            
            	Global Neighbor Flags
            	**type**\:   :py:class:`GlobalNeighborFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags>`
            
            .. attribute:: hello_interval
            
            	Hello Interval (milliseconds)
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: interface_neighbor
            
            	Interface Neighbor List
            	**type**\:  list of str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: is_gr_enabled
            
            	Is GR enabled
            	**type**\:  bool
            
            .. attribute:: is_recovery_timer_running
            
            	Is RSVP recovery timer running
            	**type**\:  bool
            
            .. attribute:: is_restart_timer_running
            
            	Is GR restart timer running
            	**type**\:  bool
            
            .. attribute:: local_node_address
            
            	Local node address
            	**type**\:  list of str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: lost_communication_reason
            
            	Reason why communication was lost
            	**type**\:  list of   :py:class:`RsvpMgmtHelloDownReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloDownReasonEnum>`
            
            .. attribute:: lost_communication_time
            
            	Time when communication was lost
            	**type**\: list of    :py:class:`LostCommunicationTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.LostCommunicationTime>`
            
            .. attribute:: lost_communication_total
            
            	Total number of times communication got lost
            	**type**\:  list of int
            
            	**range:** 0..65535
            
            .. attribute:: missed_hellos
            
            	Hello missed count
            	**type**\:  int
            
            	**range:** 0..255
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor's hello state
            	**type**\:  list of   :py:class:`RsvpMgmtHelloStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloStateEnum>`
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: pending_states
            
            	Number of pending states for this neighbor
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: recovery_time
            
            	GR Recovery Time (milliseconds)
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: recovery_time_left
            
            	How much recovery timer remains
            	**type**\:   :py:class:`RecoveryTimeLeft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft>`
            
            .. attribute:: recovery_timer_exp_time
            
            	Time at which recovery timer will expire
            	**type**\:   :py:class:`RecoveryTimerExpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime>`
            
            .. attribute:: restart_state
            
            	Current restart state
            	**type**\:   :py:class:`RsvpMgmtRestartStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRestartStateEnum>`
            
            .. attribute:: restart_time
            
            	GR Restart Time (milliseconds)
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: restart_time_left
            
            	How much restart time remains
            	**type**\:   :py:class:`RestartTimeLeft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft>`
            
            .. attribute:: restart_timer_expiry_time
            
            	When will restart timer expire
            	**type**\:   :py:class:`RestartTimerExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime>`
            
            .. attribute:: up_time
            
            	Hello up time
            	**type**\: list of    :py:class:`UpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.UpTime>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.neighbor_address = None
                self.global_neighbor_flags = RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags()
                self.global_neighbor_flags.parent = self
                self.hello_interval = None
                self.interface_neighbor = YLeafList()
                self.interface_neighbor.parent = self
                self.interface_neighbor.name = 'interface_neighbor'
                self.is_gr_enabled = None
                self.is_recovery_timer_running = None
                self.is_restart_timer_running = None
                self.local_node_address = YLeafList()
                self.local_node_address.parent = self
                self.local_node_address.name = 'local_node_address'
                self.lost_communication_reason = YLeafList()
                self.lost_communication_reason.parent = self
                self.lost_communication_reason.name = 'lost_communication_reason'
                self.lost_communication_time = YList()
                self.lost_communication_time.parent = self
                self.lost_communication_time.name = 'lost_communication_time'
                self.lost_communication_total = YLeafList()
                self.lost_communication_total.parent = self
                self.lost_communication_total.name = 'lost_communication_total'
                self.missed_hellos = None
                self.neighbor_hello_state = YLeafList()
                self.neighbor_hello_state.parent = self
                self.neighbor_hello_state.name = 'neighbor_hello_state'
                self.node_address = None
                self.pending_states = None
                self.recovery_time = None
                self.recovery_time_left = RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft()
                self.recovery_time_left.parent = self
                self.recovery_timer_exp_time = RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime()
                self.recovery_timer_exp_time.parent = self
                self.restart_state = None
                self.restart_time = None
                self.restart_time_left = RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft()
                self.restart_time_left.parent = self
                self.restart_timer_expiry_time = RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime()
                self.restart_timer_expiry_time.parent = self
                self.up_time = YList()
                self.up_time.parent = self
                self.up_time.name = 'up_time'


            class GlobalNeighborFlags(object):
                """
                Global Neighbor Flags
                
                .. attribute:: is_application_mpls
                
                	MPLS Application
                	**type**\:  bool
                
                .. attribute:: is_application_ouni
                
                	OUNI Application
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_application_mpls = None
                    self.is_application_ouni = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_application_mpls is not None:
                        return True

                    if self.is_application_ouni is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags']['meta_info']


            class RestartTimeLeft(object):
                """
                How much restart time remains
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:restart-time-left'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft']['meta_info']


            class RestartTimerExpiryTime(object):
                """
                When will restart timer expire
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:restart-timer-expiry-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime']['meta_info']


            class RecoveryTimeLeft(object):
                """
                How much recovery timer remains
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:recovery-time-left'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft']['meta_info']


            class RecoveryTimerExpTime(object):
                """
                Time at which recovery timer will expire
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:recovery-timer-exp-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime']['meta_info']


            class UpTime(object):
                """
                Hello up time
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:up-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.UpTime']['meta_info']


            class LostCommunicationTime(object):
                """
                Time when communication was lost
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:lost-communication-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.LostCommunicationTime']['meta_info']

            @property
            def _common_path(self):
                if self.neighbor_address is None:
                    raise YPYModelError('Key property neighbor_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-details/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-detail[Cisco-IOS-XR-ip-rsvp-oper:neighbor-address = ' + str(self.neighbor_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.neighbor_address is not None:
                    return True

                if self.global_neighbor_flags is not None and self.global_neighbor_flags._has_data():
                    return True

                if self.hello_interval is not None:
                    return True

                if self.interface_neighbor is not None:
                    for child in self.interface_neighbor:
                        if child is not None:
                            return True

                if self.is_gr_enabled is not None:
                    return True

                if self.is_recovery_timer_running is not None:
                    return True

                if self.is_restart_timer_running is not None:
                    return True

                if self.local_node_address is not None:
                    for child in self.local_node_address:
                        if child is not None:
                            return True

                if self.lost_communication_reason is not None:
                    for child in self.lost_communication_reason:
                        if child is not None:
                            return True

                if self.lost_communication_time is not None:
                    for child_ref in self.lost_communication_time:
                        if child_ref._has_data():
                            return True

                if self.lost_communication_total is not None:
                    for child in self.lost_communication_total:
                        if child is not None:
                            return True

                if self.missed_hellos is not None:
                    return True

                if self.neighbor_hello_state is not None:
                    for child in self.neighbor_hello_state:
                        if child is not None:
                            return True

                if self.node_address is not None:
                    return True

                if self.pending_states is not None:
                    return True

                if self.recovery_time is not None:
                    return True

                if self.recovery_time_left is not None and self.recovery_time_left._has_data():
                    return True

                if self.recovery_timer_exp_time is not None and self.recovery_timer_exp_time._has_data():
                    return True

                if self.restart_state is not None:
                    return True

                if self.restart_time is not None:
                    return True

                if self.restart_time_left is not None and self.restart_time_left._has_data():
                    return True

                if self.restart_timer_expiry_time is not None and self.restart_timer_expiry_time._has_data():
                    return True

                if self.up_time is not None:
                    for child_ref in self.up_time:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.global_neighbor_detail is not None:
                for child_ref in self.global_neighbor_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.GlobalNeighborDetails']['meta_info']


    class PsbBriefs(object):
        """
        Table of brief info about path state blocks
        
        .. attribute:: psb_brief
        
        	Brief info for a single path state block
        	**type**\: list of    :py:class:`PsbBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.psb_brief = YList()
            self.psb_brief.parent = self
            self.psb_brief.name = 'psb_brief'


        class PsbBrief(object):
            """
            Brief info for a single path state block
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: generic_traffic_spec
            
            	RSVP Generic Traffic Spec Info
            	**type**\:   :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec>`
            
            .. attribute:: input_interface
            
            	Path Input Interface
            	**type**\:  str
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Session>`
            
            .. attribute:: session_attribute
            
            	RSVP Session Attribute
            	**type**\:   :py:class:`SessionAttribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: template
            
            	RSVP Template
            	**type**\:   :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Template>`
            
            .. attribute:: traffic_spec
            
            	RSVP Traffic Spec Info
            	**type**\:   :py:class:`TrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.TrafficSpec>`
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.extended_tunnel_id = None
                self.generic_traffic_spec = RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec()
                self.generic_traffic_spec.parent = self
                self.input_interface = None
                self.p2mp_id = None
                self.protocol = None
                self.s2l_sub_lsp = RsvpStandby.PsbBriefs.PsbBrief.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = RsvpStandby.PsbBriefs.PsbBrief.Session()
                self.session.parent = self
                self.session_attribute = RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute()
                self.session_attribute.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.sub_group_id = None
                self.sub_group_origin = None
                self.template = RsvpStandby.PsbBriefs.PsbBrief.Template()
                self.template.parent = self
                self.traffic_spec = RsvpStandby.PsbBriefs.PsbBrief.TrafficSpec()
                self.traffic_spec.parent = self
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.S2LSubLsp']['meta_info']


            class Template(object):
                """
                RSVP Template
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:   :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_filter = RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter()
                    self.rsvp_filter.parent = self


                class RsvpFilter(object):
                    """
                    RSVP Filter
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:   :py:class:`RsvpMgmtFilterEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilterEnum>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:   :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:   :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.filter_type = None
                        self.p2mp_ipv4_session = RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self.udp_ipv4_session = RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self


                    class UdpIpv4Session(object):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.source_address = None
                            self.source_port = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:udp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session']['meta_info']


                    class P2MpIpv4Session(object):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.p2mp_sub_group_origin = None
                            self.source_address = None
                            self.source_port = None
                            self.sub_group_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:p2mp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.p2mp_sub_group_origin is not None:
                                return True

                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            if self.sub_group_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.filter_type is not None:
                            return True

                        if self.p2mp_ipv4_session is not None and self.p2mp_ipv4_session._has_data():
                            return True

                        if self.udp_ipv4_session is not None and self.udp_ipv4_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:template'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_filter is not None and self.rsvp_filter._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.Template']['meta_info']


            class SessionAttribute(object):
                """
                RSVP Session Attribute
                
                .. attribute:: reservation_priority
                
                	Reservation Priority
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: sess_attribute_flags
                
                	Session Attributes
                	**type**\:   :py:class:`SessAttributeFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags>`
                
                .. attribute:: setup_priority
                
                	Setup Priority
                	**type**\:  int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.reservation_priority = None
                    self.sess_attribute_flags = RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags()
                    self.sess_attribute_flags.parent = self
                    self.setup_priority = None


                class SessAttributeFlags(object):
                    """
                    Session Attributes
                    
                    .. attribute:: is_bandwidth_protect
                    
                    	Bandwidth Protection
                    	**type**\:  bool
                    
                    .. attribute:: is_local_protect
                    
                    	Local Protection
                    	**type**\:  bool
                    
                    .. attribute:: is_node_protect
                    
                    	Node Protection
                    	**type**\:  bool
                    
                    .. attribute:: is_record_labels
                    
                    	Records Labels
                    	**type**\:  bool
                    
                    .. attribute:: is_shared_explicit_requested
                    
                    	Shared Explicit Requested
                    	**type**\:  bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.is_bandwidth_protect = None
                        self.is_local_protect = None
                        self.is_node_protect = None
                        self.is_record_labels = None
                        self.is_shared_explicit_requested = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session-attribute/Cisco-IOS-XR-ip-rsvp-oper:sess-attribute-flags'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.is_bandwidth_protect is not None:
                            return True

                        if self.is_local_protect is not None:
                            return True

                        if self.is_node_protect is not None:
                            return True

                        if self.is_record_labels is not None:
                            return True

                        if self.is_shared_explicit_requested is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session-attribute'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.reservation_priority is not None:
                        return True

                    if self.sess_attribute_flags is not None and self.sess_attribute_flags._has_data():
                        return True

                    if self.setup_priority is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute']['meta_info']


            class TrafficSpec(object):
                """
                RSVP Traffic Spec Info
                
                .. attribute:: traffic_average_rate
                
                	Traffic Average Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_max_burst
                
                	Traffic Maximum Burst
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: traffic_max_unit
                
                	Traffic Maximum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_min_unit
                
                	Traffic Minimum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_peak_rate
                
                	Traffic Peak Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.traffic_average_rate = None
                    self.traffic_max_burst = None
                    self.traffic_max_unit = None
                    self.traffic_min_unit = None
                    self.traffic_peak_rate = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:traffic-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.traffic_average_rate is not None:
                        return True

                    if self.traffic_max_burst is not None:
                        return True

                    if self.traffic_max_unit is not None:
                        return True

                    if self.traffic_min_unit is not None:
                        return True

                    if self.traffic_peak_rate is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.TrafficSpec']['meta_info']


            class GenericTrafficSpec(object):
                """
                RSVP Generic Traffic Spec Info
                
                .. attribute:: g709otn_tspec
                
                	G709 OTN Sender Tspec
                	**type**\:   :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec>`
                
                .. attribute:: intsrv_tspec
                
                	Integrated Services Sender Tspec
                	**type**\:   :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec>`
                
                .. attribute:: tspec_type
                
                	TspecType
                	**type**\:   :py:class:`RsvpMgmtTspecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspecEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.g709otn_tspec = RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec()
                    self.g709otn_tspec.parent = self
                    self.intsrv_tspec = RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec()
                    self.intsrv_tspec.parent = self
                    self.tspec_type = None


                class G709OtnTspec(object):
                    """
                    G709 OTN Sender Tspec
                    
                    .. attribute:: traffic_bit_rate
                    
                    	G709 OTN Traffic Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_multiplier
                    
                    	G709 OTN Traffic Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_nvc
                    
                    	G709 OTN Traffic NVC
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_signal_type
                    
                    	G709 OTN Traffic Signal Type (Refer G709 v3)
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.traffic_bit_rate = None
                        self.traffic_multiplier = None
                        self.traffic_nvc = None
                        self.traffic_signal_type = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-tspec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.traffic_bit_rate is not None:
                            return True

                        if self.traffic_multiplier is not None:
                            return True

                        if self.traffic_nvc is not None:
                            return True

                        if self.traffic_signal_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec']['meta_info']


                class IntsrvTspec(object):
                    """
                    Integrated Services Sender Tspec
                    
                    .. attribute:: traffic_average_rate
                    
                    	Traffic Average Rate in bytes per second
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_max_burst
                    
                    	Traffic Maximum Burst
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_max_unit
                    
                    	Traffic Maximum Unit
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_min_unit
                    
                    	Traffic Minimum Unit
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_peak_rate
                    
                    	Traffic Peak Rate in bytes per second
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.traffic_average_rate = None
                        self.traffic_max_burst = None
                        self.traffic_max_unit = None
                        self.traffic_min_unit = None
                        self.traffic_peak_rate = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:intsrv-tspec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.traffic_average_rate is not None:
                            return True

                        if self.traffic_max_burst is not None:
                            return True

                        if self.traffic_max_unit is not None:
                            return True

                        if self.traffic_min_unit is not None:
                            return True

                        if self.traffic_peak_rate is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.g709otn_tspec is not None and self.g709otn_tspec._has_data():
                        return True

                    if self.intsrv_tspec is not None and self.intsrv_tspec._has_data():
                        return True

                    if self.tspec_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.generic_traffic_spec is not None and self.generic_traffic_spec._has_data():
                    return True

                if self.input_interface is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.protocol is not None:
                    return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_attribute is not None and self.session_attribute._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.template is not None and self.template._has_data():
                    return True

                if self.traffic_spec is not None and self.traffic_spec._has_data():
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.PsbBriefs.PsbBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.psb_brief is not None:
                for child_ref in self.psb_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.PsbBriefs']['meta_info']


    class GlobalNeighborBriefs(object):
        """
        Table of brief info about global neighbors
        
        .. attribute:: global_neighbor_brief
        
        	Brief info for a single global neighbor
        	**type**\: list of    :py:class:`GlobalNeighborBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.global_neighbor_brief = YList()
            self.global_neighbor_brief.parent = self
            self.global_neighbor_brief.name = 'global_neighbor_brief'


        class GlobalNeighborBrief(object):
            """
            Brief info for a single global neighbor
            
            .. attribute:: neighbor_address  <key>
            
            	Address of global neighbor
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: global_neighbor_flags
            
            	Global Neighbor Flags
            	**type**\:   :py:class:`GlobalNeighborFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags>`
            
            .. attribute:: is_gr_enabled
            
            	Is GR enabled
            	**type**\:  bool
            
            .. attribute:: local_node_address
            
            	Local node address
            	**type**\:  list of str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: lost_communication_reason
            
            	Reason why communication was lost
            	**type**\:  list of   :py:class:`RsvpMgmtHelloDownReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloDownReasonEnum>`
            
            .. attribute:: lost_communication_time
            
            	Time when communication was lost
            	**type**\: list of    :py:class:`LostCommunicationTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.LostCommunicationTime>`
            
            .. attribute:: lost_communication_total
            
            	Total number of times communication got lost
            	**type**\:  list of int
            
            	**range:** 0..65535
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor Hello state
            	**type**\:  list of   :py:class:`RsvpMgmtHelloStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloStateEnum>`
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: restart_state
            
            	Restart state
            	**type**\:   :py:class:`RsvpMgmtRestartStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRestartStateEnum>`
            
            .. attribute:: up_time
            
            	Time hellos have been up
            	**type**\: list of    :py:class:`UpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.UpTime>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.neighbor_address = None
                self.global_neighbor_flags = RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags()
                self.global_neighbor_flags.parent = self
                self.is_gr_enabled = None
                self.local_node_address = YLeafList()
                self.local_node_address.parent = self
                self.local_node_address.name = 'local_node_address'
                self.lost_communication_reason = YLeafList()
                self.lost_communication_reason.parent = self
                self.lost_communication_reason.name = 'lost_communication_reason'
                self.lost_communication_time = YList()
                self.lost_communication_time.parent = self
                self.lost_communication_time.name = 'lost_communication_time'
                self.lost_communication_total = YLeafList()
                self.lost_communication_total.parent = self
                self.lost_communication_total.name = 'lost_communication_total'
                self.neighbor_hello_state = YLeafList()
                self.neighbor_hello_state.parent = self
                self.neighbor_hello_state.name = 'neighbor_hello_state'
                self.node_address = None
                self.restart_state = None
                self.up_time = YList()
                self.up_time.parent = self
                self.up_time.name = 'up_time'


            class GlobalNeighborFlags(object):
                """
                Global Neighbor Flags
                
                .. attribute:: is_application_mpls
                
                	MPLS Application
                	**type**\:  bool
                
                .. attribute:: is_application_ouni
                
                	OUNI Application
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_application_mpls = None
                    self.is_application_ouni = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_application_mpls is not None:
                        return True

                    if self.is_application_ouni is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags']['meta_info']


            class UpTime(object):
                """
                Time hellos have been up
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:up-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.UpTime']['meta_info']


            class LostCommunicationTime(object):
                """
                Time when communication was lost
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:lost-communication-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.LostCommunicationTime']['meta_info']

            @property
            def _common_path(self):
                if self.neighbor_address is None:
                    raise YPYModelError('Key property neighbor_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-briefs/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-brief[Cisco-IOS-XR-ip-rsvp-oper:neighbor-address = ' + str(self.neighbor_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.neighbor_address is not None:
                    return True

                if self.global_neighbor_flags is not None and self.global_neighbor_flags._has_data():
                    return True

                if self.is_gr_enabled is not None:
                    return True

                if self.local_node_address is not None:
                    for child in self.local_node_address:
                        if child is not None:
                            return True

                if self.lost_communication_reason is not None:
                    for child in self.lost_communication_reason:
                        if child is not None:
                            return True

                if self.lost_communication_time is not None:
                    for child_ref in self.lost_communication_time:
                        if child_ref._has_data():
                            return True

                if self.lost_communication_total is not None:
                    for child in self.lost_communication_total:
                        if child is not None:
                            return True

                if self.neighbor_hello_state is not None:
                    for child in self.neighbor_hello_state:
                        if child is not None:
                            return True

                if self.node_address is not None:
                    return True

                if self.restart_state is not None:
                    return True

                if self.up_time is not None:
                    for child_ref in self.up_time:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.global_neighbor_brief is not None:
                for child_ref in self.global_neighbor_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['RsvpStandby.GlobalNeighborBriefs']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return False

    def _has_data(self):
        if not self.is_config():
            return False
        if self.authentication_briefs is not None and self.authentication_briefs._has_data():
            return True

        if self.authentication_details is not None and self.authentication_details._has_data():
            return True

        if self.counters is not None and self.counters._has_data():
            return True

        if self.frr_summary is not None and self.frr_summary._has_data():
            return True

        if self.frrs is not None and self.frrs._has_data():
            return True

        if self.global_neighbor_briefs is not None and self.global_neighbor_briefs._has_data():
            return True

        if self.global_neighbor_details is not None and self.global_neighbor_details._has_data():
            return True

        if self.graceful_restart is not None and self.graceful_restart._has_data():
            return True

        if self.hello_instance_briefs is not None and self.hello_instance_briefs._has_data():
            return True

        if self.hello_instance_details is not None and self.hello_instance_details._has_data():
            return True

        if self.hello_interface_instance_briefs is not None and self.hello_interface_instance_briefs._has_data():
            return True

        if self.hello_interface_instance_details is not None and self.hello_interface_instance_details._has_data():
            return True

        if self.interface_briefs is not None and self.interface_briefs._has_data():
            return True

        if self.interface_detaileds is not None and self.interface_detaileds._has_data():
            return True

        if self.interface_neighbor_briefs is not None and self.interface_neighbor_briefs._has_data():
            return True

        if self.interface_neighbor_details is not None and self.interface_neighbor_details._has_data():
            return True

        if self.interface_summaries is not None and self.interface_summaries._has_data():
            return True

        if self.nsr is not None and self.nsr._has_data():
            return True

        if self.open_config is not None and self.open_config._has_data():
            return True

        if self.psb_briefs is not None and self.psb_briefs._has_data():
            return True

        if self.psb_detaileds is not None and self.psb_detaileds._has_data():
            return True

        if self.request_briefs is not None and self.request_briefs._has_data():
            return True

        if self.request_details is not None and self.request_details._has_data():
            return True

        if self.rsb_briefs is not None and self.rsb_briefs._has_data():
            return True

        if self.rsb_detaileds is not None and self.rsb_detaileds._has_data():
            return True

        if self.session_briefs is not None and self.session_briefs._has_data():
            return True

        if self.session_detaileds is not None and self.session_detaileds._has_data():
            return True

        if self.summary is not None and self.summary._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['RsvpStandby']['meta_info']


class Rsvp(object):
    """
    rsvp
    
    .. attribute:: authentication_briefs
    
    	Table for Authentication related information
    	**type**\:   :py:class:`AuthenticationBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationBriefs>`
    
    .. attribute:: authentication_details
    
    	Table for detailed authentication related information
    	**type**\:   :py:class:`AuthenticationDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails>`
    
    .. attribute:: bw_pool_info
    
    	All B/W Pool info
    	**type**\:   :py:class:`BwPoolInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.BwPoolInfo>`
    
    .. attribute:: controller_briefs
    
    	Table of brief info about RSVP\-enabled controller
    	**type**\:   :py:class:`ControllerBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerBriefs>`
    
    .. attribute:: controller_detaileds
    
    	Table of detailed info about RSVP\-enabled controllers
    	**type**\:   :py:class:`ControllerDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds>`
    
    .. attribute:: controller_summaries
    
    	Table of summary info about RSVP\-enabled controllers
    	**type**\:   :py:class:`ControllerSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerSummaries>`
    
    .. attribute:: counters
    
    	Counters
    	**type**\:   :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters>`
    
    .. attribute:: frr_summary
    
    	Fast Re\-Route Summary State Information
    	**type**\:   :py:class:`FrrSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.FrrSummary>`
    
    .. attribute:: frrs
    
    	Table of detailed info about Fast Re\-route states
    	**type**\:   :py:class:`Frrs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs>`
    
    .. attribute:: global_neighbor_briefs
    
    	Table of brief info about global neighbors
    	**type**\:   :py:class:`GlobalNeighborBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborBriefs>`
    
    .. attribute:: global_neighbor_details
    
    	Table of detailed info about global neighbors
    	**type**\:   :py:class:`GlobalNeighborDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails>`
    
    .. attribute:: graceful_restart
    
    	Info about graceful\-restart
    	**type**\:   :py:class:`GracefulRestart <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GracefulRestart>`
    
    .. attribute:: hello_instance_briefs
    
    	Table of brief info about hello instances
    	**type**\:   :py:class:`HelloInstanceBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInstanceBriefs>`
    
    .. attribute:: hello_instance_details
    
    	Table of detailed info about hello instances
    	**type**\:   :py:class:`HelloInstanceDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInstanceDetails>`
    
    .. attribute:: hello_interface_instance_briefs
    
    	Table of brief info about i/f\-based hello instances
    	**type**\:   :py:class:`HelloInterfaceInstanceBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInterfaceInstanceBriefs>`
    
    .. attribute:: hello_interface_instance_details
    
    	Table of detailed info about i/f\-based hello instances
    	**type**\:   :py:class:`HelloInterfaceInstanceDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInterfaceInstanceDetails>`
    
    .. attribute:: interface_briefs
    
    	Table of brief info about RSVP\-enabled interfaces
    	**type**\:   :py:class:`InterfaceBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceBriefs>`
    
    .. attribute:: interface_detaileds
    
    	Table of detailed info about RSVP\-enabled interfaces
    	**type**\:   :py:class:`InterfaceDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds>`
    
    .. attribute:: interface_neighbor_briefs
    
    	Table of brief info about I/F neighbors
    	**type**\:   :py:class:`InterfaceNeighborBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceNeighborBriefs>`
    
    .. attribute:: interface_neighbor_details
    
    	Table of detailed info about I/F neighbors
    	**type**\:   :py:class:`InterfaceNeighborDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceNeighborDetails>`
    
    .. attribute:: interface_summaries
    
    	Table of summary info about RSVP\-enabled interfaces
    	**type**\:   :py:class:`InterfaceSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceSummaries>`
    
    .. attribute:: issu
    
    	RSVP ISSU information
    	**type**\:   :py:class:`Issu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Issu>`
    
    .. attribute:: nsr
    
    	RSVP NSR information
    	**type**\:   :py:class:`Nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Nsr>`
    
    .. attribute:: open_config
    
    	OpenConfig info
    	**type**\:   :py:class:`OpenConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.OpenConfig>`
    
    .. attribute:: psb_briefs
    
    	Table of brief info about path state blocks
    	**type**\:   :py:class:`PsbBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs>`
    
    .. attribute:: psb_detaileds
    
    	Table of detailed info about path state blocks
    	**type**\:   :py:class:`PsbDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds>`
    
    .. attribute:: pxsb_details
    
    	Table of detailed PXSB info
    	**type**\:   :py:class:`PxsbDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails>`
    
    .. attribute:: request_briefs
    
    	Table of brief info about requests
    	**type**\:   :py:class:`RequestBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs>`
    
    .. attribute:: request_details
    
    	Table of detail info about requests
    	**type**\:   :py:class:`RequestDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails>`
    
    .. attribute:: rsb_briefs
    
    	Table of brief info about reservation state blocks
    	**type**\:   :py:class:`RsbBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs>`
    
    .. attribute:: rsb_detaileds
    
    	Table of detailed info about reservation state blocks
    	**type**\:   :py:class:`RsbDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds>`
    
    .. attribute:: rxsb_details
    
    	Table of detailed RXSB info
    	**type**\:   :py:class:`RxsbDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails>`
    
    .. attribute:: session_briefs
    
    	Table of brief info about sessions
    	**type**\:   :py:class:`SessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs>`
    
    .. attribute:: session_detaileds
    
    	Table of detailed info about sessions
    	**type**\:   :py:class:`SessionDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds>`
    
    .. attribute:: summary
    
    	RSVP summary information
    	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary>`
    
    

    """

    _prefix = 'ip-rsvp-oper'
    _revision = '2015-11-09'

    def __init__(self):
        self.authentication_briefs = Rsvp.AuthenticationBriefs()
        self.authentication_briefs.parent = self
        self.authentication_details = Rsvp.AuthenticationDetails()
        self.authentication_details.parent = self
        self.bw_pool_info = Rsvp.BwPoolInfo()
        self.bw_pool_info.parent = self
        self.controller_briefs = Rsvp.ControllerBriefs()
        self.controller_briefs.parent = self
        self.controller_detaileds = Rsvp.ControllerDetaileds()
        self.controller_detaileds.parent = self
        self.controller_summaries = Rsvp.ControllerSummaries()
        self.controller_summaries.parent = self
        self.counters = Rsvp.Counters()
        self.counters.parent = self
        self.frr_summary = Rsvp.FrrSummary()
        self.frr_summary.parent = self
        self.frrs = Rsvp.Frrs()
        self.frrs.parent = self
        self.global_neighbor_briefs = Rsvp.GlobalNeighborBriefs()
        self.global_neighbor_briefs.parent = self
        self.global_neighbor_details = Rsvp.GlobalNeighborDetails()
        self.global_neighbor_details.parent = self
        self.graceful_restart = Rsvp.GracefulRestart()
        self.graceful_restart.parent = self
        self.hello_instance_briefs = Rsvp.HelloInstanceBriefs()
        self.hello_instance_briefs.parent = self
        self.hello_instance_details = Rsvp.HelloInstanceDetails()
        self.hello_instance_details.parent = self
        self.hello_interface_instance_briefs = Rsvp.HelloInterfaceInstanceBriefs()
        self.hello_interface_instance_briefs.parent = self
        self.hello_interface_instance_details = Rsvp.HelloInterfaceInstanceDetails()
        self.hello_interface_instance_details.parent = self
        self.interface_briefs = Rsvp.InterfaceBriefs()
        self.interface_briefs.parent = self
        self.interface_detaileds = Rsvp.InterfaceDetaileds()
        self.interface_detaileds.parent = self
        self.interface_neighbor_briefs = Rsvp.InterfaceNeighborBriefs()
        self.interface_neighbor_briefs.parent = self
        self.interface_neighbor_details = Rsvp.InterfaceNeighborDetails()
        self.interface_neighbor_details.parent = self
        self.interface_summaries = Rsvp.InterfaceSummaries()
        self.interface_summaries.parent = self
        self.issu = Rsvp.Issu()
        self.issu.parent = self
        self.nsr = Rsvp.Nsr()
        self.nsr.parent = self
        self.open_config = Rsvp.OpenConfig()
        self.open_config.parent = self
        self.psb_briefs = Rsvp.PsbBriefs()
        self.psb_briefs.parent = self
        self.psb_detaileds = Rsvp.PsbDetaileds()
        self.psb_detaileds.parent = self
        self.pxsb_details = Rsvp.PxsbDetails()
        self.pxsb_details.parent = self
        self.request_briefs = Rsvp.RequestBriefs()
        self.request_briefs.parent = self
        self.request_details = Rsvp.RequestDetails()
        self.request_details.parent = self
        self.rsb_briefs = Rsvp.RsbBriefs()
        self.rsb_briefs.parent = self
        self.rsb_detaileds = Rsvp.RsbDetaileds()
        self.rsb_detaileds.parent = self
        self.rxsb_details = Rsvp.RxsbDetails()
        self.rxsb_details.parent = self
        self.session_briefs = Rsvp.SessionBriefs()
        self.session_briefs.parent = self
        self.session_detaileds = Rsvp.SessionDetaileds()
        self.session_detaileds.parent = self
        self.summary = Rsvp.Summary()
        self.summary.parent = self


    class ControllerSummaries(object):
        """
        Table of summary info about RSVP\-enabled
        controllers
        
        .. attribute:: controller_summary
        
        	Summary info about an RSVP\-enabled controller
        	**type**\: list of    :py:class:`ControllerSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerSummaries.ControllerSummary>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.controller_summary = YList()
            self.controller_summary.parent = self
            self.controller_summary.name = 'controller_summary'


        class ControllerSummary(object):
            """
            Summary info about an RSVP\-enabled controller
            
            .. attribute:: controller_name  <key>
            
            	Controller Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:   :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\:  str
            
            .. attribute:: paths_in
            
            	Number of locally created and incoming path states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: paths_out
            
            	Number of outgoing path states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: reservations_in
            
            	Number of locally created and incoming reservation states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: reservations_out
            
            	Number of outgoing reservation states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.controller_name = None
                self.bandwidth_information = Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation()
                self.bandwidth_information.parent = self
                self.interface_name_xr = None
                self.paths_in = None
                self.paths_out = None
                self.reservations_in = None
                self.reservations_out = None


            class BandwidthInformation(object):
                """
                Interface bandwidth information
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:   :py:class:`RsvpMgmtDsteModesEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModesEnum>`
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:   :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:   :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.StandardDsteInterface>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.dste_mode = None
                    self.pre_standard_dste_interface = Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self.standard_dste_interface = Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self


                class PreStandardDsteInterface(object):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_subpool_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:pre-standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_subpool_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_subpool_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.PreStandardDsteInterface']['meta_info']


                class StandardDsteInterface(object):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc0_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc1_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_pool0_bandwidth is not None:
                            return True

                        if self.max_pool1_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.StandardDsteInterface']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:bandwidth-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dste_mode is not None:
                        return True

                    if self.pre_standard_dste_interface is not None and self.pre_standard_dste_interface._has_data():
                        return True

                    if self.standard_dste_interface is not None and self.standard_dste_interface._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation']['meta_info']

            @property
            def _common_path(self):
                if self.controller_name is None:
                    raise YPYModelError('Key property controller_name is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:controller-summaries/Cisco-IOS-XR-ip-rsvp-oper:controller-summary[Cisco-IOS-XR-ip-rsvp-oper:controller-name = ' + str(self.controller_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.controller_name is not None:
                    return True

                if self.bandwidth_information is not None and self.bandwidth_information._has_data():
                    return True

                if self.interface_name_xr is not None:
                    return True

                if self.paths_in is not None:
                    return True

                if self.paths_out is not None:
                    return True

                if self.reservations_in is not None:
                    return True

                if self.reservations_out is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.ControllerSummaries.ControllerSummary']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:controller-summaries'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.controller_summary is not None:
                for child_ref in self.controller_summary:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.ControllerSummaries']['meta_info']


    class Issu(object):
        """
        RSVP ISSU information
        
        .. attribute:: status
        
        	RSVP ISSU status information
        	**type**\:   :py:class:`Status <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Issu.Status>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.status = Rsvp.Issu.Status()
            self.status.parent = self


        class Status(object):
            """
            RSVP ISSU status information
            
            .. attribute:: idt_status
            
            	IDT status
            	**type**\:   :py:class:`IdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Issu.Status.IdtStatus>`
            
            .. attribute:: previous_idt_status
            
            	Previous IDT status
            	**type**\:   :py:class:`PreviousIdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Issu.Status.PreviousIdtStatus>`
            
            .. attribute:: role
            
            	Process role
            	**type**\:   :py:class:`RsvpProcRoleEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRoleEnum>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.idt_status = Rsvp.Issu.Status.IdtStatus()
                self.idt_status.parent = self
                self.previous_idt_status = Rsvp.Issu.Status.PreviousIdtStatus()
                self.previous_idt_status.parent = self
                self.role = None


            class IdtStatus(object):
                """
                IDT status
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:   :py:class:`RsvpProcNsrNotReadyReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReasonEnum>`
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:   :py:class:`RsvpSyncStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatusEnum>`
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.declare_time = None
                    self.idt_end_time = None
                    self.idt_start_time = None
                    self.not_ready_reason = None
                    self.sync_status = None
                    self.withdraw_time = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:issu/Cisco-IOS-XR-ip-rsvp-oper:status/Cisco-IOS-XR-ip-rsvp-oper:idt-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.declare_time is not None:
                        return True

                    if self.idt_end_time is not None:
                        return True

                    if self.idt_start_time is not None:
                        return True

                    if self.not_ready_reason is not None:
                        return True

                    if self.sync_status is not None:
                        return True

                    if self.withdraw_time is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Issu.Status.IdtStatus']['meta_info']


            class PreviousIdtStatus(object):
                """
                Previous IDT status
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:   :py:class:`RsvpProcNsrNotReadyReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReasonEnum>`
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:   :py:class:`RsvpSyncStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatusEnum>`
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.declare_time = None
                    self.idt_end_time = None
                    self.idt_start_time = None
                    self.not_ready_reason = None
                    self.sync_status = None
                    self.withdraw_time = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:issu/Cisco-IOS-XR-ip-rsvp-oper:status/Cisco-IOS-XR-ip-rsvp-oper:previous-idt-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.declare_time is not None:
                        return True

                    if self.idt_end_time is not None:
                        return True

                    if self.idt_start_time is not None:
                        return True

                    if self.not_ready_reason is not None:
                        return True

                    if self.sync_status is not None:
                        return True

                    if self.withdraw_time is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Issu.Status.PreviousIdtStatus']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:issu/Cisco-IOS-XR-ip-rsvp-oper:status'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.idt_status is not None and self.idt_status._has_data():
                    return True

                if self.previous_idt_status is not None and self.previous_idt_status._has_data():
                    return True

                if self.role is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Issu.Status']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:issu'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.status is not None and self.status._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.Issu']['meta_info']


    class ControllerDetaileds(object):
        """
        Table of detailed info about RSVP\-enabled
        controllers
        
        .. attribute:: controller_detailed
        
        	Detailed info about an RSVP\-enabled controller
        	**type**\: list of    :py:class:`ControllerDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.controller_detailed = YList()
            self.controller_detailed.parent = self
            self.controller_detailed.name = 'controller_detailed'


        class ControllerDetailed(object):
            """
            Detailed info about an RSVP\-enabled controller
            
            .. attribute:: controller_name  <key>
            
            	Controller Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: ack_hold_time
            
            	ACK hold time in msec
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: ack_max_size
            
            	Max size for ACK message
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:   :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation>`
            
            .. attribute:: bundle_message_max_size
            
            	Max size in bytes of a single Bundle message
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: expiry_drops_tolerated
            
            	Number of missed messages tolerated
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: expiry_interval
            
            	Expiry interval in msecs
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: millisecond
            
            .. attribute:: expiry_states
            
            	Number of states for expiry check
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: expiry_timer_state
            
            	Expiry timer state
            	**type**\:   :py:class:`RsvpTimerStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerStateEnum>`
            
            .. attribute:: flags
            
            	Interface flags
            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed.Flags>`
            
            .. attribute:: integrity_receive_password
            
            	Integrity receive password
            	**type**\:  str
            
            	**length:** 0..40
            
            .. attribute:: integrity_receive_password_optional
            
            	Integrity recv password optional
            	**type**\:  int
            
            	**range:** 0..255
            
            .. attribute:: integrity_send_password
            
            	Integrity send password
            	**type**\:  str
            
            	**length:** 0..40
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\:  str
            
            .. attribute:: neighbor_array
            
            	Neighbor array
            	**type**\: list of    :py:class:`NeighborArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray>`
            
            .. attribute:: out_of_band_expiry_drops_tolerated
            
            	Number of out\-of\-band missed messages tolerated
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: out_of_band_refresh_interval
            
            	Out\-of\-band Refresh interval in msecs
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: pacing_interval
            
            	Pacing interval in msecs
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: pacing_message_rate
            
            	No. of messages per interval
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: pacing_messages
            
            	Number of messages deferred for pacing
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: pacing_timer_state
            
            	State of pacing timer
            	**type**\:   :py:class:`RsvpTimerStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerStateEnum>`
            
            .. attribute:: refresh_interval
            
            	Refresh interval in msecs
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: millisecond
            
            .. attribute:: refresh_timer_state
            
            	Refresh timer state
            	**type**\:   :py:class:`RsvpTimerStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerStateEnum>`
            
            .. attribute:: retransmit_time
            
            	Retransmit time in msec
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: signalling_ip_tos
            
            	IP TOS (precedence/DSCP) to use in signalling messages
            	**type**\:  int
            
            	**range:** 0..255
            
            .. attribute:: summary_refresh_max_size
            
            	Max size in bytes of a single SRefresh
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: summary_refresh_timer_state
            
            	Summary refresh timer state
            	**type**\:   :py:class:`RsvpTimerStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerStateEnum>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.controller_name = None
                self.ack_hold_time = None
                self.ack_max_size = None
                self.bandwidth_information = Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation()
                self.bandwidth_information.parent = self
                self.bundle_message_max_size = None
                self.expiry_drops_tolerated = None
                self.expiry_interval = None
                self.expiry_states = None
                self.expiry_timer_state = None
                self.flags = Rsvp.ControllerDetaileds.ControllerDetailed.Flags()
                self.flags.parent = self
                self.integrity_receive_password = None
                self.integrity_receive_password_optional = None
                self.integrity_send_password = None
                self.interface_name_xr = None
                self.neighbor_array = YList()
                self.neighbor_array.parent = self
                self.neighbor_array.name = 'neighbor_array'
                self.out_of_band_expiry_drops_tolerated = None
                self.out_of_band_refresh_interval = None
                self.pacing_interval = None
                self.pacing_message_rate = None
                self.pacing_messages = None
                self.pacing_timer_state = None
                self.refresh_interval = None
                self.refresh_timer_state = None
                self.retransmit_time = None
                self.signalling_ip_tos = None
                self.summary_refresh_max_size = None
                self.summary_refresh_timer_state = None


            class BandwidthInformation(object):
                """
                Interface bandwidth information
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:   :py:class:`RsvpMgmtDsteModesEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModesEnum>`
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:   :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:   :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.StandardDsteInterface>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.dste_mode = None
                    self.pre_standard_dste_interface = Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self.standard_dste_interface = Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self


                class PreStandardDsteInterface(object):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_subpool_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:pre-standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_subpool_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_subpool_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.PreStandardDsteInterface']['meta_info']


                class StandardDsteInterface(object):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc0_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc1_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_pool0_bandwidth is not None:
                            return True

                        if self.max_pool1_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.StandardDsteInterface']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:bandwidth-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dste_mode is not None:
                        return True

                    if self.pre_standard_dste_interface is not None and self.pre_standard_dste_interface._has_data():
                        return True

                    if self.standard_dste_interface is not None and self.standard_dste_interface._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation']['meta_info']


            class Flags(object):
                """
                Interface flags
                
                .. attribute:: is_backup_tunnel
                
                	This is backup tunnel
                	**type**\:  bool
                
                .. attribute:: is_interface_created
                
                	Interface is created
                	**type**\:  bool
                
                .. attribute:: is_interface_down
                
                	Interface is DOWN
                	**type**\:  bool
                
                .. attribute:: is_message_bundling_enabled
                
                	Use bundling for outgoing RSVP messages
                	**type**\:  bool
                
                .. attribute:: is_mpls_enabled
                
                	MPLS enabled on interface
                	**type**\:  bool
                
                .. attribute:: is_non_default_vrf
                
                	Interface is defined in non\-Default VRF
                	**type**\:  bool
                
                .. attribute:: is_pacing_enabled
                
                	Message pacing enabled
                	**type**\:  bool
                
                .. attribute:: is_refresh_enabled
                
                	Refresh enabled
                	**type**\:  bool
                
                .. attribute:: is_refresh_reduction_enabled
                
                	Refresh Reduction enabled
                	**type**\:  bool
                
                .. attribute:: is_rel_s_refresh_enabled
                
                	Use reliable xmt for SRefresh
                	**type**\:  bool
                
                .. attribute:: is_rsvp_configured
                
                	RSVP explicitly configured
                	**type**\:  bool
                
                .. attribute:: is_s_refresh_enabled
                
                	Summary Refresh enabled
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_backup_tunnel = None
                    self.is_interface_created = None
                    self.is_interface_down = None
                    self.is_message_bundling_enabled = None
                    self.is_mpls_enabled = None
                    self.is_non_default_vrf = None
                    self.is_pacing_enabled = None
                    self.is_refresh_enabled = None
                    self.is_refresh_reduction_enabled = None
                    self.is_rel_s_refresh_enabled = None
                    self.is_rsvp_configured = None
                    self.is_s_refresh_enabled = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_backup_tunnel is not None:
                        return True

                    if self.is_interface_created is not None:
                        return True

                    if self.is_interface_down is not None:
                        return True

                    if self.is_message_bundling_enabled is not None:
                        return True

                    if self.is_mpls_enabled is not None:
                        return True

                    if self.is_non_default_vrf is not None:
                        return True

                    if self.is_pacing_enabled is not None:
                        return True

                    if self.is_refresh_enabled is not None:
                        return True

                    if self.is_refresh_reduction_enabled is not None:
                        return True

                    if self.is_rel_s_refresh_enabled is not None:
                        return True

                    if self.is_rsvp_configured is not None:
                        return True

                    if self.is_s_refresh_enabled is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.ControllerDetaileds.ControllerDetailed.Flags']['meta_info']


            class NeighborArray(object):
                """
                Neighbor array
                
                .. attribute:: expiry_time
                
                	Expiry time
                	**type**\:   :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray.ExpiryTime>`
                
                .. attribute:: is_neighbor_refresh_reduction_capable
                
                	Is neighbor capable of Refresh Reduction
                	**type**\:  bool
                
                .. attribute:: message_ids
                
                	Number of MessageIDs
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_message_id
                
                	List of Neighbor MessageIDs
                	**type**\: list of    :py:class:`NeighborMessageId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray.NeighborMessageId>`
                
                .. attribute:: outgoing_states
                
                	Number of outgoing states to the neighbour
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.expiry_time = Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray.ExpiryTime()
                    self.expiry_time.parent = self
                    self.is_neighbor_refresh_reduction_capable = None
                    self.message_ids = None
                    self.neighbor_address = None
                    self.neighbor_message_id = YList()
                    self.neighbor_message_id.parent = self
                    self.neighbor_message_id.name = 'neighbor_message_id'
                    self.outgoing_states = None


                class ExpiryTime(object):
                    """
                    Expiry time
                    
                    .. attribute:: nanoseconds
                    
                    	Time Value in Nano\-seconds
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	Time Value in Seconds
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:expiry-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray.ExpiryTime']['meta_info']


                class NeighborMessageId(object):
                    """
                    List of Neighbor MessageIDs
                    
                    .. attribute:: message_id
                    
                    	Message ID
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.message_id = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:neighbor-message-id'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.message_id is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray.NeighborMessageId']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:neighbor-array'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.expiry_time is not None and self.expiry_time._has_data():
                        return True

                    if self.is_neighbor_refresh_reduction_capable is not None:
                        return True

                    if self.message_ids is not None:
                        return True

                    if self.neighbor_address is not None:
                        return True

                    if self.neighbor_message_id is not None:
                        for child_ref in self.neighbor_message_id:
                            if child_ref._has_data():
                                return True

                    if self.outgoing_states is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray']['meta_info']

            @property
            def _common_path(self):
                if self.controller_name is None:
                    raise YPYModelError('Key property controller_name is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:controller-detaileds/Cisco-IOS-XR-ip-rsvp-oper:controller-detailed[Cisco-IOS-XR-ip-rsvp-oper:controller-name = ' + str(self.controller_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.controller_name is not None:
                    return True

                if self.ack_hold_time is not None:
                    return True

                if self.ack_max_size is not None:
                    return True

                if self.bandwidth_information is not None and self.bandwidth_information._has_data():
                    return True

                if self.bundle_message_max_size is not None:
                    return True

                if self.expiry_drops_tolerated is not None:
                    return True

                if self.expiry_interval is not None:
                    return True

                if self.expiry_states is not None:
                    return True

                if self.expiry_timer_state is not None:
                    return True

                if self.flags is not None and self.flags._has_data():
                    return True

                if self.integrity_receive_password is not None:
                    return True

                if self.integrity_receive_password_optional is not None:
                    return True

                if self.integrity_send_password is not None:
                    return True

                if self.interface_name_xr is not None:
                    return True

                if self.neighbor_array is not None:
                    for child_ref in self.neighbor_array:
                        if child_ref._has_data():
                            return True

                if self.out_of_band_expiry_drops_tolerated is not None:
                    return True

                if self.out_of_band_refresh_interval is not None:
                    return True

                if self.pacing_interval is not None:
                    return True

                if self.pacing_message_rate is not None:
                    return True

                if self.pacing_messages is not None:
                    return True

                if self.pacing_timer_state is not None:
                    return True

                if self.refresh_interval is not None:
                    return True

                if self.refresh_timer_state is not None:
                    return True

                if self.retransmit_time is not None:
                    return True

                if self.signalling_ip_tos is not None:
                    return True

                if self.summary_refresh_max_size is not None:
                    return True

                if self.summary_refresh_timer_state is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.ControllerDetaileds.ControllerDetailed']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:controller-detaileds'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.controller_detailed is not None:
                for child_ref in self.controller_detailed:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.ControllerDetaileds']['meta_info']


    class BwPoolInfo(object):
        """
        All B/W Pool info
        
        .. attribute:: bandwidth_configuration_model
        
        	Bandwith configuration model currently in use (MAM/RDM)
        	**type**\:   :py:class:`IgpteLibBwModelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.IgpteLibBwModelEnum>`
        
        .. attribute:: bc0_percent
        
        	BC0 I/F percent B/W
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        	**units**\: percentage
        
        .. attribute:: bc1_percent
        
        	BC1 I/F percent B/W
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        	**units**\: percentage
        
        .. attribute:: is_bc0_percent_configured
        
        	Is BC0 default I/F percent configured
        	**type**\:  bool
        
        .. attribute:: is_bc1_percent_configured
        
        	Is BC1 default I/F percent configured
        	**type**\:  bool
        
        .. attribute:: is_max_res_pool_percent_configured
        
        	Is maximum reservable default I/F percent configured
        	**type**\:  bool
        
        .. attribute:: max_res_pool_percent
        
        	Maxium reservable I/F percent B/W
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        	**units**\: percentage
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.bandwidth_configuration_model = None
            self.bc0_percent = None
            self.bc1_percent = None
            self.is_bc0_percent_configured = None
            self.is_bc1_percent_configured = None
            self.is_max_res_pool_percent_configured = None
            self.max_res_pool_percent = None

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:bw-pool-info'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.bandwidth_configuration_model is not None:
                return True

            if self.bc0_percent is not None:
                return True

            if self.bc1_percent is not None:
                return True

            if self.is_bc0_percent_configured is not None:
                return True

            if self.is_bc1_percent_configured is not None:
                return True

            if self.is_max_res_pool_percent_configured is not None:
                return True

            if self.max_res_pool_percent is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.BwPoolInfo']['meta_info']


    class ControllerBriefs(object):
        """
        Table of brief info about RSVP\-enabled
        controller
        
        .. attribute:: controller_brief
        
        	Brief info about an RSVP\-enabled controller
        	**type**\: list of    :py:class:`ControllerBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerBriefs.ControllerBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.controller_brief = YList()
            self.controller_brief.parent = self
            self.controller_brief.name = 'controller_brief'


        class ControllerBrief(object):
            """
            Brief info about an RSVP\-enabled controller
            
            .. attribute:: controller_name  <key>
            
            	Controller Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:   :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\:  str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.controller_name = None
                self.bandwidth_information = Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation()
                self.bandwidth_information.parent = self
                self.interface_name_xr = None


            class BandwidthInformation(object):
                """
                Interface bandwidth information
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:   :py:class:`RsvpMgmtDsteModesEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModesEnum>`
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:   :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:   :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.StandardDsteInterface>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.dste_mode = None
                    self.pre_standard_dste_interface = Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self.standard_dste_interface = Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self


                class PreStandardDsteInterface(object):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_subpool_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:pre-standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_subpool_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_subpool_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.PreStandardDsteInterface']['meta_info']


                class StandardDsteInterface(object):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc0_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc1_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_pool0_bandwidth is not None:
                            return True

                        if self.max_pool1_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.StandardDsteInterface']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:bandwidth-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dste_mode is not None:
                        return True

                    if self.pre_standard_dste_interface is not None and self.pre_standard_dste_interface._has_data():
                        return True

                    if self.standard_dste_interface is not None and self.standard_dste_interface._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation']['meta_info']

            @property
            def _common_path(self):
                if self.controller_name is None:
                    raise YPYModelError('Key property controller_name is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:controller-briefs/Cisco-IOS-XR-ip-rsvp-oper:controller-brief[Cisco-IOS-XR-ip-rsvp-oper:controller-name = ' + str(self.controller_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.controller_name is not None:
                    return True

                if self.bandwidth_information is not None and self.bandwidth_information._has_data():
                    return True

                if self.interface_name_xr is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.ControllerBriefs.ControllerBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:controller-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.controller_brief is not None:
                for child_ref in self.controller_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.ControllerBriefs']['meta_info']


    class PxsbDetails(object):
        """
        Table of detailed PXSB info
        
        .. attribute:: pxsb_detail
        
        	Detailed PXSB info
        	**type**\: list of    :py:class:`PxsbDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.pxsb_detail = YList()
            self.pxsb_detail.parent = self
            self.pxsb_detail.name = 'pxsb_detail'


        class PxsbDetail(object):
            """
            Detailed PXSB info
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: dynamic_state
            
            	Dynamic State Handle
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: generic_traffic_spec
            
            	RSVP Generic Traffic Spec Info
            	**type**\:   :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec>`
            
            .. attribute:: hop
            
            	Path Hop Info
            	**type**\:   :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Hop>`
            
            .. attribute:: input_interface
            
            	Path Input Interface
            	**type**\:  str
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: rsvp_header
            
            	RSVP Header
            	**type**\:   :py:class:`RsvpHeader <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.RsvpHeader>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Session>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: template
            
            	RSVP Template
            	**type**\:   :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Template>`
            
            .. attribute:: traffic_spec
            
            	RSVP Traffic Spec Info
            	**type**\:   :py:class:`TrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.TrafficSpec>`
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.dynamic_state = None
                self.extended_tunnel_id = None
                self.generic_traffic_spec = Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec()
                self.generic_traffic_spec.parent = self
                self.hop = Rsvp.PxsbDetails.PxsbDetail.Hop()
                self.hop.parent = self
                self.input_interface = None
                self.p2mp_id = None
                self.protocol = None
                self.rsvp_header = Rsvp.PxsbDetails.PxsbDetail.RsvpHeader()
                self.rsvp_header.parent = self
                self.s2l_sub_lsp = Rsvp.PxsbDetails.PxsbDetail.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = Rsvp.PxsbDetails.PxsbDetail.Session()
                self.session.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.sub_group_id = None
                self.sub_group_origin = None
                self.template = Rsvp.PxsbDetails.PxsbDetail.Template()
                self.template.parent = self
                self.traffic_spec = Rsvp.PxsbDetails.PxsbDetail.TrafficSpec()
                self.traffic_spec.parent = self
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.S2LSubLsp']['meta_info']


            class Template(object):
                """
                RSVP Template
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:   :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_filter = Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter()
                    self.rsvp_filter.parent = self


                class RsvpFilter(object):
                    """
                    RSVP Filter
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:   :py:class:`RsvpMgmtFilterEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilterEnum>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:   :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:   :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.UdpIpv4Session>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.filter_type = None
                        self.p2mp_ipv4_session = Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self.udp_ipv4_session = Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self


                    class UdpIpv4Session(object):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.source_address = None
                            self.source_port = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:udp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.UdpIpv4Session']['meta_info']


                    class P2MpIpv4Session(object):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.p2mp_sub_group_origin = None
                            self.source_address = None
                            self.source_port = None
                            self.sub_group_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:p2mp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.p2mp_sub_group_origin is not None:
                                return True

                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            if self.sub_group_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.P2MpIpv4Session']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.filter_type is not None:
                            return True

                        if self.p2mp_ipv4_session is not None and self.p2mp_ipv4_session._has_data():
                            return True

                        if self.udp_ipv4_session is not None and self.udp_ipv4_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:template'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_filter is not None and self.rsvp_filter._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.Template']['meta_info']


            class TrafficSpec(object):
                """
                RSVP Traffic Spec Info
                
                .. attribute:: traffic_average_rate
                
                	Traffic Average Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_max_burst
                
                	Traffic Maximum Burst
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: traffic_max_unit
                
                	Traffic Maximum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_min_unit
                
                	Traffic Minimum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_peak_rate
                
                	Traffic Peak Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.traffic_average_rate = None
                    self.traffic_max_burst = None
                    self.traffic_max_unit = None
                    self.traffic_min_unit = None
                    self.traffic_peak_rate = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:traffic-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.traffic_average_rate is not None:
                        return True

                    if self.traffic_max_burst is not None:
                        return True

                    if self.traffic_max_unit is not None:
                        return True

                    if self.traffic_min_unit is not None:
                        return True

                    if self.traffic_peak_rate is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.TrafficSpec']['meta_info']


            class GenericTrafficSpec(object):
                """
                RSVP Generic Traffic Spec Info
                
                .. attribute:: g709otn_tspec
                
                	G709 OTN Sender Tspec
                	**type**\:   :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.G709OtnTspec>`
                
                .. attribute:: intsrv_tspec
                
                	Integrated Services Sender Tspec
                	**type**\:   :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.IntsrvTspec>`
                
                .. attribute:: tspec_type
                
                	TspecType
                	**type**\:   :py:class:`RsvpMgmtTspecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspecEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.g709otn_tspec = Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.G709OtnTspec()
                    self.g709otn_tspec.parent = self
                    self.intsrv_tspec = Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.IntsrvTspec()
                    self.intsrv_tspec.parent = self
                    self.tspec_type = None


                class G709OtnTspec(object):
                    """
                    G709 OTN Sender Tspec
                    
                    .. attribute:: traffic_bit_rate
                    
                    	G709 OTN Traffic Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_multiplier
                    
                    	G709 OTN Traffic Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_nvc
                    
                    	G709 OTN Traffic NVC
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_signal_type
                    
                    	G709 OTN Traffic Signal Type (Refer G709 v3)
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.traffic_bit_rate = None
                        self.traffic_multiplier = None
                        self.traffic_nvc = None
                        self.traffic_signal_type = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-tspec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.traffic_bit_rate is not None:
                            return True

                        if self.traffic_multiplier is not None:
                            return True

                        if self.traffic_nvc is not None:
                            return True

                        if self.traffic_signal_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.G709OtnTspec']['meta_info']


                class IntsrvTspec(object):
                    """
                    Integrated Services Sender Tspec
                    
                    .. attribute:: traffic_average_rate
                    
                    	Traffic Average Rate in bytes per second
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_max_burst
                    
                    	Traffic Maximum Burst
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_max_unit
                    
                    	Traffic Maximum Unit
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_min_unit
                    
                    	Traffic Minimum Unit
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_peak_rate
                    
                    	Traffic Peak Rate in bytes per second
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.traffic_average_rate = None
                        self.traffic_max_burst = None
                        self.traffic_max_unit = None
                        self.traffic_min_unit = None
                        self.traffic_peak_rate = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:intsrv-tspec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.traffic_average_rate is not None:
                            return True

                        if self.traffic_max_burst is not None:
                            return True

                        if self.traffic_max_unit is not None:
                            return True

                        if self.traffic_min_unit is not None:
                            return True

                        if self.traffic_peak_rate is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.IntsrvTspec']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.g709otn_tspec is not None and self.g709otn_tspec._has_data():
                        return True

                    if self.intsrv_tspec is not None and self.intsrv_tspec._has_data():
                        return True

                    if self.tspec_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec']['meta_info']


            class Hop(object):
                """
                Path Hop Info
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:hop'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.neighbor_address is not None:
                        return True

                    if self.neighbor_logical_interface_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.Hop']['meta_info']


            class RsvpHeader(object):
                """
                RSVP Header
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\:  int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ip_source_address = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.rsvp_header_flags = None
                    self.rsvp_message_type = None
                    self.rsvp_ttl = None
                    self.rsvp_version = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:rsvp-header'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ip_source_address is not None:
                        return True

                    if self.ip_tos is not None:
                        return True

                    if self.ip_ttl is not None:
                        return True

                    if self.rsvp_header_flags is not None:
                        return True

                    if self.rsvp_message_type is not None:
                        return True

                    if self.rsvp_ttl is not None:
                        return True

                    if self.rsvp_version is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail.RsvpHeader']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details/Cisco-IOS-XR-ip-rsvp-oper:pxsb-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.dynamic_state is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.generic_traffic_spec is not None and self.generic_traffic_spec._has_data():
                    return True

                if self.hop is not None and self.hop._has_data():
                    return True

                if self.input_interface is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.protocol is not None:
                    return True

                if self.rsvp_header is not None and self.rsvp_header._has_data():
                    return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.template is not None and self.template._has_data():
                    return True

                if self.traffic_spec is not None and self.traffic_spec._has_data():
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.PxsbDetails.PxsbDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:pxsb-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.pxsb_detail is not None:
                for child_ref in self.pxsb_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.PxsbDetails']['meta_info']


    class RxsbDetails(object):
        """
        Table of detailed RXSB info
        
        .. attribute:: rxsb_detail
        
        	Detailed RXSB info
        	**type**\: list of    :py:class:`RxsbDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.rxsb_detail = YList()
            self.rxsb_detail.parent = self
            self.rxsb_detail.name = 'rxsb_detail'


        class RxsbDetail(object):
            """
            Detailed RXSB info
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: dynamic_state
            
            	Dynamic State Handle
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:   :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Filter>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:   :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Information
            	**type**\:   :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec>`
            
            .. attribute:: hop
            
            	Path Hop Info
            	**type**\:   :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Hop>`
            
            .. attribute:: input_interface
            
            	Path Input Interface
            	**type**\:  str
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: rsvp_header
            
            	RSVP Header
            	**type**\:   :py:class:`RsvpHeader <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.RsvpHeader>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Session>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:   :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Style>`
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.dynamic_state = None
                self.extended_tunnel_id = None
                self.filter = Rsvp.RxsbDetails.RxsbDetail.Filter()
                self.filter.parent = self
                self.flow_spec = Rsvp.RxsbDetails.RxsbDetail.FlowSpec()
                self.flow_spec.parent = self
                self.generic_flow_spec = Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self.hop = Rsvp.RxsbDetails.RxsbDetail.Hop()
                self.hop.parent = self
                self.input_interface = None
                self.p2mp_id = None
                self.protocol = None
                self.rsvp_header = Rsvp.RxsbDetails.RxsbDetail.RsvpHeader()
                self.rsvp_header.parent = self
                self.s2l_sub_lsp = Rsvp.RxsbDetails.RxsbDetail.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = Rsvp.RxsbDetails.RxsbDetail.Session()
                self.session.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.style = Rsvp.RxsbDetails.RxsbDetail.Style()
                self.style.parent = self
                self.sub_group_id = None
                self.sub_group_origin = None
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.S2LSubLsp']['meta_info']


            class Style(object):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:   :py:class:`RsvpMgmtReservationTypeEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnumEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.reservation_type = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:style'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.reservation_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.Style']['meta_info']


            class Filter(object):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:   :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_filter = Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self


                class RsvpFilter(object):
                    """
                    RSVP Filter
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:   :py:class:`RsvpMgmtFilterEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilterEnum>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:   :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:   :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.filter_type = None
                        self.p2mp_ipv4_session = Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self.udp_ipv4_session = Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self


                    class UdpIpv4Session(object):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.source_address = None
                            self.source_port = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:udp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.UdpIpv4Session']['meta_info']


                    class P2MpIpv4Session(object):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.p2mp_sub_group_origin = None
                            self.source_address = None
                            self.source_port = None
                            self.sub_group_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:p2mp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.p2mp_sub_group_origin is not None:
                                return True

                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            if self.sub_group_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.P2MpIpv4Session']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.filter_type is not None:
                            return True

                        if self.p2mp_ipv4_session is not None and self.p2mp_ipv4_session._has_data():
                            return True

                        if self.udp_ipv4_session is not None and self.udp_ipv4_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:filter'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_filter is not None and self.rsvp_filter._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.Filter']['meta_info']


            class FlowSpec(object):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:   :py:class:`RsvpMgmtQosServiceEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnumEnum>`
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_max_unit = None
                    self.flow_min_unit = None
                    self.flow_peak_rate = None
                    self.flow_qos = None
                    self.flow_requested_rate = None
                    self.flow_slack = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_average_rate is not None:
                        return True

                    if self.flow_max_burst is not None:
                        return True

                    if self.flow_max_unit is not None:
                        return True

                    if self.flow_min_unit is not None:
                        return True

                    if self.flow_peak_rate is not None:
                        return True

                    if self.flow_qos is not None:
                        return True

                    if self.flow_requested_rate is not None:
                        return True

                    if self.flow_slack is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.FlowSpec']['meta_info']


            class GenericFlowSpec(object):
                """
                Generic Flow Spec Information
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:   :py:class:`RsvpMgmtFlowSpecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpecEnum>`
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:   :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec.G709OtnFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_spec_type = None
                    self.g709otn_flow_spec = Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self


                class G709OtnFlowSpec(object):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.flow_bit_rate = None
                        self.flow_multiplier = None
                        self.flow_nvc = None
                        self.flow_signal_type = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-flow-spec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.flow_bit_rate is not None:
                            return True

                        if self.flow_multiplier is not None:
                            return True

                        if self.flow_nvc is not None:
                            return True

                        if self.flow_signal_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec.G709OtnFlowSpec']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_spec_type is not None:
                        return True

                    if self.g709otn_flow_spec is not None and self.g709otn_flow_spec._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec']['meta_info']


            class Hop(object):
                """
                Path Hop Info
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:hop'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.neighbor_address is not None:
                        return True

                    if self.neighbor_logical_interface_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.Hop']['meta_info']


            class RsvpHeader(object):
                """
                RSVP Header
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\:  int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ip_source_address = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.rsvp_header_flags = None
                    self.rsvp_message_type = None
                    self.rsvp_ttl = None
                    self.rsvp_version = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail/Cisco-IOS-XR-ip-rsvp-oper:rsvp-header'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ip_source_address is not None:
                        return True

                    if self.ip_tos is not None:
                        return True

                    if self.ip_ttl is not None:
                        return True

                    if self.rsvp_header_flags is not None:
                        return True

                    if self.rsvp_message_type is not None:
                        return True

                    if self.rsvp_ttl is not None:
                        return True

                    if self.rsvp_version is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail.RsvpHeader']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details/Cisco-IOS-XR-ip-rsvp-oper:rxsb-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.dynamic_state is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.filter is not None and self.filter._has_data():
                    return True

                if self.flow_spec is not None and self.flow_spec._has_data():
                    return True

                if self.generic_flow_spec is not None and self.generic_flow_spec._has_data():
                    return True

                if self.hop is not None and self.hop._has_data():
                    return True

                if self.input_interface is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.protocol is not None:
                    return True

                if self.rsvp_header is not None and self.rsvp_header._has_data():
                    return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.style is not None and self.style._has_data():
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.RxsbDetails.RxsbDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rxsb-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.rxsb_detail is not None:
                for child_ref in self.rxsb_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.RxsbDetails']['meta_info']


    class InterfaceNeighborBriefs(object):
        """
        Table of brief info about I/F neighbors
        
        .. attribute:: interface_neighbor_brief
        
        	Brief info for a single interface neighbor
        	**type**\: list of    :py:class:`InterfaceNeighborBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceNeighborBriefs.InterfaceNeighborBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.interface_neighbor_brief = YList()
            self.interface_neighbor_brief.parent = self
            self.interface_neighbor_brief.name = 'interface_neighbor_brief'


        class InterfaceNeighborBrief(object):
            """
            Brief info for a single interface neighbor
            
            .. attribute:: neighbor_address  <key>
            
            	Address of global neighbor
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_neighbor_list_compact
            
            	Compact list of I/F Neighbors
            	**type**\: list of    :py:class:`InterfaceNeighborListCompact <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceNeighborBriefs.InterfaceNeighborBrief.InterfaceNeighborListCompact>`
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.neighbor_address = None
                self.interface_neighbor_list_compact = YList()
                self.interface_neighbor_list_compact.parent = self
                self.interface_neighbor_list_compact.name = 'interface_neighbor_list_compact'
                self.node_address = None


            class InterfaceNeighborListCompact(object):
                """
                Compact list of I/F Neighbors
                
                .. attribute:: interface_neighbor_address
                
                	Interface Neighbor address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_interface_name
                
                	Neighbor's Interface handle
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_neighbor_address = None
                    self.neighbor_interface_name = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-list-compact'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_neighbor_address is not None:
                        return True

                    if self.neighbor_interface_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.InterfaceNeighborBriefs.InterfaceNeighborBrief.InterfaceNeighborListCompact']['meta_info']

            @property
            def _common_path(self):
                if self.neighbor_address is None:
                    raise YPYModelError('Key property neighbor_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-briefs/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-brief[Cisco-IOS-XR-ip-rsvp-oper:neighbor-address = ' + str(self.neighbor_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.neighbor_address is not None:
                    return True

                if self.interface_neighbor_list_compact is not None:
                    for child_ref in self.interface_neighbor_list_compact:
                        if child_ref._has_data():
                            return True

                if self.node_address is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.InterfaceNeighborBriefs.InterfaceNeighborBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.interface_neighbor_brief is not None:
                for child_ref in self.interface_neighbor_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.InterfaceNeighborBriefs']['meta_info']


    class AuthenticationBriefs(object):
        """
        Table for Authentication related information
        
        .. attribute:: authentication_brief
        
        	Brief Authentication information
        	**type**\: list of    :py:class:`AuthenticationBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationBriefs.AuthenticationBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.authentication_brief = YList()
            self.authentication_brief.parent = self
            self.authentication_brief.name = 'authentication_brief'


        class AuthenticationBrief(object):
            """
            Brief Authentication information
            
            .. attribute:: destination_address  <key>
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_name  <key>
            
            	InterfaceName
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: mode_id  <key>
            
            	Mode (Tx or Rx)
            	**type**\:   :py:class:`RsvpModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpModeEnum>`
            
            .. attribute:: source_address  <key>
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: direction
            
            	Direction
            	**type**\:   :py:class:`RsvpMgmtAuthDirectionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthDirectionEnum>`
            
            .. attribute:: key_id
            
            	Key ID
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: key_id_valid
            
            	Key validity
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: key_source
            
            	Key source
            	**type**\:  str
            
            .. attribute:: key_type
            
            	Key type
            	**type**\:   :py:class:`RsvpMgmtAuthKiEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthKiEnum>`
            
            .. attribute:: neighbor_address
            
            	Neighbor address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.interface_name = None
                self.mode_id = None
                self.source_address = None
                self.destination_address_xr = None
                self.direction = None
                self.key_id = None
                self.key_id_valid = None
                self.key_source = None
                self.key_type = None
                self.neighbor_address = None
                self.source_address_xr = None

            @property
            def _common_path(self):
                if self.destination_address is None:
                    raise YPYModelError('Key property destination_address is None')
                if self.interface_name is None:
                    raise YPYModelError('Key property interface_name is None')
                if self.mode_id is None:
                    raise YPYModelError('Key property mode_id is None')
                if self.source_address is None:
                    raise YPYModelError('Key property source_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:authentication-briefs/Cisco-IOS-XR-ip-rsvp-oper:authentication-brief[Cisco-IOS-XR-ip-rsvp-oper:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + '][Cisco-IOS-XR-ip-rsvp-oper:mode-id = ' + str(self.mode_id) + '][Cisco-IOS-XR-ip-rsvp-oper:source-address = ' + str(self.source_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.mode_id is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.destination_address_xr is not None:
                    return True

                if self.direction is not None:
                    return True

                if self.key_id is not None:
                    return True

                if self.key_id_valid is not None:
                    return True

                if self.key_source is not None:
                    return True

                if self.key_type is not None:
                    return True

                if self.neighbor_address is not None:
                    return True

                if self.source_address_xr is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.AuthenticationBriefs.AuthenticationBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:authentication-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.authentication_brief is not None:
                for child_ref in self.authentication_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.AuthenticationBriefs']['meta_info']


    class SessionBriefs(object):
        """
        Table of brief info about sessions
        
        .. attribute:: session_brief
        
        	Brief info about session
        	**type**\: list of    :py:class:`SessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs.SessionBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_brief = YList()
            self.session_brief.parent = self
            self.session_brief.name = 'session_brief'


        class SessionBrief(object):
            """
            Brief info about session
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: detail_list_size
            
            	Number of elements in detail list
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: ps_bs
            
            	Number of path state block states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: requests
            
            	Number of request states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: rs_bs
            
            	Number of reservation state block states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs.SessionBrief.Session>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.detail_list_size = None
                self.extended_tunnel_id = None
                self.p2mp_id = None
                self.protocol = None
                self.ps_bs = None
                self.requests = None
                self.rs_bs = None
                self.session = Rsvp.SessionBriefs.SessionBrief.Session()
                self.session.parent = self
                self.session_type = None
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-briefs/Cisco-IOS-XR-ip-rsvp-oper:session-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-briefs/Cisco-IOS-XR-ip-rsvp-oper:session-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-briefs/Cisco-IOS-XR-ip-rsvp-oper:session-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-briefs/Cisco-IOS-XR-ip-rsvp-oper:session-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-briefs/Cisco-IOS-XR-ip-rsvp-oper:session-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-briefs/Cisco-IOS-XR-ip-rsvp-oper:session-brief/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.SessionBriefs.SessionBrief.Session']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-briefs/Cisco-IOS-XR-ip-rsvp-oper:session-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.detail_list_size is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.protocol is not None:
                    return True

                if self.ps_bs is not None:
                    return True

                if self.requests is not None:
                    return True

                if self.rs_bs is not None:
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.SessionBriefs.SessionBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_brief is not None:
                for child_ref in self.session_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.SessionBriefs']['meta_info']


    class PsbDetaileds(object):
        """
        Table of detailed info about path state blocks
        
        .. attribute:: psb_detailed
        
        	Detailed info for a single path state block
        	**type**\: list of    :py:class:`PsbDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.psb_detailed = YList()
            self.psb_detailed.parent = self
            self.psb_detailed.name = 'psb_detailed'


        class PsbDetailed(object):
            """
            Detailed info for a single path state block
            
            .. attribute:: backup_tunnel_name
            
            	Path Backup Tunnel
            	**type**\:  str
            
            .. attribute:: class_type
            
            	DS\-TE Class\-Type
            	**type**\:   :py:class:`ClassType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.ClassType>`
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: expiry_time
            
            	Expiry Time
            	**type**\:   :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.ExpiryTime>`
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: generic_traffic_spec
            
            	RSVP Generic Traffic Spec Info
            	**type**\:   :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec>`
            
            .. attribute:: header
            
            	RSVP Header Info
            	**type**\:   :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Header>`
            
            .. attribute:: hop
            
            	Path Hop Info
            	**type**\:   :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Hop>`
            
            .. attribute:: in_ero
            
            	Incoming Explicit Route Sub Objects
            	**type**\: list of    :py:class:`InEro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.InEro>`
            
            .. attribute:: input_interface
            
            	Path Input Interface
            	**type**\:  str
            
            .. attribute:: is_in_ero_valid
            
            	Incoming ERO validity
            	**type**\:  bool
            
            .. attribute:: is_out_ero_valid
            
            	Outgoing ERO validity
            	**type**\:  bool
            
            .. attribute:: label_info
            
            	Label Information
            	**type**\:   :py:class:`LabelInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo>`
            
            .. attribute:: out_ero
            
            	Outgoing Explicit Route Sub Objects
            	**type**\: list of    :py:class:`OutEro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.OutEro>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: path_flags
            
            	Path Flags
            	**type**\:   :py:class:`PathFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.PathFlags>`
            
            .. attribute:: pfc
            
            	Path Forwarding Contexts
            	**type**\: list of    :py:class:`Pfc <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Pfc>`
            
            .. attribute:: policy_flags
            
            	Policy Flags
            	**type**\:   :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.PolicyFlags>`
            
            .. attribute:: policy_query_flags
            
            	Policy Query Flags
            	**type**\:   :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.PolicyQueryFlags>`
            
            .. attribute:: policy_source_info
            
            	Policy Sources Info
            	**type**\:   :py:class:`PolicySourceInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.PolicySourceInfo>`
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Session>`
            
            .. attribute:: session_attribute
            
            	RSVP Session Attribute
            	**type**\:   :py:class:`SessionAttribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: template
            
            	RSVP Template
            	**type**\:   :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Template>`
            
            .. attribute:: traffic_spec
            
            	RSVP Traffic Spec Info
            	**type**\:   :py:class:`TrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.TrafficSpec>`
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.backup_tunnel_name = None
                self.class_type = Rsvp.PsbDetaileds.PsbDetailed.ClassType()
                self.class_type.parent = self
                self.destination_address = None
                self.destination_port = None
                self.expiry_time = Rsvp.PsbDetaileds.PsbDetailed.ExpiryTime()
                self.expiry_time.parent = self
                self.extended_tunnel_id = None
                self.generic_traffic_spec = Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec()
                self.generic_traffic_spec.parent = self
                self.header = Rsvp.PsbDetaileds.PsbDetailed.Header()
                self.header.parent = self
                self.hop = Rsvp.PsbDetaileds.PsbDetailed.Hop()
                self.hop.parent = self
                self.in_ero = YList()
                self.in_ero.parent = self
                self.in_ero.name = 'in_ero'
                self.input_interface = None
                self.is_in_ero_valid = None
                self.is_out_ero_valid = None
                self.label_info = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo()
                self.label_info.parent = self
                self.out_ero = YList()
                self.out_ero.parent = self
                self.out_ero.name = 'out_ero'
                self.p2mp_id = None
                self.path_flags = Rsvp.PsbDetaileds.PsbDetailed.PathFlags()
                self.path_flags.parent = self
                self.pfc = YList()
                self.pfc.parent = self
                self.pfc.name = 'pfc'
                self.policy_flags = Rsvp.PsbDetaileds.PsbDetailed.PolicyFlags()
                self.policy_flags.parent = self
                self.policy_query_flags = Rsvp.PsbDetaileds.PsbDetailed.PolicyQueryFlags()
                self.policy_query_flags.parent = self
                self.policy_source_info = Rsvp.PsbDetaileds.PsbDetailed.PolicySourceInfo()
                self.policy_source_info.parent = self
                self.protocol = None
                self.s2l_sub_lsp = Rsvp.PsbDetaileds.PsbDetailed.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = Rsvp.PsbDetaileds.PsbDetailed.Session()
                self.session.parent = self
                self.session_attribute = Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute()
                self.session_attribute.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.sub_group_id = None
                self.sub_group_origin = None
                self.template = Rsvp.PsbDetaileds.PsbDetailed.Template()
                self.template.parent = self
                self.traffic_spec = Rsvp.PsbDetaileds.PsbDetailed.TrafficSpec()
                self.traffic_spec.parent = self
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.S2LSubLsp']['meta_info']


            class Template(object):
                """
                RSVP Template
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:   :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_filter = Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter()
                    self.rsvp_filter.parent = self


                class RsvpFilter(object):
                    """
                    RSVP Filter
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:   :py:class:`RsvpMgmtFilterEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilterEnum>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:   :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:   :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.filter_type = None
                        self.p2mp_ipv4_session = Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self.udp_ipv4_session = Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self


                    class UdpIpv4Session(object):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.source_address = None
                            self.source_port = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:udp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session']['meta_info']


                    class P2MpIpv4Session(object):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.p2mp_sub_group_origin = None
                            self.source_address = None
                            self.source_port = None
                            self.sub_group_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:p2mp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.p2mp_sub_group_origin is not None:
                                return True

                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            if self.sub_group_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.filter_type is not None:
                            return True

                        if self.p2mp_ipv4_session is not None and self.p2mp_ipv4_session._has_data():
                            return True

                        if self.udp_ipv4_session is not None and self.udp_ipv4_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:template'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_filter is not None and self.rsvp_filter._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Template']['meta_info']


            class SessionAttribute(object):
                """
                RSVP Session Attribute
                
                .. attribute:: reservation_priority
                
                	Reservation Priority
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: sess_attribute_flags
                
                	Session Attributes
                	**type**\:   :py:class:`SessAttributeFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags>`
                
                .. attribute:: setup_priority
                
                	Setup Priority
                	**type**\:  int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.reservation_priority = None
                    self.sess_attribute_flags = Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags()
                    self.sess_attribute_flags.parent = self
                    self.setup_priority = None


                class SessAttributeFlags(object):
                    """
                    Session Attributes
                    
                    .. attribute:: is_bandwidth_protect
                    
                    	Bandwidth Protection
                    	**type**\:  bool
                    
                    .. attribute:: is_local_protect
                    
                    	Local Protection
                    	**type**\:  bool
                    
                    .. attribute:: is_node_protect
                    
                    	Node Protection
                    	**type**\:  bool
                    
                    .. attribute:: is_record_labels
                    
                    	Records Labels
                    	**type**\:  bool
                    
                    .. attribute:: is_shared_explicit_requested
                    
                    	Shared Explicit Requested
                    	**type**\:  bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.is_bandwidth_protect = None
                        self.is_local_protect = None
                        self.is_node_protect = None
                        self.is_record_labels = None
                        self.is_shared_explicit_requested = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session-attribute/Cisco-IOS-XR-ip-rsvp-oper:sess-attribute-flags'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.is_bandwidth_protect is not None:
                            return True

                        if self.is_local_protect is not None:
                            return True

                        if self.is_node_protect is not None:
                            return True

                        if self.is_record_labels is not None:
                            return True

                        if self.is_shared_explicit_requested is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session-attribute'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.reservation_priority is not None:
                        return True

                    if self.sess_attribute_flags is not None and self.sess_attribute_flags._has_data():
                        return True

                    if self.setup_priority is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute']['meta_info']


            class TrafficSpec(object):
                """
                RSVP Traffic Spec Info
                
                .. attribute:: traffic_average_rate
                
                	Traffic Average Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_max_burst
                
                	Traffic Maximum Burst
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: traffic_max_unit
                
                	Traffic Maximum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_min_unit
                
                	Traffic Minimum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_peak_rate
                
                	Traffic Peak Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.traffic_average_rate = None
                    self.traffic_max_burst = None
                    self.traffic_max_unit = None
                    self.traffic_min_unit = None
                    self.traffic_peak_rate = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:traffic-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.traffic_average_rate is not None:
                        return True

                    if self.traffic_max_burst is not None:
                        return True

                    if self.traffic_max_unit is not None:
                        return True

                    if self.traffic_min_unit is not None:
                        return True

                    if self.traffic_peak_rate is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.TrafficSpec']['meta_info']


            class GenericTrafficSpec(object):
                """
                RSVP Generic Traffic Spec Info
                
                .. attribute:: g709otn_tspec
                
                	G709 OTN Sender Tspec
                	**type**\:   :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec>`
                
                .. attribute:: intsrv_tspec
                
                	Integrated Services Sender Tspec
                	**type**\:   :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec>`
                
                .. attribute:: tspec_type
                
                	TspecType
                	**type**\:   :py:class:`RsvpMgmtTspecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspecEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.g709otn_tspec = Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec()
                    self.g709otn_tspec.parent = self
                    self.intsrv_tspec = Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec()
                    self.intsrv_tspec.parent = self
                    self.tspec_type = None


                class G709OtnTspec(object):
                    """
                    G709 OTN Sender Tspec
                    
                    .. attribute:: traffic_bit_rate
                    
                    	G709 OTN Traffic Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_multiplier
                    
                    	G709 OTN Traffic Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_nvc
                    
                    	G709 OTN Traffic NVC
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_signal_type
                    
                    	G709 OTN Traffic Signal Type (Refer G709 v3)
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.traffic_bit_rate = None
                        self.traffic_multiplier = None
                        self.traffic_nvc = None
                        self.traffic_signal_type = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-tspec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.traffic_bit_rate is not None:
                            return True

                        if self.traffic_multiplier is not None:
                            return True

                        if self.traffic_nvc is not None:
                            return True

                        if self.traffic_signal_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec']['meta_info']


                class IntsrvTspec(object):
                    """
                    Integrated Services Sender Tspec
                    
                    .. attribute:: traffic_average_rate
                    
                    	Traffic Average Rate in bytes per second
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_max_burst
                    
                    	Traffic Maximum Burst
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_max_unit
                    
                    	Traffic Maximum Unit
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_min_unit
                    
                    	Traffic Minimum Unit
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_peak_rate
                    
                    	Traffic Peak Rate in bytes per second
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.traffic_average_rate = None
                        self.traffic_max_burst = None
                        self.traffic_max_unit = None
                        self.traffic_min_unit = None
                        self.traffic_peak_rate = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:intsrv-tspec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.traffic_average_rate is not None:
                            return True

                        if self.traffic_max_burst is not None:
                            return True

                        if self.traffic_max_unit is not None:
                            return True

                        if self.traffic_min_unit is not None:
                            return True

                        if self.traffic_peak_rate is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.g709otn_tspec is not None and self.g709otn_tspec._has_data():
                        return True

                    if self.intsrv_tspec is not None and self.intsrv_tspec._has_data():
                        return True

                    if self.tspec_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec']['meta_info']


            class PathFlags(object):
                """
                Path Flags
                
                .. attribute:: is_bidirectional
                
                	Bidirectional
                	**type**\:  bool
                
                .. attribute:: is_local_repair
                
                	Rerouted
                	**type**\:  bool
                
                .. attribute:: is_local_sender
                
                	Local Sender
                	**type**\:  bool
                
                .. attribute:: is_lockout
                
                	Locked Out
                	**type**\:  bool
                
                .. attribute:: is_message_id_valid
                
                	MessageID Valid
                	**type**\:  bool
                
                .. attribute:: is_non_rsvp_hop_upstream
                
                	Non\-RSVP Hop Upstream
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_bidirectional = None
                    self.is_local_repair = None
                    self.is_local_sender = None
                    self.is_lockout = None
                    self.is_message_id_valid = None
                    self.is_non_rsvp_hop_upstream = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:path-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_bidirectional is not None:
                        return True

                    if self.is_local_repair is not None:
                        return True

                    if self.is_local_sender is not None:
                        return True

                    if self.is_lockout is not None:
                        return True

                    if self.is_message_id_valid is not None:
                        return True

                    if self.is_non_rsvp_hop_upstream is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.PathFlags']['meta_info']


            class Hop(object):
                """
                Path Hop Info
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:hop'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.neighbor_address is not None:
                        return True

                    if self.neighbor_logical_interface_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Hop']['meta_info']


            class PolicySourceInfo(object):
                """
                Policy Sources Info
                
                .. attribute:: is_cable
                
                	Policy Source is Cable
                	**type**\:  bool
                
                .. attribute:: is_cops
                
                	Policy Source is COPS
                	**type**\:  bool
                
                .. attribute:: is_default
                
                	Policy Source is Default
                	**type**\:  bool
                
                .. attribute:: is_local
                
                	Policy Source is Local
                	**type**\:  bool
                
                .. attribute:: is_te_link
                
                	Policy Source is TE Link
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_cable = None
                    self.is_cops = None
                    self.is_default = None
                    self.is_local = None
                    self.is_te_link = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:policy-source-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_cable is not None:
                        return True

                    if self.is_cops is not None:
                        return True

                    if self.is_default is not None:
                        return True

                    if self.is_local is not None:
                        return True

                    if self.is_te_link is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.PolicySourceInfo']['meta_info']


            class Header(object):
                """
                RSVP Header Info
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\:  int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ip_source_address = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.rsvp_header_flags = None
                    self.rsvp_message_type = None
                    self.rsvp_ttl = None
                    self.rsvp_version = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:header'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ip_source_address is not None:
                        return True

                    if self.ip_tos is not None:
                        return True

                    if self.ip_ttl is not None:
                        return True

                    if self.rsvp_header_flags is not None:
                        return True

                    if self.rsvp_message_type is not None:
                        return True

                    if self.rsvp_ttl is not None:
                        return True

                    if self.rsvp_version is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Header']['meta_info']


            class ExpiryTime(object):
                """
                Expiry Time
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:expiry-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.ExpiryTime']['meta_info']


            class PolicyFlags(object):
                """
                Policy Flags
                
                .. attribute:: is_accepted
                
                	Accepted
                	**type**\:  bool
                
                .. attribute:: is_forwarding
                
                	Forwarding
                	**type**\:  bool
                
                .. attribute:: is_installed
                
                	Installed
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_accepted = None
                    self.is_forwarding = None
                    self.is_installed = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:policy-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_accepted is not None:
                        return True

                    if self.is_forwarding is not None:
                        return True

                    if self.is_installed is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.PolicyFlags']['meta_info']


            class PolicyQueryFlags(object):
                """
                Policy Query Flags
                
                .. attribute:: is_bypass
                
                	Bypass
                	**type**\:  bool
                
                .. attribute:: is_needed
                
                	Needed
                	**type**\:  bool
                
                .. attribute:: is_report_required
                
                	Report Required
                	**type**\:  bool
                
                .. attribute:: is_resync
                
                	Resynchronization
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_bypass = None
                    self.is_needed = None
                    self.is_report_required = None
                    self.is_resync = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:policy-query-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_bypass is not None:
                        return True

                    if self.is_needed is not None:
                        return True

                    if self.is_report_required is not None:
                        return True

                    if self.is_resync is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.PolicyQueryFlags']['meta_info']


            class LabelInfo(object):
                """
                Label Information
                
                .. attribute:: generic_local_downstream_label
                
                	Generic Local Downstream Label
                	**type**\:   :py:class:`GenericLocalDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel>`
                
                .. attribute:: generic_local_upstream_label
                
                	Generic Local Upstream Label
                	**type**\:   :py:class:`GenericLocalUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel>`
                
                .. attribute:: generic_merge_point_label
                
                	Generic MergePoint Label
                	**type**\:   :py:class:`GenericMergePointLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel>`
                
                .. attribute:: generic_outgoing_downstream_label
                
                	Generic Outgoing Downstream Label
                	**type**\:   :py:class:`GenericOutgoingDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel>`
                
                .. attribute:: generic_outgoing_upstream_label
                
                	Generic Outgoing Upstream Label
                	**type**\:   :py:class:`GenericOutgoingUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel>`
                
                .. attribute:: generic_recovery_label
                
                	Generic Recovery Label
                	**type**\:   :py:class:`GenericRecoveryLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel>`
                
                .. attribute:: is_valid
                
                	Is the label information valid
                	**type**\:  bool
                
                .. attribute:: local_downstream_label
                
                	Local Downstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_upstream_label
                
                	Local Upstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_wrap_label
                
                	LSP Wrap Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: merge_point_label
                
                	MergePoint Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_downstream_label
                
                	Outgoing Downstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_upstream_label
                
                	Outgoing Upstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: recovery_label
                
                	Recovery Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.generic_local_downstream_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel()
                    self.generic_local_downstream_label.parent = self
                    self.generic_local_upstream_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel()
                    self.generic_local_upstream_label.parent = self
                    self.generic_merge_point_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel()
                    self.generic_merge_point_label.parent = self
                    self.generic_outgoing_downstream_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel()
                    self.generic_outgoing_downstream_label.parent = self
                    self.generic_outgoing_upstream_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel()
                    self.generic_outgoing_upstream_label.parent = self
                    self.generic_recovery_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel()
                    self.generic_recovery_label.parent = self
                    self.is_valid = None
                    self.local_downstream_label = None
                    self.local_upstream_label = None
                    self.lsp_wrap_label = None
                    self.merge_point_label = None
                    self.outgoing_downstream_label = None
                    self.outgoing_upstream_label = None
                    self.recovery_label = None


                class GenericLocalDownstreamLabel(object):
                    """
                    Generic Local Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-downstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-downstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel']['meta_info']


                class GenericOutgoingDownstreamLabel(object):
                    """
                    Generic Outgoing Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-downstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-downstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel']['meta_info']


                class GenericMergePointLabel(object):
                    """
                    Generic MergePoint Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-merge-point-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-merge-point-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel']['meta_info']


                class GenericOutgoingUpstreamLabel(object):
                    """
                    Generic Outgoing Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-upstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-upstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel']['meta_info']


                class GenericLocalUpstreamLabel(object):
                    """
                    Generic Local Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-upstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-upstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel']['meta_info']


                class GenericRecoveryLabel(object):
                    """
                    Generic Recovery Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-recovery-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-recovery-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.generic_local_downstream_label is not None and self.generic_local_downstream_label._has_data():
                        return True

                    if self.generic_local_upstream_label is not None and self.generic_local_upstream_label._has_data():
                        return True

                    if self.generic_merge_point_label is not None and self.generic_merge_point_label._has_data():
                        return True

                    if self.generic_outgoing_downstream_label is not None and self.generic_outgoing_downstream_label._has_data():
                        return True

                    if self.generic_outgoing_upstream_label is not None and self.generic_outgoing_upstream_label._has_data():
                        return True

                    if self.generic_recovery_label is not None and self.generic_recovery_label._has_data():
                        return True

                    if self.is_valid is not None:
                        return True

                    if self.local_downstream_label is not None:
                        return True

                    if self.local_upstream_label is not None:
                        return True

                    if self.lsp_wrap_label is not None:
                        return True

                    if self.merge_point_label is not None:
                        return True

                    if self.outgoing_downstream_label is not None:
                        return True

                    if self.outgoing_upstream_label is not None:
                        return True

                    if self.recovery_label is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.LabelInfo']['meta_info']


            class ClassType(object):
                """
                DS\-TE Class\-Type
                
                .. attribute:: class_type
                
                	DS\-TE Class\-Type
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: is_class_type_info_valid
                
                	Is the Class\-Type information valid
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.class_type = None
                    self.is_class_type_info_valid = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:class-type'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.class_type is not None:
                        return True

                    if self.is_class_type_info_valid is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.ClassType']['meta_info']


            class Pfc(object):
                """
                Path Forwarding Contexts
                
                .. attribute:: output_interface
                
                	Output interface
                	**type**\:  str
                
                .. attribute:: policy_flags
                
                	Policy Flags
                	**type**\:   :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags>`
                
                .. attribute:: policy_query_flags
                
                	Policy Query Flags
                	**type**\:   :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.output_interface = None
                    self.policy_flags = Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags()
                    self.policy_flags.parent = self
                    self.policy_query_flags = Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags()
                    self.policy_query_flags.parent = self


                class PolicyFlags(object):
                    """
                    Policy Flags
                    
                    .. attribute:: is_accepted
                    
                    	Accepted
                    	**type**\:  bool
                    
                    .. attribute:: is_forwarding
                    
                    	Forwarding
                    	**type**\:  bool
                    
                    .. attribute:: is_installed
                    
                    	Installed
                    	**type**\:  bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.is_accepted = None
                        self.is_forwarding = None
                        self.is_installed = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:pfc/Cisco-IOS-XR-ip-rsvp-oper:policy-flags'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.is_accepted is not None:
                            return True

                        if self.is_forwarding is not None:
                            return True

                        if self.is_installed is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags']['meta_info']


                class PolicyQueryFlags(object):
                    """
                    Policy Query Flags
                    
                    .. attribute:: is_bypass
                    
                    	Bypass
                    	**type**\:  bool
                    
                    .. attribute:: is_needed
                    
                    	Needed
                    	**type**\:  bool
                    
                    .. attribute:: is_report_required
                    
                    	Report Required
                    	**type**\:  bool
                    
                    .. attribute:: is_resync
                    
                    	Resynchronization
                    	**type**\:  bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.is_bypass = None
                        self.is_needed = None
                        self.is_report_required = None
                        self.is_resync = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:pfc/Cisco-IOS-XR-ip-rsvp-oper:policy-query-flags'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.is_bypass is not None:
                            return True

                        if self.is_needed is not None:
                            return True

                        if self.is_report_required is not None:
                            return True

                        if self.is_resync is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:pfc'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.output_interface is not None:
                        return True

                    if self.policy_flags is not None and self.policy_flags._has_data():
                        return True

                    if self.policy_query_flags is not None and self.policy_query_flags._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.Pfc']['meta_info']


            class InEro(object):
                """
                Incoming Explicit Route Sub Objects
                
                .. attribute:: ero_type
                
                	EROType
                	**type**\:   :py:class:`RsvpMgmtEroSubobjEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjEnum>`
                
                .. attribute:: ipv4ero_sub_object
                
                	IPV4 ERO Sub Object
                	**type**\:   :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject>`
                
                .. attribute:: unnumbered_ero_sub_object
                
                	Unnumbered ERO Sub Object
                	**type**\:   :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ero_type = None
                    self.ipv4ero_sub_object = Rsvp.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject()
                    self.ipv4ero_sub_object.parent = self
                    self.unnumbered_ero_sub_object = Rsvp.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject()
                    self.unnumbered_ero_sub_object.parent = self


                class Ipv4EroSubObject(object):
                    """
                    IPV4 ERO Sub Object
                    
                    .. attribute:: ero_address
                    
                    	The ERO IPV4 Address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\:  bool
                    
                    .. attribute:: prefix_length
                    
                    	ERO Prefix Length
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ero_address = None
                        self.is_strict_route = None
                        self.prefix_length = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:in-ero/Cisco-IOS-XR-ip-rsvp-oper:ipv4ero-sub-object'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ero_address is not None:
                            return True

                        if self.is_strict_route is not None:
                            return True

                        if self.prefix_length is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject']['meta_info']


                class UnnumberedEroSubObject(object):
                    """
                    Unnumbered ERO Sub Object
                    
                    .. attribute:: ero_interface_id
                    
                    	The Interface ID in ERO
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ero_router_id
                    
                    	The Router ID in ERO
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\:  bool
                    
                    .. attribute:: status
                    
                    	Status of ERO
                    	**type**\:   :py:class:`RsvpMgmtEroSubobjStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatusEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ero_interface_id = None
                        self.ero_router_id = None
                        self.is_strict_route = None
                        self.status = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:in-ero/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-ero-sub-object'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ero_interface_id is not None:
                            return True

                        if self.ero_router_id is not None:
                            return True

                        if self.is_strict_route is not None:
                            return True

                        if self.status is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:in-ero'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ero_type is not None:
                        return True

                    if self.ipv4ero_sub_object is not None and self.ipv4ero_sub_object._has_data():
                        return True

                    if self.unnumbered_ero_sub_object is not None and self.unnumbered_ero_sub_object._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.InEro']['meta_info']


            class OutEro(object):
                """
                Outgoing Explicit Route Sub Objects
                
                .. attribute:: ero_type
                
                	EROType
                	**type**\:   :py:class:`RsvpMgmtEroSubobjEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjEnum>`
                
                .. attribute:: ipv4ero_sub_object
                
                	IPV4 ERO Sub Object
                	**type**\:   :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject>`
                
                .. attribute:: unnumbered_ero_sub_object
                
                	Unnumbered ERO Sub Object
                	**type**\:   :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ero_type = None
                    self.ipv4ero_sub_object = Rsvp.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject()
                    self.ipv4ero_sub_object.parent = self
                    self.unnumbered_ero_sub_object = Rsvp.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject()
                    self.unnumbered_ero_sub_object.parent = self


                class Ipv4EroSubObject(object):
                    """
                    IPV4 ERO Sub Object
                    
                    .. attribute:: ero_address
                    
                    	The ERO IPV4 Address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\:  bool
                    
                    .. attribute:: prefix_length
                    
                    	ERO Prefix Length
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ero_address = None
                        self.is_strict_route = None
                        self.prefix_length = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:out-ero/Cisco-IOS-XR-ip-rsvp-oper:ipv4ero-sub-object'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ero_address is not None:
                            return True

                        if self.is_strict_route is not None:
                            return True

                        if self.prefix_length is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject']['meta_info']


                class UnnumberedEroSubObject(object):
                    """
                    Unnumbered ERO Sub Object
                    
                    .. attribute:: ero_interface_id
                    
                    	The Interface ID in ERO
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ero_router_id
                    
                    	The Router ID in ERO
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\:  bool
                    
                    .. attribute:: status
                    
                    	Status of ERO
                    	**type**\:   :py:class:`RsvpMgmtEroSubobjStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatusEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ero_interface_id = None
                        self.ero_router_id = None
                        self.is_strict_route = None
                        self.status = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:out-ero/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-ero-sub-object'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ero_interface_id is not None:
                            return True

                        if self.ero_router_id is not None:
                            return True

                        if self.is_strict_route is not None:
                            return True

                        if self.status is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed/Cisco-IOS-XR-ip-rsvp-oper:out-ero'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ero_type is not None:
                        return True

                    if self.ipv4ero_sub_object is not None and self.ipv4ero_sub_object._has_data():
                        return True

                    if self.unnumbered_ero_sub_object is not None and self.unnumbered_ero_sub_object._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed.OutEro']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:psb-detailed'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.backup_tunnel_name is not None:
                    return True

                if self.class_type is not None and self.class_type._has_data():
                    return True

                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.expiry_time is not None and self.expiry_time._has_data():
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.generic_traffic_spec is not None and self.generic_traffic_spec._has_data():
                    return True

                if self.header is not None and self.header._has_data():
                    return True

                if self.hop is not None and self.hop._has_data():
                    return True

                if self.in_ero is not None:
                    for child_ref in self.in_ero:
                        if child_ref._has_data():
                            return True

                if self.input_interface is not None:
                    return True

                if self.is_in_ero_valid is not None:
                    return True

                if self.is_out_ero_valid is not None:
                    return True

                if self.label_info is not None and self.label_info._has_data():
                    return True

                if self.out_ero is not None:
                    for child_ref in self.out_ero:
                        if child_ref._has_data():
                            return True

                if self.p2mp_id is not None:
                    return True

                if self.path_flags is not None and self.path_flags._has_data():
                    return True

                if self.pfc is not None:
                    for child_ref in self.pfc:
                        if child_ref._has_data():
                            return True

                if self.policy_flags is not None and self.policy_flags._has_data():
                    return True

                if self.policy_query_flags is not None and self.policy_query_flags._has_data():
                    return True

                if self.policy_source_info is not None and self.policy_source_info._has_data():
                    return True

                if self.protocol is not None:
                    return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_attribute is not None and self.session_attribute._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.template is not None and self.template._has_data():
                    return True

                if self.traffic_spec is not None and self.traffic_spec._has_data():
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.PsbDetaileds.PsbDetailed']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-detaileds'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.psb_detailed is not None:
                for child_ref in self.psb_detailed:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.PsbDetaileds']['meta_info']


    class FrrSummary(object):
        """
        Fast Re\-Route Summary State Information
        
        .. attribute:: path_states
        
        	Path state counters
        	**type**\:   :py:class:`PathStates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.FrrSummary.PathStates>`
        
        .. attribute:: reservation_states
        
        	Rerservation state counters
        	**type**\:   :py:class:`ReservationStates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.FrrSummary.ReservationStates>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.path_states = Rsvp.FrrSummary.PathStates()
            self.path_states.parent = self
            self.reservation_states = Rsvp.FrrSummary.ReservationStates()
            self.reservation_states.parent = self


        class PathStates(object):
            """
            Path state counters
            
            .. attribute:: active_instances
            
            	Number of active instances of this state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: active_wait_instances
            
            	Number of instances of this state awaiting Path messages to be sent out or Resv messages to be received
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: ready_instances
            
            	Number of ready instances of this state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total
            
            	Total number of instances of this state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.active_instances = None
                self.active_wait_instances = None
                self.ready_instances = None
                self.total = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:frr-summary/Cisco-IOS-XR-ip-rsvp-oper:path-states'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.active_instances is not None:
                    return True

                if self.active_wait_instances is not None:
                    return True

                if self.ready_instances is not None:
                    return True

                if self.total is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.FrrSummary.PathStates']['meta_info']


        class ReservationStates(object):
            """
            Rerservation state counters
            
            .. attribute:: active_instances
            
            	Number of active instances of this state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: active_wait_instances
            
            	Number of instances of this state awaiting Path messages to be sent out or Resv messages to be received
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: ready_instances
            
            	Number of ready instances of this state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total
            
            	Total number of instances of this state
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.active_instances = None
                self.active_wait_instances = None
                self.ready_instances = None
                self.total = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:frr-summary/Cisco-IOS-XR-ip-rsvp-oper:reservation-states'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.active_instances is not None:
                    return True

                if self.active_wait_instances is not None:
                    return True

                if self.ready_instances is not None:
                    return True

                if self.total is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.FrrSummary.ReservationStates']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:frr-summary'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.path_states is not None and self.path_states._has_data():
                return True

            if self.reservation_states is not None and self.reservation_states._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.FrrSummary']['meta_info']


    class RsbDetaileds(object):
        """
        Table of detailed info about reservation state
        blocks
        
        .. attribute:: rsb_detailed
        
        	Detailed info for a single reservation state block
        	**type**\: list of    :py:class:`RsbDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.rsb_detailed = YList()
            self.rsb_detailed.parent = self
            self.rsb_detailed.name = 'rsb_detailed'


        class RsbDetailed(object):
            """
            Detailed info for a single reservation state
            block
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: expiry_time
            
            	Expiry Time
            	**type**\:   :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.ExpiryTime>`
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:   :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Filter>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:   :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Information
            	**type**\:   :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec>`
            
            .. attribute:: header
            
            	RSVP Header Information
            	**type**\:   :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Header>`
            
            .. attribute:: hop
            
            	Hop Infomation
            	**type**\:   :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Hop>`
            
            .. attribute:: input_adjusted_interface
            
            	Input Adjusted Interface
            	**type**\:  str
            
            .. attribute:: input_physical_interface
            
            	Input Physical Interface
            	**type**\:  str
            
            .. attribute:: label_info
            
            	Label Information
            	**type**\:   :py:class:`LabelInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: policy_flags
            
            	RSVP Policy Flags
            	**type**\:   :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.PolicyFlags>`
            
            .. attribute:: policy_query_flags
            
            	RSVP Query Flags
            	**type**\:   :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.PolicyQueryFlags>`
            
            .. attribute:: policy_sources
            
            	RSVP Policy Sources
            	**type**\:   :py:class:`PolicySources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.PolicySources>`
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: rsb_flags
            
            	Reservation State Block Flags
            	**type**\:   :py:class:`RsbFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.RsbFlags>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Session>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:   :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Style>`
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.expiry_time = Rsvp.RsbDetaileds.RsbDetailed.ExpiryTime()
                self.expiry_time.parent = self
                self.extended_tunnel_id = None
                self.filter = Rsvp.RsbDetaileds.RsbDetailed.Filter()
                self.filter.parent = self
                self.flow_spec = Rsvp.RsbDetaileds.RsbDetailed.FlowSpec()
                self.flow_spec.parent = self
                self.generic_flow_spec = Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self.header = Rsvp.RsbDetaileds.RsbDetailed.Header()
                self.header.parent = self
                self.hop = Rsvp.RsbDetaileds.RsbDetailed.Hop()
                self.hop.parent = self
                self.input_adjusted_interface = None
                self.input_physical_interface = None
                self.label_info = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo()
                self.label_info.parent = self
                self.p2mp_id = None
                self.policy_flags = Rsvp.RsbDetaileds.RsbDetailed.PolicyFlags()
                self.policy_flags.parent = self
                self.policy_query_flags = Rsvp.RsbDetaileds.RsbDetailed.PolicyQueryFlags()
                self.policy_query_flags.parent = self
                self.policy_sources = Rsvp.RsbDetaileds.RsbDetailed.PolicySources()
                self.policy_sources.parent = self
                self.protocol = None
                self.rsb_flags = Rsvp.RsbDetaileds.RsbDetailed.RsbFlags()
                self.rsb_flags.parent = self
                self.s2l_sub_lsp = Rsvp.RsbDetaileds.RsbDetailed.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = Rsvp.RsbDetaileds.RsbDetailed.Session()
                self.session.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.style = Rsvp.RsbDetaileds.RsbDetailed.Style()
                self.style.parent = self
                self.sub_group_id = None
                self.sub_group_origin = None
                self.vrf_name = None


            class FlowSpec(object):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:   :py:class:`RsvpMgmtQosServiceEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnumEnum>`
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_max_unit = None
                    self.flow_min_unit = None
                    self.flow_peak_rate = None
                    self.flow_qos = None
                    self.flow_requested_rate = None
                    self.flow_slack = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_average_rate is not None:
                        return True

                    if self.flow_max_burst is not None:
                        return True

                    if self.flow_max_unit is not None:
                        return True

                    if self.flow_min_unit is not None:
                        return True

                    if self.flow_peak_rate is not None:
                        return True

                    if self.flow_qos is not None:
                        return True

                    if self.flow_requested_rate is not None:
                        return True

                    if self.flow_slack is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.FlowSpec']['meta_info']


            class GenericFlowSpec(object):
                """
                Generic Flow Spec Information
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:   :py:class:`RsvpMgmtFlowSpecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpecEnum>`
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:   :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_spec_type = None
                    self.g709otn_flow_spec = Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self


                class G709OtnFlowSpec(object):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.flow_bit_rate = None
                        self.flow_multiplier = None
                        self.flow_nvc = None
                        self.flow_signal_type = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-flow-spec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.flow_bit_rate is not None:
                            return True

                        if self.flow_multiplier is not None:
                            return True

                        if self.flow_nvc is not None:
                            return True

                        if self.flow_signal_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_spec_type is not None:
                        return True

                    if self.g709otn_flow_spec is not None and self.g709otn_flow_spec._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec']['meta_info']


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.S2LSubLsp']['meta_info']


            class Style(object):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:   :py:class:`RsvpMgmtReservationTypeEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnumEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.reservation_type = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:style'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.reservation_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.Style']['meta_info']


            class Filter(object):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:   :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_filter = Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self


                class RsvpFilter(object):
                    """
                    RSVP Filter
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:   :py:class:`RsvpMgmtFilterEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilterEnum>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:   :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:   :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.filter_type = None
                        self.p2mp_ipv4_session = Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self.udp_ipv4_session = Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self


                    class UdpIpv4Session(object):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.source_address = None
                            self.source_port = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:udp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session']['meta_info']


                    class P2MpIpv4Session(object):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.p2mp_sub_group_origin = None
                            self.source_address = None
                            self.source_port = None
                            self.sub_group_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:p2mp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.p2mp_sub_group_origin is not None:
                                return True

                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            if self.sub_group_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.filter_type is not None:
                            return True

                        if self.p2mp_ipv4_session is not None and self.p2mp_ipv4_session._has_data():
                            return True

                        if self.udp_ipv4_session is not None and self.udp_ipv4_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:filter'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_filter is not None and self.rsvp_filter._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.Filter']['meta_info']


            class RsbFlags(object):
                """
                Reservation State Block Flags
                
                .. attribute:: is_local_receiver
                
                	Local Receiver
                	**type**\:  bool
                
                .. attribute:: is_local_repair
                
                	Rerouted
                	**type**\:  bool
                
                .. attribute:: is_lockout
                
                	Locked Out
                	**type**\:  bool
                
                .. attribute:: is_merge_point
                
                	Is node a Merge Point
                	**type**\:  bool
                
                .. attribute:: is_message_id_valid
                
                	MessageID Valid
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_local_receiver = None
                    self.is_local_repair = None
                    self.is_lockout = None
                    self.is_merge_point = None
                    self.is_message_id_valid = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:rsb-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_local_receiver is not None:
                        return True

                    if self.is_local_repair is not None:
                        return True

                    if self.is_lockout is not None:
                        return True

                    if self.is_merge_point is not None:
                        return True

                    if self.is_message_id_valid is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.RsbFlags']['meta_info']


            class Hop(object):
                """
                Hop Infomation
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:hop'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.neighbor_address is not None:
                        return True

                    if self.neighbor_logical_interface_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.Hop']['meta_info']


            class PolicySources(object):
                """
                RSVP Policy Sources
                
                .. attribute:: is_cable
                
                	Policy Source is Cable
                	**type**\:  bool
                
                .. attribute:: is_cops
                
                	Policy Source is COPS
                	**type**\:  bool
                
                .. attribute:: is_default
                
                	Policy Source is Default
                	**type**\:  bool
                
                .. attribute:: is_local
                
                	Policy Source is Local
                	**type**\:  bool
                
                .. attribute:: is_te_link
                
                	Policy Source is TE Link
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_cable = None
                    self.is_cops = None
                    self.is_default = None
                    self.is_local = None
                    self.is_te_link = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:policy-sources'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_cable is not None:
                        return True

                    if self.is_cops is not None:
                        return True

                    if self.is_default is not None:
                        return True

                    if self.is_local is not None:
                        return True

                    if self.is_te_link is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.PolicySources']['meta_info']


            class Header(object):
                """
                RSVP Header Information
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\:  int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ip_source_address = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.rsvp_header_flags = None
                    self.rsvp_message_type = None
                    self.rsvp_ttl = None
                    self.rsvp_version = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:header'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ip_source_address is not None:
                        return True

                    if self.ip_tos is not None:
                        return True

                    if self.ip_ttl is not None:
                        return True

                    if self.rsvp_header_flags is not None:
                        return True

                    if self.rsvp_message_type is not None:
                        return True

                    if self.rsvp_ttl is not None:
                        return True

                    if self.rsvp_version is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.Header']['meta_info']


            class PolicyFlags(object):
                """
                RSVP Policy Flags
                
                .. attribute:: is_accepted
                
                	Accepted
                	**type**\:  bool
                
                .. attribute:: is_forwarding
                
                	Forwarding
                	**type**\:  bool
                
                .. attribute:: is_installed
                
                	Installed
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_accepted = None
                    self.is_forwarding = None
                    self.is_installed = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:policy-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_accepted is not None:
                        return True

                    if self.is_forwarding is not None:
                        return True

                    if self.is_installed is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.PolicyFlags']['meta_info']


            class ExpiryTime(object):
                """
                Expiry Time
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:expiry-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.ExpiryTime']['meta_info']


            class PolicyQueryFlags(object):
                """
                RSVP Query Flags
                
                .. attribute:: is_bypass
                
                	Bypass
                	**type**\:  bool
                
                .. attribute:: is_needed
                
                	Needed
                	**type**\:  bool
                
                .. attribute:: is_report_required
                
                	Report Required
                	**type**\:  bool
                
                .. attribute:: is_resync
                
                	Resynchronization
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_bypass = None
                    self.is_needed = None
                    self.is_report_required = None
                    self.is_resync = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:policy-query-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_bypass is not None:
                        return True

                    if self.is_needed is not None:
                        return True

                    if self.is_report_required is not None:
                        return True

                    if self.is_resync is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.PolicyQueryFlags']['meta_info']


            class LabelInfo(object):
                """
                Label Information
                
                .. attribute:: generic_local_downstream_label
                
                	Generic Local Downstream Label
                	**type**\:   :py:class:`GenericLocalDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel>`
                
                .. attribute:: generic_local_upstream_label
                
                	Generic Local Upstream Label
                	**type**\:   :py:class:`GenericLocalUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel>`
                
                .. attribute:: generic_merge_point_label
                
                	Generic MergePoint Label
                	**type**\:   :py:class:`GenericMergePointLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel>`
                
                .. attribute:: generic_outgoing_downstream_label
                
                	Generic Outgoing Downstream Label
                	**type**\:   :py:class:`GenericOutgoingDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel>`
                
                .. attribute:: generic_outgoing_upstream_label
                
                	Generic Outgoing Upstream Label
                	**type**\:   :py:class:`GenericOutgoingUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel>`
                
                .. attribute:: generic_recovery_label
                
                	Generic Recovery Label
                	**type**\:   :py:class:`GenericRecoveryLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel>`
                
                .. attribute:: is_valid
                
                	Is the label information valid
                	**type**\:  bool
                
                .. attribute:: local_downstream_label
                
                	Local Downstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_upstream_label
                
                	Local Upstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_wrap_label
                
                	LSP Wrap Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: merge_point_label
                
                	MergePoint Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_downstream_label
                
                	Outgoing Downstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_upstream_label
                
                	Outgoing Upstream Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: recovery_label
                
                	Recovery Label
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.generic_local_downstream_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel()
                    self.generic_local_downstream_label.parent = self
                    self.generic_local_upstream_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel()
                    self.generic_local_upstream_label.parent = self
                    self.generic_merge_point_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel()
                    self.generic_merge_point_label.parent = self
                    self.generic_outgoing_downstream_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel()
                    self.generic_outgoing_downstream_label.parent = self
                    self.generic_outgoing_upstream_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel()
                    self.generic_outgoing_upstream_label.parent = self
                    self.generic_recovery_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel()
                    self.generic_recovery_label.parent = self
                    self.is_valid = None
                    self.local_downstream_label = None
                    self.local_upstream_label = None
                    self.lsp_wrap_label = None
                    self.merge_point_label = None
                    self.outgoing_downstream_label = None
                    self.outgoing_upstream_label = None
                    self.recovery_label = None


                class GenericLocalDownstreamLabel(object):
                    """
                    Generic Local Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-downstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-downstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel']['meta_info']


                class GenericOutgoingDownstreamLabel(object):
                    """
                    Generic Outgoing Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-downstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-downstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel']['meta_info']


                class GenericMergePointLabel(object):
                    """
                    Generic MergePoint Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-merge-point-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-merge-point-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel']['meta_info']


                class GenericOutgoingUpstreamLabel(object):
                    """
                    Generic Outgoing Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-upstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-outgoing-upstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel']['meta_info']


                class GenericLocalUpstreamLabel(object):
                    """
                    Generic Local Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-upstream-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-local-upstream-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel']['meta_info']


                class GenericRecoveryLabel(object):
                    """
                    Generic Recovery Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.generalized_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self.generic_label_type = None


                    class GeneralizedLabel(object):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\:  list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.value = YLeafList()
                            self.value.parent = self
                            self.value.name = 'value'

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-recovery-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.value is not None:
                                for child in self.value:
                                    if child is not None:
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info/Cisco-IOS-XR-ip-rsvp-oper:generic-recovery-label'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.generalized_label is not None and self.generalized_label._has_data():
                            return True

                        if self.generic_label_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed/Cisco-IOS-XR-ip-rsvp-oper:label-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.generic_local_downstream_label is not None and self.generic_local_downstream_label._has_data():
                        return True

                    if self.generic_local_upstream_label is not None and self.generic_local_upstream_label._has_data():
                        return True

                    if self.generic_merge_point_label is not None and self.generic_merge_point_label._has_data():
                        return True

                    if self.generic_outgoing_downstream_label is not None and self.generic_outgoing_downstream_label._has_data():
                        return True

                    if self.generic_outgoing_upstream_label is not None and self.generic_outgoing_upstream_label._has_data():
                        return True

                    if self.generic_recovery_label is not None and self.generic_recovery_label._has_data():
                        return True

                    if self.is_valid is not None:
                        return True

                    if self.local_downstream_label is not None:
                        return True

                    if self.local_upstream_label is not None:
                        return True

                    if self.lsp_wrap_label is not None:
                        return True

                    if self.merge_point_label is not None:
                        return True

                    if self.outgoing_downstream_label is not None:
                        return True

                    if self.outgoing_upstream_label is not None:
                        return True

                    if self.recovery_label is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed.LabelInfo']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds/Cisco-IOS-XR-ip-rsvp-oper:rsb-detailed'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.expiry_time is not None and self.expiry_time._has_data():
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.filter is not None and self.filter._has_data():
                    return True

                if self.flow_spec is not None and self.flow_spec._has_data():
                    return True

                if self.generic_flow_spec is not None and self.generic_flow_spec._has_data():
                    return True

                if self.header is not None and self.header._has_data():
                    return True

                if self.hop is not None and self.hop._has_data():
                    return True

                if self.input_adjusted_interface is not None:
                    return True

                if self.input_physical_interface is not None:
                    return True

                if self.label_info is not None and self.label_info._has_data():
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.policy_flags is not None and self.policy_flags._has_data():
                    return True

                if self.policy_query_flags is not None and self.policy_query_flags._has_data():
                    return True

                if self.policy_sources is not None and self.policy_sources._has_data():
                    return True

                if self.protocol is not None:
                    return True

                if self.rsb_flags is not None and self.rsb_flags._has_data():
                    return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.style is not None and self.style._has_data():
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.RsbDetaileds.RsbDetailed']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-detaileds'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.rsb_detailed is not None:
                for child_ref in self.rsb_detailed:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.RsbDetaileds']['meta_info']


    class InterfaceSummaries(object):
        """
        Table of summary info about RSVP\-enabled
        interfaces
        
        .. attribute:: interface_summary
        
        	Summary info about an RSVP\-enabled interface
        	**type**\: list of    :py:class:`InterfaceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceSummaries.InterfaceSummary>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.interface_summary = YList()
            self.interface_summary.parent = self
            self.interface_summary.name = 'interface_summary'


        class InterfaceSummary(object):
            """
            Summary info about an RSVP\-enabled interface
            
            .. attribute:: interface_name  <key>
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:   :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\:  str
            
            .. attribute:: paths_in
            
            	Number of locally created and incoming path states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: paths_out
            
            	Number of outgoing path states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: reservations_in
            
            	Number of locally created and incoming reservation states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: reservations_out
            
            	Number of outgoing reservation states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.interface_name = None
                self.bandwidth_information = Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation()
                self.bandwidth_information.parent = self
                self.interface_name_xr = None
                self.paths_in = None
                self.paths_out = None
                self.reservations_in = None
                self.reservations_out = None


            class BandwidthInformation(object):
                """
                Interface bandwidth information
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:   :py:class:`RsvpMgmtDsteModesEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModesEnum>`
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:   :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:   :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.dste_mode = None
                    self.pre_standard_dste_interface = Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self.standard_dste_interface = Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self


                class PreStandardDsteInterface(object):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_subpool_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:pre-standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_subpool_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_subpool_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface']['meta_info']


                class StandardDsteInterface(object):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc0_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc1_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_pool0_bandwidth is not None:
                            return True

                        if self.max_pool1_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:bandwidth-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dste_mode is not None:
                        return True

                    if self.pre_standard_dste_interface is not None and self.pre_standard_dste_interface._has_data():
                        return True

                    if self.standard_dste_interface is not None and self.standard_dste_interface._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation']['meta_info']

            @property
            def _common_path(self):
                if self.interface_name is None:
                    raise YPYModelError('Key property interface_name is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:interface-summaries/Cisco-IOS-XR-ip-rsvp-oper:interface-summary[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interface_name is not None:
                    return True

                if self.bandwidth_information is not None and self.bandwidth_information._has_data():
                    return True

                if self.interface_name_xr is not None:
                    return True

                if self.paths_in is not None:
                    return True

                if self.paths_out is not None:
                    return True

                if self.reservations_in is not None:
                    return True

                if self.reservations_out is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.InterfaceSummaries.InterfaceSummary']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:interface-summaries'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.interface_summary is not None:
                for child_ref in self.interface_summary:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.InterfaceSummaries']['meta_info']


    class HelloInstanceBriefs(object):
        """
        Table of brief info about hello instances
        
        .. attribute:: hello_instance_brief
        
        	Brief info for a single hello instance
        	**type**\: list of    :py:class:`HelloInstanceBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInstanceBriefs.HelloInstanceBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.hello_instance_brief = YList()
            self.hello_instance_brief.parent = self
            self.hello_instance_brief.name = 'hello_instance_brief'


        class HelloInstanceBrief(object):
            """
            Brief info for a single hello instance
            
            .. attribute:: destination_address  <key>
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_address  <key>
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:   :py:class:`RsvpMgmtHelloInstanceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstanceEnum>`
            
            .. attribute:: lost_communication_total
            
            	Total number of times communication got lost
            	**type**\:  int
            
            	**range:** 0..65535
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor Hello state
            	**type**\:   :py:class:`RsvpMgmtHelloStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloStateEnum>`
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.source_address = None
                self.destination_address_xr = None
                self.hello_interface = None
                self.instance_type = None
                self.lost_communication_total = None
                self.neighbor_hello_state = None
                self.source_address_xr = None

            @property
            def _common_path(self):
                if self.destination_address is None:
                    raise YPYModelError('Key property destination_address is None')
                if self.source_address is None:
                    raise YPYModelError('Key property source_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:hello-instance-briefs/Cisco-IOS-XR-ip-rsvp-oper:hello-instance-brief[Cisco-IOS-XR-ip-rsvp-oper:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ip-rsvp-oper:source-address = ' + str(self.source_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.destination_address_xr is not None:
                    return True

                if self.hello_interface is not None:
                    return True

                if self.instance_type is not None:
                    return True

                if self.lost_communication_total is not None:
                    return True

                if self.neighbor_hello_state is not None:
                    return True

                if self.source_address_xr is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.HelloInstanceBriefs.HelloInstanceBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:hello-instance-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.hello_instance_brief is not None:
                for child_ref in self.hello_instance_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.HelloInstanceBriefs']['meta_info']


    class AuthenticationDetails(object):
        """
        Table for detailed authentication related
        information
        
        .. attribute:: authentication_detail
        
        	Brief Authentication information
        	**type**\: list of    :py:class:`AuthenticationDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails.AuthenticationDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.authentication_detail = YList()
            self.authentication_detail.parent = self
            self.authentication_detail.name = 'authentication_detail'


        class AuthenticationDetail(object):
            """
            Brief Authentication information
            
            .. attribute:: destination_address  <key>
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_name  <key>
            
            	InterfaceName
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: mode_id  <key>
            
            	Mode (Tx or Rx)
            	**type**\:   :py:class:`RsvpModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpModeEnum>`
            
            .. attribute:: source_address  <key>
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: auth_compact
            
            	Basic authentication data
            	**type**\:   :py:class:`AuthCompact <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails.AuthenticationDetail.AuthCompact>`
            
            .. attribute:: challenge_status
            
            	Challenge status
            	**type**\:   :py:class:`RsvpMgmtAuthChallengeStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthChallengeStatusEnum>`
            
            .. attribute:: direction_info
            
            	direction info
            	**type**\:   :py:class:`DirectionInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo>`
            
            .. attribute:: key_digest_info
            
            	Direction
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: key_status
            
            	Key status
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: lifetime
            
            	Lifetime (seconds)
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: lifetime_left
            
            	Remaining lifetime (seconds)
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.interface_name = None
                self.mode_id = None
                self.source_address = None
                self.auth_compact = Rsvp.AuthenticationDetails.AuthenticationDetail.AuthCompact()
                self.auth_compact.parent = self
                self.challenge_status = None
                self.direction_info = Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo()
                self.direction_info.parent = self
                self.key_digest_info = None
                self.key_status = None
                self.lifetime = None
                self.lifetime_left = None


            class AuthCompact(object):
                """
                Basic authentication data
                
                .. attribute:: destination_address_xr
                
                	Destination address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: direction
                
                	Direction
                	**type**\:   :py:class:`RsvpMgmtAuthDirectionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthDirectionEnum>`
                
                .. attribute:: key_id
                
                	Key ID
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: key_id_valid
                
                	Key validity
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: key_source
                
                	Key source
                	**type**\:  str
                
                .. attribute:: key_type
                
                	Key type
                	**type**\:   :py:class:`RsvpMgmtAuthKiEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthKiEnum>`
                
                .. attribute:: neighbor_address
                
                	Neighbor address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: source_address_xr
                
                	Source address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.destination_address_xr = None
                    self.direction = None
                    self.key_id = None
                    self.key_id_valid = None
                    self.key_source = None
                    self.key_type = None
                    self.neighbor_address = None
                    self.source_address_xr = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:auth-compact'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.destination_address_xr is not None:
                        return True

                    if self.direction is not None:
                        return True

                    if self.key_id is not None:
                        return True

                    if self.key_id_valid is not None:
                        return True

                    if self.key_source is not None:
                        return True

                    if self.key_type is not None:
                        return True

                    if self.neighbor_address is not None:
                        return True

                    if self.source_address_xr is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.AuthenticationDetails.AuthenticationDetail.AuthCompact']['meta_info']


            class DirectionInfo(object):
                """
                direction info
                
                .. attribute:: auth_direction
                
                	AuthDirection
                	**type**\:   :py:class:`RsvpMgmtAuthDirectionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthDirectionEnum>`
                
                .. attribute:: receive_info
                
                	receive info
                	**type**\:   :py:class:`ReceiveInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo>`
                
                .. attribute:: send_info
                
                	send info
                	**type**\:   :py:class:`SendInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.auth_direction = None
                    self.receive_info = Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo()
                    self.receive_info.parent = self
                    self.send_info = Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo()
                    self.send_info.parent = self


                class SendInfo(object):
                    """
                    send info
                    
                    .. attribute:: counters
                    
                    	Counters
                    	**type**\:   :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters>`
                    
                    .. attribute:: sequence
                    
                    	Sequence number
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.counters = Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters()
                        self.counters.parent = self
                        self.sequence = None


                    class Counters(object):
                        """
                        Counters
                        
                        .. attribute:: authentication_challenge_responses_sent
                        
                        	Challenge responses sent
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_failures
                        
                        	Failures
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_send_challenges_received
                        
                        	Challenges received
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_sent
                        
                        	Messages sent
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.authentication_challenge_responses_sent = None
                            self.authentication_failures = None
                            self.authentication_send_challenges_received = None
                            self.authentication_sent = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:counters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.authentication_challenge_responses_sent is not None:
                                return True

                            if self.authentication_failures is not None:
                                return True

                            if self.authentication_send_challenges_received is not None:
                                return True

                            if self.authentication_sent is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:send-info'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.counters is not None and self.counters._has_data():
                            return True

                        if self.sequence is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo']['meta_info']


                class ReceiveInfo(object):
                    """
                    receive info
                    
                    .. attribute:: counters
                    
                    	Counters
                    	**type**\:   :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters>`
                    
                    .. attribute:: sequence
                    
                    	Sequence number
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: sequence_window
                    
                    	Sequence window
                    	**type**\:  list of int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: sequence_window_count
                    
                    	Sequence window count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: sequence_window_size
                    
                    	Sequence window size
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.counters = Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters()
                        self.counters.parent = self
                        self.sequence = None
                        self.sequence_window = YLeafList()
                        self.sequence_window.parent = self
                        self.sequence_window.name = 'sequence_window'
                        self.sequence_window_count = None
                        self.sequence_window_size = None


                    class Counters(object):
                        """
                        Counters
                        
                        .. attribute:: authentication_received_bad_digest
                        
                        	Authentication received with bad digest
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_bad_message_format
                        
                        	Authentication received with bad mesage format
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenge_response
                        
                        	Challenge responses received
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenge_timeouts
                        
                        	Challenge timeouts
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenges_resent
                        
                        	Challenges resent
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenges_response_duplicate
                        
                        	Duplicate challenge responses received
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenges_sent
                        
                        	Challenges sent
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_during_challenge
                        
                        	Authentication received during challenge
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_incomplete
                        
                        	Authentication received incomplete
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_no_integrity
                        
                        	Authentication received with no integrity
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_response_late
                        
                        	Challenge responses received late
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_sequence_number_duplicate
                        
                        	Authentication received with duplicate sequence number
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_sequence_number_outof_range
                        
                        	Authentication received with sequence number out of range
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_valid_messages
                        
                        	Valid messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_wrong_challenges_response
                        
                        	Incorect challenge responses received
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_wrong_digest_type
                        
                        	Authentication received with wrong digest type
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.authentication_received_bad_digest = None
                            self.authentication_received_bad_message_format = None
                            self.authentication_received_challenge_response = None
                            self.authentication_received_challenge_timeouts = None
                            self.authentication_received_challenges_resent = None
                            self.authentication_received_challenges_response_duplicate = None
                            self.authentication_received_challenges_sent = None
                            self.authentication_received_during_challenge = None
                            self.authentication_received_incomplete = None
                            self.authentication_received_no_integrity = None
                            self.authentication_received_response_late = None
                            self.authentication_received_sequence_number_duplicate = None
                            self.authentication_received_sequence_number_outof_range = None
                            self.authentication_received_valid_messages = None
                            self.authentication_received_wrong_challenges_response = None
                            self.authentication_received_wrong_digest_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:counters'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.authentication_received_bad_digest is not None:
                                return True

                            if self.authentication_received_bad_message_format is not None:
                                return True

                            if self.authentication_received_challenge_response is not None:
                                return True

                            if self.authentication_received_challenge_timeouts is not None:
                                return True

                            if self.authentication_received_challenges_resent is not None:
                                return True

                            if self.authentication_received_challenges_response_duplicate is not None:
                                return True

                            if self.authentication_received_challenges_sent is not None:
                                return True

                            if self.authentication_received_during_challenge is not None:
                                return True

                            if self.authentication_received_incomplete is not None:
                                return True

                            if self.authentication_received_no_integrity is not None:
                                return True

                            if self.authentication_received_response_late is not None:
                                return True

                            if self.authentication_received_sequence_number_duplicate is not None:
                                return True

                            if self.authentication_received_sequence_number_outof_range is not None:
                                return True

                            if self.authentication_received_valid_messages is not None:
                                return True

                            if self.authentication_received_wrong_challenges_response is not None:
                                return True

                            if self.authentication_received_wrong_digest_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:receive-info'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.counters is not None and self.counters._has_data():
                            return True

                        if self.sequence is not None:
                            return True

                        if self.sequence_window is not None:
                            for child in self.sequence_window:
                                if child is not None:
                                    return True

                        if self.sequence_window_count is not None:
                            return True

                        if self.sequence_window_size is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:direction-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.auth_direction is not None:
                        return True

                    if self.receive_info is not None and self.receive_info._has_data():
                        return True

                    if self.send_info is not None and self.send_info._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo']['meta_info']

            @property
            def _common_path(self):
                if self.destination_address is None:
                    raise YPYModelError('Key property destination_address is None')
                if self.interface_name is None:
                    raise YPYModelError('Key property interface_name is None')
                if self.mode_id is None:
                    raise YPYModelError('Key property mode_id is None')
                if self.source_address is None:
                    raise YPYModelError('Key property source_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:authentication-details/Cisco-IOS-XR-ip-rsvp-oper:authentication-detail[Cisco-IOS-XR-ip-rsvp-oper:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + '][Cisco-IOS-XR-ip-rsvp-oper:mode-id = ' + str(self.mode_id) + '][Cisco-IOS-XR-ip-rsvp-oper:source-address = ' + str(self.source_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.interface_name is not None:
                    return True

                if self.mode_id is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.auth_compact is not None and self.auth_compact._has_data():
                    return True

                if self.challenge_status is not None:
                    return True

                if self.direction_info is not None and self.direction_info._has_data():
                    return True

                if self.key_digest_info is not None:
                    return True

                if self.key_status is not None:
                    return True

                if self.lifetime is not None:
                    return True

                if self.lifetime_left is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.AuthenticationDetails.AuthenticationDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:authentication-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.authentication_detail is not None:
                for child_ref in self.authentication_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.AuthenticationDetails']['meta_info']


    class RsbBriefs(object):
        """
        Table of brief info about reservation state
        blocks
        
        .. attribute:: rsb_brief
        
        	Brief info for a single reservation state block
        	**type**\: list of    :py:class:`RsbBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.rsb_brief = YList()
            self.rsb_brief.parent = self
            self.rsb_brief.name = 'rsb_brief'


        class RsbBrief(object):
            """
            Brief info for a single reservation state block
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:   :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Filter>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:   :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Info
            	**type**\:   :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec>`
            
            .. attribute:: input_interface
            
            	Reservation Input Interface
            	**type**\:  str
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Session>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:   :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Style>`
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.extended_tunnel_id = None
                self.filter = Rsvp.RsbBriefs.RsbBrief.Filter()
                self.filter.parent = self
                self.flow_spec = Rsvp.RsbBriefs.RsbBrief.FlowSpec()
                self.flow_spec.parent = self
                self.generic_flow_spec = Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self.input_interface = None
                self.p2mp_id = None
                self.protocol = None
                self.s2l_sub_lsp = Rsvp.RsbBriefs.RsbBrief.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = Rsvp.RsbBriefs.RsbBrief.Session()
                self.session.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.style = Rsvp.RsbBriefs.RsbBrief.Style()
                self.style.parent = self
                self.sub_group_id = None
                self.sub_group_origin = None
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.S2LSubLsp']['meta_info']


            class FlowSpec(object):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:   :py:class:`RsvpMgmtQosServiceEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnumEnum>`
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_max_unit = None
                    self.flow_min_unit = None
                    self.flow_peak_rate = None
                    self.flow_qos = None
                    self.flow_requested_rate = None
                    self.flow_slack = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_average_rate is not None:
                        return True

                    if self.flow_max_burst is not None:
                        return True

                    if self.flow_max_unit is not None:
                        return True

                    if self.flow_min_unit is not None:
                        return True

                    if self.flow_peak_rate is not None:
                        return True

                    if self.flow_qos is not None:
                        return True

                    if self.flow_requested_rate is not None:
                        return True

                    if self.flow_slack is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.FlowSpec']['meta_info']


            class GenericFlowSpec(object):
                """
                Generic Flow Spec Info
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:   :py:class:`RsvpMgmtFlowSpecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpecEnum>`
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:   :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_spec_type = None
                    self.g709otn_flow_spec = Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self


                class G709OtnFlowSpec(object):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.flow_bit_rate = None
                        self.flow_multiplier = None
                        self.flow_nvc = None
                        self.flow_signal_type = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-flow-spec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.flow_bit_rate is not None:
                            return True

                        if self.flow_multiplier is not None:
                            return True

                        if self.flow_nvc is not None:
                            return True

                        if self.flow_signal_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_spec_type is not None:
                        return True

                    if self.g709otn_flow_spec is not None and self.g709otn_flow_spec._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec']['meta_info']


            class Style(object):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:   :py:class:`RsvpMgmtReservationTypeEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnumEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.reservation_type = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:style'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.reservation_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.Style']['meta_info']


            class Filter(object):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:   :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_filter = Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self


                class RsvpFilter(object):
                    """
                    RSVP Filter
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:   :py:class:`RsvpMgmtFilterEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilterEnum>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:   :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:   :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.filter_type = None
                        self.p2mp_ipv4_session = Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self.udp_ipv4_session = Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self


                    class UdpIpv4Session(object):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.source_address = None
                            self.source_port = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:udp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session']['meta_info']


                    class P2MpIpv4Session(object):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.p2mp_sub_group_origin = None
                            self.source_address = None
                            self.source_port = None
                            self.sub_group_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:p2mp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.p2mp_sub_group_origin is not None:
                                return True

                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            if self.sub_group_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.filter_type is not None:
                            return True

                        if self.p2mp_ipv4_session is not None and self.p2mp_ipv4_session._has_data():
                            return True

                        if self.udp_ipv4_session is not None and self.udp_ipv4_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief/Cisco-IOS-XR-ip-rsvp-oper:filter'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_filter is not None and self.rsvp_filter._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RsbBriefs.RsbBrief.Filter']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs/Cisco-IOS-XR-ip-rsvp-oper:rsb-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.filter is not None and self.filter._has_data():
                    return True

                if self.flow_spec is not None and self.flow_spec._has_data():
                    return True

                if self.generic_flow_spec is not None and self.generic_flow_spec._has_data():
                    return True

                if self.input_interface is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.protocol is not None:
                    return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.style is not None and self.style._has_data():
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.RsbBriefs.RsbBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:rsb-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.rsb_brief is not None:
                for child_ref in self.rsb_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.RsbBriefs']['meta_info']


    class OpenConfig(object):
        """
        OpenConfig info
        
        .. attribute:: global_counters
        
        	Platform wide RSVP statistics and counters
        	**type**\:   :py:class:`GlobalCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.OpenConfig.GlobalCounters>`
        
        .. attribute:: interface_counters
        
        	Table of info about RSVP\-enabled interface counters for OpenConfig
        	**type**\:   :py:class:`InterfaceCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.OpenConfig.InterfaceCounters>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.global_counters = Rsvp.OpenConfig.GlobalCounters()
            self.global_counters.parent = self
            self.interface_counters = Rsvp.OpenConfig.InterfaceCounters()
            self.interface_counters.parent = self


        class GlobalCounters(object):
            """
            Platform wide RSVP statistics and counters
            
            .. attribute:: in_ack_messages
            
            	Global count of ack messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_hello_messages
            
            	Global count of hello messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_path_error_messages
            
            	Global count of path error messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_path_messages
            
            	Global count of path messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_path_tear_messages
            
            	Global count of path tear messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_reservation_error_messages
            
            	Global count of reservation error messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_reservation_messages
            
            	Global count of reservation messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_reservation_tear_messages
            
            	Global count of reservation tear messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_srefresh_messages
            
            	Global count of srefresh messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_ack_messages
            
            	Global count of ack messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_hello_messages
            
            	Global count of hello messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_path_error_messages
            
            	Global count of path error messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_path_messages
            
            	Global count of path messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_path_tear_messages
            
            	Global count of path tear messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_reservation_error_messages
            
            	Global count of reservation error messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_reservation_messages
            
            	Global count of reservation messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_reservation_tear_messages
            
            	Global count of reservation tear messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_srefresh_messages
            
            	Global count of srefresh messages send
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: path_timeouts
            
            	Global count of Path Timeouts
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: rate_limited_messages
            
            	Global count of rate limited messages
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: reservation_timeouts
            
            	Global count of reservation timeouts
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.in_ack_messages = None
                self.in_hello_messages = None
                self.in_path_error_messages = None
                self.in_path_messages = None
                self.in_path_tear_messages = None
                self.in_reservation_error_messages = None
                self.in_reservation_messages = None
                self.in_reservation_tear_messages = None
                self.in_srefresh_messages = None
                self.out_ack_messages = None
                self.out_hello_messages = None
                self.out_path_error_messages = None
                self.out_path_messages = None
                self.out_path_tear_messages = None
                self.out_reservation_error_messages = None
                self.out_reservation_messages = None
                self.out_reservation_tear_messages = None
                self.out_srefresh_messages = None
                self.path_timeouts = None
                self.rate_limited_messages = None
                self.reservation_timeouts = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:open-config/Cisco-IOS-XR-ip-rsvp-oper:global-counters'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.in_ack_messages is not None:
                    return True

                if self.in_hello_messages is not None:
                    return True

                if self.in_path_error_messages is not None:
                    return True

                if self.in_path_messages is not None:
                    return True

                if self.in_path_tear_messages is not None:
                    return True

                if self.in_reservation_error_messages is not None:
                    return True

                if self.in_reservation_messages is not None:
                    return True

                if self.in_reservation_tear_messages is not None:
                    return True

                if self.in_srefresh_messages is not None:
                    return True

                if self.out_ack_messages is not None:
                    return True

                if self.out_hello_messages is not None:
                    return True

                if self.out_path_error_messages is not None:
                    return True

                if self.out_path_messages is not None:
                    return True

                if self.out_path_tear_messages is not None:
                    return True

                if self.out_reservation_error_messages is not None:
                    return True

                if self.out_reservation_messages is not None:
                    return True

                if self.out_reservation_tear_messages is not None:
                    return True

                if self.out_srefresh_messages is not None:
                    return True

                if self.path_timeouts is not None:
                    return True

                if self.rate_limited_messages is not None:
                    return True

                if self.reservation_timeouts is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.OpenConfig.GlobalCounters']['meta_info']


        class InterfaceCounters(object):
            """
            Table of info about RSVP\-enabled interface
            counters for OpenConfig
            
            .. attribute:: interface_counter
            
            	Info about an RSVP\-enabled interface counters
            	**type**\: list of    :py:class:`InterfaceCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.OpenConfig.InterfaceCounters.InterfaceCounter>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.interface_counter = YList()
                self.interface_counter.parent = self
                self.interface_counter.name = 'interface_counter'


            class InterfaceCounter(object):
                """
                Info about an RSVP\-enabled interface counters
                
                .. attribute:: interface_name  <key>
                
                	Interface name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: in_ack_messages
                
                	Per interface count of ack messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_hello_messages
                
                	Per interface count of hello messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_path_error_messages
                
                	Per interface count of path error messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_path_messages
                
                	Per interface count of path messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_path_tear_messages
                
                	Per interface count of path tear messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_reservation_error_messages
                
                	Per interface count of reservation error messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_reservation_messages
                
                	Per interface count of reservation messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_reservation_tear_messages
                
                	Per interface count of reservation tear messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_srefresh_messages
                
                	Per interface count of srefresh messages received
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: interface_name_xr
                
                	Interface name
                	**type**\:  str
                
                .. attribute:: out_ack_messages
                
                	Per interface count of ack messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_hello_messages
                
                	Per interface count of hello messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_path_error_messages
                
                	Per interface count of path error messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_path_messages
                
                	Per interface count of path messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_path_tear_messages
                
                	Per interface count of path tear messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_reservation_error_messages
                
                	Per interface count of reservation error messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_reservation_messages
                
                	Per interface count of reservation messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_reservation_tear_messages
                
                	Per interface count of reservation tear messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_srefresh_messages
                
                	Per interface count of srefresh messages send
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_name = None
                    self.in_ack_messages = None
                    self.in_hello_messages = None
                    self.in_path_error_messages = None
                    self.in_path_messages = None
                    self.in_path_tear_messages = None
                    self.in_reservation_error_messages = None
                    self.in_reservation_messages = None
                    self.in_reservation_tear_messages = None
                    self.in_srefresh_messages = None
                    self.interface_name_xr = None
                    self.out_ack_messages = None
                    self.out_hello_messages = None
                    self.out_path_error_messages = None
                    self.out_path_messages = None
                    self.out_path_tear_messages = None
                    self.out_reservation_error_messages = None
                    self.out_reservation_messages = None
                    self.out_reservation_tear_messages = None
                    self.out_srefresh_messages = None

                @property
                def _common_path(self):
                    if self.interface_name is None:
                        raise YPYModelError('Key property interface_name is None')

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:open-config/Cisco-IOS-XR-ip-rsvp-oper:interface-counters/Cisco-IOS-XR-ip-rsvp-oper:interface-counter[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_name is not None:
                        return True

                    if self.in_ack_messages is not None:
                        return True

                    if self.in_hello_messages is not None:
                        return True

                    if self.in_path_error_messages is not None:
                        return True

                    if self.in_path_messages is not None:
                        return True

                    if self.in_path_tear_messages is not None:
                        return True

                    if self.in_reservation_error_messages is not None:
                        return True

                    if self.in_reservation_messages is not None:
                        return True

                    if self.in_reservation_tear_messages is not None:
                        return True

                    if self.in_srefresh_messages is not None:
                        return True

                    if self.interface_name_xr is not None:
                        return True

                    if self.out_ack_messages is not None:
                        return True

                    if self.out_hello_messages is not None:
                        return True

                    if self.out_path_error_messages is not None:
                        return True

                    if self.out_path_messages is not None:
                        return True

                    if self.out_path_tear_messages is not None:
                        return True

                    if self.out_reservation_error_messages is not None:
                        return True

                    if self.out_reservation_messages is not None:
                        return True

                    if self.out_reservation_tear_messages is not None:
                        return True

                    if self.out_srefresh_messages is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.OpenConfig.InterfaceCounters.InterfaceCounter']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:open-config/Cisco-IOS-XR-ip-rsvp-oper:interface-counters'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interface_counter is not None:
                    for child_ref in self.interface_counter:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.OpenConfig.InterfaceCounters']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:open-config'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.global_counters is not None and self.global_counters._has_data():
                return True

            if self.interface_counters is not None and self.interface_counters._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.OpenConfig']['meta_info']


    class Counters(object):
        """
        Counters
        
        .. attribute:: database
        
        	Summary information for all RSVP database counters
        	**type**\:   :py:class:`Database <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.Database>`
        
        .. attribute:: event_syncs
        
        	Table containing event sync counters
        	**type**\:   :py:class:`EventSyncs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.EventSyncs>`
        
        .. attribute:: interface_events
        
        	Event counters
        	**type**\:   :py:class:`InterfaceEvents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceEvents>`
        
        .. attribute:: interface_messages
        
        	Table of message counters
        	**type**\:   :py:class:`InterfaceMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceMessages>`
        
        .. attribute:: issu
        
        	Summary information for all RSVP ISSU counters
        	**type**\:   :py:class:`Issu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.Issu>`
        
        .. attribute:: message_summary
        
        	Summary information for all RSVP message counters
        	**type**\:   :py:class:`MessageSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.MessageSummary>`
        
        .. attribute:: nsr
        
        	Summary information for all RSVP NSR counters
        	**type**\:   :py:class:`Nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.Nsr>`
        
        .. attribute:: out_of_resource
        
        	Out of resource counters
        	**type**\:   :py:class:`OutOfResource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.OutOfResource>`
        
        .. attribute:: prefix_filtering
        
        	Prefix filtering counters
        	**type**\:   :py:class:`PrefixFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.database = Rsvp.Counters.Database()
            self.database.parent = self
            self.event_syncs = Rsvp.Counters.EventSyncs()
            self.event_syncs.parent = self
            self.interface_events = Rsvp.Counters.InterfaceEvents()
            self.interface_events.parent = self
            self.interface_messages = Rsvp.Counters.InterfaceMessages()
            self.interface_messages.parent = self
            self.issu = Rsvp.Counters.Issu()
            self.issu.parent = self
            self.message_summary = Rsvp.Counters.MessageSummary()
            self.message_summary.parent = self
            self.nsr = Rsvp.Counters.Nsr()
            self.nsr.parent = self
            self.out_of_resource = Rsvp.Counters.OutOfResource()
            self.out_of_resource.parent = self
            self.prefix_filtering = Rsvp.Counters.PrefixFiltering()
            self.prefix_filtering.parent = self


        class InterfaceMessages(object):
            """
            Table of message counters
            
            .. attribute:: interface_message
            
            	Interface message counters
            	**type**\: list of    :py:class:`InterfaceMessage <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceMessages.InterfaceMessage>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.interface_message = YList()
                self.interface_message.parent = self
                self.interface_message.name = 'interface_message'


            class InterfaceMessage(object):
                """
                Interface message counters
                
                .. attribute:: interface_name  <key>
                
                	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: bundle_received_messages
                
                	Count of Bundle messages received
                	**type**\:   :py:class:`BundleReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages>`
                
                .. attribute:: bundle_transmitted_messages
                
                	Count of Bundle messages transmitted
                	**type**\:   :py:class:`BundleTransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages>`
                
                .. attribute:: out_of_order_messages
                
                	Count of Out of Order messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: rate_limited_messages
                
                	Count of Rate Limited messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: received_messages
                
                	Count of messages received
                	**type**\:   :py:class:`ReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages>`
                
                .. attribute:: retransmitted_messages
                
                	Count of messages retransmitted
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: transmitted_messages
                
                	Count of messages transmitted
                	**type**\:   :py:class:`TransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_name = None
                    self.bundle_received_messages = Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages()
                    self.bundle_received_messages.parent = self
                    self.bundle_transmitted_messages = Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages()
                    self.bundle_transmitted_messages.parent = self
                    self.out_of_order_messages = None
                    self.rate_limited_messages = None
                    self.received_messages = Rsvp.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages()
                    self.received_messages.parent = self
                    self.retransmitted_messages = None
                    self.transmitted_messages = Rsvp.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages()
                    self.transmitted_messages.parent = self


                class ReceivedMessages(object):
                    """
                    Count of messages received
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ack = None
                        self.bundle = None
                        self.challenge = None
                        self.hello = None
                        self.path = None
                        self.path_error = None
                        self.path_tear = None
                        self.reservation = None
                        self.reservation_confirm = None
                        self.reservation_error = None
                        self.reservation_tear = None
                        self.response = None
                        self.srefresh = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:received-messages'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ack is not None:
                            return True

                        if self.bundle is not None:
                            return True

                        if self.challenge is not None:
                            return True

                        if self.hello is not None:
                            return True

                        if self.path is not None:
                            return True

                        if self.path_error is not None:
                            return True

                        if self.path_tear is not None:
                            return True

                        if self.reservation is not None:
                            return True

                        if self.reservation_confirm is not None:
                            return True

                        if self.reservation_error is not None:
                            return True

                        if self.reservation_tear is not None:
                            return True

                        if self.response is not None:
                            return True

                        if self.srefresh is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages']['meta_info']


                class TransmittedMessages(object):
                    """
                    Count of messages transmitted
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ack = None
                        self.bundle = None
                        self.challenge = None
                        self.hello = None
                        self.path = None
                        self.path_error = None
                        self.path_tear = None
                        self.reservation = None
                        self.reservation_confirm = None
                        self.reservation_error = None
                        self.reservation_tear = None
                        self.response = None
                        self.srefresh = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:transmitted-messages'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ack is not None:
                            return True

                        if self.bundle is not None:
                            return True

                        if self.challenge is not None:
                            return True

                        if self.hello is not None:
                            return True

                        if self.path is not None:
                            return True

                        if self.path_error is not None:
                            return True

                        if self.path_tear is not None:
                            return True

                        if self.reservation is not None:
                            return True

                        if self.reservation_confirm is not None:
                            return True

                        if self.reservation_error is not None:
                            return True

                        if self.reservation_tear is not None:
                            return True

                        if self.response is not None:
                            return True

                        if self.srefresh is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages']['meta_info']


                class BundleReceivedMessages(object):
                    """
                    Count of Bundle messages received
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ack = None
                        self.bundle = None
                        self.challenge = None
                        self.hello = None
                        self.path = None
                        self.path_error = None
                        self.path_tear = None
                        self.reservation = None
                        self.reservation_confirm = None
                        self.reservation_error = None
                        self.reservation_tear = None
                        self.response = None
                        self.srefresh = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:bundle-received-messages'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ack is not None:
                            return True

                        if self.bundle is not None:
                            return True

                        if self.challenge is not None:
                            return True

                        if self.hello is not None:
                            return True

                        if self.path is not None:
                            return True

                        if self.path_error is not None:
                            return True

                        if self.path_tear is not None:
                            return True

                        if self.reservation is not None:
                            return True

                        if self.reservation_confirm is not None:
                            return True

                        if self.reservation_error is not None:
                            return True

                        if self.reservation_tear is not None:
                            return True

                        if self.response is not None:
                            return True

                        if self.srefresh is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages']['meta_info']


                class BundleTransmittedMessages(object):
                    """
                    Count of Bundle messages transmitted
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ack = None
                        self.bundle = None
                        self.challenge = None
                        self.hello = None
                        self.path = None
                        self.path_error = None
                        self.path_tear = None
                        self.reservation = None
                        self.reservation_confirm = None
                        self.reservation_error = None
                        self.reservation_tear = None
                        self.response = None
                        self.srefresh = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:bundle-transmitted-messages'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ack is not None:
                            return True

                        if self.bundle is not None:
                            return True

                        if self.challenge is not None:
                            return True

                        if self.hello is not None:
                            return True

                        if self.path is not None:
                            return True

                        if self.path_error is not None:
                            return True

                        if self.path_tear is not None:
                            return True

                        if self.reservation is not None:
                            return True

                        if self.reservation_confirm is not None:
                            return True

                        if self.reservation_error is not None:
                            return True

                        if self.reservation_tear is not None:
                            return True

                        if self.response is not None:
                            return True

                        if self.srefresh is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages']['meta_info']

                @property
                def _common_path(self):
                    if self.interface_name is None:
                        raise YPYModelError('Key property interface_name is None')

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:interface-messages/Cisco-IOS-XR-ip-rsvp-oper:interface-message[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_name is not None:
                        return True

                    if self.bundle_received_messages is not None and self.bundle_received_messages._has_data():
                        return True

                    if self.bundle_transmitted_messages is not None and self.bundle_transmitted_messages._has_data():
                        return True

                    if self.out_of_order_messages is not None:
                        return True

                    if self.rate_limited_messages is not None:
                        return True

                    if self.received_messages is not None and self.received_messages._has_data():
                        return True

                    if self.retransmitted_messages is not None:
                        return True

                    if self.transmitted_messages is not None and self.transmitted_messages._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Counters.InterfaceMessages.InterfaceMessage']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:interface-messages'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interface_message is not None:
                    for child_ref in self.interface_message:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Counters.InterfaceMessages']['meta_info']


        class MessageSummary(object):
            """
            Summary information for all RSVP message
            counters
            
            .. attribute:: bundle_received_messages
            
            	Count of Bundle messages received
            	**type**\:   :py:class:`BundleReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.MessageSummary.BundleReceivedMessages>`
            
            .. attribute:: bundle_transmitted_messages
            
            	Count of Bundle messages transmitted
            	**type**\:   :py:class:`BundleTransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.MessageSummary.BundleTransmittedMessages>`
            
            .. attribute:: out_of_order_messages
            
            	Count of Out of Order messages
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: rate_limited_messages
            
            	Count of Rate Limited messages
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: received_messages
            
            	Count of messages received
            	**type**\:   :py:class:`ReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.MessageSummary.ReceivedMessages>`
            
            .. attribute:: retransmitted_messages
            
            	Count of messages retransmitted
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: transmitted_messages
            
            	Count of messages transmitted
            	**type**\:   :py:class:`TransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.MessageSummary.TransmittedMessages>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.bundle_received_messages = Rsvp.Counters.MessageSummary.BundleReceivedMessages()
                self.bundle_received_messages.parent = self
                self.bundle_transmitted_messages = Rsvp.Counters.MessageSummary.BundleTransmittedMessages()
                self.bundle_transmitted_messages.parent = self
                self.out_of_order_messages = None
                self.rate_limited_messages = None
                self.received_messages = Rsvp.Counters.MessageSummary.ReceivedMessages()
                self.received_messages.parent = self
                self.retransmitted_messages = None
                self.transmitted_messages = Rsvp.Counters.MessageSummary.TransmittedMessages()
                self.transmitted_messages.parent = self


            class ReceivedMessages(object):
                """
                Count of messages received
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ack = None
                    self.bundle = None
                    self.challenge = None
                    self.hello = None
                    self.path = None
                    self.path_error = None
                    self.path_tear = None
                    self.reservation = None
                    self.reservation_confirm = None
                    self.reservation_error = None
                    self.reservation_tear = None
                    self.response = None
                    self.srefresh = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:message-summary/Cisco-IOS-XR-ip-rsvp-oper:received-messages'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ack is not None:
                        return True

                    if self.bundle is not None:
                        return True

                    if self.challenge is not None:
                        return True

                    if self.hello is not None:
                        return True

                    if self.path is not None:
                        return True

                    if self.path_error is not None:
                        return True

                    if self.path_tear is not None:
                        return True

                    if self.reservation is not None:
                        return True

                    if self.reservation_confirm is not None:
                        return True

                    if self.reservation_error is not None:
                        return True

                    if self.reservation_tear is not None:
                        return True

                    if self.response is not None:
                        return True

                    if self.srefresh is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Counters.MessageSummary.ReceivedMessages']['meta_info']


            class TransmittedMessages(object):
                """
                Count of messages transmitted
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ack = None
                    self.bundle = None
                    self.challenge = None
                    self.hello = None
                    self.path = None
                    self.path_error = None
                    self.path_tear = None
                    self.reservation = None
                    self.reservation_confirm = None
                    self.reservation_error = None
                    self.reservation_tear = None
                    self.response = None
                    self.srefresh = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:message-summary/Cisco-IOS-XR-ip-rsvp-oper:transmitted-messages'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ack is not None:
                        return True

                    if self.bundle is not None:
                        return True

                    if self.challenge is not None:
                        return True

                    if self.hello is not None:
                        return True

                    if self.path is not None:
                        return True

                    if self.path_error is not None:
                        return True

                    if self.path_tear is not None:
                        return True

                    if self.reservation is not None:
                        return True

                    if self.reservation_confirm is not None:
                        return True

                    if self.reservation_error is not None:
                        return True

                    if self.reservation_tear is not None:
                        return True

                    if self.response is not None:
                        return True

                    if self.srefresh is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Counters.MessageSummary.TransmittedMessages']['meta_info']


            class BundleReceivedMessages(object):
                """
                Count of Bundle messages received
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ack = None
                    self.bundle = None
                    self.challenge = None
                    self.hello = None
                    self.path = None
                    self.path_error = None
                    self.path_tear = None
                    self.reservation = None
                    self.reservation_confirm = None
                    self.reservation_error = None
                    self.reservation_tear = None
                    self.response = None
                    self.srefresh = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:message-summary/Cisco-IOS-XR-ip-rsvp-oper:bundle-received-messages'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ack is not None:
                        return True

                    if self.bundle is not None:
                        return True

                    if self.challenge is not None:
                        return True

                    if self.hello is not None:
                        return True

                    if self.path is not None:
                        return True

                    if self.path_error is not None:
                        return True

                    if self.path_tear is not None:
                        return True

                    if self.reservation is not None:
                        return True

                    if self.reservation_confirm is not None:
                        return True

                    if self.reservation_error is not None:
                        return True

                    if self.reservation_tear is not None:
                        return True

                    if self.response is not None:
                        return True

                    if self.srefresh is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Counters.MessageSummary.BundleReceivedMessages']['meta_info']


            class BundleTransmittedMessages(object):
                """
                Count of Bundle messages transmitted
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ack = None
                    self.bundle = None
                    self.challenge = None
                    self.hello = None
                    self.path = None
                    self.path_error = None
                    self.path_tear = None
                    self.reservation = None
                    self.reservation_confirm = None
                    self.reservation_error = None
                    self.reservation_tear = None
                    self.response = None
                    self.srefresh = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:message-summary/Cisco-IOS-XR-ip-rsvp-oper:bundle-transmitted-messages'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ack is not None:
                        return True

                    if self.bundle is not None:
                        return True

                    if self.challenge is not None:
                        return True

                    if self.hello is not None:
                        return True

                    if self.path is not None:
                        return True

                    if self.path_error is not None:
                        return True

                    if self.path_tear is not None:
                        return True

                    if self.reservation is not None:
                        return True

                    if self.reservation_confirm is not None:
                        return True

                    if self.reservation_error is not None:
                        return True

                    if self.reservation_tear is not None:
                        return True

                    if self.response is not None:
                        return True

                    if self.srefresh is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Counters.MessageSummary.BundleTransmittedMessages']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:message-summary'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.bundle_received_messages is not None and self.bundle_received_messages._has_data():
                    return True

                if self.bundle_transmitted_messages is not None and self.bundle_transmitted_messages._has_data():
                    return True

                if self.out_of_order_messages is not None:
                    return True

                if self.rate_limited_messages is not None:
                    return True

                if self.received_messages is not None and self.received_messages._has_data():
                    return True

                if self.retransmitted_messages is not None:
                    return True

                if self.transmitted_messages is not None and self.transmitted_messages._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Counters.MessageSummary']['meta_info']


        class PrefixFiltering(object):
            """
            Prefix filtering counters
            
            .. attribute:: accesses
            
            	AccessList specific prefix filtering counters
            	**type**\:   :py:class:`Accesses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Accesses>`
            
            .. attribute:: interfaces
            
            	Interface specific prefix filtering counters
            	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.accesses = Rsvp.Counters.PrefixFiltering.Accesses()
                self.accesses.parent = self
                self.interfaces = Rsvp.Counters.PrefixFiltering.Interfaces()
                self.interfaces.parent = self


            class Accesses(object):
                """
                AccessList specific prefix filtering counters
                
                .. attribute:: access
                
                	Prefix filtering counters for a specific AccessList
                	**type**\: list of    :py:class:`Access <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Accesses.Access>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.access = YList()
                    self.access.parent = self
                    self.access.name = 'access'


                class Access(object):
                    """
                    Prefix filtering counters for a specific
                    AccessList
                    
                    .. attribute:: access_list_name  <key>
                    
                    	AccessList Name
                    	**type**\:  str
                    
                    	**length:** 1..65
                    
                    .. attribute:: dropped
                    
                    	Count of messages dropped
                    	**type**\:   :py:class:`Dropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Accesses.Access.Dropped>`
                    
                    .. attribute:: forwarded
                    
                    	Count of messages which got forwarded
                    	**type**\:   :py:class:`Forwarded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Accesses.Access.Forwarded>`
                    
                    .. attribute:: locally_destined
                    
                    	Count of locally destined messages
                    	**type**\:   :py:class:`LocallyDestined <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Accesses.Access.LocallyDestined>`
                    
                    .. attribute:: total
                    
                    	Count of total messages
                    	**type**\:   :py:class:`Total <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Accesses.Access.Total>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.access_list_name = None
                        self.dropped = Rsvp.Counters.PrefixFiltering.Accesses.Access.Dropped()
                        self.dropped.parent = self
                        self.forwarded = Rsvp.Counters.PrefixFiltering.Accesses.Access.Forwarded()
                        self.forwarded.parent = self
                        self.locally_destined = Rsvp.Counters.PrefixFiltering.Accesses.Access.LocallyDestined()
                        self.locally_destined.parent = self
                        self.total = Rsvp.Counters.PrefixFiltering.Accesses.Access.Total()
                        self.total.parent = self


                    class Forwarded(object):
                        """
                        Count of messages which got forwarded
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:forwarded'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Counters.PrefixFiltering.Accesses.Access.Forwarded']['meta_info']


                    class LocallyDestined(object):
                        """
                        Count of locally destined messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:locally-destined'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Counters.PrefixFiltering.Accesses.Access.LocallyDestined']['meta_info']


                    class Dropped(object):
                        """
                        Count of messages dropped
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:dropped'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Counters.PrefixFiltering.Accesses.Access.Dropped']['meta_info']


                    class Total(object):
                        """
                        Count of total messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:total'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Counters.PrefixFiltering.Accesses.Access.Total']['meta_info']

                    @property
                    def _common_path(self):
                        if self.access_list_name is None:
                            raise YPYModelError('Key property access_list_name is None')

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:accesses/Cisco-IOS-XR-ip-rsvp-oper:access[Cisco-IOS-XR-ip-rsvp-oper:access-list-name = ' + str(self.access_list_name) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.access_list_name is not None:
                            return True

                        if self.dropped is not None and self.dropped._has_data():
                            return True

                        if self.forwarded is not None and self.forwarded._has_data():
                            return True

                        if self.locally_destined is not None and self.locally_destined._has_data():
                            return True

                        if self.total is not None and self.total._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.Counters.PrefixFiltering.Accesses.Access']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:accesses'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.access is not None:
                        for child_ref in self.access:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Counters.PrefixFiltering.Accesses']['meta_info']


            class Interfaces(object):
                """
                Interface specific prefix filtering counters
                
                .. attribute:: interfaces
                
                	Table of interface specific prefix filtering counters
                	**type**\:   :py:class:`Interfaces_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_>`
                
                .. attribute:: summary
                
                	Summary of prefix filtering counts for all interfaces
                	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Summary>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interfaces = Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_()
                    self.interfaces.parent = self
                    self.summary = Rsvp.Counters.PrefixFiltering.Interfaces.Summary()
                    self.summary.parent = self


                class Summary(object):
                    """
                    Summary of prefix filtering counts for all
                    interfaces
                    
                    .. attribute:: default_action_dropped
                    
                    	Count of messages which got dropped due to default ACL action
                    	**type**\:   :py:class:`DefaultActionDropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped>`
                    
                    .. attribute:: default_action_processed
                    
                    	Count of messages which were processed due to default ACL action
                    	**type**\:   :py:class:`DefaultActionProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed>`
                    
                    .. attribute:: dropped
                    
                    	Count of messages dropped
                    	**type**\:   :py:class:`Dropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Dropped>`
                    
                    .. attribute:: forwarded
                    
                    	Count of messages which got forwarded
                    	**type**\:   :py:class:`Forwarded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Forwarded>`
                    
                    .. attribute:: locally_destined
                    
                    	Count of locally destined messages
                    	**type**\:   :py:class:`LocallyDestined <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined>`
                    
                    .. attribute:: total
                    
                    	Count of total messages
                    	**type**\:   :py:class:`Total <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Total>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.default_action_dropped = Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped()
                        self.default_action_dropped.parent = self
                        self.default_action_processed = Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed()
                        self.default_action_processed.parent = self
                        self.dropped = Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Dropped()
                        self.dropped.parent = self
                        self.forwarded = Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Forwarded()
                        self.forwarded.parent = self
                        self.locally_destined = Rsvp.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined()
                        self.locally_destined.parent = self
                        self.total = Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Total()
                        self.total.parent = self


                    class Forwarded(object):
                        """
                        Count of messages which got forwarded
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:forwarded'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Forwarded']['meta_info']


                    class LocallyDestined(object):
                        """
                        Count of locally destined messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:locally-destined'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined']['meta_info']


                    class Dropped(object):
                        """
                        Count of messages dropped
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:dropped'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Dropped']['meta_info']


                    class DefaultActionDropped(object):
                        """
                        Count of messages which got dropped due to
                        default ACL action
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:default-action-dropped'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped']['meta_info']


                    class DefaultActionProcessed(object):
                        """
                        Count of messages which were processed due to
                        default ACL action
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:default-action-processed'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed']['meta_info']


                    class Total(object):
                        """
                        Count of total messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:total'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.path is not None:
                                return True

                            if self.path_tear is not None:
                                return True

                            if self.reservation_confirm is not None:
                                return True

                            if self.total is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Total']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.default_action_dropped is not None and self.default_action_dropped._has_data():
                            return True

                        if self.default_action_processed is not None and self.default_action_processed._has_data():
                            return True

                        if self.dropped is not None and self.dropped._has_data():
                            return True

                        if self.forwarded is not None and self.forwarded._has_data():
                            return True

                        if self.locally_destined is not None and self.locally_destined._has_data():
                            return True

                        if self.total is not None and self.total._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Summary']['meta_info']


                class Interfaces_(object):
                    """
                    Table of interface specific prefix filtering
                    counters
                    
                    .. attribute:: interface
                    
                    	Prefix filtering counters for a specific interface
                    	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.interface = YList()
                        self.interface.parent = self
                        self.interface.name = 'interface'


                    class Interface(object):
                        """
                        Prefix filtering counters for a specific
                        interface
                        
                        .. attribute:: interface_name  <key>
                        
                        	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: default_action_dropped
                        
                        	Count of messages which got dropped due to default ACL action
                        	**type**\:   :py:class:`DefaultActionDropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped>`
                        
                        .. attribute:: default_action_processed
                        
                        	Count of messages which were processed due to default ACL action
                        	**type**\:   :py:class:`DefaultActionProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed>`
                        
                        .. attribute:: dropped
                        
                        	Count of messages dropped
                        	**type**\:   :py:class:`Dropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped>`
                        
                        .. attribute:: forwarded
                        
                        	Count of messages which got forwarded
                        	**type**\:   :py:class:`Forwarded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded>`
                        
                        .. attribute:: locally_destined
                        
                        	Count of locally destined messages
                        	**type**\:   :py:class:`LocallyDestined <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined>`
                        
                        .. attribute:: total
                        
                        	Count of total messages
                        	**type**\:   :py:class:`Total <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.interface_name = None
                            self.default_action_dropped = Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped()
                            self.default_action_dropped.parent = self
                            self.default_action_processed = Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed()
                            self.default_action_processed.parent = self
                            self.dropped = Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped()
                            self.dropped.parent = self
                            self.forwarded = Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded()
                            self.forwarded.parent = self
                            self.locally_destined = Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined()
                            self.locally_destined.parent = self
                            self.total = Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total()
                            self.total.parent = self


                        class Forwarded(object):
                            """
                            Count of messages which got forwarded
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:forwarded'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path is not None:
                                    return True

                                if self.path_tear is not None:
                                    return True

                                if self.reservation_confirm is not None:
                                    return True

                                if self.total is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded']['meta_info']


                        class LocallyDestined(object):
                            """
                            Count of locally destined messages
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:locally-destined'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path is not None:
                                    return True

                                if self.path_tear is not None:
                                    return True

                                if self.reservation_confirm is not None:
                                    return True

                                if self.total is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined']['meta_info']


                        class Dropped(object):
                            """
                            Count of messages dropped
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:dropped'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path is not None:
                                    return True

                                if self.path_tear is not None:
                                    return True

                                if self.reservation_confirm is not None:
                                    return True

                                if self.total is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped']['meta_info']


                        class DefaultActionDropped(object):
                            """
                            Count of messages which got dropped due to
                            default ACL action
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:default-action-dropped'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path is not None:
                                    return True

                                if self.path_tear is not None:
                                    return True

                                if self.reservation_confirm is not None:
                                    return True

                                if self.total is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped']['meta_info']


                        class DefaultActionProcessed(object):
                            """
                            Count of messages which were processed due to
                            default ACL action
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:default-action-processed'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path is not None:
                                    return True

                                if self.path_tear is not None:
                                    return True

                                if self.reservation_confirm is not None:
                                    return True

                                if self.total is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed']['meta_info']


                        class Total(object):
                            """
                            Count of total messages
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:total'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.path is not None:
                                    return True

                                if self.path_tear is not None:
                                    return True

                                if self.reservation_confirm is not None:
                                    return True

                                if self.total is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total']['meta_info']

                        @property
                        def _common_path(self):
                            if self.interface_name is None:
                                raise YPYModelError('Key property interface_name is None')

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:interface[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.interface_name is not None:
                                return True

                            if self.default_action_dropped is not None and self.default_action_dropped._has_data():
                                return True

                            if self.default_action_processed is not None and self.default_action_processed._has_data():
                                return True

                            if self.dropped is not None and self.dropped._has_data():
                                return True

                            if self.forwarded is not None and self.forwarded._has_data():
                                return True

                            if self.locally_destined is not None and self.locally_destined._has_data():
                                return True

                            if self.total is not None and self.total._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:interfaces'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interface is not None:
                            for child_ref in self.interface:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering/Cisco-IOS-XR-ip-rsvp-oper:interfaces'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interfaces is not None and self.interfaces._has_data():
                        return True

                    if self.summary is not None and self.summary._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Counters.PrefixFiltering.Interfaces']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:prefix-filtering'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.accesses is not None and self.accesses._has_data():
                    return True

                if self.interfaces is not None and self.interfaces._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Counters.PrefixFiltering']['meta_info']


        class OutOfResource(object):
            """
            Out of resource counters
            
            .. attribute:: interfaces
            
            	Interface specific out of resource counters
            	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.OutOfResource.Interfaces>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.interfaces = Rsvp.Counters.OutOfResource.Interfaces()
                self.interfaces.parent = self


            class Interfaces(object):
                """
                Interface specific out of resource counters
                
                .. attribute:: interfaces
                
                	Table of interface specific out of resource counters
                	**type**\:   :py:class:`Interfaces_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.OutOfResource.Interfaces.Interfaces_>`
                
                .. attribute:: summary
                
                	Summary of out of resource counts for all interfaces
                	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.OutOfResource.Interfaces.Summary>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interfaces = Rsvp.Counters.OutOfResource.Interfaces.Interfaces_()
                    self.interfaces.parent = self
                    self.summary = Rsvp.Counters.OutOfResource.Interfaces.Summary()
                    self.summary.parent = self


                class Summary(object):
                    """
                    Summary of out of resource counts for all
                    interfaces
                    
                    .. attribute:: dropped_path_messages
                    
                    	Count of Path messages dropped due to an out of resource condition
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.dropped_path_messages = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:out-of-resource/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:summary'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dropped_path_messages is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.Counters.OutOfResource.Interfaces.Summary']['meta_info']


                class Interfaces_(object):
                    """
                    Table of interface specific out of resource
                    counters
                    
                    .. attribute:: interface
                    
                    	Out of resource counters for a specific interface
                    	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.OutOfResource.Interfaces.Interfaces_.Interface>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.interface = YList()
                        self.interface.parent = self
                        self.interface.name = 'interface'


                    class Interface(object):
                        """
                        Out of resource counters for a specific
                        interface
                        
                        .. attribute:: interface_name  <key>
                        
                        	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: dropped_path_messages
                        
                        	Count of Path messages dropped due to an out of resource condition
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.interface_name = None
                            self.dropped_path_messages = None

                        @property
                        def _common_path(self):
                            if self.interface_name is None:
                                raise YPYModelError('Key property interface_name is None')

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:out-of-resource/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:interface[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.interface_name is not None:
                                return True

                            if self.dropped_path_messages is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Counters.OutOfResource.Interfaces.Interfaces_.Interface']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:out-of-resource/Cisco-IOS-XR-ip-rsvp-oper:interfaces/Cisco-IOS-XR-ip-rsvp-oper:interfaces'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interface is not None:
                            for child_ref in self.interface:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.Counters.OutOfResource.Interfaces.Interfaces_']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:out-of-resource/Cisco-IOS-XR-ip-rsvp-oper:interfaces'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interfaces is not None and self.interfaces._has_data():
                        return True

                    if self.summary is not None and self.summary._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Counters.OutOfResource.Interfaces']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:out-of-resource'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interfaces is not None and self.interfaces._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Counters.OutOfResource']['meta_info']


        class InterfaceEvents(object):
            """
            Event counters
            
            .. attribute:: interface_event
            
            	Event counters for an interface
            	**type**\: list of    :py:class:`InterfaceEvent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceEvents.InterfaceEvent>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.interface_event = YList()
                self.interface_event.parent = self
                self.interface_event.name = 'interface_event'


            class InterfaceEvent(object):
                """
                Event counters for an interface
                
                .. attribute:: interface_name  <key>
                
                	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: expired_paths
                
                	Counter for Expired Path states
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: expired_reservations
                
                	Counter for Expired Reservation states
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: nac_ks
                
                	Counter for NACKs received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_name = None
                    self.expired_paths = None
                    self.expired_reservations = None
                    self.nac_ks = None

                @property
                def _common_path(self):
                    if self.interface_name is None:
                        raise YPYModelError('Key property interface_name is None')

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:interface-events/Cisco-IOS-XR-ip-rsvp-oper:interface-event[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_name is not None:
                        return True

                    if self.expired_paths is not None:
                        return True

                    if self.expired_reservations is not None:
                        return True

                    if self.nac_ks is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Counters.InterfaceEvents.InterfaceEvent']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:interface-events'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interface_event is not None:
                    for child_ref in self.interface_event:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Counters.InterfaceEvents']['meta_info']


        class Nsr(object):
            """
            Summary information for all RSVP NSR counters
            
            .. attribute:: last_cleared_timestamp
            
            	The timestamp, in seconds, when these statistics are cleared              since 00\:00\:00 UTC, January 1, 1970
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: last_idt_states
            
            	Last IDT number of states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: rsvp_process_role
            
            	Process role
            	**type**\:   :py:class:`RsvpProcRoleEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRoleEnum>`
            
            .. attribute:: total_deletions
            
            	Total number of deletions
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_id_ts
            
            	Total number of IDTs
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_nacks
            
            	Total number of NACKs
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: total_states
            
            	Total number of states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.last_cleared_timestamp = None
                self.last_idt_states = None
                self.rsvp_process_role = None
                self.total_deletions = None
                self.total_id_ts = None
                self.total_nacks = None
                self.total_states = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:nsr'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.last_cleared_timestamp is not None:
                    return True

                if self.last_idt_states is not None:
                    return True

                if self.rsvp_process_role is not None:
                    return True

                if self.total_deletions is not None:
                    return True

                if self.total_id_ts is not None:
                    return True

                if self.total_nacks is not None:
                    return True

                if self.total_states is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Counters.Nsr']['meta_info']


        class Issu(object):
            """
            Summary information for all RSVP ISSU counters
            
            .. attribute:: last_cleared_timestamp
            
            	The timestamp, in seconds, when these statistics are cleared              since 00\:00\:00 UTC, January 1, 1970
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: last_idt_states
            
            	Last IDT number of states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: rsvp_process_role
            
            	Process role
            	**type**\:   :py:class:`RsvpProcRoleEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRoleEnum>`
            
            .. attribute:: total_deletions
            
            	Total number of deletions
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_id_ts
            
            	Total number of IDTs
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_nacks
            
            	Total number of NACKs
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: total_states
            
            	Total number of states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.last_cleared_timestamp = None
                self.last_idt_states = None
                self.rsvp_process_role = None
                self.total_deletions = None
                self.total_id_ts = None
                self.total_nacks = None
                self.total_states = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:issu'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.last_cleared_timestamp is not None:
                    return True

                if self.last_idt_states is not None:
                    return True

                if self.rsvp_process_role is not None:
                    return True

                if self.total_deletions is not None:
                    return True

                if self.total_id_ts is not None:
                    return True

                if self.total_nacks is not None:
                    return True

                if self.total_states is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Counters.Issu']['meta_info']


        class Database(object):
            """
            Summary information for all RSVP database
            counters
            
            .. attribute:: incoming_paths
            
            	Number of locally created and incoming path states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: incoming_reservations
            
            	Number of locally created and incoming reservation states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: interfaces
            
            	Number of Interfaces
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_paths
            
            	Number of outgoing path states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_reservations
            
            	Number of outgoing reservation states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: sessions
            
            	Number of sessions
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.incoming_paths = None
                self.incoming_reservations = None
                self.interfaces = None
                self.outgoing_paths = None
                self.outgoing_reservations = None
                self.sessions = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:database'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.incoming_paths is not None:
                    return True

                if self.incoming_reservations is not None:
                    return True

                if self.interfaces is not None:
                    return True

                if self.outgoing_paths is not None:
                    return True

                if self.outgoing_reservations is not None:
                    return True

                if self.sessions is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Counters.Database']['meta_info']


        class EventSyncs(object):
            """
            Table containing event sync counters
            
            .. attribute:: event_sync
            
            	Event sync counters
            	**type**\: list of    :py:class:`EventSync <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.EventSyncs.EventSync>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.event_sync = YList()
                self.event_sync.parent = self
                self.event_sync.name = 'event_sync'


            class EventSync(object):
                """
                Event sync counters
                
                .. attribute:: interface_name  <key>
                
                	Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: expired_paths
                
                	Counter for Expired Path states
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: expired_reservations
                
                	Counter for Expired Reservation states
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: nac_ks
                
                	Counter for NACKs received
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_name = None
                    self.expired_paths = None
                    self.expired_reservations = None
                    self.nac_ks = None

                @property
                def _common_path(self):
                    if self.interface_name is None:
                        raise YPYModelError('Key property interface_name is None')

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:event-syncs/Cisco-IOS-XR-ip-rsvp-oper:event-sync[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_name is not None:
                        return True

                    if self.expired_paths is not None:
                        return True

                    if self.expired_reservations is not None:
                        return True

                    if self.nac_ks is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Counters.EventSyncs.EventSync']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters/Cisco-IOS-XR-ip-rsvp-oper:event-syncs'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.event_sync is not None:
                    for child_ref in self.event_sync:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Counters.EventSyncs']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:counters'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.database is not None and self.database._has_data():
                return True

            if self.event_syncs is not None and self.event_syncs._has_data():
                return True

            if self.interface_events is not None and self.interface_events._has_data():
                return True

            if self.interface_messages is not None and self.interface_messages._has_data():
                return True

            if self.issu is not None and self.issu._has_data():
                return True

            if self.message_summary is not None and self.message_summary._has_data():
                return True

            if self.nsr is not None and self.nsr._has_data():
                return True

            if self.out_of_resource is not None and self.out_of_resource._has_data():
                return True

            if self.prefix_filtering is not None and self.prefix_filtering._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.Counters']['meta_info']


    class InterfaceDetaileds(object):
        """
        Table of detailed info about RSVP\-enabled
        interfaces
        
        .. attribute:: interface_detailed
        
        	Detailed info about an RSVP\-enabled interface
        	**type**\: list of    :py:class:`InterfaceDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.interface_detailed = YList()
            self.interface_detailed.parent = self
            self.interface_detailed.name = 'interface_detailed'


        class InterfaceDetailed(object):
            """
            Detailed info about an RSVP\-enabled interface
            
            .. attribute:: interface_name  <key>
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: ack_hold_time
            
            	ACK hold time in msec
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: ack_max_size
            
            	Max size for ACK message
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:   :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation>`
            
            .. attribute:: bundle_message_max_size
            
            	Max size in bytes of a single Bundle message
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: expiry_drops_tolerated
            
            	Number of missed messages tolerated
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: expiry_interval
            
            	Expiry interval in msecs
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: millisecond
            
            .. attribute:: expiry_states
            
            	Number of states for expiry check
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: expiry_timer_state
            
            	Expiry timer state
            	**type**\:   :py:class:`RsvpTimerStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerStateEnum>`
            
            .. attribute:: flags
            
            	Interface flags
            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed.Flags>`
            
            .. attribute:: integrity_receive_password
            
            	Integrity receive password
            	**type**\:  str
            
            	**length:** 0..40
            
            .. attribute:: integrity_receive_password_optional
            
            	Integrity recv password optional
            	**type**\:  int
            
            	**range:** 0..255
            
            .. attribute:: integrity_send_password
            
            	Integrity send password
            	**type**\:  str
            
            	**length:** 0..40
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\:  str
            
            .. attribute:: neighbor_array
            
            	Neighbor array
            	**type**\: list of    :py:class:`NeighborArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray>`
            
            .. attribute:: out_of_band_expiry_drops_tolerated
            
            	Number of out\-of\-band missed messages tolerated
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: out_of_band_refresh_interval
            
            	Out\-of\-band Refresh interval in msecs
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: pacing_interval
            
            	Pacing interval in msecs
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: pacing_message_rate
            
            	No. of messages per interval
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: pacing_messages
            
            	Number of messages deferred for pacing
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: pacing_timer_state
            
            	State of pacing timer
            	**type**\:   :py:class:`RsvpTimerStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerStateEnum>`
            
            .. attribute:: refresh_interval
            
            	Refresh interval in msecs
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: millisecond
            
            .. attribute:: refresh_timer_state
            
            	Refresh timer state
            	**type**\:   :py:class:`RsvpTimerStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerStateEnum>`
            
            .. attribute:: retransmit_time
            
            	Retransmit time in msec
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: signalling_ip_tos
            
            	IP TOS (precedence/DSCP) to use in signalling messages
            	**type**\:  int
            
            	**range:** 0..255
            
            .. attribute:: summary_refresh_max_size
            
            	Max size in bytes of a single SRefresh
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: summary_refresh_timer_state
            
            	Summary refresh timer state
            	**type**\:   :py:class:`RsvpTimerStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerStateEnum>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.interface_name = None
                self.ack_hold_time = None
                self.ack_max_size = None
                self.bandwidth_information = Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation()
                self.bandwidth_information.parent = self
                self.bundle_message_max_size = None
                self.expiry_drops_tolerated = None
                self.expiry_interval = None
                self.expiry_states = None
                self.expiry_timer_state = None
                self.flags = Rsvp.InterfaceDetaileds.InterfaceDetailed.Flags()
                self.flags.parent = self
                self.integrity_receive_password = None
                self.integrity_receive_password_optional = None
                self.integrity_send_password = None
                self.interface_name_xr = None
                self.neighbor_array = YList()
                self.neighbor_array.parent = self
                self.neighbor_array.name = 'neighbor_array'
                self.out_of_band_expiry_drops_tolerated = None
                self.out_of_band_refresh_interval = None
                self.pacing_interval = None
                self.pacing_message_rate = None
                self.pacing_messages = None
                self.pacing_timer_state = None
                self.refresh_interval = None
                self.refresh_timer_state = None
                self.retransmit_time = None
                self.signalling_ip_tos = None
                self.summary_refresh_max_size = None
                self.summary_refresh_timer_state = None


            class BandwidthInformation(object):
                """
                Interface bandwidth information
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:   :py:class:`RsvpMgmtDsteModesEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModesEnum>`
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:   :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:   :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.dste_mode = None
                    self.pre_standard_dste_interface = Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self.standard_dste_interface = Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self


                class PreStandardDsteInterface(object):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_subpool_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:pre-standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_subpool_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_subpool_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface']['meta_info']


                class StandardDsteInterface(object):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc0_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc1_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_pool0_bandwidth is not None:
                            return True

                        if self.max_pool1_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:bandwidth-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dste_mode is not None:
                        return True

                    if self.pre_standard_dste_interface is not None and self.pre_standard_dste_interface._has_data():
                        return True

                    if self.standard_dste_interface is not None and self.standard_dste_interface._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation']['meta_info']


            class Flags(object):
                """
                Interface flags
                
                .. attribute:: is_backup_tunnel
                
                	This is backup tunnel
                	**type**\:  bool
                
                .. attribute:: is_interface_created
                
                	Interface is created
                	**type**\:  bool
                
                .. attribute:: is_interface_down
                
                	Interface is DOWN
                	**type**\:  bool
                
                .. attribute:: is_message_bundling_enabled
                
                	Use bundling for outgoing RSVP messages
                	**type**\:  bool
                
                .. attribute:: is_mpls_enabled
                
                	MPLS enabled on interface
                	**type**\:  bool
                
                .. attribute:: is_non_default_vrf
                
                	Interface is defined in non\-Default VRF
                	**type**\:  bool
                
                .. attribute:: is_pacing_enabled
                
                	Message pacing enabled
                	**type**\:  bool
                
                .. attribute:: is_refresh_enabled
                
                	Refresh enabled
                	**type**\:  bool
                
                .. attribute:: is_refresh_reduction_enabled
                
                	Refresh Reduction enabled
                	**type**\:  bool
                
                .. attribute:: is_rel_s_refresh_enabled
                
                	Use reliable xmt for SRefresh
                	**type**\:  bool
                
                .. attribute:: is_rsvp_configured
                
                	RSVP explicitly configured
                	**type**\:  bool
                
                .. attribute:: is_s_refresh_enabled
                
                	Summary Refresh enabled
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_backup_tunnel = None
                    self.is_interface_created = None
                    self.is_interface_down = None
                    self.is_message_bundling_enabled = None
                    self.is_mpls_enabled = None
                    self.is_non_default_vrf = None
                    self.is_pacing_enabled = None
                    self.is_refresh_enabled = None
                    self.is_refresh_reduction_enabled = None
                    self.is_rel_s_refresh_enabled = None
                    self.is_rsvp_configured = None
                    self.is_s_refresh_enabled = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_backup_tunnel is not None:
                        return True

                    if self.is_interface_created is not None:
                        return True

                    if self.is_interface_down is not None:
                        return True

                    if self.is_message_bundling_enabled is not None:
                        return True

                    if self.is_mpls_enabled is not None:
                        return True

                    if self.is_non_default_vrf is not None:
                        return True

                    if self.is_pacing_enabled is not None:
                        return True

                    if self.is_refresh_enabled is not None:
                        return True

                    if self.is_refresh_reduction_enabled is not None:
                        return True

                    if self.is_rel_s_refresh_enabled is not None:
                        return True

                    if self.is_rsvp_configured is not None:
                        return True

                    if self.is_s_refresh_enabled is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.InterfaceDetaileds.InterfaceDetailed.Flags']['meta_info']


            class NeighborArray(object):
                """
                Neighbor array
                
                .. attribute:: expiry_time
                
                	Expiry time
                	**type**\:   :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime>`
                
                .. attribute:: is_neighbor_refresh_reduction_capable
                
                	Is neighbor capable of Refresh Reduction
                	**type**\:  bool
                
                .. attribute:: message_ids
                
                	Number of MessageIDs
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_message_id
                
                	List of Neighbor MessageIDs
                	**type**\: list of    :py:class:`NeighborMessageId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray.NeighborMessageId>`
                
                .. attribute:: outgoing_states
                
                	Number of outgoing states to the neighbour
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.expiry_time = Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime()
                    self.expiry_time.parent = self
                    self.is_neighbor_refresh_reduction_capable = None
                    self.message_ids = None
                    self.neighbor_address = None
                    self.neighbor_message_id = YList()
                    self.neighbor_message_id.parent = self
                    self.neighbor_message_id.name = 'neighbor_message_id'
                    self.outgoing_states = None


                class ExpiryTime(object):
                    """
                    Expiry time
                    
                    .. attribute:: nanoseconds
                    
                    	Time Value in Nano\-seconds
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**units**\: nanosecond
                    
                    .. attribute:: seconds
                    
                    	Time Value in Seconds
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.nanoseconds = None
                        self.seconds = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:expiry-time'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nanoseconds is not None:
                            return True

                        if self.seconds is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime']['meta_info']


                class NeighborMessageId(object):
                    """
                    List of Neighbor MessageIDs
                    
                    .. attribute:: message_id
                    
                    	Message ID
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.message_id = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:neighbor-message-id'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.message_id is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray.NeighborMessageId']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:neighbor-array'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.expiry_time is not None and self.expiry_time._has_data():
                        return True

                    if self.is_neighbor_refresh_reduction_capable is not None:
                        return True

                    if self.message_ids is not None:
                        return True

                    if self.neighbor_address is not None:
                        return True

                    if self.neighbor_message_id is not None:
                        for child_ref in self.neighbor_message_id:
                            if child_ref._has_data():
                                return True

                    if self.outgoing_states is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray']['meta_info']

            @property
            def _common_path(self):
                if self.interface_name is None:
                    raise YPYModelError('Key property interface_name is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:interface-detaileds/Cisco-IOS-XR-ip-rsvp-oper:interface-detailed[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interface_name is not None:
                    return True

                if self.ack_hold_time is not None:
                    return True

                if self.ack_max_size is not None:
                    return True

                if self.bandwidth_information is not None and self.bandwidth_information._has_data():
                    return True

                if self.bundle_message_max_size is not None:
                    return True

                if self.expiry_drops_tolerated is not None:
                    return True

                if self.expiry_interval is not None:
                    return True

                if self.expiry_states is not None:
                    return True

                if self.expiry_timer_state is not None:
                    return True

                if self.flags is not None and self.flags._has_data():
                    return True

                if self.integrity_receive_password is not None:
                    return True

                if self.integrity_receive_password_optional is not None:
                    return True

                if self.integrity_send_password is not None:
                    return True

                if self.interface_name_xr is not None:
                    return True

                if self.neighbor_array is not None:
                    for child_ref in self.neighbor_array:
                        if child_ref._has_data():
                            return True

                if self.out_of_band_expiry_drops_tolerated is not None:
                    return True

                if self.out_of_band_refresh_interval is not None:
                    return True

                if self.pacing_interval is not None:
                    return True

                if self.pacing_message_rate is not None:
                    return True

                if self.pacing_messages is not None:
                    return True

                if self.pacing_timer_state is not None:
                    return True

                if self.refresh_interval is not None:
                    return True

                if self.refresh_timer_state is not None:
                    return True

                if self.retransmit_time is not None:
                    return True

                if self.signalling_ip_tos is not None:
                    return True

                if self.summary_refresh_max_size is not None:
                    return True

                if self.summary_refresh_timer_state is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.InterfaceDetaileds.InterfaceDetailed']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:interface-detaileds'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.interface_detailed is not None:
                for child_ref in self.interface_detailed:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.InterfaceDetaileds']['meta_info']


    class GracefulRestart(object):
        """
        Info about graceful\-restart
        
        .. attribute:: global_neighbors
        
        	Global neighbor count
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: hello_interval
        
        	Interval at which hello messages are sent
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: is_gr_enabled
        
        	Whether GR is enabled
        	**type**\:  bool
        
        .. attribute:: is_recovery_timer_running
        
        	Whether recovery timer is running
        	**type**\:  bool
        
        .. attribute:: local_node_address
        
        	Local node address
        	**type**\: list of    :py:class:`LocalNodeAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GracefulRestart.LocalNodeAddress>`
        
        .. attribute:: missed_hellos
        
        	Max number of hellos missed before hellos declared down
        	**type**\:  int
        
        	**range:** 0..255
        
        .. attribute:: pending_states
        
        	Total number of pending states
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: recovery_time
        
        	Recovery time (milliseconds)
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        	**units**\: millisecond
        
        .. attribute:: recovery_time_left
        
        	How much recovery timer remains
        	**type**\:   :py:class:`RecoveryTimeLeft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GracefulRestart.RecoveryTimeLeft>`
        
        .. attribute:: recovery_timer_exp_time
        
        	Time at which recovery timer will expire
        	**type**\:   :py:class:`RecoveryTimerExpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GracefulRestart.RecoveryTimerExpTime>`
        
        .. attribute:: restart_time
        
        	Restart time (milliseconds)
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        	**units**\: millisecond
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.global_neighbors = None
            self.hello_interval = None
            self.is_gr_enabled = None
            self.is_recovery_timer_running = None
            self.local_node_address = YList()
            self.local_node_address.parent = self
            self.local_node_address.name = 'local_node_address'
            self.missed_hellos = None
            self.pending_states = None
            self.recovery_time = None
            self.recovery_time_left = Rsvp.GracefulRestart.RecoveryTimeLeft()
            self.recovery_time_left.parent = self
            self.recovery_timer_exp_time = Rsvp.GracefulRestart.RecoveryTimerExpTime()
            self.recovery_timer_exp_time.parent = self
            self.restart_time = None


        class RecoveryTimeLeft(object):
            """
            How much recovery timer remains
            
            .. attribute:: nanoseconds
            
            	Time Value in Nano\-seconds
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: nanosecond
            
            .. attribute:: seconds
            
            	Time Value in Seconds
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: second
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.nanoseconds = None
                self.seconds = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:graceful-restart/Cisco-IOS-XR-ip-rsvp-oper:recovery-time-left'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.nanoseconds is not None:
                    return True

                if self.seconds is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.GracefulRestart.RecoveryTimeLeft']['meta_info']


        class RecoveryTimerExpTime(object):
            """
            Time at which recovery timer will expire
            
            .. attribute:: nanoseconds
            
            	Time Value in Nano\-seconds
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: nanosecond
            
            .. attribute:: seconds
            
            	Time Value in Seconds
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: second
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.nanoseconds = None
                self.seconds = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:graceful-restart/Cisco-IOS-XR-ip-rsvp-oper:recovery-timer-exp-time'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.nanoseconds is not None:
                    return True

                if self.seconds is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.GracefulRestart.RecoveryTimerExpTime']['meta_info']


        class LocalNodeAddress(object):
            """
            Local node address
            
            .. attribute:: application_type
            
            	GR local node\-id app type
            	**type**\:   :py:class:`RsvpMgmtGrAppEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGrAppEnum>`
            
            .. attribute:: local_node_ip_address
            
            	Local node address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.application_type = None
                self.local_node_ip_address = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:graceful-restart/Cisco-IOS-XR-ip-rsvp-oper:local-node-address'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.application_type is not None:
                    return True

                if self.local_node_ip_address is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.GracefulRestart.LocalNodeAddress']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:graceful-restart'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.global_neighbors is not None:
                return True

            if self.hello_interval is not None:
                return True

            if self.is_gr_enabled is not None:
                return True

            if self.is_recovery_timer_running is not None:
                return True

            if self.local_node_address is not None:
                for child_ref in self.local_node_address:
                    if child_ref._has_data():
                        return True

            if self.missed_hellos is not None:
                return True

            if self.pending_states is not None:
                return True

            if self.recovery_time is not None:
                return True

            if self.recovery_time_left is not None and self.recovery_time_left._has_data():
                return True

            if self.recovery_timer_exp_time is not None and self.recovery_timer_exp_time._has_data():
                return True

            if self.restart_time is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.GracefulRestart']['meta_info']


    class HelloInterfaceInstanceBriefs(object):
        """
        Table of brief info about i/f\-based hello
        instances
        
        .. attribute:: hello_interface_instance_brief
        
        	Brief info for a single interface\-based hello instance
        	**type**\: list of    :py:class:`HelloInterfaceInstanceBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.hello_interface_instance_brief = YList()
            self.hello_interface_instance_brief.parent = self
            self.hello_interface_instance_brief.name = 'hello_interface_instance_brief'


        class HelloInterfaceInstanceBrief(object):
            """
            Brief info for a single interface\-based hello
            instance
            
            .. attribute:: destination_address  <key>
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_address  <key>
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:   :py:class:`RsvpMgmtHelloInstanceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstanceEnum>`
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.source_address = None
                self.destination_address_xr = None
                self.hello_interface = None
                self.instance_type = None
                self.source_address_xr = None

            @property
            def _common_path(self):
                if self.destination_address is None:
                    raise YPYModelError('Key property destination_address is None')
                if self.source_address is None:
                    raise YPYModelError('Key property source_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:hello-interface-instance-briefs/Cisco-IOS-XR-ip-rsvp-oper:hello-interface-instance-brief[Cisco-IOS-XR-ip-rsvp-oper:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ip-rsvp-oper:source-address = ' + str(self.source_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.destination_address_xr is not None:
                    return True

                if self.hello_interface is not None:
                    return True

                if self.instance_type is not None:
                    return True

                if self.source_address_xr is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.HelloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:hello-interface-instance-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.hello_interface_instance_brief is not None:
                for child_ref in self.hello_interface_instance_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.HelloInterfaceInstanceBriefs']['meta_info']


    class HelloInterfaceInstanceDetails(object):
        """
        Table of detailed info about i/f\-based hello
        instances
        
        .. attribute:: hello_interface_instance_detail
        
        	Detailed info for a single interface\-based hello instance
        	**type**\: list of    :py:class:`HelloInterfaceInstanceDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.hello_interface_instance_detail = YList()
            self.hello_interface_instance_detail.parent = self
            self.hello_interface_instance_detail.name = 'hello_interface_instance_detail'


        class HelloInterfaceInstanceDetail(object):
            """
            Detailed info for a single interface\-based
            hello instance
            
            .. attribute:: destination_address  <key>
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_address  <key>
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_instance
            
            	Destination Instance
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: hello_global_neighbor_id
            
            	Global Neighbor ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: hello_messages_received
            
            	Number of hello messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: hello_messages_sent
            
            	Number of hello messages sent
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:   :py:class:`RsvpMgmtHelloInstanceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstanceEnum>`
            
            .. attribute:: last_message_sent_time
            
            	Last Ack/msg sent time
            	**type**\:   :py:class:`LastMessageSentTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime>`
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_instance
            
            	Source Instance
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.source_address = None
                self.destination_address_xr = None
                self.destination_instance = None
                self.hello_global_neighbor_id = None
                self.hello_interface = None
                self.hello_messages_received = None
                self.hello_messages_sent = None
                self.instance_type = None
                self.last_message_sent_time = Rsvp.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime()
                self.last_message_sent_time.parent = self
                self.source_address_xr = None
                self.source_instance = None


            class LastMessageSentTime(object):
                """
                Last Ack/msg sent time
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:last-message-sent-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime']['meta_info']

            @property
            def _common_path(self):
                if self.destination_address is None:
                    raise YPYModelError('Key property destination_address is None')
                if self.source_address is None:
                    raise YPYModelError('Key property source_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:hello-interface-instance-details/Cisco-IOS-XR-ip-rsvp-oper:hello-interface-instance-detail[Cisco-IOS-XR-ip-rsvp-oper:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ip-rsvp-oper:source-address = ' + str(self.source_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.destination_address_xr is not None:
                    return True

                if self.destination_instance is not None:
                    return True

                if self.hello_global_neighbor_id is not None:
                    return True

                if self.hello_interface is not None:
                    return True

                if self.hello_messages_received is not None:
                    return True

                if self.hello_messages_sent is not None:
                    return True

                if self.instance_type is not None:
                    return True

                if self.last_message_sent_time is not None and self.last_message_sent_time._has_data():
                    return True

                if self.source_address_xr is not None:
                    return True

                if self.source_instance is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:hello-interface-instance-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.hello_interface_instance_detail is not None:
                for child_ref in self.hello_interface_instance_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.HelloInterfaceInstanceDetails']['meta_info']


    class InterfaceNeighborDetails(object):
        """
        Table of detailed info about I/F neighbors
        
        .. attribute:: interface_neighbor_detail
        
        	Detailed info for a single interface neighbor
        	**type**\: list of    :py:class:`InterfaceNeighborDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceNeighborDetails.InterfaceNeighborDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.interface_neighbor_detail = YList()
            self.interface_neighbor_detail.parent = self
            self.interface_neighbor_detail.name = 'interface_neighbor_detail'


        class InterfaceNeighborDetail(object):
            """
            Detailed info for a single interface neighbor
            
            .. attribute:: neighbor_address  <key>
            
            	Address of global neighbor
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_neighbor_list_detail
            
            	Detail list of I/F Neighbors
            	**type**\: list of    :py:class:`InterfaceNeighborListDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceNeighborDetails.InterfaceNeighborDetail.InterfaceNeighborListDetail>`
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.neighbor_address = None
                self.interface_neighbor_list_detail = YList()
                self.interface_neighbor_list_detail.parent = self
                self.interface_neighbor_list_detail.name = 'interface_neighbor_list_detail'
                self.node_address = None


            class InterfaceNeighborListDetail(object):
                """
                Detail list of I/F Neighbors
                
                .. attribute:: interface_neighbor_address
                
                	Interface Neighbor address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: is_rr_enabled
                
                	Is Neighbor's RR enable
                	**type**\:  bool
                
                .. attribute:: neighbor_epoch
                
                	Neighbor's epoch value
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: neighbor_interface_name
                
                	Neighbor's Interface handle
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                .. attribute:: out_of_order_messages
                
                	Number of out of order msgs
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: retransmitted_messages
                
                	Number of retransmitted msgs
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.interface_neighbor_address = None
                    self.is_rr_enabled = None
                    self.neighbor_epoch = None
                    self.neighbor_interface_name = None
                    self.out_of_order_messages = None
                    self.retransmitted_messages = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-list-detail'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_neighbor_address is not None:
                        return True

                    if self.is_rr_enabled is not None:
                        return True

                    if self.neighbor_epoch is not None:
                        return True

                    if self.neighbor_interface_name is not None:
                        return True

                    if self.out_of_order_messages is not None:
                        return True

                    if self.retransmitted_messages is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.InterfaceNeighborDetails.InterfaceNeighborDetail.InterfaceNeighborListDetail']['meta_info']

            @property
            def _common_path(self):
                if self.neighbor_address is None:
                    raise YPYModelError('Key property neighbor_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-details/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-detail[Cisco-IOS-XR-ip-rsvp-oper:neighbor-address = ' + str(self.neighbor_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.neighbor_address is not None:
                    return True

                if self.interface_neighbor_list_detail is not None:
                    for child_ref in self.interface_neighbor_list_detail:
                        if child_ref._has_data():
                            return True

                if self.node_address is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.InterfaceNeighborDetails.InterfaceNeighborDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:interface-neighbor-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.interface_neighbor_detail is not None:
                for child_ref in self.interface_neighbor_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.InterfaceNeighborDetails']['meta_info']


    class Nsr(object):
        """
        RSVP NSR information
        
        .. attribute:: status
        
        	RSVP NSR status information
        	**type**\:   :py:class:`Status <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Nsr.Status>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.status = Rsvp.Nsr.Status()
            self.status.parent = self


        class Status(object):
            """
            RSVP NSR status information
            
            .. attribute:: idt_status
            
            	IDT status
            	**type**\:   :py:class:`IdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Nsr.Status.IdtStatus>`
            
            .. attribute:: previous_idt_status
            
            	Previous IDT status
            	**type**\:   :py:class:`PreviousIdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Nsr.Status.PreviousIdtStatus>`
            
            .. attribute:: role
            
            	Process role
            	**type**\:   :py:class:`RsvpProcRoleEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRoleEnum>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.idt_status = Rsvp.Nsr.Status.IdtStatus()
                self.idt_status.parent = self
                self.previous_idt_status = Rsvp.Nsr.Status.PreviousIdtStatus()
                self.previous_idt_status.parent = self
                self.role = None


            class IdtStatus(object):
                """
                IDT status
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:   :py:class:`RsvpProcNsrNotReadyReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReasonEnum>`
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:   :py:class:`RsvpSyncStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatusEnum>`
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.declare_time = None
                    self.idt_end_time = None
                    self.idt_start_time = None
                    self.not_ready_reason = None
                    self.sync_status = None
                    self.withdraw_time = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:nsr/Cisco-IOS-XR-ip-rsvp-oper:status/Cisco-IOS-XR-ip-rsvp-oper:idt-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.declare_time is not None:
                        return True

                    if self.idt_end_time is not None:
                        return True

                    if self.idt_start_time is not None:
                        return True

                    if self.not_ready_reason is not None:
                        return True

                    if self.sync_status is not None:
                        return True

                    if self.withdraw_time is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Nsr.Status.IdtStatus']['meta_info']


            class PreviousIdtStatus(object):
                """
                Previous IDT status
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:   :py:class:`RsvpProcNsrNotReadyReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReasonEnum>`
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:   :py:class:`RsvpSyncStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatusEnum>`
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.declare_time = None
                    self.idt_end_time = None
                    self.idt_start_time = None
                    self.not_ready_reason = None
                    self.sync_status = None
                    self.withdraw_time = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:nsr/Cisco-IOS-XR-ip-rsvp-oper:status/Cisco-IOS-XR-ip-rsvp-oper:previous-idt-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.declare_time is not None:
                        return True

                    if self.idt_end_time is not None:
                        return True

                    if self.idt_start_time is not None:
                        return True

                    if self.not_ready_reason is not None:
                        return True

                    if self.sync_status is not None:
                        return True

                    if self.withdraw_time is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Nsr.Status.PreviousIdtStatus']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:nsr/Cisco-IOS-XR-ip-rsvp-oper:status'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.idt_status is not None and self.idt_status._has_data():
                    return True

                if self.previous_idt_status is not None and self.previous_idt_status._has_data():
                    return True

                if self.role is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Nsr.Status']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:nsr'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.status is not None and self.status._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.Nsr']['meta_info']


    class Summary(object):
        """
        RSVP summary information
        
        .. attribute:: database_counters
        
        	All database counters
        	**type**\:   :py:class:`DatabaseCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary.DatabaseCounters>`
        
        .. attribute:: interfaces
        
        	Total interfaces
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: issu_status
        
        	Issu status
        	**type**\:   :py:class:`IssuStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary.IssuStatus>`
        
        .. attribute:: ls_ps
        
        	Total LSPs
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: nsr_status
        
        	NSR status
        	**type**\:   :py:class:`NsrStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary.NsrStatus>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.database_counters = Rsvp.Summary.DatabaseCounters()
            self.database_counters.parent = self
            self.interfaces = None
            self.issu_status = Rsvp.Summary.IssuStatus()
            self.issu_status.parent = self
            self.ls_ps = None
            self.nsr_status = Rsvp.Summary.NsrStatus()
            self.nsr_status.parent = self


        class IssuStatus(object):
            """
            Issu status
            
            .. attribute:: idt_status
            
            	IDT status
            	**type**\:   :py:class:`IdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary.IssuStatus.IdtStatus>`
            
            .. attribute:: previous_idt_status
            
            	Previous IDT status
            	**type**\:   :py:class:`PreviousIdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary.IssuStatus.PreviousIdtStatus>`
            
            .. attribute:: role
            
            	Process role
            	**type**\:   :py:class:`RsvpProcRoleEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRoleEnum>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.idt_status = Rsvp.Summary.IssuStatus.IdtStatus()
                self.idt_status.parent = self
                self.previous_idt_status = Rsvp.Summary.IssuStatus.PreviousIdtStatus()
                self.previous_idt_status.parent = self
                self.role = None


            class IdtStatus(object):
                """
                IDT status
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:   :py:class:`RsvpProcNsrNotReadyReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReasonEnum>`
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:   :py:class:`RsvpSyncStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatusEnum>`
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.declare_time = None
                    self.idt_end_time = None
                    self.idt_start_time = None
                    self.not_ready_reason = None
                    self.sync_status = None
                    self.withdraw_time = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:issu-status/Cisco-IOS-XR-ip-rsvp-oper:idt-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.declare_time is not None:
                        return True

                    if self.idt_end_time is not None:
                        return True

                    if self.idt_start_time is not None:
                        return True

                    if self.not_ready_reason is not None:
                        return True

                    if self.sync_status is not None:
                        return True

                    if self.withdraw_time is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Summary.IssuStatus.IdtStatus']['meta_info']


            class PreviousIdtStatus(object):
                """
                Previous IDT status
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:   :py:class:`RsvpProcNsrNotReadyReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReasonEnum>`
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:   :py:class:`RsvpSyncStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatusEnum>`
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.declare_time = None
                    self.idt_end_time = None
                    self.idt_start_time = None
                    self.not_ready_reason = None
                    self.sync_status = None
                    self.withdraw_time = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:issu-status/Cisco-IOS-XR-ip-rsvp-oper:previous-idt-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.declare_time is not None:
                        return True

                    if self.idt_end_time is not None:
                        return True

                    if self.idt_start_time is not None:
                        return True

                    if self.not_ready_reason is not None:
                        return True

                    if self.sync_status is not None:
                        return True

                    if self.withdraw_time is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Summary.IssuStatus.PreviousIdtStatus']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:issu-status'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.idt_status is not None and self.idt_status._has_data():
                    return True

                if self.previous_idt_status is not None and self.previous_idt_status._has_data():
                    return True

                if self.role is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Summary.IssuStatus']['meta_info']


        class NsrStatus(object):
            """
            NSR status
            
            .. attribute:: idt_status
            
            	IDT status
            	**type**\:   :py:class:`IdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary.NsrStatus.IdtStatus>`
            
            .. attribute:: previous_idt_status
            
            	Previous IDT status
            	**type**\:   :py:class:`PreviousIdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary.NsrStatus.PreviousIdtStatus>`
            
            .. attribute:: role
            
            	Process role
            	**type**\:   :py:class:`RsvpProcRoleEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRoleEnum>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.idt_status = Rsvp.Summary.NsrStatus.IdtStatus()
                self.idt_status.parent = self
                self.previous_idt_status = Rsvp.Summary.NsrStatus.PreviousIdtStatus()
                self.previous_idt_status.parent = self
                self.role = None


            class IdtStatus(object):
                """
                IDT status
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:   :py:class:`RsvpProcNsrNotReadyReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReasonEnum>`
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:   :py:class:`RsvpSyncStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatusEnum>`
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.declare_time = None
                    self.idt_end_time = None
                    self.idt_start_time = None
                    self.not_ready_reason = None
                    self.sync_status = None
                    self.withdraw_time = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:nsr-status/Cisco-IOS-XR-ip-rsvp-oper:idt-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.declare_time is not None:
                        return True

                    if self.idt_end_time is not None:
                        return True

                    if self.idt_start_time is not None:
                        return True

                    if self.not_ready_reason is not None:
                        return True

                    if self.sync_status is not None:
                        return True

                    if self.withdraw_time is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Summary.NsrStatus.IdtStatus']['meta_info']


            class PreviousIdtStatus(object):
                """
                Previous IDT status
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:   :py:class:`RsvpProcNsrNotReadyReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReasonEnum>`
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:   :py:class:`RsvpSyncStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatusEnum>`
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.declare_time = None
                    self.idt_end_time = None
                    self.idt_start_time = None
                    self.not_ready_reason = None
                    self.sync_status = None
                    self.withdraw_time = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:nsr-status/Cisco-IOS-XR-ip-rsvp-oper:previous-idt-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.declare_time is not None:
                        return True

                    if self.idt_end_time is not None:
                        return True

                    if self.idt_start_time is not None:
                        return True

                    if self.not_ready_reason is not None:
                        return True

                    if self.sync_status is not None:
                        return True

                    if self.withdraw_time is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Summary.NsrStatus.PreviousIdtStatus']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:nsr-status'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.idt_status is not None and self.idt_status._has_data():
                    return True

                if self.previous_idt_status is not None and self.previous_idt_status._has_data():
                    return True

                if self.role is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Summary.NsrStatus']['meta_info']


        class DatabaseCounters(object):
            """
            All database counters
            
            .. attribute:: incoming_paths
            
            	Number of locally created and incoming path states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: incoming_reservations
            
            	Number of locally created and incoming reservation states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: interfaces
            
            	Number of Interfaces
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_paths
            
            	Number of outgoing path states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_reservations
            
            	Number of outgoing reservation states
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: sessions
            
            	Number of sessions
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.incoming_paths = None
                self.incoming_reservations = None
                self.interfaces = None
                self.outgoing_paths = None
                self.outgoing_reservations = None
                self.sessions = None

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:summary/Cisco-IOS-XR-ip-rsvp-oper:database-counters'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.incoming_paths is not None:
                    return True

                if self.incoming_reservations is not None:
                    return True

                if self.interfaces is not None:
                    return True

                if self.outgoing_paths is not None:
                    return True

                if self.outgoing_reservations is not None:
                    return True

                if self.sessions is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Summary.DatabaseCounters']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:summary'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.database_counters is not None and self.database_counters._has_data():
                return True

            if self.interfaces is not None:
                return True

            if self.issu_status is not None and self.issu_status._has_data():
                return True

            if self.ls_ps is not None:
                return True

            if self.nsr_status is not None and self.nsr_status._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.Summary']['meta_info']


    class Frrs(object):
        """
        Table of detailed info about Fast Re\-route
        states
        
        .. attribute:: frr
        
        	Detailed info for a single Fast Re\-route state
        	**type**\: list of    :py:class:`Frr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.frr = YList()
            self.frr.parent = self
            self.frr.name = 'frr'


        class Frr(object):
            """
            Detailed info for a single Fast Re\-route state
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: path_status
            
            	RSVP FRR Path States
            	**type**\:   :py:class:`RsvpMgmtFrrStateEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFrrStateEnumEnum>`
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: reservation_status
            
            	RSVP FRR Reservation States
            	**type**\:   :py:class:`RsvpMgmtFrrStateEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFrrStateEnumEnum>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr.Session>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.extended_tunnel_id = None
                self.p2mp_id = None
                self.path_status = None
                self.protocol = None
                self.reservation_status = None
                self.s2l_sub_lsp = Rsvp.Frrs.Frr.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = Rsvp.Frrs.Frr.Session()
                self.session.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.sub_group_id = None
                self.sub_group_origin = None
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = Rsvp.Frrs.Frr.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.Frrs.Frr.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Frrs.Frr.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.Frrs.Frr.S2LSubLsp']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:frrs/Cisco-IOS-XR-ip-rsvp-oper:frr'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.path_status is not None:
                    return True

                if self.protocol is not None:
                    return True

                if self.reservation_status is not None:
                    return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.Frrs.Frr']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:frrs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.frr is not None:
                for child_ref in self.frr:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.Frrs']['meta_info']


    class RequestBriefs(object):
        """
        Table of brief info about requests
        
        .. attribute:: request_brief
        
        	Brief info for a request
        	**type**\: list of    :py:class:`RequestBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.request_brief = YList()
            self.request_brief.parent = self
            self.request_brief.name = 'request_brief'


        class RequestBrief(object):
            """
            Brief info for a request
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:   :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Filter>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:   :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Information
            	**type**\:   :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec>`
            
            .. attribute:: output_interface
            
            	Output Interface
            	**type**\:  str
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Session>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:   :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Style>`
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.extended_tunnel_id = None
                self.filter = Rsvp.RequestBriefs.RequestBrief.Filter()
                self.filter.parent = self
                self.flow_spec = Rsvp.RequestBriefs.RequestBrief.FlowSpec()
                self.flow_spec.parent = self
                self.generic_flow_spec = Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self.output_interface = None
                self.p2mp_id = None
                self.protocol = None
                self.s2l_sub_lsp = Rsvp.RequestBriefs.RequestBrief.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = Rsvp.RequestBriefs.RequestBrief.Session()
                self.session.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.style = Rsvp.RequestBriefs.RequestBrief.Style()
                self.style.parent = self
                self.sub_group_id = None
                self.sub_group_origin = None
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.S2LSubLsp']['meta_info']


            class FlowSpec(object):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:   :py:class:`RsvpMgmtQosServiceEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnumEnum>`
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_max_unit = None
                    self.flow_min_unit = None
                    self.flow_peak_rate = None
                    self.flow_qos = None
                    self.flow_requested_rate = None
                    self.flow_slack = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_average_rate is not None:
                        return True

                    if self.flow_max_burst is not None:
                        return True

                    if self.flow_max_unit is not None:
                        return True

                    if self.flow_min_unit is not None:
                        return True

                    if self.flow_peak_rate is not None:
                        return True

                    if self.flow_qos is not None:
                        return True

                    if self.flow_requested_rate is not None:
                        return True

                    if self.flow_slack is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.FlowSpec']['meta_info']


            class GenericFlowSpec(object):
                """
                Generic Flow Spec Information
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:   :py:class:`RsvpMgmtFlowSpecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpecEnum>`
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:   :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_spec_type = None
                    self.g709otn_flow_spec = Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self


                class G709OtnFlowSpec(object):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.flow_bit_rate = None
                        self.flow_multiplier = None
                        self.flow_nvc = None
                        self.flow_signal_type = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-flow-spec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.flow_bit_rate is not None:
                            return True

                        if self.flow_multiplier is not None:
                            return True

                        if self.flow_nvc is not None:
                            return True

                        if self.flow_signal_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_spec_type is not None:
                        return True

                    if self.g709otn_flow_spec is not None and self.g709otn_flow_spec._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec']['meta_info']


            class Filter(object):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:   :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_filter = Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self


                class RsvpFilter(object):
                    """
                    RSVP Filter
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:   :py:class:`RsvpMgmtFilterEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilterEnum>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:   :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:   :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.filter_type = None
                        self.p2mp_ipv4_session = Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self.udp_ipv4_session = Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self


                    class UdpIpv4Session(object):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.source_address = None
                            self.source_port = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:udp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session']['meta_info']


                    class P2MpIpv4Session(object):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.p2mp_sub_group_origin = None
                            self.source_address = None
                            self.source_port = None
                            self.sub_group_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:p2mp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.p2mp_sub_group_origin is not None:
                                return True

                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            if self.sub_group_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.filter_type is not None:
                            return True

                        if self.p2mp_ipv4_session is not None and self.p2mp_ipv4_session._has_data():
                            return True

                        if self.udp_ipv4_session is not None and self.udp_ipv4_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:filter'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_filter is not None and self.rsvp_filter._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.Filter']['meta_info']


            class Style(object):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:   :py:class:`RsvpMgmtReservationTypeEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnumEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.reservation_type = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief/Cisco-IOS-XR-ip-rsvp-oper:style'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.reservation_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestBriefs.RequestBrief.Style']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs/Cisco-IOS-XR-ip-rsvp-oper:request-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.filter is not None and self.filter._has_data():
                    return True

                if self.flow_spec is not None and self.flow_spec._has_data():
                    return True

                if self.generic_flow_spec is not None and self.generic_flow_spec._has_data():
                    return True

                if self.output_interface is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.protocol is not None:
                    return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.style is not None and self.style._has_data():
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.RequestBriefs.RequestBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.request_brief is not None:
                for child_ref in self.request_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.RequestBriefs']['meta_info']


    class RequestDetails(object):
        """
        Table of detail info about requests
        
        .. attribute:: request_detail
        
        	Detail info for a request
        	**type**\: list of    :py:class:`RequestDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.request_detail = YList()
            self.request_detail.parent = self
            self.request_detail.name = 'request_detail'


        class RequestDetail(object):
            """
            Detail info for a request
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:   :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Filter>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:   :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Information
            	**type**\:   :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.GenericFlowSpec>`
            
            .. attribute:: header
            
            	RSVP Header Information
            	**type**\:   :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Header>`
            
            .. attribute:: hop
            
            	Hop Infomation
            	**type**\:   :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Hop>`
            
            .. attribute:: output_interface
            
            	output Interface
            	**type**\:  str
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: policy_flags
            
            	RSVP Policy Flags
            	**type**\:   :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.PolicyFlags>`
            
            .. attribute:: policy_query_flags
            
            	RSVP Query Flags
            	**type**\:   :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.PolicyQueryFlags>`
            
            .. attribute:: policy_sources
            
            	RSVP Policy Sources
            	**type**\:   :py:class:`PolicySources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.PolicySources>`
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: psb_key
            
            	List of RSB keys
            	**type**\: list of    :py:class:`PsbKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.PsbKey>`
            
            .. attribute:: req_flags
            
            	Request flags
            	**type**\:   :py:class:`ReqFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.ReqFlags>`
            
            .. attribute:: rsb_key
            
            	List of RSB keys
            	**type**\: list of    :py:class:`RsbKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.RsbKey>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Session>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:   :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Style>`
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.extended_tunnel_id = None
                self.filter = Rsvp.RequestDetails.RequestDetail.Filter()
                self.filter.parent = self
                self.flow_spec = Rsvp.RequestDetails.RequestDetail.FlowSpec()
                self.flow_spec.parent = self
                self.generic_flow_spec = Rsvp.RequestDetails.RequestDetail.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self.header = Rsvp.RequestDetails.RequestDetail.Header()
                self.header.parent = self
                self.hop = Rsvp.RequestDetails.RequestDetail.Hop()
                self.hop.parent = self
                self.output_interface = None
                self.p2mp_id = None
                self.policy_flags = Rsvp.RequestDetails.RequestDetail.PolicyFlags()
                self.policy_flags.parent = self
                self.policy_query_flags = Rsvp.RequestDetails.RequestDetail.PolicyQueryFlags()
                self.policy_query_flags.parent = self
                self.policy_sources = Rsvp.RequestDetails.RequestDetail.PolicySources()
                self.policy_sources.parent = self
                self.protocol = None
                self.psb_key = YList()
                self.psb_key.parent = self
                self.psb_key.name = 'psb_key'
                self.req_flags = Rsvp.RequestDetails.RequestDetail.ReqFlags()
                self.req_flags.parent = self
                self.rsb_key = YList()
                self.rsb_key.parent = self
                self.rsb_key.name = 'rsb_key'
                self.s2l_sub_lsp = Rsvp.RequestDetails.RequestDetail.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = Rsvp.RequestDetails.RequestDetail.Session()
                self.session.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.style = Rsvp.RequestDetails.RequestDetail.Style()
                self.style.parent = self
                self.sub_group_id = None
                self.sub_group_origin = None
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = Rsvp.RequestDetails.RequestDetail.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RequestDetails.RequestDetail.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestDetails.RequestDetail.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestDetails.RequestDetail.S2LSubLsp']['meta_info']


            class FlowSpec(object):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:   :py:class:`RsvpMgmtQosServiceEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnumEnum>`
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_max_unit = None
                    self.flow_min_unit = None
                    self.flow_peak_rate = None
                    self.flow_qos = None
                    self.flow_requested_rate = None
                    self.flow_slack = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_average_rate is not None:
                        return True

                    if self.flow_max_burst is not None:
                        return True

                    if self.flow_max_unit is not None:
                        return True

                    if self.flow_min_unit is not None:
                        return True

                    if self.flow_peak_rate is not None:
                        return True

                    if self.flow_qos is not None:
                        return True

                    if self.flow_requested_rate is not None:
                        return True

                    if self.flow_slack is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestDetails.RequestDetail.FlowSpec']['meta_info']


            class GenericFlowSpec(object):
                """
                Generic Flow Spec Information
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:   :py:class:`RsvpMgmtFlowSpecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpecEnum>`
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:   :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.flow_spec_type = None
                    self.g709otn_flow_spec = Rsvp.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self


                class G709OtnFlowSpec(object):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.flow_bit_rate = None
                        self.flow_multiplier = None
                        self.flow_nvc = None
                        self.flow_signal_type = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-flow-spec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.flow_bit_rate is not None:
                            return True

                        if self.flow_multiplier is not None:
                            return True

                        if self.flow_nvc is not None:
                            return True

                        if self.flow_signal_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.flow_spec_type is not None:
                        return True

                    if self.g709otn_flow_spec is not None and self.g709otn_flow_spec._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestDetails.RequestDetail.GenericFlowSpec']['meta_info']


            class Filter(object):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:   :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_filter = Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self


                class RsvpFilter(object):
                    """
                    RSVP Filter
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:   :py:class:`RsvpMgmtFilterEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilterEnum>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:   :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:   :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.filter_type = None
                        self.p2mp_ipv4_session = Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self.udp_ipv4_session = Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self


                    class UdpIpv4Session(object):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.source_address = None
                            self.source_port = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:udp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session']['meta_info']


                    class P2MpIpv4Session(object):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.p2mp_sub_group_origin = None
                            self.source_address = None
                            self.source_port = None
                            self.sub_group_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:p2mp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.p2mp_sub_group_origin is not None:
                                return True

                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            if self.sub_group_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:filter/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.filter_type is not None:
                            return True

                        if self.p2mp_ipv4_session is not None and self.p2mp_ipv4_session._has_data():
                            return True

                        if self.udp_ipv4_session is not None and self.udp_ipv4_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:filter'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_filter is not None and self.rsvp_filter._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestDetails.RequestDetail.Filter']['meta_info']


            class Style(object):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:   :py:class:`RsvpMgmtReservationTypeEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnumEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.reservation_type = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:style'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.reservation_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestDetails.RequestDetail.Style']['meta_info']


            class ReqFlags(object):
                """
                Request flags
                
                .. attribute:: is_ack_outstanding
                
                	Is ACK message outstanding
                	**type**\:  bool
                
                .. attribute:: is_label_request_in_path
                
                	The Path message contains Label Request
                	**type**\:  bool
                
                .. attribute:: is_local_receiver
                
                	Local Receiver
                	**type**\:  bool
                
                .. attribute:: is_merge_point
                
                	Is node a Merge Point
                	**type**\:  bool
                
                .. attribute:: is_message_id_allocated
                
                	Is MessageID allocated
                	**type**\:  bool
                
                .. attribute:: is_nack_received
                
                	A NACK message was received
                	**type**\:  bool
                
                .. attribute:: is_paced
                
                	Message is paced
                	**type**\:  bool
                
                .. attribute:: is_record_label_in_path
                
                	Path has Session\-Attr object with Record Labels set
                	**type**\:  bool
                
                .. attribute:: is_refreshing
                
                	Is neighbor refreshing
                	**type**\:  bool
                
                .. attribute:: is_retransmit
                
                	Retransmit the message
                	**type**\:  bool
                
                .. attribute:: is_rro_in_path
                
                	The Path message contains RRO
                	**type**\:  bool
                
                .. attribute:: is_send_confirm
                
                	Send Confirm message
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_ack_outstanding = None
                    self.is_label_request_in_path = None
                    self.is_local_receiver = None
                    self.is_merge_point = None
                    self.is_message_id_allocated = None
                    self.is_nack_received = None
                    self.is_paced = None
                    self.is_record_label_in_path = None
                    self.is_refreshing = None
                    self.is_retransmit = None
                    self.is_rro_in_path = None
                    self.is_send_confirm = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:req-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_ack_outstanding is not None:
                        return True

                    if self.is_label_request_in_path is not None:
                        return True

                    if self.is_local_receiver is not None:
                        return True

                    if self.is_merge_point is not None:
                        return True

                    if self.is_message_id_allocated is not None:
                        return True

                    if self.is_nack_received is not None:
                        return True

                    if self.is_paced is not None:
                        return True

                    if self.is_record_label_in_path is not None:
                        return True

                    if self.is_refreshing is not None:
                        return True

                    if self.is_retransmit is not None:
                        return True

                    if self.is_rro_in_path is not None:
                        return True

                    if self.is_send_confirm is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestDetails.RequestDetail.ReqFlags']['meta_info']


            class Hop(object):
                """
                Hop Infomation
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\:  str
                
                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:hop'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.neighbor_address is not None:
                        return True

                    if self.neighbor_logical_interface_name is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestDetails.RequestDetail.Hop']['meta_info']


            class Header(object):
                """
                RSVP Header Information
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\:  int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.ip_source_address = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.rsvp_header_flags = None
                    self.rsvp_message_type = None
                    self.rsvp_ttl = None
                    self.rsvp_version = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:header'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ip_source_address is not None:
                        return True

                    if self.ip_tos is not None:
                        return True

                    if self.ip_ttl is not None:
                        return True

                    if self.rsvp_header_flags is not None:
                        return True

                    if self.rsvp_message_type is not None:
                        return True

                    if self.rsvp_ttl is not None:
                        return True

                    if self.rsvp_version is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestDetails.RequestDetail.Header']['meta_info']


            class PolicySources(object):
                """
                RSVP Policy Sources
                
                .. attribute:: is_cable
                
                	Policy Source is Cable
                	**type**\:  bool
                
                .. attribute:: is_cops
                
                	Policy Source is COPS
                	**type**\:  bool
                
                .. attribute:: is_default
                
                	Policy Source is Default
                	**type**\:  bool
                
                .. attribute:: is_local
                
                	Policy Source is Local
                	**type**\:  bool
                
                .. attribute:: is_te_link
                
                	Policy Source is TE Link
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_cable = None
                    self.is_cops = None
                    self.is_default = None
                    self.is_local = None
                    self.is_te_link = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:policy-sources'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_cable is not None:
                        return True

                    if self.is_cops is not None:
                        return True

                    if self.is_default is not None:
                        return True

                    if self.is_local is not None:
                        return True

                    if self.is_te_link is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestDetails.RequestDetail.PolicySources']['meta_info']


            class PolicyFlags(object):
                """
                RSVP Policy Flags
                
                .. attribute:: is_accepted
                
                	Accepted
                	**type**\:  bool
                
                .. attribute:: is_forwarding
                
                	Forwarding
                	**type**\:  bool
                
                .. attribute:: is_installed
                
                	Installed
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_accepted = None
                    self.is_forwarding = None
                    self.is_installed = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:policy-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_accepted is not None:
                        return True

                    if self.is_forwarding is not None:
                        return True

                    if self.is_installed is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestDetails.RequestDetail.PolicyFlags']['meta_info']


            class PolicyQueryFlags(object):
                """
                RSVP Query Flags
                
                .. attribute:: is_bypass
                
                	Bypass
                	**type**\:  bool
                
                .. attribute:: is_needed
                
                	Needed
                	**type**\:  bool
                
                .. attribute:: is_report_required
                
                	Report Required
                	**type**\:  bool
                
                .. attribute:: is_resync
                
                	Resynchronization
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_bypass = None
                    self.is_needed = None
                    self.is_report_required = None
                    self.is_resync = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:policy-query-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_bypass is not None:
                        return True

                    if self.is_needed is not None:
                        return True

                    if self.is_report_required is not None:
                        return True

                    if self.is_resync is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestDetails.RequestDetail.PolicyQueryFlags']['meta_info']


            class PsbKey(object):
                """
                List of RSB keys
                
                .. attribute:: destination_address
                
                	Destination address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: destination_port_or_tunnel_id
                
                	Destination Port or Tunnel ID. For the LSP and OUNI session types this represents the Tunnel ID whereas for the UDP session type this represents the Destination Port
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: extended_tunnel_id
                
                	Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this represents the Extended Tunnel ID
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: p2mp_id
                
                	Point\-to\-multipoint ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: p2mp_sub_group_origin
                
                	Point to Multipoint SubGroup Origin
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: protocol
                
                	Protocol. UDP session type this represents the Protocol (UDP not supported at present)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: session_type
                
                	Session Type (e.g. LSP, OUNI or UDP)
                	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                
                .. attribute:: source_address
                
                	Source Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: source_port_or_lsp_id
                
                	Source Port or LSP\_ID. For the LSP and OUNI session types this represents the LSP\_ID whereas for the UDP session type this represents the SourcePort
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: sub_group_id
                
                	Point to Multipoint Subgroup ID
                	**type**\:  int
                
                	**range:** 0..65535
                
                .. attribute:: vrfid
                
                	Signalling VRF ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.destination_address = None
                    self.destination_port_or_tunnel_id = None
                    self.extended_tunnel_id = None
                    self.p2mp_id = None
                    self.p2mp_sub_group_origin = None
                    self.protocol = None
                    self.session_type = None
                    self.source_address = None
                    self.source_port_or_lsp_id = None
                    self.sub_group_id = None
                    self.vrfid = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:psb-key'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.destination_address is not None:
                        return True

                    if self.destination_port_or_tunnel_id is not None:
                        return True

                    if self.extended_tunnel_id is not None:
                        return True

                    if self.p2mp_id is not None:
                        return True

                    if self.p2mp_sub_group_origin is not None:
                        return True

                    if self.protocol is not None:
                        return True

                    if self.session_type is not None:
                        return True

                    if self.source_address is not None:
                        return True

                    if self.source_port_or_lsp_id is not None:
                        return True

                    if self.sub_group_id is not None:
                        return True

                    if self.vrfid is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestDetails.RequestDetail.PsbKey']['meta_info']


            class RsbKey(object):
                """
                List of RSB keys
                
                .. attribute:: destination_address
                
                	Destination address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: destination_port_or_tunnel_id
                
                	Destination Port or Tunnel ID. For the LSP and OUNI session types this represents the Tunnel ID whereas for the UDP session type this represents the Destination Port
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: extended_tunnel_id
                
                	Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this represents the Extended Tunnel ID
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: p2mp_id
                
                	Point\-to\-multipoint ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: p2mp_sub_group_origin
                
                	Point to Multipoint SubGroup Origin
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: protocol
                
                	Protocol. UDP session type this represents the Protocol (UDP not supported at present)
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: session_type
                
                	Session Type (e.g. LSP, OUNI or UDP)
                	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                
                .. attribute:: source_address
                
                	Source Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: source_port_or_lsp_id
                
                	Source Port or LSP\_ID. For the LSP and OUNI session types this represents the LSP\_ID whereas for the UDP session type this represents the SourcePort
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: sub_group_id
                
                	Point to Multipoint Subgroup ID
                	**type**\:  int
                
                	**range:** 0..65535
                
                .. attribute:: vrfid
                
                	Signalling VRF ID
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.destination_address = None
                    self.destination_port_or_tunnel_id = None
                    self.extended_tunnel_id = None
                    self.p2mp_id = None
                    self.p2mp_sub_group_origin = None
                    self.protocol = None
                    self.session_type = None
                    self.source_address = None
                    self.source_port_or_lsp_id = None
                    self.sub_group_id = None
                    self.vrfid = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail/Cisco-IOS-XR-ip-rsvp-oper:rsb-key'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.destination_address is not None:
                        return True

                    if self.destination_port_or_tunnel_id is not None:
                        return True

                    if self.extended_tunnel_id is not None:
                        return True

                    if self.p2mp_id is not None:
                        return True

                    if self.p2mp_sub_group_origin is not None:
                        return True

                    if self.protocol is not None:
                        return True

                    if self.session_type is not None:
                        return True

                    if self.source_address is not None:
                        return True

                    if self.source_port_or_lsp_id is not None:
                        return True

                    if self.sub_group_id is not None:
                        return True

                    if self.vrfid is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.RequestDetails.RequestDetail.RsbKey']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details/Cisco-IOS-XR-ip-rsvp-oper:request-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.filter is not None and self.filter._has_data():
                    return True

                if self.flow_spec is not None and self.flow_spec._has_data():
                    return True

                if self.generic_flow_spec is not None and self.generic_flow_spec._has_data():
                    return True

                if self.header is not None and self.header._has_data():
                    return True

                if self.hop is not None and self.hop._has_data():
                    return True

                if self.output_interface is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.policy_flags is not None and self.policy_flags._has_data():
                    return True

                if self.policy_query_flags is not None and self.policy_query_flags._has_data():
                    return True

                if self.policy_sources is not None and self.policy_sources._has_data():
                    return True

                if self.protocol is not None:
                    return True

                if self.psb_key is not None:
                    for child_ref in self.psb_key:
                        if child_ref._has_data():
                            return True

                if self.req_flags is not None and self.req_flags._has_data():
                    return True

                if self.rsb_key is not None:
                    for child_ref in self.rsb_key:
                        if child_ref._has_data():
                            return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.style is not None and self.style._has_data():
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.RequestDetails.RequestDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:request-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.request_detail is not None:
                for child_ref in self.request_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.RequestDetails']['meta_info']


    class InterfaceBriefs(object):
        """
        Table of brief info about RSVP\-enabled
        interfaces
        
        .. attribute:: interface_brief
        
        	Brief info about an RSVP\-enabled interface
        	**type**\: list of    :py:class:`InterfaceBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceBriefs.InterfaceBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.interface_brief = YList()
            self.interface_brief.parent = self
            self.interface_brief.name = 'interface_brief'


        class InterfaceBrief(object):
            """
            Brief info about an RSVP\-enabled interface
            
            .. attribute:: interface_name  <key>
            
            	Interface Name
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:   :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\:  str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.interface_name = None
                self.bandwidth_information = Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation()
                self.bandwidth_information.parent = self
                self.interface_name_xr = None


            class BandwidthInformation(object):
                """
                Interface bandwidth information
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:   :py:class:`RsvpMgmtDsteModesEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModesEnum>`
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:   :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:   :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.dste_mode = None
                    self.pre_standard_dste_interface = Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self.standard_dste_interface = Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self


                class PreStandardDsteInterface(object):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_subpool_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:pre-standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_subpool_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_subpool_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface']['meta_info']


                class StandardDsteInterface(object):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\:  bool
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.allocated_bit_rate = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self.max_bandwidth = None
                        self.max_flow_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:standard-dste-interface'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.allocated_bit_rate is not None:
                            return True

                        if self.is_max_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc0_bandwidth_absolute is not None:
                            return True

                        if self.is_max_bc1_bandwidth_absolute is not None:
                            return True

                        if self.max_bandwidth is not None:
                            return True

                        if self.max_flow_bandwidth is not None:
                            return True

                        if self.max_pool0_bandwidth is not None:
                            return True

                        if self.max_pool1_bandwidth is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:bandwidth-information'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.dste_mode is not None:
                        return True

                    if self.pre_standard_dste_interface is not None and self.pre_standard_dste_interface._has_data():
                        return True

                    if self.standard_dste_interface is not None and self.standard_dste_interface._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation']['meta_info']

            @property
            def _common_path(self):
                if self.interface_name is None:
                    raise YPYModelError('Key property interface_name is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:interface-briefs/Cisco-IOS-XR-ip-rsvp-oper:interface-brief[Cisco-IOS-XR-ip-rsvp-oper:interface-name = ' + str(self.interface_name) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.interface_name is not None:
                    return True

                if self.bandwidth_information is not None and self.bandwidth_information._has_data():
                    return True

                if self.interface_name_xr is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.InterfaceBriefs.InterfaceBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:interface-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.interface_brief is not None:
                for child_ref in self.interface_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.InterfaceBriefs']['meta_info']


    class SessionDetaileds(object):
        """
        Table of detailed info about sessions
        
        .. attribute:: session_detailed
        
        	Detailed info about session
        	**type**\: list of    :py:class:`SessionDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.session_detailed = YList()
            self.session_detailed.parent = self
            self.session_detailed.name = 'session_detailed'


        class SessionDetailed(object):
            """
            Detailed info about session
            
            .. attribute:: compact
            
            	Compact session data
            	**type**\:   :py:class:`Compact <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.Compact>`
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: psb_rsb_info
            
            	Path and Reservation Info
            	**type**\: list of    :py:class:`PsbRsbInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.S2LSubLsp>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.compact = Rsvp.SessionDetaileds.SessionDetailed.Compact()
                self.compact.parent = self
                self.destination_address = None
                self.destination_port = None
                self.extended_tunnel_id = None
                self.p2mp_id = None
                self.protocol = None
                self.psb_rsb_info = YList()
                self.psb_rsb_info.parent = self
                self.psb_rsb_info.name = 'psb_rsb_info'
                self.s2l_sub_lsp = Rsvp.SessionDetaileds.SessionDetailed.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session_type = None
                self.vrf_name = None


            class Compact(object):
                """
                Compact session data
                
                .. attribute:: detail_list_size
                
                	Number of elements in detail list
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: ps_bs
                
                	Number of path state block states
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: requests
                
                	Number of request states
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: rs_bs
                
                	Number of reservation state block states
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: session
                
                	RSVP Session Information
                	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.Compact.Session>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.detail_list_size = None
                    self.ps_bs = None
                    self.requests = None
                    self.rs_bs = None
                    self.session = Rsvp.SessionDetaileds.SessionDetailed.Compact.Session()
                    self.session.parent = self


                class Session(object):
                    """
                    RSVP Session Information
                    
                    .. attribute:: rsvp_session
                    
                    	RSVP Session
                    	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.rsvp_session = Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession()
                        self.rsvp_session.parent = self


                    class RsvpSession(object):
                        """
                        RSVP Session
                        
                        .. attribute:: ipv4
                        
                        	UDP IPv4 session
                        	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4>`
                        
                        .. attribute:: ipv4_lsp_session
                        
                        	IPv4 LSP session
                        	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession>`
                        
                        .. attribute:: ipv4_p2mp_lsp_session
                        
                        	IPv4 P2MP LSP session
                        	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession>`
                        
                        .. attribute:: ipv4_uni_session
                        
                        	IPv4 UNI session
                        	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession>`
                        
                        .. attribute:: session_type
                        
                        	SessionType
                        	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ipv4 = Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4()
                            self.ipv4.parent = self
                            self.ipv4_lsp_session = Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession()
                            self.ipv4_lsp_session.parent = self
                            self.ipv4_p2mp_lsp_session = Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession()
                            self.ipv4_p2mp_lsp_session.parent = self
                            self.ipv4_uni_session = Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession()
                            self.ipv4_uni_session.parent = self
                            self.session_type = None


                        class Ipv4(object):
                            """
                            UDP IPv4 session
                            
                            .. attribute:: destination_address
                            
                            	Destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: destination_port
                            
                            	The Session Destination Port
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: protocol
                            
                            	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.destination_address = None
                                self.destination_port = None
                                self.protocol = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:compact/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.destination_address is not None:
                                    return True

                                if self.destination_port is not None:
                                    return True

                                if self.protocol is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4']['meta_info']


                        class Ipv4LspSession(object):
                            """
                            IPv4 LSP session
                            
                            .. attribute:: destination_address
                            
                            	Destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: extended_tunnel_id
                            
                            	The Session Extended Tunnel ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: tunnel_id
                            
                            	The Session Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.destination_address = None
                                self.extended_tunnel_id = None
                                self.tunnel_id = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:compact/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.destination_address is not None:
                                    return True

                                if self.extended_tunnel_id is not None:
                                    return True

                                if self.tunnel_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession']['meta_info']


                        class Ipv4UniSession(object):
                            """
                            IPv4 UNI session
                            
                            .. attribute:: destination_address
                            
                            	Destination address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: extended_address
                            
                            	The Session Extended Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: tunnel_id
                            
                            	The Session Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.destination_address = None
                                self.extended_address = None
                                self.tunnel_id = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:compact/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.destination_address is not None:
                                    return True

                                if self.extended_address is not None:
                                    return True

                                if self.tunnel_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession']['meta_info']


                        class Ipv4P2MpLspSession(object):
                            """
                            IPv4 P2MP LSP session
                            
                            .. attribute:: extended_tunnel_id
                            
                            	The Session Extended Tunnel ID
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: p2mp_id
                            
                            	The Point to Multipoint ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_id
                            
                            	The Session Tunnel ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.extended_tunnel_id = None
                                self.p2mp_id = None
                                self.tunnel_id = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:compact/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.extended_tunnel_id is not None:
                                    return True

                                if self.p2mp_id is not None:
                                    return True

                                if self.tunnel_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:compact/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4 is not None and self.ipv4._has_data():
                                return True

                            if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                                return True

                            if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                                return True

                            if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                                return True

                            if self.session_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:compact/Cisco-IOS-XR-ip-rsvp-oper:session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.rsvp_session is not None and self.rsvp_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.Compact.Session']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:compact'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.detail_list_size is not None:
                        return True

                    if self.ps_bs is not None:
                        return True

                    if self.requests is not None:
                        return True

                    if self.rs_bs is not None:
                        return True

                    if self.session is not None and self.session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.Compact']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.S2LSubLsp']['meta_info']


            class PsbRsbInfo(object):
                """
                Path and Reservation Info
                
                .. attribute:: psb_info
                
                	Path Info
                	**type**\: list of    :py:class:`PsbInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo>`
                
                .. attribute:: rsb_info
                
                	Reservation Info
                	**type**\: list of    :py:class:`RsbInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.psb_info = YList()
                    self.psb_info.parent = self
                    self.psb_info.name = 'psb_info'
                    self.rsb_info = YList()
                    self.rsb_info.parent = self
                    self.rsb_info.name = 'rsb_info'


                class PsbInfo(object):
                    """
                    Path Info
                    
                    .. attribute:: association
                    
                    	Association object
                    	**type**\:   :py:class:`Association <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association>`
                    
                    .. attribute:: destination_address
                    
                    	Destination address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: ero
                    
                    	Explicit Route Sub Objects
                    	**type**\: list of    :py:class:`Ero <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero>`
                    
                    .. attribute:: generic_in_label
                    
                    	Generic Label for inbound traffic
                    	**type**\:   :py:class:`GenericInLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel>`
                    
                    .. attribute:: generic_traffic_spec
                    
                    	Generic Traffic Spec object
                    	**type**\:   :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec>`
                    
                    .. attribute:: in_interface
                    
                    	Interface on which inbound message was received
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: in_label
                    
                    	Label for inbound traffic
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: incoming_interface_address
                    
                    	IP address of Path's incoming interface
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: is_bad_address
                    
                    	Address validity
                    	**type**\:  bool
                    
                    .. attribute:: is_ero_valid
                    
                    	ERO validity
                    	**type**\:  bool
                    
                    .. attribute:: is_rro_valid
                    
                    	RRO validity
                    	**type**\:  bool
                    
                    .. attribute:: is_traffic_spec_valid
                    
                    	Traffic Spec validity
                    	**type**\:  bool
                    
                    .. attribute:: is_valid
                    
                    	Entry validity
                    	**type**\:  bool
                    
                    .. attribute:: lsp_id
                    
                    	LSP ID
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: lsp_wrap_label
                    
                    	LSP Wrap Label
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: p2mp_sub_group_origin
                    
                    	Point to Multipoint SubGroup Origin
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: protection
                    
                    	Protection object
                    	**type**\:   :py:class:`Protection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection>`
                    
                    .. attribute:: reverse_lsp
                    
                    	Reverse LSP object
                    	**type**\:   :py:class:`ReverseLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp>`
                    
                    .. attribute:: rro
                    
                    	Record Route Sub Objects
                    	**type**\: list of    :py:class:`Rro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro>`
                    
                    .. attribute:: sub_group_id
                    
                    	Point to Multipoint Subgroup ID
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_spec
                    
                    	Traffic Spec object
                    	**type**\:   :py:class:`TrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec>`
                    
                    .. attribute:: tunnel_name
                    
                    	Tunnel name
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.association = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association()
                        self.association.parent = self
                        self.destination_address = None
                        self.ero = YList()
                        self.ero.parent = self
                        self.ero.name = 'ero'
                        self.generic_in_label = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel()
                        self.generic_in_label.parent = self
                        self.generic_traffic_spec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec()
                        self.generic_traffic_spec.parent = self
                        self.in_interface = None
                        self.in_label = None
                        self.incoming_interface_address = None
                        self.is_bad_address = None
                        self.is_ero_valid = None
                        self.is_rro_valid = None
                        self.is_traffic_spec_valid = None
                        self.is_valid = None
                        self.lsp_id = None
                        self.lsp_wrap_label = None
                        self.p2mp_sub_group_origin = None
                        self.protection = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection()
                        self.protection.parent = self
                        self.reverse_lsp = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp()
                        self.reverse_lsp.parent = self
                        self.rro = YList()
                        self.rro.parent = self
                        self.rro.name = 'rro'
                        self.sub_group_id = None
                        self.traffic_spec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec()
                        self.traffic_spec.parent = self
                        self.tunnel_name = None


                    class GenericInLabel(object):
                        """
                        Generic Label for inbound traffic
                        
                        .. attribute:: generalized_label
                        
                        	Generalized Label
                        	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel>`
                        
                        .. attribute:: generic_label_type
                        
                        	GenericLabelType
                        	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.generalized_label = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel()
                            self.generalized_label.parent = self
                            self.generic_label_type = None


                        class GeneralizedLabel(object):
                            """
                            Generalized Label
                            
                            .. attribute:: value
                            
                            	Generalized Label Value
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.value = YLeafList()
                                self.value.parent = self
                                self.value.name = 'value'

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-in-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.value is not None:
                                    for child in self.value:
                                        if child is not None:
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-in-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.generalized_label is not None and self.generalized_label._has_data():
                                return True

                            if self.generic_label_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel']['meta_info']


                    class TrafficSpec(object):
                        """
                        Traffic Spec object
                        
                        .. attribute:: traffic_average_rate
                        
                        	Traffic Average Rate in bytes per second
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: traffic_max_burst
                        
                        	Traffic Maximum Burst
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: traffic_max_unit
                        
                        	Traffic Maximum Unit
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: traffic_min_unit
                        
                        	Traffic Minimum Unit
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: traffic_peak_rate
                        
                        	Traffic Peak Rate in bytes per second
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.traffic_average_rate = None
                            self.traffic_max_burst = None
                            self.traffic_max_unit = None
                            self.traffic_min_unit = None
                            self.traffic_peak_rate = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:traffic-spec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.traffic_average_rate is not None:
                                return True

                            if self.traffic_max_burst is not None:
                                return True

                            if self.traffic_max_unit is not None:
                                return True

                            if self.traffic_min_unit is not None:
                                return True

                            if self.traffic_peak_rate is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec']['meta_info']


                    class GenericTrafficSpec(object):
                        """
                        Generic Traffic Spec object
                        
                        .. attribute:: g709otn_tspec
                        
                        	G709 OTN Sender Tspec
                        	**type**\:   :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec>`
                        
                        .. attribute:: intsrv_tspec
                        
                        	Integrated Services Sender Tspec
                        	**type**\:   :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec>`
                        
                        .. attribute:: tspec_type
                        
                        	TspecType
                        	**type**\:   :py:class:`RsvpMgmtTspecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspecEnum>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.g709otn_tspec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec()
                            self.g709otn_tspec.parent = self
                            self.intsrv_tspec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec()
                            self.intsrv_tspec.parent = self
                            self.tspec_type = None


                        class G709OtnTspec(object):
                            """
                            G709 OTN Sender Tspec
                            
                            .. attribute:: traffic_bit_rate
                            
                            	G709 OTN Traffic Bit Rate
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: traffic_multiplier
                            
                            	G709 OTN Traffic Multiplier
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: traffic_nvc
                            
                            	G709 OTN Traffic NVC
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: traffic_signal_type
                            
                            	G709 OTN Traffic Signal Type (Refer G709 v3)
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.traffic_bit_rate = None
                                self.traffic_multiplier = None
                                self.traffic_nvc = None
                                self.traffic_signal_type = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-tspec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.traffic_bit_rate is not None:
                                    return True

                                if self.traffic_multiplier is not None:
                                    return True

                                if self.traffic_nvc is not None:
                                    return True

                                if self.traffic_signal_type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec']['meta_info']


                        class IntsrvTspec(object):
                            """
                            Integrated Services Sender Tspec
                            
                            .. attribute:: traffic_average_rate
                            
                            	Traffic Average Rate in bytes per second
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: byte/s
                            
                            .. attribute:: traffic_max_burst
                            
                            	Traffic Maximum Burst
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: traffic_max_unit
                            
                            	Traffic Maximum Unit
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: traffic_min_unit
                            
                            	Traffic Minimum Unit
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: traffic_peak_rate
                            
                            	Traffic Peak Rate in bytes per second
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: byte/s
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.traffic_average_rate = None
                                self.traffic_max_burst = None
                                self.traffic_max_unit = None
                                self.traffic_min_unit = None
                                self.traffic_peak_rate = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:intsrv-tspec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.traffic_average_rate is not None:
                                    return True

                                if self.traffic_max_burst is not None:
                                    return True

                                if self.traffic_max_unit is not None:
                                    return True

                                if self.traffic_min_unit is not None:
                                    return True

                                if self.traffic_peak_rate is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.g709otn_tspec is not None and self.g709otn_tspec._has_data():
                                return True

                            if self.intsrv_tspec is not None and self.intsrv_tspec._has_data():
                                return True

                            if self.tspec_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec']['meta_info']


                    class Association(object):
                        """
                        Association object
                        
                        .. attribute:: association_type
                        
                        	AssociationType
                        	**type**\:   :py:class:`RsvpMgmtAssociationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAssociationEnum>`
                        
                        .. attribute:: extended_ipv4
                        
                        	EXTENDED IPV4 ASSOCIATION Object
                        	**type**\:   :py:class:`ExtendedIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4>`
                        
                        .. attribute:: extended_ipv6
                        
                        	EXTENDED IPV6 ASSOCIATION Object
                        	**type**\:   :py:class:`ExtendedIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6>`
                        
                        .. attribute:: ipv4
                        
                        	IPV4 ASSOCIATION Object
                        	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4>`
                        
                        .. attribute:: ipv6
                        
                        	IPV6 ASSOCIATION Object
                        	**type**\:   :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.association_type = None
                            self.extended_ipv4 = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4()
                            self.extended_ipv4.parent = self
                            self.extended_ipv6 = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6()
                            self.extended_ipv6.parent = self
                            self.ipv4 = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4()
                            self.ipv4.parent = self
                            self.ipv6 = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6()
                            self.ipv6.parent = self


                        class Ipv4(object):
                            """
                            IPV4 ASSOCIATION Object
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV4 Source Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.id = None
                                self.source = None
                                self.type = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:association/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.id is not None:
                                    return True

                                if self.source is not None:
                                    return True

                                if self.type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4']['meta_info']


                        class Ipv6(object):
                            """
                            IPV6 ASSOCIATION Object
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV6 Source Address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.id = None
                                self.source = None
                                self.type = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:association/Cisco-IOS-XR-ip-rsvp-oper:ipv6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.id is not None:
                                    return True

                                if self.source is not None:
                                    return True

                                if self.type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6']['meta_info']


                        class ExtendedIpv4(object):
                            """
                            EXTENDED IPV4 ASSOCIATION Object
                            
                            .. attribute:: extended_id
                            
                            	Extended Association ID
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: global_source
                            
                            	Global Association Source
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV4 Source Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.extended_id = YLeafList()
                                self.extended_id.parent = self
                                self.extended_id.name = 'extended_id'
                                self.global_source = None
                                self.id = None
                                self.source = None
                                self.type = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:association/Cisco-IOS-XR-ip-rsvp-oper:extended-ipv4'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.extended_id is not None:
                                    for child in self.extended_id:
                                        if child is not None:
                                            return True

                                if self.global_source is not None:
                                    return True

                                if self.id is not None:
                                    return True

                                if self.source is not None:
                                    return True

                                if self.type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4']['meta_info']


                        class ExtendedIpv6(object):
                            """
                            EXTENDED IPV6 ASSOCIATION Object
                            
                            .. attribute:: extended_id
                            
                            	Extended Association ID
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: global_source
                            
                            	Global Association Source
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV6 Source Address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.extended_id = YLeafList()
                                self.extended_id.parent = self
                                self.extended_id.name = 'extended_id'
                                self.global_source = None
                                self.id = None
                                self.source = None
                                self.type = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:association/Cisco-IOS-XR-ip-rsvp-oper:extended-ipv6'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.extended_id is not None:
                                    for child in self.extended_id:
                                        if child is not None:
                                            return True

                                if self.global_source is not None:
                                    return True

                                if self.id is not None:
                                    return True

                                if self.source is not None:
                                    return True

                                if self.type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:association'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.association_type is not None:
                                return True

                            if self.extended_ipv4 is not None and self.extended_ipv4._has_data():
                                return True

                            if self.extended_ipv6 is not None and self.extended_ipv6._has_data():
                                return True

                            if self.ipv4 is not None and self.ipv4._has_data():
                                return True

                            if self.ipv6 is not None and self.ipv6._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association']['meta_info']


                    class Protection(object):
                        """
                        Protection object
                        
                        .. attribute:: link_flags
                        
                        	PROTECTION Object Link Flags
                        	**type**\:   :py:class:`LinkFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags>`
                        
                        .. attribute:: lsp_flags
                        
                        	PROTECTION Object LSP Flags
                        	**type**\:   :py:class:`LspFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags>`
                        
                        .. attribute:: n
                        
                        	Notification Bit
                        	**type**\:  bool
                        
                        .. attribute:: o
                        
                        	Operational Bit
                        	**type**\:  bool
                        
                        .. attribute:: p
                        
                        	Protecting Bit
                        	**type**\:  bool
                        
                        .. attribute:: s
                        
                        	Secondary Bit
                        	**type**\:  bool
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.link_flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags()
                            self.link_flags.parent = self
                            self.lsp_flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags()
                            self.lsp_flags.parent = self
                            self.n = None
                            self.o = None
                            self.p = None
                            self.s = None


                        class LspFlags(object):
                            """
                            PROTECTION Object LSP Flags
                            
                            .. attribute:: one_plus_one_bi
                            
                            	1+1 Bidirectional Protection
                            	**type**\:  bool
                            
                            .. attribute:: one_plus_one_uni
                            
                            	1+1 Unidirectional Protection
                            	**type**\:  bool
                            
                            .. attribute:: one_to_n_protection_et
                            
                            	1\:N Protection with Extra\-Traffic
                            	**type**\:  bool
                            
                            .. attribute:: rerouting
                            
                            	Full Rerouting
                            	**type**\:  bool
                            
                            .. attribute:: rerouting_no_et
                            
                            	Rerouting Without Extra\-Traffic
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.one_plus_one_bi = None
                                self.one_plus_one_uni = None
                                self.one_to_n_protection_et = None
                                self.rerouting = None
                                self.rerouting_no_et = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:protection/Cisco-IOS-XR-ip-rsvp-oper:lsp-flags'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.one_plus_one_bi is not None:
                                    return True

                                if self.one_plus_one_uni is not None:
                                    return True

                                if self.one_to_n_protection_et is not None:
                                    return True

                                if self.rerouting is not None:
                                    return True

                                if self.rerouting_no_et is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags']['meta_info']


                        class LinkFlags(object):
                            """
                            PROTECTION Object Link Flags
                            
                            .. attribute:: ded1_plus1
                            
                            	Dedicated 1+1 Protection
                            	**type**\:  bool
                            
                            .. attribute:: ded1_to1
                            
                            	Dedicated 1\:1 Protection
                            	**type**\:  bool
                            
                            .. attribute:: enhanced
                            
                            	Indicates Enhanced Protection Scheme
                            	**type**\:  bool
                            
                            .. attribute:: extra_traffic
                            
                            	LSP should use Links that are protecting other (primary) traffic
                            	**type**\:  bool
                            
                            .. attribute:: reserved_bit1
                            
                            	Reserved Bit 1
                            	**type**\:  bool
                            
                            .. attribute:: reserved_bit2
                            
                            	Reserved Bit 2
                            	**type**\:  bool
                            
                            .. attribute:: shared
                            
                            	Shared Link Layer Protection
                            	**type**\:  bool
                            
                            .. attribute:: unprotected
                            
                            	LSP should not use any Link Layer Protection
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ded1_plus1 = None
                                self.ded1_to1 = None
                                self.enhanced = None
                                self.extra_traffic = None
                                self.reserved_bit1 = None
                                self.reserved_bit2 = None
                                self.shared = None
                                self.unprotected = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:protection/Cisco-IOS-XR-ip-rsvp-oper:link-flags'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ded1_plus1 is not None:
                                    return True

                                if self.ded1_to1 is not None:
                                    return True

                                if self.enhanced is not None:
                                    return True

                                if self.extra_traffic is not None:
                                    return True

                                if self.reserved_bit1 is not None:
                                    return True

                                if self.reserved_bit2 is not None:
                                    return True

                                if self.shared is not None:
                                    return True

                                if self.unprotected is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:protection'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.link_flags is not None and self.link_flags._has_data():
                                return True

                            if self.lsp_flags is not None and self.lsp_flags._has_data():
                                return True

                            if self.n is not None:
                                return True

                            if self.o is not None:
                                return True

                            if self.p is not None:
                                return True

                            if self.s is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection']['meta_info']


                    class ReverseLsp(object):
                        """
                        Reverse LSP object
                        
                        .. attribute:: ero
                        
                        	Explicit Route Sub Objects
                        	**type**\: list of    :py:class:`Ero <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero>`
                        
                        .. attribute:: generic_traffic_spec
                        
                        	Generic Traffic Spec object
                        	**type**\:   :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec>`
                        
                        .. attribute:: unsup_sub_object
                        
                        	Unsupported REVERSE\_LSP Sub Objects
                        	**type**\: list of    :py:class:`UnsupSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.UnsupSubObject>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ero = YList()
                            self.ero.parent = self
                            self.ero.name = 'ero'
                            self.generic_traffic_spec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec()
                            self.generic_traffic_spec.parent = self
                            self.unsup_sub_object = YList()
                            self.unsup_sub_object.parent = self
                            self.unsup_sub_object.name = 'unsup_sub_object'


                        class GenericTrafficSpec(object):
                            """
                            Generic Traffic Spec object
                            
                            .. attribute:: g709otn_tspec
                            
                            	G709 OTN Sender Tspec
                            	**type**\:   :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec>`
                            
                            .. attribute:: intsrv_tspec
                            
                            	Integrated Services Sender Tspec
                            	**type**\:   :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec>`
                            
                            .. attribute:: tspec_type
                            
                            	TspecType
                            	**type**\:   :py:class:`RsvpMgmtTspecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspecEnum>`
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.g709otn_tspec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec()
                                self.g709otn_tspec.parent = self
                                self.intsrv_tspec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec()
                                self.intsrv_tspec.parent = self
                                self.tspec_type = None


                            class G709OtnTspec(object):
                                """
                                G709 OTN Sender Tspec
                                
                                .. attribute:: traffic_bit_rate
                                
                                	G709 OTN Traffic Bit Rate
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: traffic_multiplier
                                
                                	G709 OTN Traffic Multiplier
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_nvc
                                
                                	G709 OTN Traffic NVC
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_signal_type
                                
                                	G709 OTN Traffic Signal Type (Refer G709 v3)
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.traffic_bit_rate = None
                                    self.traffic_multiplier = None
                                    self.traffic_nvc = None
                                    self.traffic_signal_type = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-tspec'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.traffic_bit_rate is not None:
                                        return True

                                    if self.traffic_multiplier is not None:
                                        return True

                                    if self.traffic_nvc is not None:
                                        return True

                                    if self.traffic_signal_type is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec']['meta_info']


                            class IntsrvTspec(object):
                                """
                                Integrated Services Sender Tspec
                                
                                .. attribute:: traffic_average_rate
                                
                                	Traffic Average Rate in bytes per second
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: byte/s
                                
                                .. attribute:: traffic_max_burst
                                
                                	Traffic Maximum Burst
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: traffic_max_unit
                                
                                	Traffic Maximum Unit
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: traffic_min_unit
                                
                                	Traffic Minimum Unit
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: traffic_peak_rate
                                
                                	Traffic Peak Rate in bytes per second
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: byte/s
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.traffic_average_rate = None
                                    self.traffic_max_burst = None
                                    self.traffic_max_unit = None
                                    self.traffic_min_unit = None
                                    self.traffic_peak_rate = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:intsrv-tspec'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.traffic_average_rate is not None:
                                        return True

                                    if self.traffic_max_burst is not None:
                                        return True

                                    if self.traffic_max_unit is not None:
                                        return True

                                    if self.traffic_min_unit is not None:
                                        return True

                                    if self.traffic_peak_rate is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.g709otn_tspec is not None and self.g709otn_tspec._has_data():
                                    return True

                                if self.intsrv_tspec is not None and self.intsrv_tspec._has_data():
                                    return True

                                if self.tspec_type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec']['meta_info']


                        class Ero(object):
                            """
                            Explicit Route Sub Objects
                            
                            .. attribute:: ero_type
                            
                            	EROType
                            	**type**\:   :py:class:`RsvpMgmtEroSubobjEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjEnum>`
                            
                            .. attribute:: ipv4ero_sub_object
                            
                            	IPV4 ERO Sub Object
                            	**type**\:   :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject>`
                            
                            .. attribute:: unnumbered_ero_sub_object
                            
                            	Unnumbered ERO Sub Object
                            	**type**\:   :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject>`
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ero_type = None
                                self.ipv4ero_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject()
                                self.ipv4ero_sub_object.parent = self
                                self.unnumbered_ero_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject()
                                self.unnumbered_ero_sub_object.parent = self


                            class Ipv4EroSubObject(object):
                                """
                                IPV4 ERO Sub Object
                                
                                .. attribute:: ero_address
                                
                                	The ERO IPV4 Address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: is_strict_route
                                
                                	ERO Entry Is Strict
                                	**type**\:  bool
                                
                                .. attribute:: prefix_length
                                
                                	ERO Prefix Length
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.ero_address = None
                                    self.is_strict_route = None
                                    self.prefix_length = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp/Cisco-IOS-XR-ip-rsvp-oper:ero/Cisco-IOS-XR-ip-rsvp-oper:ipv4ero-sub-object'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.ero_address is not None:
                                        return True

                                    if self.is_strict_route is not None:
                                        return True

                                    if self.prefix_length is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject']['meta_info']


                            class UnnumberedEroSubObject(object):
                                """
                                Unnumbered ERO Sub Object
                                
                                .. attribute:: ero_interface_id
                                
                                	The Interface ID in ERO
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ero_router_id
                                
                                	The Router ID in ERO
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: is_strict_route
                                
                                	ERO Entry Is Strict
                                	**type**\:  bool
                                
                                .. attribute:: status
                                
                                	Status of ERO
                                	**type**\:   :py:class:`RsvpMgmtEroSubobjStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatusEnum>`
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.ero_interface_id = None
                                    self.ero_router_id = None
                                    self.is_strict_route = None
                                    self.status = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp/Cisco-IOS-XR-ip-rsvp-oper:ero/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-ero-sub-object'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.ero_interface_id is not None:
                                        return True

                                    if self.ero_router_id is not None:
                                        return True

                                    if self.is_strict_route is not None:
                                        return True

                                    if self.status is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp/Cisco-IOS-XR-ip-rsvp-oper:ero'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ero_type is not None:
                                    return True

                                if self.ipv4ero_sub_object is not None and self.ipv4ero_sub_object._has_data():
                                    return True

                                if self.unnumbered_ero_sub_object is not None and self.unnumbered_ero_sub_object._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero']['meta_info']


                        class UnsupSubObject(object):
                            """
                            Unsupported REVERSE\_LSP Sub Objects
                            
                            .. attribute:: rsvp_mgmt_rev_lsp_unsupported_subobj
                            
                            	rsvp mgmt rev lsp unsupported subobj
                            	**type**\:  list of int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.rsvp_mgmt_rev_lsp_unsupported_subobj = YLeafList()
                                self.rsvp_mgmt_rev_lsp_unsupported_subobj.parent = self
                                self.rsvp_mgmt_rev_lsp_unsupported_subobj.name = 'rsvp_mgmt_rev_lsp_unsupported_subobj'

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp/Cisco-IOS-XR-ip-rsvp-oper:unsup-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.rsvp_mgmt_rev_lsp_unsupported_subobj is not None:
                                    for child in self.rsvp_mgmt_rev_lsp_unsupported_subobj:
                                        if child is not None:
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.UnsupSubObject']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:reverse-lsp'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ero is not None:
                                for child_ref in self.ero:
                                    if child_ref._has_data():
                                        return True

                            if self.generic_traffic_spec is not None and self.generic_traffic_spec._has_data():
                                return True

                            if self.unsup_sub_object is not None:
                                for child_ref in self.unsup_sub_object:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp']['meta_info']


                    class Ero(object):
                        """
                        Explicit Route Sub Objects
                        
                        .. attribute:: ero_type
                        
                        	EROType
                        	**type**\:   :py:class:`RsvpMgmtEroSubobjEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjEnum>`
                        
                        .. attribute:: ipv4ero_sub_object
                        
                        	IPV4 ERO Sub Object
                        	**type**\:   :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject>`
                        
                        .. attribute:: unnumbered_ero_sub_object
                        
                        	Unnumbered ERO Sub Object
                        	**type**\:   :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ero_type = None
                            self.ipv4ero_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject()
                            self.ipv4ero_sub_object.parent = self
                            self.unnumbered_ero_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject()
                            self.unnumbered_ero_sub_object.parent = self


                        class Ipv4EroSubObject(object):
                            """
                            IPV4 ERO Sub Object
                            
                            .. attribute:: ero_address
                            
                            	The ERO IPV4 Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: is_strict_route
                            
                            	ERO Entry Is Strict
                            	**type**\:  bool
                            
                            .. attribute:: prefix_length
                            
                            	ERO Prefix Length
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ero_address = None
                                self.is_strict_route = None
                                self.prefix_length = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:ero/Cisco-IOS-XR-ip-rsvp-oper:ipv4ero-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ero_address is not None:
                                    return True

                                if self.is_strict_route is not None:
                                    return True

                                if self.prefix_length is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject']['meta_info']


                        class UnnumberedEroSubObject(object):
                            """
                            Unnumbered ERO Sub Object
                            
                            .. attribute:: ero_interface_id
                            
                            	The Interface ID in ERO
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ero_router_id
                            
                            	The Router ID in ERO
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: is_strict_route
                            
                            	ERO Entry Is Strict
                            	**type**\:  bool
                            
                            .. attribute:: status
                            
                            	Status of ERO
                            	**type**\:   :py:class:`RsvpMgmtEroSubobjStatusEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatusEnum>`
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.ero_interface_id = None
                                self.ero_router_id = None
                                self.is_strict_route = None
                                self.status = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:ero/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-ero-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ero_interface_id is not None:
                                    return True

                                if self.ero_router_id is not None:
                                    return True

                                if self.is_strict_route is not None:
                                    return True

                                if self.status is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:ero'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ero_type is not None:
                                return True

                            if self.ipv4ero_sub_object is not None and self.ipv4ero_sub_object._has_data():
                                return True

                            if self.unnumbered_ero_sub_object is not None and self.unnumbered_ero_sub_object._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero']['meta_info']


                    class Rro(object):
                        """
                        Record Route Sub Objects
                        
                        .. attribute:: ipv4rro_sub_object
                        
                        	IPV4 RRO Sub Object
                        	**type**\:   :py:class:`Ipv4RroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject>`
                        
                        .. attribute:: label_rro_sub_object
                        
                        	Label RRO Sub Object
                        	**type**\:   :py:class:`LabelRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject>`
                        
                        .. attribute:: rro_type
                        
                        	RROType
                        	**type**\:   :py:class:`RsvpMgmtRroSubobjEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRroSubobjEnum>`
                        
                        .. attribute:: srlg_rro_sub_object
                        
                        	SRLG RRO Sub Object
                        	**type**\:   :py:class:`SrlgRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject>`
                        
                        .. attribute:: unnumbered_rro_sub_object
                        
                        	Unnumbered RRO Sub Object
                        	**type**\:   :py:class:`UnnumberedRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ipv4rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject()
                            self.ipv4rro_sub_object.parent = self
                            self.label_rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject()
                            self.label_rro_sub_object.parent = self
                            self.rro_type = None
                            self.srlg_rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject()
                            self.srlg_rro_sub_object.parent = self
                            self.unnumbered_rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject()
                            self.unnumbered_rro_sub_object.parent = self


                        class Ipv4RroSubObject(object):
                            """
                            IPV4 RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO IPV4 Subobject Flags
                            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags>`
                            
                            .. attribute:: rro_address
                            
                            	The RRO IPV4 Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags()
                                self.flags.parent = self
                                self.rro_address = None


                            class Flags(object):
                                """
                                The RRO IPV4 Subobject Flags
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\:  bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_id = None
                                    self.is_node_protection_available = None
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:ipv4rro-sub-object/Cisco-IOS-XR-ip-rsvp-oper:flags'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_bandwidth_protected is not None:
                                        return True

                                    if self.is_node_id is not None:
                                        return True

                                    if self.is_node_protection_available is not None:
                                        return True

                                    if self.is_protection_available is not None:
                                        return True

                                    if self.is_protection_in_use is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:ipv4rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.flags is not None and self.flags._has_data():
                                    return True

                                if self.rro_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject']['meta_info']


                        class LabelRroSubObject(object):
                            """
                            Label RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Label Flags
                            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags>`
                            
                            .. attribute:: is_label_variable_length
                            
                            	Is the RRO Subobject Label Variable Length
                            	**type**\:  bool
                            
                            .. attribute:: label
                            
                            	The RRO Subobject Label Value
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: variable_length_label
                            
                            	The RRO Subobject Variable Length Label
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags()
                                self.flags.parent = self
                                self.is_label_variable_length = None
                                self.label = None
                                self.variable_length_label = YLeafList()
                                self.variable_length_label.parent = self
                                self.variable_length_label.name = 'variable_length_label'


                            class Flags(object):
                                """
                                The RRO Subobject Label Flags
                                
                                .. attribute:: is_global_label
                                
                                	Label is Global across all interfaces
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_global_label = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:label-rro-sub-object/Cisco-IOS-XR-ip-rsvp-oper:flags'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_global_label is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:label-rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.flags is not None and self.flags._has_data():
                                    return True

                                if self.is_label_variable_length is not None:
                                    return True

                                if self.label is not None:
                                    return True

                                if self.variable_length_label is not None:
                                    for child in self.variable_length_label:
                                        if child is not None:
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject']['meta_info']


                        class UnnumberedRroSubObject(object):
                            """
                            Unnumbered RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Unnumbered Flags
                            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags>`
                            
                            .. attribute:: interface_address
                            
                            	The RRO Interface Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: interface_id
                            
                            	The RRO Interface ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags()
                                self.flags.parent = self
                                self.interface_address = None
                                self.interface_id = None


                            class Flags(object):
                                """
                                The RRO Subobject Unnumbered Flags
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\:  bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_id = None
                                    self.is_node_protection_available = None
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-rro-sub-object/Cisco-IOS-XR-ip-rsvp-oper:flags'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_bandwidth_protected is not None:
                                        return True

                                    if self.is_node_id is not None:
                                        return True

                                    if self.is_node_protection_available is not None:
                                        return True

                                    if self.is_protection_available is not None:
                                        return True

                                    if self.is_protection_in_use is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.flags is not None and self.flags._has_data():
                                    return True

                                if self.interface_address is not None:
                                    return True

                                if self.interface_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject']['meta_info']


                        class SrlgRroSubObject(object):
                            """
                            SRLG RRO Sub Object
                            
                            .. attribute:: srl_gs
                            
                            	The RRO Subobject SRLGs
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.srl_gs = YLeafList()
                                self.srl_gs.parent = self
                                self.srl_gs.name = 'srl_gs'

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:srlg-rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.srl_gs is not None:
                                    for child in self.srl_gs:
                                        if child is not None:
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info/Cisco-IOS-XR-ip-rsvp-oper:rro'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4rro_sub_object is not None and self.ipv4rro_sub_object._has_data():
                                return True

                            if self.label_rro_sub_object is not None and self.label_rro_sub_object._has_data():
                                return True

                            if self.rro_type is not None:
                                return True

                            if self.srlg_rro_sub_object is not None and self.srlg_rro_sub_object._has_data():
                                return True

                            if self.unnumbered_rro_sub_object is not None and self.unnumbered_rro_sub_object._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:psb-info'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.association is not None and self.association._has_data():
                            return True

                        if self.destination_address is not None:
                            return True

                        if self.ero is not None:
                            for child_ref in self.ero:
                                if child_ref._has_data():
                                    return True

                        if self.generic_in_label is not None and self.generic_in_label._has_data():
                            return True

                        if self.generic_traffic_spec is not None and self.generic_traffic_spec._has_data():
                            return True

                        if self.in_interface is not None:
                            return True

                        if self.in_label is not None:
                            return True

                        if self.incoming_interface_address is not None:
                            return True

                        if self.is_bad_address is not None:
                            return True

                        if self.is_ero_valid is not None:
                            return True

                        if self.is_rro_valid is not None:
                            return True

                        if self.is_traffic_spec_valid is not None:
                            return True

                        if self.is_valid is not None:
                            return True

                        if self.lsp_id is not None:
                            return True

                        if self.lsp_wrap_label is not None:
                            return True

                        if self.p2mp_sub_group_origin is not None:
                            return True

                        if self.protection is not None and self.protection._has_data():
                            return True

                        if self.reverse_lsp is not None and self.reverse_lsp._has_data():
                            return True

                        if self.rro is not None:
                            for child_ref in self.rro:
                                if child_ref._has_data():
                                    return True

                        if self.sub_group_id is not None:
                            return True

                        if self.traffic_spec is not None and self.traffic_spec._has_data():
                            return True

                        if self.tunnel_name is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo']['meta_info']


                class RsbInfo(object):
                    """
                    Reservation Info
                    
                    .. attribute:: backup_interface
                    
                    	Backup tunnel interface
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: backup_label
                    
                    	Backup label
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: destination_address
                    
                    	Destination address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: flow_spec
                    
                    	Flow spec object
                    	**type**\:   :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec>`
                    
                    .. attribute:: generic_flow_spec
                    
                    	Generic Flow Spec object
                    	**type**\:   :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec>`
                    
                    .. attribute:: generic_out_label
                    
                    	Generic Label for outbound traffic
                    	**type**\:   :py:class:`GenericOutLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel>`
                    
                    .. attribute:: is_flow_spec_valid
                    
                    	FlowSpec validity
                    	**type**\:  bool
                    
                    .. attribute:: is_rro_valid
                    
                    	RRO validity
                    	**type**\:  bool
                    
                    .. attribute:: is_valid
                    
                    	Entry validity
                    	**type**\:  bool
                    
                    .. attribute:: out_interface
                    
                    	Interface on which outbound message was sent
                    	**type**\:  str
                    
                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                    
                    .. attribute:: out_label
                    
                    	Label for outbound traffic
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: rro
                    
                    	Record route object
                    	**type**\: list of    :py:class:`Rro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.backup_interface = None
                        self.backup_label = None
                        self.destination_address = None
                        self.flow_spec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec()
                        self.flow_spec.parent = self
                        self.generic_flow_spec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec()
                        self.generic_flow_spec.parent = self
                        self.generic_out_label = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel()
                        self.generic_out_label.parent = self
                        self.is_flow_spec_valid = None
                        self.is_rro_valid = None
                        self.is_valid = None
                        self.out_interface = None
                        self.out_label = None
                        self.rro = YList()
                        self.rro.parent = self
                        self.rro.name = 'rro'


                    class GenericOutLabel(object):
                        """
                        Generic Label for outbound traffic
                        
                        .. attribute:: generalized_label
                        
                        	Generalized Label
                        	**type**\:   :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel>`
                        
                        .. attribute:: generic_label_type
                        
                        	GenericLabelType
                        	**type**\:   :py:class:`RsvpMgmtGenericLabelEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabelEnum>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.generalized_label = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel()
                            self.generalized_label.parent = self
                            self.generic_label_type = None


                        class GeneralizedLabel(object):
                            """
                            Generalized Label
                            
                            .. attribute:: value
                            
                            	Generalized Label Value
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.value = YLeafList()
                                self.value.parent = self
                                self.value.name = 'value'

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-out-label/Cisco-IOS-XR-ip-rsvp-oper:generalized-label'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.value is not None:
                                    for child in self.value:
                                        if child is not None:
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-out-label'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.generalized_label is not None and self.generalized_label._has_data():
                                return True

                            if self.generic_label_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel']['meta_info']


                    class FlowSpec(object):
                        """
                        Flow spec object
                        
                        .. attribute:: flow_average_rate
                        
                        	The Flow Average Rate in bytes per second
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: flow_max_burst
                        
                        	The Flow Maximum Burst
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: flow_max_unit
                        
                        	The Flow Maximum Unit
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: flow_min_unit
                        
                        	The Flow Minimum Unit
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: flow_peak_rate
                        
                        	The Flow Peak Rate in bytes per second
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: flow_qos
                        
                        	The Flow Quality of Service
                        	**type**\:   :py:class:`RsvpMgmtQosServiceEnumEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnumEnum>`
                        
                        .. attribute:: flow_requested_rate
                        
                        	The Flow Requested Rate in bytes per second
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: flow_slack
                        
                        	The Flow Slack
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.flow_average_rate = None
                            self.flow_max_burst = None
                            self.flow_max_unit = None
                            self.flow_min_unit = None
                            self.flow_peak_rate = None
                            self.flow_qos = None
                            self.flow_requested_rate = None
                            self.flow_slack = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:flow-spec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.flow_average_rate is not None:
                                return True

                            if self.flow_max_burst is not None:
                                return True

                            if self.flow_max_unit is not None:
                                return True

                            if self.flow_min_unit is not None:
                                return True

                            if self.flow_peak_rate is not None:
                                return True

                            if self.flow_qos is not None:
                                return True

                            if self.flow_requested_rate is not None:
                                return True

                            if self.flow_slack is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec']['meta_info']


                    class GenericFlowSpec(object):
                        """
                        Generic Flow Spec object
                        
                        .. attribute:: flow_spec_type
                        
                        	FlowSpecType
                        	**type**\:   :py:class:`RsvpMgmtFlowSpecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpecEnum>`
                        
                        .. attribute:: g709otn_flow_spec
                        
                        	G709 OTN FlowSpec
                        	**type**\:   :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.flow_spec_type = None
                            self.g709otn_flow_spec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec()
                            self.g709otn_flow_spec.parent = self


                        class G709OtnFlowSpec(object):
                            """
                            G709 OTN FlowSpec
                            
                            .. attribute:: flow_bit_rate
                            
                            	G709 OTN Flow Bit Rate
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: flow_multiplier
                            
                            	G709 OTN Flow Multiplier
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: flow_nvc
                            
                            	G709 OTN Flow NVC
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: flow_signal_type
                            
                            	G709 OTN Flow Signal Type (Refer G709 v3)
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.flow_bit_rate = None
                                self.flow_multiplier = None
                                self.flow_nvc = None
                                self.flow_signal_type = None

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-flow-spec'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.flow_bit_rate is not None:
                                    return True

                                if self.flow_multiplier is not None:
                                    return True

                                if self.flow_nvc is not None:
                                    return True

                                if self.flow_signal_type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:generic-flow-spec'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.flow_spec_type is not None:
                                return True

                            if self.g709otn_flow_spec is not None and self.g709otn_flow_spec._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec']['meta_info']


                    class Rro(object):
                        """
                        Record route object
                        
                        .. attribute:: ipv4rro_sub_object
                        
                        	IPV4 RRO Sub Object
                        	**type**\:   :py:class:`Ipv4RroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject>`
                        
                        .. attribute:: label_rro_sub_object
                        
                        	Label RRO Sub Object
                        	**type**\:   :py:class:`LabelRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject>`
                        
                        .. attribute:: rro_type
                        
                        	RROType
                        	**type**\:   :py:class:`RsvpMgmtRroSubobjEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRroSubobjEnum>`
                        
                        .. attribute:: srlg_rro_sub_object
                        
                        	SRLG RRO Sub Object
                        	**type**\:   :py:class:`SrlgRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject>`
                        
                        .. attribute:: unnumbered_rro_sub_object
                        
                        	Unnumbered RRO Sub Object
                        	**type**\:   :py:class:`UnnumberedRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.ipv4rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject()
                            self.ipv4rro_sub_object.parent = self
                            self.label_rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject()
                            self.label_rro_sub_object.parent = self
                            self.rro_type = None
                            self.srlg_rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject()
                            self.srlg_rro_sub_object.parent = self
                            self.unnumbered_rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject()
                            self.unnumbered_rro_sub_object.parent = self


                        class Ipv4RroSubObject(object):
                            """
                            IPV4 RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO IPV4 Subobject Flags
                            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags>`
                            
                            .. attribute:: rro_address
                            
                            	The RRO IPV4 Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags()
                                self.flags.parent = self
                                self.rro_address = None


                            class Flags(object):
                                """
                                The RRO IPV4 Subobject Flags
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\:  bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_id = None
                                    self.is_node_protection_available = None
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:ipv4rro-sub-object/Cisco-IOS-XR-ip-rsvp-oper:flags'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_bandwidth_protected is not None:
                                        return True

                                    if self.is_node_id is not None:
                                        return True

                                    if self.is_node_protection_available is not None:
                                        return True

                                    if self.is_protection_available is not None:
                                        return True

                                    if self.is_protection_in_use is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:ipv4rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.flags is not None and self.flags._has_data():
                                    return True

                                if self.rro_address is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject']['meta_info']


                        class LabelRroSubObject(object):
                            """
                            Label RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Label Flags
                            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags>`
                            
                            .. attribute:: is_label_variable_length
                            
                            	Is the RRO Subobject Label Variable Length
                            	**type**\:  bool
                            
                            .. attribute:: label
                            
                            	The RRO Subobject Label Value
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: variable_length_label
                            
                            	The RRO Subobject Variable Length Label
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags()
                                self.flags.parent = self
                                self.is_label_variable_length = None
                                self.label = None
                                self.variable_length_label = YLeafList()
                                self.variable_length_label.parent = self
                                self.variable_length_label.name = 'variable_length_label'


                            class Flags(object):
                                """
                                The RRO Subobject Label Flags
                                
                                .. attribute:: is_global_label
                                
                                	Label is Global across all interfaces
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_global_label = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:label-rro-sub-object/Cisco-IOS-XR-ip-rsvp-oper:flags'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_global_label is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:label-rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.flags is not None and self.flags._has_data():
                                    return True

                                if self.is_label_variable_length is not None:
                                    return True

                                if self.label is not None:
                                    return True

                                if self.variable_length_label is not None:
                                    for child in self.variable_length_label:
                                        if child is not None:
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject']['meta_info']


                        class UnnumberedRroSubObject(object):
                            """
                            Unnumbered RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Unnumbered Flags
                            	**type**\:   :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags>`
                            
                            .. attribute:: interface_address
                            
                            	The RRO Interface Address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: interface_id
                            
                            	The RRO Interface ID
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags()
                                self.flags.parent = self
                                self.interface_address = None
                                self.interface_id = None


                            class Flags(object):
                                """
                                The RRO Subobject Unnumbered Flags
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\:  bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\:  bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\:  bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    self.parent = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_id = None
                                    self.is_node_protection_available = None
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None

                                @property
                                def _common_path(self):

                                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-rro-sub-object/Cisco-IOS-XR-ip-rsvp-oper:flags'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return False

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.is_bandwidth_protected is not None:
                                        return True

                                    if self.is_node_id is not None:
                                        return True

                                    if self.is_node_protection_available is not None:
                                        return True

                                    if self.is_protection_available is not None:
                                        return True

                                    if self.is_protection_in_use is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                    return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags']['meta_info']

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:unnumbered-rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.flags is not None and self.flags._has_data():
                                    return True

                                if self.interface_address is not None:
                                    return True

                                if self.interface_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject']['meta_info']


                        class SrlgRroSubObject(object):
                            """
                            SRLG RRO Sub Object
                            
                            .. attribute:: srl_gs
                            
                            	The RRO Subobject SRLGs
                            	**type**\:  list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                self.parent = None
                                self.srl_gs = YLeafList()
                                self.srl_gs.parent = self
                                self.srl_gs.name = 'srl_gs'

                            @property
                            def _common_path(self):

                                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro/Cisco-IOS-XR-ip-rsvp-oper:srlg-rro-sub-object'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return False

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.srl_gs is not None:
                                    for child in self.srl_gs:
                                        if child is not None:
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject']['meta_info']

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rro'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4rro_sub_object is not None and self.ipv4rro_sub_object._has_data():
                                return True

                            if self.label_rro_sub_object is not None and self.label_rro_sub_object._has_data():
                                return True

                            if self.rro_type is not None:
                                return True

                            if self.srlg_rro_sub_object is not None and self.srlg_rro_sub_object._has_data():
                                return True

                            if self.unnumbered_rro_sub_object is not None and self.unnumbered_rro_sub_object._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info/Cisco-IOS-XR-ip-rsvp-oper:rsb-info'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.backup_interface is not None:
                            return True

                        if self.backup_label is not None:
                            return True

                        if self.destination_address is not None:
                            return True

                        if self.flow_spec is not None and self.flow_spec._has_data():
                            return True

                        if self.generic_flow_spec is not None and self.generic_flow_spec._has_data():
                            return True

                        if self.generic_out_label is not None and self.generic_out_label._has_data():
                            return True

                        if self.is_flow_spec_valid is not None:
                            return True

                        if self.is_rro_valid is not None:
                            return True

                        if self.is_valid is not None:
                            return True

                        if self.out_interface is not None:
                            return True

                        if self.out_label is not None:
                            return True

                        if self.rro is not None:
                            for child_ref in self.rro:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed/Cisco-IOS-XR-ip-rsvp-oper:psb-rsb-info'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.psb_info is not None:
                        for child_ref in self.psb_info:
                            if child_ref._has_data():
                                return True

                    if self.rsb_info is not None:
                        for child_ref in self.rsb_info:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds/Cisco-IOS-XR-ip-rsvp-oper:session-detailed'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.compact is not None and self.compact._has_data():
                    return True

                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.protocol is not None:
                    return True

                if self.psb_rsb_info is not None:
                    for child_ref in self.psb_rsb_info:
                        if child_ref._has_data():
                            return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.SessionDetaileds.SessionDetailed']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:session-detaileds'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.session_detailed is not None:
                for child_ref in self.session_detailed:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.SessionDetaileds']['meta_info']


    class HelloInstanceDetails(object):
        """
        Table of detailed info about hello instances
        
        .. attribute:: hello_instance_detail
        
        	Detailed info for a single hello instance
        	**type**\: list of    :py:class:`HelloInstanceDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInstanceDetails.HelloInstanceDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.hello_instance_detail = YList()
            self.hello_instance_detail.parent = self
            self.hello_instance_detail.name = 'hello_instance_detail'


        class HelloInstanceDetail(object):
            """
            Detailed info for a single hello instance
            
            .. attribute:: destination_address  <key>
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_address  <key>
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: communication_lost_hello_missed
            
            	Lost Comm. Hello missed count
            	**type**\:  int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_interface_down
            
            	Count of lost comm. due to interface down
            	**type**\:  int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_neighbor_disabled_hello
            
            	Count of lost comm. due to nbor disabling Hellos
            	**type**\:  int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_reason
            
            	Reason why communication was lost
            	**type**\:   :py:class:`RsvpMgmtHelloDownReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloDownReasonEnum>`
            
            .. attribute:: communication_lost_time
            
            	Time when communication was lost
            	**type**\:   :py:class:`CommunicationLostTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime>`
            
            .. attribute:: communication_lost_wrong_destination_inst
            
            	Count of lost comm. due to wrong Destination Inst
            	**type**\:  int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_wrong_source_inst
            
            	Count of lost comm. due to wrong Source Inst
            	**type**\:  int
            
            	**range:** 0..65535
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_instance
            
            	Destination Instance
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: hello_instance_owner
            
            	Hello instance owner
            	**type**\:   :py:class:`RsvpMgmtHelloInstanceOwnerEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstanceOwnerEnum>`
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\:  str
            
            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
            
            .. attribute:: hello_interval
            
            	Hello Interval
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: hello_messages_received
            
            	Number of hello messages received
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: hello_messages_sent
            
            	Number of hello messages sent
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: hello_request_suppressed
            
            	Count of Hello Requests suppessed
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:   :py:class:`RsvpMgmtHelloInstanceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstanceEnum>`
            
            .. attribute:: missed_acks_allowed
            
            	Number of missed Hello allowed
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor Hello state
            	**type**\:   :py:class:`RsvpMgmtHelloStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloStateEnum>`
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_instance
            
            	Source Instance
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_communication_lost
            
            	Total number of times communication got lost
            	**type**\:  int
            
            	**range:** 0..65535
            
            .. attribute:: up_time
            
            	Hello up time
            	**type**\:   :py:class:`UpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInstanceDetails.HelloInstanceDetail.UpTime>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.source_address = None
                self.communication_lost_hello_missed = None
                self.communication_lost_interface_down = None
                self.communication_lost_neighbor_disabled_hello = None
                self.communication_lost_reason = None
                self.communication_lost_time = Rsvp.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime()
                self.communication_lost_time.parent = self
                self.communication_lost_wrong_destination_inst = None
                self.communication_lost_wrong_source_inst = None
                self.destination_address_xr = None
                self.destination_instance = None
                self.hello_instance_owner = None
                self.hello_interface = None
                self.hello_interval = None
                self.hello_messages_received = None
                self.hello_messages_sent = None
                self.hello_request_suppressed = None
                self.instance_type = None
                self.missed_acks_allowed = None
                self.neighbor_hello_state = None
                self.source_address_xr = None
                self.source_instance = None
                self.total_communication_lost = None
                self.up_time = Rsvp.HelloInstanceDetails.HelloInstanceDetail.UpTime()
                self.up_time.parent = self


            class UpTime(object):
                """
                Hello up time
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:up-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.HelloInstanceDetails.HelloInstanceDetail.UpTime']['meta_info']


            class CommunicationLostTime(object):
                """
                Time when communication was lost
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:communication-lost-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime']['meta_info']

            @property
            def _common_path(self):
                if self.destination_address is None:
                    raise YPYModelError('Key property destination_address is None')
                if self.source_address is None:
                    raise YPYModelError('Key property source_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:hello-instance-details/Cisco-IOS-XR-ip-rsvp-oper:hello-instance-detail[Cisco-IOS-XR-ip-rsvp-oper:destination-address = ' + str(self.destination_address) + '][Cisco-IOS-XR-ip-rsvp-oper:source-address = ' + str(self.source_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.communication_lost_hello_missed is not None:
                    return True

                if self.communication_lost_interface_down is not None:
                    return True

                if self.communication_lost_neighbor_disabled_hello is not None:
                    return True

                if self.communication_lost_reason is not None:
                    return True

                if self.communication_lost_time is not None and self.communication_lost_time._has_data():
                    return True

                if self.communication_lost_wrong_destination_inst is not None:
                    return True

                if self.communication_lost_wrong_source_inst is not None:
                    return True

                if self.destination_address_xr is not None:
                    return True

                if self.destination_instance is not None:
                    return True

                if self.hello_instance_owner is not None:
                    return True

                if self.hello_interface is not None:
                    return True

                if self.hello_interval is not None:
                    return True

                if self.hello_messages_received is not None:
                    return True

                if self.hello_messages_sent is not None:
                    return True

                if self.hello_request_suppressed is not None:
                    return True

                if self.instance_type is not None:
                    return True

                if self.missed_acks_allowed is not None:
                    return True

                if self.neighbor_hello_state is not None:
                    return True

                if self.source_address_xr is not None:
                    return True

                if self.source_instance is not None:
                    return True

                if self.total_communication_lost is not None:
                    return True

                if self.up_time is not None and self.up_time._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.HelloInstanceDetails.HelloInstanceDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:hello-instance-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.hello_instance_detail is not None:
                for child_ref in self.hello_instance_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.HelloInstanceDetails']['meta_info']


    class GlobalNeighborDetails(object):
        """
        Table of detailed info about global neighbors
        
        .. attribute:: global_neighbor_detail
        
        	Detail info for a single global neighbor
        	**type**\: list of    :py:class:`GlobalNeighborDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.global_neighbor_detail = YList()
            self.global_neighbor_detail.parent = self
            self.global_neighbor_detail.name = 'global_neighbor_detail'


        class GlobalNeighborDetail(object):
            """
            Detail info for a single global neighbor
            
            .. attribute:: neighbor_address  <key>
            
            	Address of global neighbor
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: global_neighbor_flags
            
            	Global Neighbor Flags
            	**type**\:   :py:class:`GlobalNeighborFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags>`
            
            .. attribute:: hello_interval
            
            	Hello Interval (milliseconds)
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: interface_neighbor
            
            	Interface Neighbor List
            	**type**\:  list of str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: is_gr_enabled
            
            	Is GR enabled
            	**type**\:  bool
            
            .. attribute:: is_recovery_timer_running
            
            	Is RSVP recovery timer running
            	**type**\:  bool
            
            .. attribute:: is_restart_timer_running
            
            	Is GR restart timer running
            	**type**\:  bool
            
            .. attribute:: local_node_address
            
            	Local node address
            	**type**\:  list of str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: lost_communication_reason
            
            	Reason why communication was lost
            	**type**\:  list of   :py:class:`RsvpMgmtHelloDownReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloDownReasonEnum>`
            
            .. attribute:: lost_communication_time
            
            	Time when communication was lost
            	**type**\: list of    :py:class:`LostCommunicationTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.LostCommunicationTime>`
            
            .. attribute:: lost_communication_total
            
            	Total number of times communication got lost
            	**type**\:  list of int
            
            	**range:** 0..65535
            
            .. attribute:: missed_hellos
            
            	Hello missed count
            	**type**\:  int
            
            	**range:** 0..255
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor's hello state
            	**type**\:  list of   :py:class:`RsvpMgmtHelloStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloStateEnum>`
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: pending_states
            
            	Number of pending states for this neighbor
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: recovery_time
            
            	GR Recovery Time (milliseconds)
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: recovery_time_left
            
            	How much recovery timer remains
            	**type**\:   :py:class:`RecoveryTimeLeft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft>`
            
            .. attribute:: recovery_timer_exp_time
            
            	Time at which recovery timer will expire
            	**type**\:   :py:class:`RecoveryTimerExpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime>`
            
            .. attribute:: restart_state
            
            	Current restart state
            	**type**\:   :py:class:`RsvpMgmtRestartStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRestartStateEnum>`
            
            .. attribute:: restart_time
            
            	GR Restart Time (milliseconds)
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: restart_time_left
            
            	How much restart time remains
            	**type**\:   :py:class:`RestartTimeLeft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft>`
            
            .. attribute:: restart_timer_expiry_time
            
            	When will restart timer expire
            	**type**\:   :py:class:`RestartTimerExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime>`
            
            .. attribute:: up_time
            
            	Hello up time
            	**type**\: list of    :py:class:`UpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.UpTime>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.neighbor_address = None
                self.global_neighbor_flags = Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags()
                self.global_neighbor_flags.parent = self
                self.hello_interval = None
                self.interface_neighbor = YLeafList()
                self.interface_neighbor.parent = self
                self.interface_neighbor.name = 'interface_neighbor'
                self.is_gr_enabled = None
                self.is_recovery_timer_running = None
                self.is_restart_timer_running = None
                self.local_node_address = YLeafList()
                self.local_node_address.parent = self
                self.local_node_address.name = 'local_node_address'
                self.lost_communication_reason = YLeafList()
                self.lost_communication_reason.parent = self
                self.lost_communication_reason.name = 'lost_communication_reason'
                self.lost_communication_time = YList()
                self.lost_communication_time.parent = self
                self.lost_communication_time.name = 'lost_communication_time'
                self.lost_communication_total = YLeafList()
                self.lost_communication_total.parent = self
                self.lost_communication_total.name = 'lost_communication_total'
                self.missed_hellos = None
                self.neighbor_hello_state = YLeafList()
                self.neighbor_hello_state.parent = self
                self.neighbor_hello_state.name = 'neighbor_hello_state'
                self.node_address = None
                self.pending_states = None
                self.recovery_time = None
                self.recovery_time_left = Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft()
                self.recovery_time_left.parent = self
                self.recovery_timer_exp_time = Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime()
                self.recovery_timer_exp_time.parent = self
                self.restart_state = None
                self.restart_time = None
                self.restart_time_left = Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft()
                self.restart_time_left.parent = self
                self.restart_timer_expiry_time = Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime()
                self.restart_timer_expiry_time.parent = self
                self.up_time = YList()
                self.up_time.parent = self
                self.up_time.name = 'up_time'


            class GlobalNeighborFlags(object):
                """
                Global Neighbor Flags
                
                .. attribute:: is_application_mpls
                
                	MPLS Application
                	**type**\:  bool
                
                .. attribute:: is_application_ouni
                
                	OUNI Application
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_application_mpls = None
                    self.is_application_ouni = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_application_mpls is not None:
                        return True

                    if self.is_application_ouni is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags']['meta_info']


            class RestartTimeLeft(object):
                """
                How much restart time remains
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:restart-time-left'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft']['meta_info']


            class RestartTimerExpiryTime(object):
                """
                When will restart timer expire
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:restart-timer-expiry-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime']['meta_info']


            class RecoveryTimeLeft(object):
                """
                How much recovery timer remains
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:recovery-time-left'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft']['meta_info']


            class RecoveryTimerExpTime(object):
                """
                Time at which recovery timer will expire
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:recovery-timer-exp-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime']['meta_info']


            class UpTime(object):
                """
                Hello up time
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:up-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.UpTime']['meta_info']


            class LostCommunicationTime(object):
                """
                Time when communication was lost
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:lost-communication-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.LostCommunicationTime']['meta_info']

            @property
            def _common_path(self):
                if self.neighbor_address is None:
                    raise YPYModelError('Key property neighbor_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-details/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-detail[Cisco-IOS-XR-ip-rsvp-oper:neighbor-address = ' + str(self.neighbor_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.neighbor_address is not None:
                    return True

                if self.global_neighbor_flags is not None and self.global_neighbor_flags._has_data():
                    return True

                if self.hello_interval is not None:
                    return True

                if self.interface_neighbor is not None:
                    for child in self.interface_neighbor:
                        if child is not None:
                            return True

                if self.is_gr_enabled is not None:
                    return True

                if self.is_recovery_timer_running is not None:
                    return True

                if self.is_restart_timer_running is not None:
                    return True

                if self.local_node_address is not None:
                    for child in self.local_node_address:
                        if child is not None:
                            return True

                if self.lost_communication_reason is not None:
                    for child in self.lost_communication_reason:
                        if child is not None:
                            return True

                if self.lost_communication_time is not None:
                    for child_ref in self.lost_communication_time:
                        if child_ref._has_data():
                            return True

                if self.lost_communication_total is not None:
                    for child in self.lost_communication_total:
                        if child is not None:
                            return True

                if self.missed_hellos is not None:
                    return True

                if self.neighbor_hello_state is not None:
                    for child in self.neighbor_hello_state:
                        if child is not None:
                            return True

                if self.node_address is not None:
                    return True

                if self.pending_states is not None:
                    return True

                if self.recovery_time is not None:
                    return True

                if self.recovery_time_left is not None and self.recovery_time_left._has_data():
                    return True

                if self.recovery_timer_exp_time is not None and self.recovery_timer_exp_time._has_data():
                    return True

                if self.restart_state is not None:
                    return True

                if self.restart_time is not None:
                    return True

                if self.restart_time_left is not None and self.restart_time_left._has_data():
                    return True

                if self.restart_timer_expiry_time is not None and self.restart_timer_expiry_time._has_data():
                    return True

                if self.up_time is not None:
                    for child_ref in self.up_time:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.GlobalNeighborDetails.GlobalNeighborDetail']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-details'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.global_neighbor_detail is not None:
                for child_ref in self.global_neighbor_detail:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.GlobalNeighborDetails']['meta_info']


    class PsbBriefs(object):
        """
        Table of brief info about path state blocks
        
        .. attribute:: psb_brief
        
        	Brief info for a single path state block
        	**type**\: list of    :py:class:`PsbBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.psb_brief = YList()
            self.psb_brief.parent = self
            self.psb_brief.name = 'psb_brief'


        class PsbBrief(object):
            """
            Brief info for a single path state block
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: generic_traffic_spec
            
            	RSVP Generic Traffic Spec Info
            	**type**\:   :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec>`
            
            .. attribute:: input_interface
            
            	Path Input Interface
            	**type**\:  str
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:   :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.S2LSubLsp>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:   :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Session>`
            
            .. attribute:: session_attribute
            
            	RSVP Session Attribute
            	**type**\:   :py:class:`SessionAttribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.SessionAttribute>`
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:   :py:class:`RsvpSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSessionEnum>`
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: template
            
            	RSVP Template
            	**type**\:   :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Template>`
            
            .. attribute:: traffic_spec
            
            	RSVP Traffic Spec Info
            	**type**\:   :py:class:`TrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.TrafficSpec>`
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\:  str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.destination_address = None
                self.destination_port = None
                self.extended_tunnel_id = None
                self.generic_traffic_spec = Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec()
                self.generic_traffic_spec.parent = self
                self.input_interface = None
                self.p2mp_id = None
                self.protocol = None
                self.s2l_sub_lsp = Rsvp.PsbBriefs.PsbBrief.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self.session = Rsvp.PsbBriefs.PsbBrief.Session()
                self.session.parent = self
                self.session_attribute = Rsvp.PsbBriefs.PsbBrief.SessionAttribute()
                self.session_attribute.parent = self
                self.session_type = None
                self.source_address = None
                self.source_port = None
                self.sub_group_id = None
                self.sub_group_origin = None
                self.template = Rsvp.PsbBriefs.PsbBrief.Template()
                self.template.parent = self
                self.traffic_spec = Rsvp.PsbBriefs.PsbBrief.TrafficSpec()
                self.traffic_spec.parent = self
                self.vrf_name = None


            class Session(object):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:   :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_session = Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self


                class RsvpSession(object):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:   :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:   :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:   :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:   :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:   :py:class:`RsvpMgmtSessionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSessionEnum>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.ipv4 = Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self.ipv4_lsp_session = Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self.ipv4_p2mp_lsp_session = Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self.ipv4_uni_session = Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self.session_type = None


                    class Ipv4(object):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.destination_port = None
                            self.protocol = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.destination_port is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4']['meta_info']


                    class Ipv4LspSession(object):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_tunnel_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_tunnel_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession']['meta_info']


                    class Ipv4UniSession(object):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.destination_address = None
                            self.extended_address = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-uni-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.destination_address is not None:
                                return True

                            if self.extended_address is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession']['meta_info']


                    class Ipv4P2MpLspSession(object):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.extended_tunnel_id = None
                            self.p2mp_id = None
                            self.tunnel_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session/Cisco-IOS-XR-ip-rsvp-oper:ipv4-p2mp-lsp-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.extended_tunnel_id is not None:
                                return True

                            if self.p2mp_id is not None:
                                return True

                            if self.tunnel_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session/Cisco-IOS-XR-ip-rsvp-oper:rsvp-session'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv4_lsp_session is not None and self.ipv4_lsp_session._has_data():
                            return True

                        if self.ipv4_p2mp_lsp_session is not None and self.ipv4_p2mp_lsp_session._has_data():
                            return True

                        if self.ipv4_uni_session is not None and self.ipv4_uni_session._has_data():
                            return True

                        if self.session_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_session is not None and self.rsvp_session._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.Session']['meta_info']


            class S2LSubLsp(object):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.s2l_destination_address = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:s2l-sub-lsp'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.s2l_destination_address is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.S2LSubLsp']['meta_info']


            class Template(object):
                """
                RSVP Template
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:   :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.rsvp_filter = Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter()
                    self.rsvp_filter.parent = self


                class RsvpFilter(object):
                    """
                    RSVP Filter
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:   :py:class:`RsvpMgmtFilterEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilterEnum>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:   :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:   :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.filter_type = None
                        self.p2mp_ipv4_session = Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self.udp_ipv4_session = Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self


                    class UdpIpv4Session(object):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.source_address = None
                            self.source_port = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:udp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session']['meta_info']


                    class P2MpIpv4Session(object):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            self.parent = None
                            self.p2mp_sub_group_origin = None
                            self.source_address = None
                            self.source_port = None
                            self.sub_group_id = None

                        @property
                        def _common_path(self):

                            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter/Cisco-IOS-XR-ip-rsvp-oper:p2mp-ipv4-session'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return False

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.p2mp_sub_group_origin is not None:
                                return True

                            if self.source_address is not None:
                                return True

                            if self.source_port is not None:
                                return True

                            if self.sub_group_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                            return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session']['meta_info']

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:template/Cisco-IOS-XR-ip-rsvp-oper:rsvp-filter'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.filter_type is not None:
                            return True

                        if self.p2mp_ipv4_session is not None and self.p2mp_ipv4_session._has_data():
                            return True

                        if self.udp_ipv4_session is not None and self.udp_ipv4_session._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:template'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.rsvp_filter is not None and self.rsvp_filter._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.Template']['meta_info']


            class SessionAttribute(object):
                """
                RSVP Session Attribute
                
                .. attribute:: reservation_priority
                
                	Reservation Priority
                	**type**\:  int
                
                	**range:** 0..255
                
                .. attribute:: sess_attribute_flags
                
                	Session Attributes
                	**type**\:   :py:class:`SessAttributeFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags>`
                
                .. attribute:: setup_priority
                
                	Setup Priority
                	**type**\:  int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.reservation_priority = None
                    self.sess_attribute_flags = Rsvp.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags()
                    self.sess_attribute_flags.parent = self
                    self.setup_priority = None


                class SessAttributeFlags(object):
                    """
                    Session Attributes
                    
                    .. attribute:: is_bandwidth_protect
                    
                    	Bandwidth Protection
                    	**type**\:  bool
                    
                    .. attribute:: is_local_protect
                    
                    	Local Protection
                    	**type**\:  bool
                    
                    .. attribute:: is_node_protect
                    
                    	Node Protection
                    	**type**\:  bool
                    
                    .. attribute:: is_record_labels
                    
                    	Records Labels
                    	**type**\:  bool
                    
                    .. attribute:: is_shared_explicit_requested
                    
                    	Shared Explicit Requested
                    	**type**\:  bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.is_bandwidth_protect = None
                        self.is_local_protect = None
                        self.is_node_protect = None
                        self.is_record_labels = None
                        self.is_shared_explicit_requested = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session-attribute/Cisco-IOS-XR-ip-rsvp-oper:sess-attribute-flags'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.is_bandwidth_protect is not None:
                            return True

                        if self.is_local_protect is not None:
                            return True

                        if self.is_node_protect is not None:
                            return True

                        if self.is_record_labels is not None:
                            return True

                        if self.is_shared_explicit_requested is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:session-attribute'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.reservation_priority is not None:
                        return True

                    if self.sess_attribute_flags is not None and self.sess_attribute_flags._has_data():
                        return True

                    if self.setup_priority is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.SessionAttribute']['meta_info']


            class TrafficSpec(object):
                """
                RSVP Traffic Spec Info
                
                .. attribute:: traffic_average_rate
                
                	Traffic Average Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_max_burst
                
                	Traffic Maximum Burst
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: traffic_max_unit
                
                	Traffic Maximum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_min_unit
                
                	Traffic Minimum Unit
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_peak_rate
                
                	Traffic Peak Rate in bytes per second
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.traffic_average_rate = None
                    self.traffic_max_burst = None
                    self.traffic_max_unit = None
                    self.traffic_min_unit = None
                    self.traffic_peak_rate = None

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:traffic-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.traffic_average_rate is not None:
                        return True

                    if self.traffic_max_burst is not None:
                        return True

                    if self.traffic_max_unit is not None:
                        return True

                    if self.traffic_min_unit is not None:
                        return True

                    if self.traffic_peak_rate is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.TrafficSpec']['meta_info']


            class GenericTrafficSpec(object):
                """
                RSVP Generic Traffic Spec Info
                
                .. attribute:: g709otn_tspec
                
                	G709 OTN Sender Tspec
                	**type**\:   :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec>`
                
                .. attribute:: intsrv_tspec
                
                	Integrated Services Sender Tspec
                	**type**\:   :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec>`
                
                .. attribute:: tspec_type
                
                	TspecType
                	**type**\:   :py:class:`RsvpMgmtTspecEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspecEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.g709otn_tspec = Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec()
                    self.g709otn_tspec.parent = self
                    self.intsrv_tspec = Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec()
                    self.intsrv_tspec.parent = self
                    self.tspec_type = None


                class G709OtnTspec(object):
                    """
                    G709 OTN Sender Tspec
                    
                    .. attribute:: traffic_bit_rate
                    
                    	G709 OTN Traffic Bit Rate
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_multiplier
                    
                    	G709 OTN Traffic Multiplier
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_nvc
                    
                    	G709 OTN Traffic NVC
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_signal_type
                    
                    	G709 OTN Traffic Signal Type (Refer G709 v3)
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.traffic_bit_rate = None
                        self.traffic_multiplier = None
                        self.traffic_nvc = None
                        self.traffic_signal_type = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:g709otn-tspec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.traffic_bit_rate is not None:
                            return True

                        if self.traffic_multiplier is not None:
                            return True

                        if self.traffic_nvc is not None:
                            return True

                        if self.traffic_signal_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec']['meta_info']


                class IntsrvTspec(object):
                    """
                    Integrated Services Sender Tspec
                    
                    .. attribute:: traffic_average_rate
                    
                    	Traffic Average Rate in bytes per second
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_max_burst
                    
                    	Traffic Maximum Burst
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_max_unit
                    
                    	Traffic Maximum Unit
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_min_unit
                    
                    	Traffic Minimum Unit
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_peak_rate
                    
                    	Traffic Peak Rate in bytes per second
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        self.parent = None
                        self.traffic_average_rate = None
                        self.traffic_max_burst = None
                        self.traffic_max_unit = None
                        self.traffic_min_unit = None
                        self.traffic_peak_rate = None

                    @property
                    def _common_path(self):

                        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec/Cisco-IOS-XR-ip-rsvp-oper:intsrv-tspec'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return False

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.traffic_average_rate is not None:
                            return True

                        if self.traffic_max_burst is not None:
                            return True

                        if self.traffic_max_unit is not None:
                            return True

                        if self.traffic_min_unit is not None:
                            return True

                        if self.traffic_peak_rate is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                        return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec']['meta_info']

                @property
                def _common_path(self):

                    return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief/Cisco-IOS-XR-ip-rsvp-oper:generic-traffic-spec'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.g709otn_tspec is not None and self.g709otn_tspec._has_data():
                        return True

                    if self.intsrv_tspec is not None and self.intsrv_tspec._has_data():
                        return True

                    if self.tspec_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec']['meta_info']

            @property
            def _common_path(self):

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs/Cisco-IOS-XR-ip-rsvp-oper:psb-brief'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.destination_address is not None:
                    return True

                if self.destination_port is not None:
                    return True

                if self.extended_tunnel_id is not None:
                    return True

                if self.generic_traffic_spec is not None and self.generic_traffic_spec._has_data():
                    return True

                if self.input_interface is not None:
                    return True

                if self.p2mp_id is not None:
                    return True

                if self.protocol is not None:
                    return True

                if self.s2l_sub_lsp is not None and self.s2l_sub_lsp._has_data():
                    return True

                if self.session is not None and self.session._has_data():
                    return True

                if self.session_attribute is not None and self.session_attribute._has_data():
                    return True

                if self.session_type is not None:
                    return True

                if self.source_address is not None:
                    return True

                if self.source_port is not None:
                    return True

                if self.sub_group_id is not None:
                    return True

                if self.sub_group_origin is not None:
                    return True

                if self.template is not None and self.template._has_data():
                    return True

                if self.traffic_spec is not None and self.traffic_spec._has_data():
                    return True

                if self.vrf_name is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.PsbBriefs.PsbBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:psb-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.psb_brief is not None:
                for child_ref in self.psb_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.PsbBriefs']['meta_info']


    class GlobalNeighborBriefs(object):
        """
        Table of brief info about global neighbors
        
        .. attribute:: global_neighbor_brief
        
        	Brief info for a single global neighbor
        	**type**\: list of    :py:class:`GlobalNeighborBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2015-11-09'

        def __init__(self):
            self.parent = None
            self.global_neighbor_brief = YList()
            self.global_neighbor_brief.parent = self
            self.global_neighbor_brief.name = 'global_neighbor_brief'


        class GlobalNeighborBrief(object):
            """
            Brief info for a single global neighbor
            
            .. attribute:: neighbor_address  <key>
            
            	Address of global neighbor
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: global_neighbor_flags
            
            	Global Neighbor Flags
            	**type**\:   :py:class:`GlobalNeighborFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags>`
            
            .. attribute:: is_gr_enabled
            
            	Is GR enabled
            	**type**\:  bool
            
            .. attribute:: local_node_address
            
            	Local node address
            	**type**\:  list of str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: lost_communication_reason
            
            	Reason why communication was lost
            	**type**\:  list of   :py:class:`RsvpMgmtHelloDownReasonEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloDownReasonEnum>`
            
            .. attribute:: lost_communication_time
            
            	Time when communication was lost
            	**type**\: list of    :py:class:`LostCommunicationTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.LostCommunicationTime>`
            
            .. attribute:: lost_communication_total
            
            	Total number of times communication got lost
            	**type**\:  list of int
            
            	**range:** 0..65535
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor Hello state
            	**type**\:  list of   :py:class:`RsvpMgmtHelloStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloStateEnum>`
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: restart_state
            
            	Restart state
            	**type**\:   :py:class:`RsvpMgmtRestartStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRestartStateEnum>`
            
            .. attribute:: up_time
            
            	Time hellos have been up
            	**type**\: list of    :py:class:`UpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.UpTime>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2015-11-09'

            def __init__(self):
                self.parent = None
                self.neighbor_address = None
                self.global_neighbor_flags = Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags()
                self.global_neighbor_flags.parent = self
                self.is_gr_enabled = None
                self.local_node_address = YLeafList()
                self.local_node_address.parent = self
                self.local_node_address.name = 'local_node_address'
                self.lost_communication_reason = YLeafList()
                self.lost_communication_reason.parent = self
                self.lost_communication_reason.name = 'lost_communication_reason'
                self.lost_communication_time = YList()
                self.lost_communication_time.parent = self
                self.lost_communication_time.name = 'lost_communication_time'
                self.lost_communication_total = YLeafList()
                self.lost_communication_total.parent = self
                self.lost_communication_total.name = 'lost_communication_total'
                self.neighbor_hello_state = YLeafList()
                self.neighbor_hello_state.parent = self
                self.neighbor_hello_state.name = 'neighbor_hello_state'
                self.node_address = None
                self.restart_state = None
                self.up_time = YList()
                self.up_time.parent = self
                self.up_time.name = 'up_time'


            class GlobalNeighborFlags(object):
                """
                Global Neighbor Flags
                
                .. attribute:: is_application_mpls
                
                	MPLS Application
                	**type**\:  bool
                
                .. attribute:: is_application_ouni
                
                	OUNI Application
                	**type**\:  bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.is_application_mpls = None
                    self.is_application_ouni = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-flags'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.is_application_mpls is not None:
                        return True

                    if self.is_application_ouni is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags']['meta_info']


            class UpTime(object):
                """
                Time hellos have been up
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:up-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.UpTime']['meta_info']


            class LostCommunicationTime(object):
                """
                Time when communication was lost
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    self.parent = None
                    self.nanoseconds = None
                    self.seconds = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/Cisco-IOS-XR-ip-rsvp-oper:lost-communication-time'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return False

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nanoseconds is not None:
                        return True

                    if self.seconds is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                    return meta._meta_table['Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.LostCommunicationTime']['meta_info']

            @property
            def _common_path(self):
                if self.neighbor_address is None:
                    raise YPYModelError('Key property neighbor_address is None')

                return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-briefs/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-brief[Cisco-IOS-XR-ip-rsvp-oper:neighbor-address = ' + str(self.neighbor_address) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return False

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.neighbor_address is not None:
                    return True

                if self.global_neighbor_flags is not None and self.global_neighbor_flags._has_data():
                    return True

                if self.is_gr_enabled is not None:
                    return True

                if self.local_node_address is not None:
                    for child in self.local_node_address:
                        if child is not None:
                            return True

                if self.lost_communication_reason is not None:
                    for child in self.lost_communication_reason:
                        if child is not None:
                            return True

                if self.lost_communication_time is not None:
                    for child_ref in self.lost_communication_time:
                        if child_ref._has_data():
                            return True

                if self.lost_communication_total is not None:
                    for child in self.lost_communication_total:
                        if child is not None:
                            return True

                if self.neighbor_hello_state is not None:
                    for child in self.neighbor_hello_state:
                        if child is not None:
                            return True

                if self.node_address is not None:
                    return True

                if self.restart_state is not None:
                    return True

                if self.up_time is not None:
                    for child_ref in self.up_time:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
                return meta._meta_table['Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief']['meta_info']

        @property
        def _common_path(self):

            return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp/Cisco-IOS-XR-ip-rsvp-oper:global-neighbor-briefs'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return False

        def _has_data(self):
            if not self.is_config():
                return False
            if self.global_neighbor_brief is not None:
                for child_ref in self.global_neighbor_brief:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
            return meta._meta_table['Rsvp.GlobalNeighborBriefs']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ip-rsvp-oper:rsvp'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return False

    def _has_data(self):
        if not self.is_config():
            return False
        if self.authentication_briefs is not None and self.authentication_briefs._has_data():
            return True

        if self.authentication_details is not None and self.authentication_details._has_data():
            return True

        if self.bw_pool_info is not None and self.bw_pool_info._has_data():
            return True

        if self.controller_briefs is not None and self.controller_briefs._has_data():
            return True

        if self.controller_detaileds is not None and self.controller_detaileds._has_data():
            return True

        if self.controller_summaries is not None and self.controller_summaries._has_data():
            return True

        if self.counters is not None and self.counters._has_data():
            return True

        if self.frr_summary is not None and self.frr_summary._has_data():
            return True

        if self.frrs is not None and self.frrs._has_data():
            return True

        if self.global_neighbor_briefs is not None and self.global_neighbor_briefs._has_data():
            return True

        if self.global_neighbor_details is not None and self.global_neighbor_details._has_data():
            return True

        if self.graceful_restart is not None and self.graceful_restart._has_data():
            return True

        if self.hello_instance_briefs is not None and self.hello_instance_briefs._has_data():
            return True

        if self.hello_instance_details is not None and self.hello_instance_details._has_data():
            return True

        if self.hello_interface_instance_briefs is not None and self.hello_interface_instance_briefs._has_data():
            return True

        if self.hello_interface_instance_details is not None and self.hello_interface_instance_details._has_data():
            return True

        if self.interface_briefs is not None and self.interface_briefs._has_data():
            return True

        if self.interface_detaileds is not None and self.interface_detaileds._has_data():
            return True

        if self.interface_neighbor_briefs is not None and self.interface_neighbor_briefs._has_data():
            return True

        if self.interface_neighbor_details is not None and self.interface_neighbor_details._has_data():
            return True

        if self.interface_summaries is not None and self.interface_summaries._has_data():
            return True

        if self.issu is not None and self.issu._has_data():
            return True

        if self.nsr is not None and self.nsr._has_data():
            return True

        if self.open_config is not None and self.open_config._has_data():
            return True

        if self.psb_briefs is not None and self.psb_briefs._has_data():
            return True

        if self.psb_detaileds is not None and self.psb_detaileds._has_data():
            return True

        if self.pxsb_details is not None and self.pxsb_details._has_data():
            return True

        if self.request_briefs is not None and self.request_briefs._has_data():
            return True

        if self.request_details is not None and self.request_details._has_data():
            return True

        if self.rsb_briefs is not None and self.rsb_briefs._has_data():
            return True

        if self.rsb_detaileds is not None and self.rsb_detaileds._has_data():
            return True

        if self.rxsb_details is not None and self.rxsb_details._has_data():
            return True

        if self.session_briefs is not None and self.session_briefs._has_data():
            return True

        if self.session_detaileds is not None and self.session_detaileds._has_data():
            return True

        if self.summary is not None and self.summary._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ip_rsvp_oper as meta
        return meta._meta_table['Rsvp']['meta_info']


