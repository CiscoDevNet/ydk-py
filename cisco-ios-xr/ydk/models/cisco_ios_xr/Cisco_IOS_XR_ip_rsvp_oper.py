""" Cisco_IOS_XR_ip_rsvp_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ip\-rsvp package operational data.

This module contains definitions
for the following management objects\:
  rsvp\-standby\: RSVP operational data for standby role
  rsvp\: rsvp

Copyright (c) 2013\-2017 by Cisco Systems, Inc.
All rights reserved.

"""
from collections import OrderedDict

from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class IgpteLibBwModel(Enum):
    """
    IgpteLibBwModel (Enum Class)

    Bandwidth model

    .. data:: rdm = 0

    	Russian Dolls Model

    .. data:: mam = 1

    	Maximum Allocation Model

    .. data:: not_set = 2

    	No model set

    """

    rdm = Enum.YLeaf(0, "rdm")

    mam = Enum.YLeaf(1, "mam")

    not_set = Enum.YLeaf(2, "not-set")


class RsvpMgmtAssociation(Enum):
    """
    RsvpMgmtAssociation (Enum Class)

    RSVP ASSOCIATION Types

    .. data:: none = 0

    	No ASSOCIATION Object present

    .. data:: ipv4 = 1

    	IPv4 ASSOCIATION Type

    .. data:: ipv6 = 2

    	IPv6 ASSOCIATION Type

    .. data:: extended_ipv4 = 3

    	EXTENDED IPv4 ASSOCIATION Type

    .. data:: extended_ipv6 = 4

    	EXTENDED IPv6 ASSOCIATION Type

    """

    none = Enum.YLeaf(0, "none")

    ipv4 = Enum.YLeaf(1, "ipv4")

    ipv6 = Enum.YLeaf(2, "ipv6")

    extended_ipv4 = Enum.YLeaf(3, "extended-ipv4")

    extended_ipv6 = Enum.YLeaf(4, "extended-ipv6")


class RsvpMgmtAuthChallengeStatus(Enum):
    """
    RsvpMgmtAuthChallengeStatus (Enum Class)

    RSVP Authentication Challenge Status

    .. data:: rsvp_mgmt_auth_cs_not_cfg = 0

    	Not configured

    .. data:: rsvp_mgmt_auth_cs_completed = 1

    	Complete

    .. data:: rsvp_mgmt_auth_cs_in_progress = 2

    	In Progress

    .. data:: rsvp_mgmt_auth_cs_failure = 3

    	Failed

    .. data:: rsvp_mgmt_auth_cs_not_supported = 4

    	Not supported

    """

    rsvp_mgmt_auth_cs_not_cfg = Enum.YLeaf(0, "rsvp-mgmt-auth-cs-not-cfg")

    rsvp_mgmt_auth_cs_completed = Enum.YLeaf(1, "rsvp-mgmt-auth-cs-completed")

    rsvp_mgmt_auth_cs_in_progress = Enum.YLeaf(2, "rsvp-mgmt-auth-cs-in-progress")

    rsvp_mgmt_auth_cs_failure = Enum.YLeaf(3, "rsvp-mgmt-auth-cs-failure")

    rsvp_mgmt_auth_cs_not_supported = Enum.YLeaf(4, "rsvp-mgmt-auth-cs-not-supported")


class RsvpMgmtAuthDirection(Enum):
    """
    RsvpMgmtAuthDirection (Enum Class)

    RSVP Authentication Direction Types

    .. data:: rsvp_mgmt_auth_direction_send = 0

    	Send

    .. data:: rsvp_mgmt_auth_direction_recv = 1

    	Receive

    """

    rsvp_mgmt_auth_direction_send = Enum.YLeaf(0, "rsvp-mgmt-auth-direction-send")

    rsvp_mgmt_auth_direction_recv = Enum.YLeaf(1, "rsvp-mgmt-auth-direction-recv")


class RsvpMgmtAuthKi(Enum):
    """
    RsvpMgmtAuthKi (Enum Class)

    RSVP Authentication KeyInfo Type

    .. data:: rsvp_mgmt_auth_ki_type_none = 0

    	None

    .. data:: rsvp_mgmt_auth_ki_type_global = 1

    	Global

    .. data:: rsvp_mgmt_auth_ki_type_interface = 2

    	Interface

    .. data:: rsvp_mgmt_auth_ki_type_neighbor = 3

    	Neighbor

    """

    rsvp_mgmt_auth_ki_type_none = Enum.YLeaf(0, "rsvp-mgmt-auth-ki-type-none")

    rsvp_mgmt_auth_ki_type_global = Enum.YLeaf(1, "rsvp-mgmt-auth-ki-type-global")

    rsvp_mgmt_auth_ki_type_interface = Enum.YLeaf(2, "rsvp-mgmt-auth-ki-type-interface")

    rsvp_mgmt_auth_ki_type_neighbor = Enum.YLeaf(3, "rsvp-mgmt-auth-ki-type-neighbor")


class RsvpMgmtDsteModes(Enum):
    """
    RsvpMgmtDsteModes (Enum Class)

    RSVP DSTE modes

    .. data:: pre_standard = 1

    	pre standard

    .. data:: standard = 3

    	standard

    """

    pre_standard = Enum.YLeaf(1, "pre-standard")

    standard = Enum.YLeaf(3, "standard")


class RsvpMgmtEroSubobj(Enum):
    """
    RsvpMgmtEroSubobj (Enum Class)

    RSVP ERO Types

    .. data:: rsvp_mgmt_ero_type_ipv4 = 1

    	IPv4 ERO Type

    .. data:: rsvp_mgmt_ero_type_un_num = 4

    	Unnumbered ERO Type

    """

    rsvp_mgmt_ero_type_ipv4 = Enum.YLeaf(1, "rsvp-mgmt-ero-type-ipv4")

    rsvp_mgmt_ero_type_un_num = Enum.YLeaf(4, "rsvp-mgmt-ero-type-un-num")


class RsvpMgmtEroSubobjStatus(Enum):
    """
    RsvpMgmtEroSubobjStatus (Enum Class)

    RSVP ERO Status

    .. data:: rsvp_mgmt_ero_status_not_available = 0

    	ERO is not available in topology

    .. data:: rsvp_mgmt_ero_status_available = 1

    	ERO is available in topology

    .. data:: rsvp_mgmt_ero_status_bw_not_available = 2

    	ERO doesn't have bw available in topology

    """

    rsvp_mgmt_ero_status_not_available = Enum.YLeaf(0, "rsvp-mgmt-ero-status-not-available")

    rsvp_mgmt_ero_status_available = Enum.YLeaf(1, "rsvp-mgmt-ero-status-available")

    rsvp_mgmt_ero_status_bw_not_available = Enum.YLeaf(2, "rsvp-mgmt-ero-status-bw-not-available")


class RsvpMgmtFilter(Enum):
    """
    RsvpMgmtFilter (Enum Class)

    RSVP Filter Types

    .. data:: rsvp_mgmt_filter_type_ipv4 = 1

    	IPv4 FilterSpec Type

    .. data:: rsvp_mgmt_filter_type_p2mp_lsp_ipv4 = 12

    	P2MP LSP IPv4 FilterSpec Type

    """

    rsvp_mgmt_filter_type_ipv4 = Enum.YLeaf(1, "rsvp-mgmt-filter-type-ipv4")

    rsvp_mgmt_filter_type_p2mp_lsp_ipv4 = Enum.YLeaf(12, "rsvp-mgmt-filter-type-p2mp-lsp-ipv4")


class RsvpMgmtFlowSpec(Enum):
    """
    RsvpMgmtFlowSpec (Enum Class)

    RSVP Generic FlowSpec Types

    .. data:: g709otn = 5

    	G709 OTN FlowSpec Type

    """

    g709otn = Enum.YLeaf(5, "g709otn")


class RsvpMgmtFrrStateEnum(Enum):
    """
    RsvpMgmtFrrStateEnum (Enum Class)

    RSVP FRR States

    .. data:: ready_state = 0

    	Ready State

    .. data:: pending_state = 1

    	Pending

    .. data:: active_state = 2

    	Active State

    """

    ready_state = Enum.YLeaf(0, "ready-state")

    pending_state = Enum.YLeaf(1, "pending-state")

    active_state = Enum.YLeaf(2, "active-state")


class RsvpMgmtGenericLabel(Enum):
    """
    RsvpMgmtGenericLabel (Enum Class)

    RSVP Generic Label Types

    .. data:: rsvp_mgmt_label_type_gmpls = 2

    	Generalized Label Type

    """

    rsvp_mgmt_label_type_gmpls = Enum.YLeaf(2, "rsvp-mgmt-label-type-gmpls")


class RsvpMgmtGrApp(Enum):
    """
    RsvpMgmtGrApp (Enum Class)

    RSVP Graceful Restart application type

    .. data:: ouni = 0

    	Application is OUNI

    .. data:: gmpls = 1

    	Application is GMPLS

    """

    ouni = Enum.YLeaf(0, "ouni")

    gmpls = Enum.YLeaf(1, "gmpls")


class RsvpMgmtHelloDownReason(Enum):
    """
    RsvpMgmtHelloDownReason (Enum Class)

    Reasons why RSVP Hellos went down

    .. data:: not_applicable = 0

    	Not applicable. This means RSVP Hellos are up

    .. data:: wrong_destination_instance = 1

    	Incorrect destination instance in received

    	Hellos

    .. data:: wrong_source_instance = 2

    	Incorrect source instance in received Hellos

    .. data:: hello_missed = 3

    	Hellos not being received

    .. data:: interface_down = 4

    	Interface went down

    .. data:: neighbor_disabled_hello = 5

    	Neighbor disabled Hellos

    .. data:: control_channel_down = 6

    	Control channel went down

    """

    not_applicable = Enum.YLeaf(0, "not-applicable")

    wrong_destination_instance = Enum.YLeaf(1, "wrong-destination-instance")

    wrong_source_instance = Enum.YLeaf(2, "wrong-source-instance")

    hello_missed = Enum.YLeaf(3, "hello-missed")

    interface_down = Enum.YLeaf(4, "interface-down")

    neighbor_disabled_hello = Enum.YLeaf(5, "neighbor-disabled-hello")

    control_channel_down = Enum.YLeaf(6, "control-channel-down")


class RsvpMgmtHelloInstance(Enum):
    """
    RsvpMgmtHelloInstance (Enum Class)

    RSVP Hello instance types

    .. data:: active = 0

    	Hello requests and ACKs are sent

    .. data:: passive = 1

    	Hello ACKs only are sent

    """

    active = Enum.YLeaf(0, "active")

    passive = Enum.YLeaf(1, "passive")


class RsvpMgmtHelloInstanceOwner(Enum):
    """
    RsvpMgmtHelloInstanceOwner (Enum Class)

    RSVP Hello instance owner

    .. data:: mpls_graceful_restart = 0

    	MPLS Graceful Restart

    .. data:: mpls_ouni = 1

    	MPLS OUNI

    """

    mpls_graceful_restart = Enum.YLeaf(0, "mpls-graceful-restart")

    mpls_ouni = Enum.YLeaf(1, "mpls-ouni")


class RsvpMgmtHelloState(Enum):
    """
    RsvpMgmtHelloState (Enum Class)

    RSVP Hello instance states

    .. data:: hello_state_init = 0

    	No Hello messages ever received from neighbor

    .. data:: hello_state_up = 1

    	Receiving expected Hello messages from neighbor

    .. data:: hello_state_down = 2

    	Stopped receiving expected Hello messages from

    	neighbor

    """

    hello_state_init = Enum.YLeaf(0, "hello-state-init")

    hello_state_up = Enum.YLeaf(1, "hello-state-up")

    hello_state_down = Enum.YLeaf(2, "hello-state-down")


class RsvpMgmtQosServiceEnum(Enum):
    """
    RsvpMgmtQosServiceEnum (Enum Class)

    QOS Types

    .. data:: rsvp_mgmt_qos_unknown = 0

    	QOS Unknown

    .. data:: rsvp_mgmt_qos_guaranteed = 3

    	QOS Guaranteed

    .. data:: rsvp_mgmt_qos_controlled_load = 5

    	QOS Controlled Load

    .. data:: rsvp_mgmt_qos_qualitative = 6

    	QOS Qualitative

    """

    rsvp_mgmt_qos_unknown = Enum.YLeaf(0, "rsvp-mgmt-qos-unknown")

    rsvp_mgmt_qos_guaranteed = Enum.YLeaf(3, "rsvp-mgmt-qos-guaranteed")

    rsvp_mgmt_qos_controlled_load = Enum.YLeaf(5, "rsvp-mgmt-qos-controlled-load")

    rsvp_mgmt_qos_qualitative = Enum.YLeaf(6, "rsvp-mgmt-qos-qualitative")


class RsvpMgmtReservationTypeEnum(Enum):
    """
    RsvpMgmtReservationTypeEnum (Enum Class)

    RSVP Reservation Types

    .. data:: rsvp_mgmt_ff_option = 10

    	Single Reservation

    .. data:: rsvp_mgmt_wf_option = 17

    	Shared Reservation, Unlimited Scope

    .. data:: rsvp_mgmt_se_option = 18

    	Shared Reservation, Limited Scope

    """

    rsvp_mgmt_ff_option = Enum.YLeaf(10, "rsvp-mgmt-ff-option")

    rsvp_mgmt_wf_option = Enum.YLeaf(17, "rsvp-mgmt-wf-option")

    rsvp_mgmt_se_option = Enum.YLeaf(18, "rsvp-mgmt-se-option")


class RsvpMgmtRestartState(Enum):
    """
    RsvpMgmtRestartState (Enum Class)

    RSVP GR (Graceful Restart) Restart states

    .. data:: done = 0

    	Restart is done

    .. data:: recovery = 1

    	Neighbor is in recovery

    .. data:: abort = 2

    	Neighbor recovery aborted

    """

    done = Enum.YLeaf(0, "done")

    recovery = Enum.YLeaf(1, "recovery")

    abort = Enum.YLeaf(2, "abort")


class RsvpMgmtRroSubobj(Enum):
    """
    RsvpMgmtRroSubobj (Enum Class)

    RSVP RRO Types

    .. data:: ipv4rro_type = 1

    	IPv4 RRO Type

    .. data:: label_rro_type = 3

    	Label RRO Type

    .. data:: unnumbered_rro_type = 4

    	Unnumbered RRO Type

    .. data:: srlg_rro_type = 34

    	SRLG RRO Type

    """

    ipv4rro_type = Enum.YLeaf(1, "ipv4rro-type")

    label_rro_type = Enum.YLeaf(3, "label-rro-type")

    unnumbered_rro_type = Enum.YLeaf(4, "unnumbered-rro-type")

    srlg_rro_type = Enum.YLeaf(34, "srlg-rro-type")


class RsvpMgmtSession(Enum):
    """
    RsvpMgmtSession (Enum Class)

    RSVP Session Types

    .. data:: rsvp_mgmt_session_type_udp_ipv4 = 1

    	UDP IPv4 Session Type

    .. data:: rsvp_mgmt_session_type_lsp_ipv4 = 7

    	LSP IPv4 Session Type

    .. data:: rsvp_mgmt_session_type_uni_ipv4 = 9

    	UNI IPv4 Session Type

    .. data:: rsvp_mgmt_session_type_p2mp_lsp_ipv4 = 13

    	P2MP LSP IPv4 Session Type

    """

    rsvp_mgmt_session_type_udp_ipv4 = Enum.YLeaf(1, "rsvp-mgmt-session-type-udp-ipv4")

    rsvp_mgmt_session_type_lsp_ipv4 = Enum.YLeaf(7, "rsvp-mgmt-session-type-lsp-ipv4")

    rsvp_mgmt_session_type_uni_ipv4 = Enum.YLeaf(9, "rsvp-mgmt-session-type-uni-ipv4")

    rsvp_mgmt_session_type_p2mp_lsp_ipv4 = Enum.YLeaf(13, "rsvp-mgmt-session-type-p2mp-lsp-ipv4")


class RsvpMgmtTspec(Enum):
    """
    RsvpMgmtTspec (Enum Class)

    RSVP Generic Sender Tspec Types

    .. data:: g709otn = 5

    	G709 OTN Sender Tspec Type

    .. data:: intsrv = 12

    	Int-Serv Sender Tspec Type

    """

    g709otn = Enum.YLeaf(5, "g709otn")

    intsrv = Enum.YLeaf(12, "intsrv")


class RsvpMode(Enum):
    """
    RsvpMode (Enum Class)

    Rsvp mode

    .. data:: send = 0

    	Send

    .. data:: receive = 1

    	Receive

    """

    send = Enum.YLeaf(0, "send")

    receive = Enum.YLeaf(1, "receive")


class RsvpProcNsrNotReadyReason(Enum):
    """
    RsvpProcNsrNotReadyReason (Enum Class)

    Rsvp proc nsr not ready reason

    .. data:: collab_time_out = 0

    	Collab connection time out

    .. data:: collab_conntection_idt = 1

    	Collab connection down or IDT not done

    .. data:: nsr_peer_not_connected = 2

    	NSR peer not connected

    .. data:: nsr_peer_not_in_sync = 3

    	NSR peer not in sync

    """

    collab_time_out = Enum.YLeaf(0, "collab-time-out")

    collab_conntection_idt = Enum.YLeaf(1, "collab-conntection-idt")

    nsr_peer_not_connected = Enum.YLeaf(2, "nsr-peer-not-connected")

    nsr_peer_not_in_sync = Enum.YLeaf(3, "nsr-peer-not-in-sync")


class RsvpProcRole(Enum):
    """
    RsvpProcRole (Enum Class)

    RSVP Process Role

    .. data:: unknown = 0

    	Unknown

    .. data:: v1_active = 1

    	V1 Active

    .. data:: v1_standby = 2

    	V1 Standby

    .. data:: v2_active = 3

    	V2 Active

    .. data:: v2_standby = 4

    	V2 Standby

    .. data:: v1_active_post_big_bang = 5

    	V1 Active post big-bang

    .. data:: v1_standby_post_big_bang = 6

    	V1 Standbyi post big-bang

    .. data:: count = 7

    	Count

    """

    unknown = Enum.YLeaf(0, "unknown")

    v1_active = Enum.YLeaf(1, "v1-active")

    v1_standby = Enum.YLeaf(2, "v1-standby")

    v2_active = Enum.YLeaf(3, "v2-active")

    v2_standby = Enum.YLeaf(4, "v2-standby")

    v1_active_post_big_bang = Enum.YLeaf(5, "v1-active-post-big-bang")

    v1_standby_post_big_bang = Enum.YLeaf(6, "v1-standby-post-big-bang")

    count = Enum.YLeaf(7, "count")


class RsvpSession(Enum):
    """
    RsvpSession (Enum Class)

    Rsvp session

    .. data:: ipv4 = 1

    	Show IPv4 sessions only

    .. data:: p2p_lsp_ipv4 = 7

    	Show IPv4 P2P LSP sessions only

    .. data:: ouni_ipv4 = 9

    	Show IPv4 OUNI sessions only

    .. data:: p2mp_lsp_ipv4 = 13

    	Show IPv4 P2MP LSP sessions only

    """

    ipv4 = Enum.YLeaf(1, "ipv4")

    p2p_lsp_ipv4 = Enum.YLeaf(7, "p2p-lsp-ipv4")

    ouni_ipv4 = Enum.YLeaf(9, "ouni-ipv4")

    p2mp_lsp_ipv4 = Enum.YLeaf(13, "p2mp-lsp-ipv4")


class RsvpSyncStatus(Enum):
    """
    RsvpSyncStatus (Enum Class)

    Rsvp sync status

    .. data:: not_ready = 0

    	Not Ready

    .. data:: ready = 1

    	Ready

    """

    not_ready = Enum.YLeaf(0, "not-ready")

    ready = Enum.YLeaf(1, "ready")


class RsvpTimerState(Enum):
    """
    RsvpTimerState (Enum Class)

    RSVP Timer States

    .. data:: rsvp_timer_running_and_sleeping = 1

    	RSVP timer running and sleeping

    .. data:: rsvp_timer_running = 2

    	RSVP timer running

    .. data:: rsvp_timer_not_running = 3

    	RSVP timer not running

    """

    rsvp_timer_running_and_sleeping = Enum.YLeaf(1, "rsvp-timer-running-and-sleeping")

    rsvp_timer_running = Enum.YLeaf(2, "rsvp-timer-running")

    rsvp_timer_not_running = Enum.YLeaf(3, "rsvp-timer-not-running")



class RsvpStandby(Entity):
    """
    RSVP operational data for standby role
    
    .. attribute:: interface_neighbor_briefs
    
    	Table of brief info about I/F neighbors
    	**type**\:  :py:class:`InterfaceNeighborBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceNeighborBriefs>`
    
    .. attribute:: controller_summaries
    
    	Table of summary info about RSVP\-enabled controllers
    	**type**\:  :py:class:`ControllerSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerSummaries>`
    
    .. attribute:: authentication_briefs
    
    	Table for Authentication related information
    	**type**\:  :py:class:`AuthenticationBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationBriefs>`
    
    .. attribute:: session_briefs
    
    	Table of brief info about sessions
    	**type**\:  :py:class:`SessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs>`
    
    .. attribute:: psb_detaileds
    
    	Table of detailed info about path state blocks
    	**type**\:  :py:class:`PsbDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds>`
    
    .. attribute:: controller_detaileds
    
    	Table of detailed info about RSVP\-enabled controllers
    	**type**\:  :py:class:`ControllerDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerDetaileds>`
    
    .. attribute:: frr_summary
    
    	Fast Re\-Route Summary State Information
    	**type**\:  :py:class:`FrrSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.FrrSummary>`
    
    .. attribute:: rsb_detaileds
    
    	Table of detailed info about reservation state blocks
    	**type**\:  :py:class:`RsbDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds>`
    
    .. attribute:: interface_summaries
    
    	Table of summary info about RSVP\-enabled interfaces
    	**type**\:  :py:class:`InterfaceSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceSummaries>`
    
    .. attribute:: hello_instance_briefs
    
    	Table of brief info about hello instances
    	**type**\:  :py:class:`HelloInstanceBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInstanceBriefs>`
    
    .. attribute:: authentication_details
    
    	Table for detailed authentication related information
    	**type**\:  :py:class:`AuthenticationDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails>`
    
    .. attribute:: rsb_briefs
    
    	Table of brief info about reservation state blocks
    	**type**\:  :py:class:`RsbBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs>`
    
    .. attribute:: open_config
    
    	OpenConfig info
    	**type**\:  :py:class:`OpenConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.OpenConfig>`
    
    .. attribute:: counters
    
    	Counters
    	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters>`
    
    .. attribute:: interface_detaileds
    
    	Table of detailed info about RSVP\-enabled interfaces
    	**type**\:  :py:class:`InterfaceDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds>`
    
    .. attribute:: controller_briefs
    
    	Table of brief info about RSVP\-enabled controller
    	**type**\:  :py:class:`ControllerBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerBriefs>`
    
    .. attribute:: graceful_restart
    
    	Info about graceful\-restart
    	**type**\:  :py:class:`GracefulRestart <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GracefulRestart>`
    
    .. attribute:: hello_interface_instance_briefs
    
    	Table of brief info about i/f\-based hello instances
    	**type**\:  :py:class:`HelloInterfaceInstanceBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInterfaceInstanceBriefs>`
    
    .. attribute:: hello_interface_instance_details
    
    	Table of detailed info about i/f\-based hello instances
    	**type**\:  :py:class:`HelloInterfaceInstanceDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInterfaceInstanceDetails>`
    
    .. attribute:: interface_neighbor_details
    
    	Table of detailed info about I/F neighbors
    	**type**\:  :py:class:`InterfaceNeighborDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceNeighborDetails>`
    
    .. attribute:: nsr
    
    	RSVP NSR information
    	**type**\:  :py:class:`Nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Nsr>`
    
    .. attribute:: summary
    
    	RSVP summary information
    	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary>`
    
    .. attribute:: frrs
    
    	Table of detailed info about Fast Re\-route states
    	**type**\:  :py:class:`Frrs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs>`
    
    .. attribute:: request_briefs
    
    	Table of brief info about requests
    	**type**\:  :py:class:`RequestBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs>`
    
    .. attribute:: request_details
    
    	Table of detail info about requests
    	**type**\:  :py:class:`RequestDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails>`
    
    .. attribute:: interface_briefs
    
    	Table of brief info about RSVP\-enabled interfaces
    	**type**\:  :py:class:`InterfaceBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceBriefs>`
    
    .. attribute:: session_detaileds
    
    	Table of detailed info about sessions
    	**type**\:  :py:class:`SessionDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds>`
    
    .. attribute:: hello_instance_details
    
    	Table of detailed info about hello instances
    	**type**\:  :py:class:`HelloInstanceDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInstanceDetails>`
    
    .. attribute:: global_neighbor_details
    
    	Table of detailed info about global neighbors
    	**type**\:  :py:class:`GlobalNeighborDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails>`
    
    .. attribute:: psb_briefs
    
    	Table of brief info about path state blocks
    	**type**\:  :py:class:`PsbBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs>`
    
    .. attribute:: global_neighbor_briefs
    
    	Table of brief info about global neighbors
    	**type**\:  :py:class:`GlobalNeighborBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborBriefs>`
    
    

    """

    _prefix = 'ip-rsvp-oper'
    _revision = '2017-05-01'

    def __init__(self):
        super(RsvpStandby, self).__init__()
        self._top_entity = None

        self.yang_name = "rsvp-standby"
        self.yang_parent_name = "Cisco-IOS-XR-ip-rsvp-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("interface-neighbor-briefs", ("interface_neighbor_briefs", RsvpStandby.InterfaceNeighborBriefs)), ("controller-summaries", ("controller_summaries", RsvpStandby.ControllerSummaries)), ("authentication-briefs", ("authentication_briefs", RsvpStandby.AuthenticationBriefs)), ("session-briefs", ("session_briefs", RsvpStandby.SessionBriefs)), ("psb-detaileds", ("psb_detaileds", RsvpStandby.PsbDetaileds)), ("controller-detaileds", ("controller_detaileds", RsvpStandby.ControllerDetaileds)), ("frr-summary", ("frr_summary", RsvpStandby.FrrSummary)), ("rsb-detaileds", ("rsb_detaileds", RsvpStandby.RsbDetaileds)), ("interface-summaries", ("interface_summaries", RsvpStandby.InterfaceSummaries)), ("hello-instance-briefs", ("hello_instance_briefs", RsvpStandby.HelloInstanceBriefs)), ("authentication-details", ("authentication_details", RsvpStandby.AuthenticationDetails)), ("rsb-briefs", ("rsb_briefs", RsvpStandby.RsbBriefs)), ("open-config", ("open_config", RsvpStandby.OpenConfig)), ("counters", ("counters", RsvpStandby.Counters)), ("interface-detaileds", ("interface_detaileds", RsvpStandby.InterfaceDetaileds)), ("controller-briefs", ("controller_briefs", RsvpStandby.ControllerBriefs)), ("graceful-restart", ("graceful_restart", RsvpStandby.GracefulRestart)), ("hello-interface-instance-briefs", ("hello_interface_instance_briefs", RsvpStandby.HelloInterfaceInstanceBriefs)), ("hello-interface-instance-details", ("hello_interface_instance_details", RsvpStandby.HelloInterfaceInstanceDetails)), ("interface-neighbor-details", ("interface_neighbor_details", RsvpStandby.InterfaceNeighborDetails)), ("nsr", ("nsr", RsvpStandby.Nsr)), ("summary", ("summary", RsvpStandby.Summary)), ("frrs", ("frrs", RsvpStandby.Frrs)), ("request-briefs", ("request_briefs", RsvpStandby.RequestBriefs)), ("request-details", ("request_details", RsvpStandby.RequestDetails)), ("interface-briefs", ("interface_briefs", RsvpStandby.InterfaceBriefs)), ("session-detaileds", ("session_detaileds", RsvpStandby.SessionDetaileds)), ("hello-instance-details", ("hello_instance_details", RsvpStandby.HelloInstanceDetails)), ("global-neighbor-details", ("global_neighbor_details", RsvpStandby.GlobalNeighborDetails)), ("psb-briefs", ("psb_briefs", RsvpStandby.PsbBriefs)), ("global-neighbor-briefs", ("global_neighbor_briefs", RsvpStandby.GlobalNeighborBriefs))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.interface_neighbor_briefs = RsvpStandby.InterfaceNeighborBriefs()
        self.interface_neighbor_briefs.parent = self
        self._children_name_map["interface_neighbor_briefs"] = "interface-neighbor-briefs"
        self._children_yang_names.add("interface-neighbor-briefs")

        self.controller_summaries = RsvpStandby.ControllerSummaries()
        self.controller_summaries.parent = self
        self._children_name_map["controller_summaries"] = "controller-summaries"
        self._children_yang_names.add("controller-summaries")

        self.authentication_briefs = RsvpStandby.AuthenticationBriefs()
        self.authentication_briefs.parent = self
        self._children_name_map["authentication_briefs"] = "authentication-briefs"
        self._children_yang_names.add("authentication-briefs")

        self.session_briefs = RsvpStandby.SessionBriefs()
        self.session_briefs.parent = self
        self._children_name_map["session_briefs"] = "session-briefs"
        self._children_yang_names.add("session-briefs")

        self.psb_detaileds = RsvpStandby.PsbDetaileds()
        self.psb_detaileds.parent = self
        self._children_name_map["psb_detaileds"] = "psb-detaileds"
        self._children_yang_names.add("psb-detaileds")

        self.controller_detaileds = RsvpStandby.ControllerDetaileds()
        self.controller_detaileds.parent = self
        self._children_name_map["controller_detaileds"] = "controller-detaileds"
        self._children_yang_names.add("controller-detaileds")

        self.frr_summary = RsvpStandby.FrrSummary()
        self.frr_summary.parent = self
        self._children_name_map["frr_summary"] = "frr-summary"
        self._children_yang_names.add("frr-summary")

        self.rsb_detaileds = RsvpStandby.RsbDetaileds()
        self.rsb_detaileds.parent = self
        self._children_name_map["rsb_detaileds"] = "rsb-detaileds"
        self._children_yang_names.add("rsb-detaileds")

        self.interface_summaries = RsvpStandby.InterfaceSummaries()
        self.interface_summaries.parent = self
        self._children_name_map["interface_summaries"] = "interface-summaries"
        self._children_yang_names.add("interface-summaries")

        self.hello_instance_briefs = RsvpStandby.HelloInstanceBriefs()
        self.hello_instance_briefs.parent = self
        self._children_name_map["hello_instance_briefs"] = "hello-instance-briefs"
        self._children_yang_names.add("hello-instance-briefs")

        self.authentication_details = RsvpStandby.AuthenticationDetails()
        self.authentication_details.parent = self
        self._children_name_map["authentication_details"] = "authentication-details"
        self._children_yang_names.add("authentication-details")

        self.rsb_briefs = RsvpStandby.RsbBriefs()
        self.rsb_briefs.parent = self
        self._children_name_map["rsb_briefs"] = "rsb-briefs"
        self._children_yang_names.add("rsb-briefs")

        self.open_config = RsvpStandby.OpenConfig()
        self.open_config.parent = self
        self._children_name_map["open_config"] = "open-config"
        self._children_yang_names.add("open-config")

        self.counters = RsvpStandby.Counters()
        self.counters.parent = self
        self._children_name_map["counters"] = "counters"
        self._children_yang_names.add("counters")

        self.interface_detaileds = RsvpStandby.InterfaceDetaileds()
        self.interface_detaileds.parent = self
        self._children_name_map["interface_detaileds"] = "interface-detaileds"
        self._children_yang_names.add("interface-detaileds")

        self.controller_briefs = RsvpStandby.ControllerBriefs()
        self.controller_briefs.parent = self
        self._children_name_map["controller_briefs"] = "controller-briefs"
        self._children_yang_names.add("controller-briefs")

        self.graceful_restart = RsvpStandby.GracefulRestart()
        self.graceful_restart.parent = self
        self._children_name_map["graceful_restart"] = "graceful-restart"
        self._children_yang_names.add("graceful-restart")

        self.hello_interface_instance_briefs = RsvpStandby.HelloInterfaceInstanceBriefs()
        self.hello_interface_instance_briefs.parent = self
        self._children_name_map["hello_interface_instance_briefs"] = "hello-interface-instance-briefs"
        self._children_yang_names.add("hello-interface-instance-briefs")

        self.hello_interface_instance_details = RsvpStandby.HelloInterfaceInstanceDetails()
        self.hello_interface_instance_details.parent = self
        self._children_name_map["hello_interface_instance_details"] = "hello-interface-instance-details"
        self._children_yang_names.add("hello-interface-instance-details")

        self.interface_neighbor_details = RsvpStandby.InterfaceNeighborDetails()
        self.interface_neighbor_details.parent = self
        self._children_name_map["interface_neighbor_details"] = "interface-neighbor-details"
        self._children_yang_names.add("interface-neighbor-details")

        self.nsr = RsvpStandby.Nsr()
        self.nsr.parent = self
        self._children_name_map["nsr"] = "nsr"
        self._children_yang_names.add("nsr")

        self.summary = RsvpStandby.Summary()
        self.summary.parent = self
        self._children_name_map["summary"] = "summary"
        self._children_yang_names.add("summary")

        self.frrs = RsvpStandby.Frrs()
        self.frrs.parent = self
        self._children_name_map["frrs"] = "frrs"
        self._children_yang_names.add("frrs")

        self.request_briefs = RsvpStandby.RequestBriefs()
        self.request_briefs.parent = self
        self._children_name_map["request_briefs"] = "request-briefs"
        self._children_yang_names.add("request-briefs")

        self.request_details = RsvpStandby.RequestDetails()
        self.request_details.parent = self
        self._children_name_map["request_details"] = "request-details"
        self._children_yang_names.add("request-details")

        self.interface_briefs = RsvpStandby.InterfaceBriefs()
        self.interface_briefs.parent = self
        self._children_name_map["interface_briefs"] = "interface-briefs"
        self._children_yang_names.add("interface-briefs")

        self.session_detaileds = RsvpStandby.SessionDetaileds()
        self.session_detaileds.parent = self
        self._children_name_map["session_detaileds"] = "session-detaileds"
        self._children_yang_names.add("session-detaileds")

        self.hello_instance_details = RsvpStandby.HelloInstanceDetails()
        self.hello_instance_details.parent = self
        self._children_name_map["hello_instance_details"] = "hello-instance-details"
        self._children_yang_names.add("hello-instance-details")

        self.global_neighbor_details = RsvpStandby.GlobalNeighborDetails()
        self.global_neighbor_details.parent = self
        self._children_name_map["global_neighbor_details"] = "global-neighbor-details"
        self._children_yang_names.add("global-neighbor-details")

        self.psb_briefs = RsvpStandby.PsbBriefs()
        self.psb_briefs.parent = self
        self._children_name_map["psb_briefs"] = "psb-briefs"
        self._children_yang_names.add("psb-briefs")

        self.global_neighbor_briefs = RsvpStandby.GlobalNeighborBriefs()
        self.global_neighbor_briefs.parent = self
        self._children_name_map["global_neighbor_briefs"] = "global-neighbor-briefs"
        self._children_yang_names.add("global-neighbor-briefs")
        self._segment_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby"


    class InterfaceNeighborBriefs(Entity):
        """
        Table of brief info about I/F neighbors
        
        .. attribute:: interface_neighbor_brief
        
        	Brief info for a single interface neighbor
        	**type**\: list of  		 :py:class:`InterfaceNeighborBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceNeighborBriefs.InterfaceNeighborBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.InterfaceNeighborBriefs, self).__init__()

            self.yang_name = "interface-neighbor-briefs"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("interface-neighbor-brief", ("interface_neighbor_brief", RsvpStandby.InterfaceNeighborBriefs.InterfaceNeighborBrief))])
            self._leafs = OrderedDict()

            self.interface_neighbor_brief = YList(self)
            self._segment_path = lambda: "interface-neighbor-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.InterfaceNeighborBriefs, [], name, value)


        class InterfaceNeighborBrief(Entity):
            """
            Brief info for a single interface neighbor
            
            .. attribute:: neighbor_address  (key)
            
            	Address of global neighbor
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_neighbor_list_compact
            
            	Compact list of I/F Neighbors
            	**type**\: list of  		 :py:class:`InterfaceNeighborListCompact <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceNeighborBriefs.InterfaceNeighborBrief.InterfaceNeighborListCompact>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.InterfaceNeighborBriefs.InterfaceNeighborBrief, self).__init__()

                self.yang_name = "interface-neighbor-brief"
                self.yang_parent_name = "interface-neighbor-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['neighbor_address']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("interface-neighbor-list-compact", ("interface_neighbor_list_compact", RsvpStandby.InterfaceNeighborBriefs.InterfaceNeighborBrief.InterfaceNeighborListCompact))])
                self._leafs = OrderedDict([
                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                    ('node_address', YLeaf(YType.str, 'node-address')),
                ])
                self.neighbor_address = None
                self.node_address = None

                self.interface_neighbor_list_compact = YList(self)
                self._segment_path = lambda: "interface-neighbor-brief" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-neighbor-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.InterfaceNeighborBriefs.InterfaceNeighborBrief, ['neighbor_address', 'node_address'], name, value)


            class InterfaceNeighborListCompact(Entity):
                """
                Compact list of I/F Neighbors
                
                .. attribute:: interface_neighbor_address
                
                	Interface Neighbor address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_interface_name
                
                	Neighbor's Interface handle
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.InterfaceNeighborBriefs.InterfaceNeighborBrief.InterfaceNeighborListCompact, self).__init__()

                    self.yang_name = "interface-neighbor-list-compact"
                    self.yang_parent_name = "interface-neighbor-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_neighbor_address', YLeaf(YType.str, 'interface-neighbor-address')),
                        ('neighbor_interface_name', YLeaf(YType.str, 'neighbor-interface-name')),
                    ])
                    self.interface_neighbor_address = None
                    self.neighbor_interface_name = None
                    self._segment_path = lambda: "interface-neighbor-list-compact"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.InterfaceNeighborBriefs.InterfaceNeighborBrief.InterfaceNeighborListCompact, ['interface_neighbor_address', 'neighbor_interface_name'], name, value)


    class ControllerSummaries(Entity):
        """
        Table of summary info about RSVP\-enabled
        controllers
        
        .. attribute:: controller_summary
        
        	Summary info about an RSVP\-enabled controller
        	**type**\: list of  		 :py:class:`ControllerSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerSummaries.ControllerSummary>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.ControllerSummaries, self).__init__()

            self.yang_name = "controller-summaries"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("controller-summary", ("controller_summary", RsvpStandby.ControllerSummaries.ControllerSummary))])
            self._leafs = OrderedDict()

            self.controller_summary = YList(self)
            self._segment_path = lambda: "controller-summaries"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.ControllerSummaries, [], name, value)


        class ControllerSummary(Entity):
            """
            Summary info about an RSVP\-enabled controller
            
            .. attribute:: controller_name  (key)
            
            	Controller Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:  :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\: str
            
            .. attribute:: paths_in
            
            	Number of locally created and incoming path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: paths_out
            
            	Number of outgoing path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: reservations_in
            
            	Number of locally created and incoming reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: reservations_out
            
            	Number of outgoing reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.ControllerSummaries.ControllerSummary, self).__init__()

                self.yang_name = "controller-summary"
                self.yang_parent_name = "controller-summaries"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['controller_name']
                self._child_container_classes = OrderedDict([("bandwidth-information", ("bandwidth_information", RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('controller_name', YLeaf(YType.str, 'controller-name')),
                    ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                    ('paths_in', YLeaf(YType.uint32, 'paths-in')),
                    ('paths_out', YLeaf(YType.uint32, 'paths-out')),
                    ('reservations_in', YLeaf(YType.uint32, 'reservations-in')),
                    ('reservations_out', YLeaf(YType.uint32, 'reservations-out')),
                ])
                self.controller_name = None
                self.interface_name_xr = None
                self.paths_in = None
                self.paths_out = None
                self.reservations_in = None
                self.reservations_out = None

                self.bandwidth_information = RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation()
                self.bandwidth_information.parent = self
                self._children_name_map["bandwidth_information"] = "bandwidth-information"
                self._children_yang_names.add("bandwidth-information")
                self._segment_path = lambda: "controller-summary" + "[controller-name='" + str(self.controller_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-summaries/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.ControllerSummaries.ControllerSummary, ['controller_name', 'interface_name_xr', 'paths_in', 'paths_out', 'reservations_in', 'reservations_out'], name, value)


            class BandwidthInformation(Entity):
                """
                Interface bandwidth information
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:  :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:  :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation.StandardDsteInterface>`
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:  :py:class:`RsvpMgmtDsteModes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModes>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation, self).__init__()

                    self.yang_name = "bandwidth-information"
                    self.yang_parent_name = "controller-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("pre-standard-dste-interface", ("pre_standard_dste_interface", RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation.PreStandardDsteInterface)), ("standard-dste-interface", ("standard_dste_interface", RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation.StandardDsteInterface))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dste_mode', YLeaf(YType.enumeration, 'dste-mode')),
                    ])
                    self.dste_mode = None

                    self.pre_standard_dste_interface = RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self._children_name_map["pre_standard_dste_interface"] = "pre-standard-dste-interface"
                    self._children_yang_names.add("pre-standard-dste-interface")

                    self.standard_dste_interface = RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self
                    self._children_name_map["standard_dste_interface"] = "standard-dste-interface"
                    self._children_yang_names.add("standard-dste-interface")
                    self._segment_path = lambda: "bandwidth-information"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation, ['dste_mode'], name, value)


                class PreStandardDsteInterface(Entity):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation.PreStandardDsteInterface, self).__init__()

                        self.yang_name = "pre-standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_subpool_bandwidth', YLeaf(YType.uint64, 'max-subpool-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_subpool_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-subpool-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_subpool_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self._segment_path = lambda: "pre-standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation.PreStandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_subpool_bandwidth', 'is_max_bandwidth_absolute', 'is_max_subpool_bandwidth_absolute'], name, value)


                class StandardDsteInterface(Entity):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation.StandardDsteInterface, self).__init__()

                        self.yang_name = "standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_pool0_bandwidth', YLeaf(YType.uint64, 'max-pool0-bandwidth')),
                            ('max_pool1_bandwidth', YLeaf(YType.uint64, 'max-pool1-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_bc0_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc0-bandwidth-absolute')),
                            ('is_max_bc1_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc1-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self._segment_path = lambda: "standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.ControllerSummaries.ControllerSummary.BandwidthInformation.StandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_pool0_bandwidth', 'max_pool1_bandwidth', 'is_max_bandwidth_absolute', 'is_max_bc0_bandwidth_absolute', 'is_max_bc1_bandwidth_absolute'], name, value)


    class AuthenticationBriefs(Entity):
        """
        Table for Authentication related information
        
        .. attribute:: authentication_brief
        
        	Brief Authentication information
        	**type**\: list of  		 :py:class:`AuthenticationBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationBriefs.AuthenticationBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.AuthenticationBriefs, self).__init__()

            self.yang_name = "authentication-briefs"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("authentication-brief", ("authentication_brief", RsvpStandby.AuthenticationBriefs.AuthenticationBrief))])
            self._leafs = OrderedDict()

            self.authentication_brief = YList(self)
            self._segment_path = lambda: "authentication-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.AuthenticationBriefs, [], name, value)


        class AuthenticationBrief(Entity):
            """
            Brief Authentication information
            
            .. attribute:: source_address  (key)
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address  (key)
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: mode_id  (key)
            
            	Mode (Tx or Rx)
            	**type**\:  :py:class:`RsvpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMode>`
            
            .. attribute:: interface_name  (key)
            
            	InterfaceName
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: neighbor_address
            
            	Neighbor address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: direction
            
            	Direction
            	**type**\:  :py:class:`RsvpMgmtAuthDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthDirection>`
            
            .. attribute:: key_type
            
            	Key type
            	**type**\:  :py:class:`RsvpMgmtAuthKi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthKi>`
            
            .. attribute:: key_source
            
            	Key source
            	**type**\: str
            
            .. attribute:: key_id
            
            	Key ID
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: key_id_valid
            
            	Key validity
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.AuthenticationBriefs.AuthenticationBrief, self).__init__()

                self.yang_name = "authentication-brief"
                self.yang_parent_name = "authentication-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['source_address','destination_address','mode_id','interface_name']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('mode_id', YLeaf(YType.enumeration, 'mode-id')),
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('source_address_xr', YLeaf(YType.str, 'source-address-xr')),
                    ('destination_address_xr', YLeaf(YType.str, 'destination-address-xr')),
                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                    ('direction', YLeaf(YType.enumeration, 'direction')),
                    ('key_type', YLeaf(YType.enumeration, 'key-type')),
                    ('key_source', YLeaf(YType.str, 'key-source')),
                    ('key_id', YLeaf(YType.uint64, 'key-id')),
                    ('key_id_valid', YLeaf(YType.uint32, 'key-id-valid')),
                ])
                self.source_address = None
                self.destination_address = None
                self.mode_id = None
                self.interface_name = None
                self.source_address_xr = None
                self.destination_address_xr = None
                self.neighbor_address = None
                self.direction = None
                self.key_type = None
                self.key_source = None
                self.key_id = None
                self.key_id_valid = None
                self._segment_path = lambda: "authentication-brief" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']" + "[mode-id='" + str(self.mode_id) + "']" + "[interface-name='" + str(self.interface_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/authentication-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.AuthenticationBriefs.AuthenticationBrief, ['source_address', 'destination_address', 'mode_id', 'interface_name', 'source_address_xr', 'destination_address_xr', 'neighbor_address', 'direction', 'key_type', 'key_source', 'key_id', 'key_id_valid'], name, value)


    class SessionBriefs(Entity):
        """
        Table of brief info about sessions
        
        .. attribute:: session_brief
        
        	Brief info about session
        	**type**\: list of  		 :py:class:`SessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs.SessionBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.SessionBriefs, self).__init__()

            self.yang_name = "session-briefs"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("session-brief", ("session_brief", RsvpStandby.SessionBriefs.SessionBrief))])
            self._leafs = OrderedDict()

            self.session_brief = YList(self)
            self._segment_path = lambda: "session-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.SessionBriefs, [], name, value)


        class SessionBrief(Entity):
            """
            Brief info about session
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs.SessionBrief.Session>`
            
            .. attribute:: ps_bs
            
            	Number of path state block states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: rs_bs
            
            	Number of reservation state block states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: requests
            
            	Number of request states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: detail_list_size
            
            	Number of elements in detail list
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.SessionBriefs.SessionBrief, self).__init__()

                self.yang_name = "session-brief"
                self.yang_parent_name = "session-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", RsvpStandby.SessionBriefs.SessionBrief.Session))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('ps_bs', YLeaf(YType.uint32, 'ps-bs')),
                    ('rs_bs', YLeaf(YType.uint32, 'rs-bs')),
                    ('requests', YLeaf(YType.uint32, 'requests')),
                    ('detail_list_size', YLeaf(YType.uint32, 'detail-list-size')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.vrf_name = None
                self.ps_bs = None
                self.rs_bs = None
                self.requests = None
                self.detail_list_size = None

                self.session = RsvpStandby.SessionBriefs.SessionBrief.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")
                self._segment_path = lambda: "session-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.SessionBriefs.SessionBrief, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'vrf_name', 'ps_bs', 'rs_bs', 'requests', 'detail_list_size'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.SessionBriefs.SessionBrief.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "session-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


    class PsbDetaileds(Entity):
        """
        Table of detailed info about path state blocks
        
        .. attribute:: psb_detailed
        
        	Detailed info for a single path state block
        	**type**\: list of  		 :py:class:`PsbDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.PsbDetaileds, self).__init__()

            self.yang_name = "psb-detaileds"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("psb-detailed", ("psb_detailed", RsvpStandby.PsbDetaileds.PsbDetailed))])
            self._leafs = OrderedDict()

            self.psb_detailed = YList(self)
            self._segment_path = lambda: "psb-detaileds"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.PsbDetaileds, [], name, value)


        class PsbDetailed(Entity):
            """
            Detailed info for a single path state block
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.S2LSubLsp>`
            
            .. attribute:: template
            
            	RSVP Template
            	**type**\:  :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Template>`
            
            .. attribute:: session_attribute
            
            	RSVP Session Attribute
            	**type**\:  :py:class:`SessionAttribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute>`
            
            .. attribute:: traffic_spec
            
            	RSVP Traffic Spec Info
            	**type**\:  :py:class:`TrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.TrafficSpec>`
            
            .. attribute:: generic_traffic_spec
            
            	RSVP Generic Traffic Spec Info
            	**type**\:  :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec>`
            
            .. attribute:: path_flags
            
            	Path Flags
            	**type**\:  :py:class:`PathFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.PathFlags>`
            
            .. attribute:: hop
            
            	Path Hop Info
            	**type**\:  :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Hop>`
            
            .. attribute:: policy_source_info
            
            	Policy Sources Info
            	**type**\:  :py:class:`PolicySourceInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.PolicySourceInfo>`
            
            .. attribute:: header
            
            	RSVP Header Info
            	**type**\:  :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Header>`
            
            .. attribute:: expiry_time
            
            	Expiry Time
            	**type**\:  :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.ExpiryTime>`
            
            .. attribute:: policy_flags
            
            	Policy Flags
            	**type**\:  :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.PolicyFlags>`
            
            .. attribute:: policy_query_flags
            
            	Policy Query Flags
            	**type**\:  :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.PolicyQueryFlags>`
            
            .. attribute:: label_info
            
            	Label Information
            	**type**\:  :py:class:`LabelInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo>`
            
            .. attribute:: class_type
            
            	DS\-TE Class\-Type
            	**type**\:  :py:class:`ClassType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.ClassType>`
            
            .. attribute:: input_interface
            
            	Path Input Interface
            	**type**\: str
            
            .. attribute:: backup_tunnel_name
            
            	Path Backup Tunnel
            	**type**\: str
            
            .. attribute:: is_in_ero_valid
            
            	Incoming ERO validity
            	**type**\: bool
            
            .. attribute:: is_out_ero_valid
            
            	Outgoing ERO validity
            	**type**\: bool
            
            .. attribute:: pfc
            
            	Path Forwarding Contexts
            	**type**\: list of  		 :py:class:`Pfc <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Pfc>`
            
            .. attribute:: in_ero
            
            	Incoming Explicit Route Sub Objects
            	**type**\: list of  		 :py:class:`InEro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.InEro>`
            
            .. attribute:: out_ero
            
            	Outgoing Explicit Route Sub Objects
            	**type**\: list of  		 :py:class:`OutEro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.OutEro>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.PsbDetaileds.PsbDetailed, self).__init__()

                self.yang_name = "psb-detailed"
                self.yang_parent_name = "psb-detaileds"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", RsvpStandby.PsbDetaileds.PsbDetailed.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", RsvpStandby.PsbDetaileds.PsbDetailed.S2LSubLsp)), ("template", ("template", RsvpStandby.PsbDetaileds.PsbDetailed.Template)), ("session-attribute", ("session_attribute", RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute)), ("traffic-spec", ("traffic_spec", RsvpStandby.PsbDetaileds.PsbDetailed.TrafficSpec)), ("generic-traffic-spec", ("generic_traffic_spec", RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec)), ("path-flags", ("path_flags", RsvpStandby.PsbDetaileds.PsbDetailed.PathFlags)), ("hop", ("hop", RsvpStandby.PsbDetaileds.PsbDetailed.Hop)), ("policy-source-info", ("policy_source_info", RsvpStandby.PsbDetaileds.PsbDetailed.PolicySourceInfo)), ("header", ("header", RsvpStandby.PsbDetaileds.PsbDetailed.Header)), ("expiry-time", ("expiry_time", RsvpStandby.PsbDetaileds.PsbDetailed.ExpiryTime)), ("policy-flags", ("policy_flags", RsvpStandby.PsbDetaileds.PsbDetailed.PolicyFlags)), ("policy-query-flags", ("policy_query_flags", RsvpStandby.PsbDetaileds.PsbDetailed.PolicyQueryFlags)), ("label-info", ("label_info", RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo)), ("class-type", ("class_type", RsvpStandby.PsbDetaileds.PsbDetailed.ClassType))])
                self._child_list_classes = OrderedDict([("pfc", ("pfc", RsvpStandby.PsbDetaileds.PsbDetailed.Pfc)), ("in-ero", ("in_ero", RsvpStandby.PsbDetaileds.PsbDetailed.InEro)), ("out-ero", ("out_ero", RsvpStandby.PsbDetaileds.PsbDetailed.OutEro))])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('input_interface', YLeaf(YType.str, 'input-interface')),
                    ('backup_tunnel_name', YLeaf(YType.str, 'backup-tunnel-name')),
                    ('is_in_ero_valid', YLeaf(YType.boolean, 'is-in-ero-valid')),
                    ('is_out_ero_valid', YLeaf(YType.boolean, 'is-out-ero-valid')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.input_interface = None
                self.backup_tunnel_name = None
                self.is_in_ero_valid = None
                self.is_out_ero_valid = None

                self.session = RsvpStandby.PsbDetaileds.PsbDetailed.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = RsvpStandby.PsbDetaileds.PsbDetailed.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.template = RsvpStandby.PsbDetaileds.PsbDetailed.Template()
                self.template.parent = self
                self._children_name_map["template"] = "template"
                self._children_yang_names.add("template")

                self.session_attribute = RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute()
                self.session_attribute.parent = self
                self._children_name_map["session_attribute"] = "session-attribute"
                self._children_yang_names.add("session-attribute")

                self.traffic_spec = RsvpStandby.PsbDetaileds.PsbDetailed.TrafficSpec()
                self.traffic_spec.parent = self
                self._children_name_map["traffic_spec"] = "traffic-spec"
                self._children_yang_names.add("traffic-spec")

                self.generic_traffic_spec = RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec()
                self.generic_traffic_spec.parent = self
                self._children_name_map["generic_traffic_spec"] = "generic-traffic-spec"
                self._children_yang_names.add("generic-traffic-spec")

                self.path_flags = RsvpStandby.PsbDetaileds.PsbDetailed.PathFlags()
                self.path_flags.parent = self
                self._children_name_map["path_flags"] = "path-flags"
                self._children_yang_names.add("path-flags")

                self.hop = RsvpStandby.PsbDetaileds.PsbDetailed.Hop()
                self.hop.parent = self
                self._children_name_map["hop"] = "hop"
                self._children_yang_names.add("hop")

                self.policy_source_info = RsvpStandby.PsbDetaileds.PsbDetailed.PolicySourceInfo()
                self.policy_source_info.parent = self
                self._children_name_map["policy_source_info"] = "policy-source-info"
                self._children_yang_names.add("policy-source-info")

                self.header = RsvpStandby.PsbDetaileds.PsbDetailed.Header()
                self.header.parent = self
                self._children_name_map["header"] = "header"
                self._children_yang_names.add("header")

                self.expiry_time = RsvpStandby.PsbDetaileds.PsbDetailed.ExpiryTime()
                self.expiry_time.parent = self
                self._children_name_map["expiry_time"] = "expiry-time"
                self._children_yang_names.add("expiry-time")

                self.policy_flags = RsvpStandby.PsbDetaileds.PsbDetailed.PolicyFlags()
                self.policy_flags.parent = self
                self._children_name_map["policy_flags"] = "policy-flags"
                self._children_yang_names.add("policy-flags")

                self.policy_query_flags = RsvpStandby.PsbDetaileds.PsbDetailed.PolicyQueryFlags()
                self.policy_query_flags.parent = self
                self._children_name_map["policy_query_flags"] = "policy-query-flags"
                self._children_yang_names.add("policy-query-flags")

                self.label_info = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo()
                self.label_info.parent = self
                self._children_name_map["label_info"] = "label-info"
                self._children_yang_names.add("label-info")

                self.class_type = RsvpStandby.PsbDetaileds.PsbDetailed.ClassType()
                self.class_type.parent = self
                self._children_name_map["class_type"] = "class-type"
                self._children_yang_names.add("class-type")

                self.pfc = YList(self)
                self.in_ero = YList(self)
                self.out_ero = YList(self)
                self._segment_path = lambda: "psb-detailed"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'input_interface', 'backup_tunnel_name', 'is_in_ero_valid', 'is_out_ero_valid'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.S2LSubLsp, ['s2l_destination_address'], name, value)


            class Template(Entity):
                """
                RSVP Template
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:  :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.Template, self).__init__()

                    self.yang_name = "template"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-filter", ("rsvp_filter", RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_filter = RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter()
                    self.rsvp_filter.parent = self
                    self._children_name_map["rsvp_filter"] = "rsvp-filter"
                    self._children_yang_names.add("rsvp-filter")
                    self._segment_path = lambda: "template"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()


                class RsvpFilter(Entity):
                    """
                    RSVP Filter
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:  :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:  :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:  :py:class:`RsvpMgmtFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilter>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter, self).__init__()

                        self.yang_name = "rsvp-filter"
                        self.yang_parent_name = "template"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("udp-ipv4-session", ("udp_ipv4_session", RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session)), ("p2mp-ipv4-session", ("p2mp_ipv4_session", RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('filter_type', YLeaf(YType.enumeration, 'filter-type')),
                        ])
                        self.filter_type = None

                        self.udp_ipv4_session = RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self
                        self._children_name_map["udp_ipv4_session"] = "udp-ipv4-session"
                        self._children_yang_names.add("udp-ipv4-session")

                        self.p2mp_ipv4_session = RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self._children_name_map["p2mp_ipv4_session"] = "p2mp-ipv4-session"
                        self._children_yang_names.add("p2mp-ipv4-session")
                        self._segment_path = lambda: "rsvp-filter"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/template/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter, ['filter_type'], name, value)


                    class UdpIpv4Session(Entity):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session, self).__init__()

                            self.yang_name = "udp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self._segment_path = lambda: "udp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/template/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session, ['source_address', 'source_port'], name, value)


                    class P2MpIpv4Session(Entity):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session, self).__init__()

                            self.yang_name = "p2mp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                                ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                                ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self.p2mp_sub_group_origin = None
                            self.sub_group_id = None
                            self._segment_path = lambda: "p2mp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/template/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session, ['source_address', 'source_port', 'p2mp_sub_group_origin', 'sub_group_id'], name, value)


            class SessionAttribute(Entity):
                """
                RSVP Session Attribute
                
                .. attribute:: sess_attribute_flags
                
                	Session Attributes
                	**type**\:  :py:class:`SessAttributeFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags>`
                
                .. attribute:: setup_priority
                
                	Setup Priority
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: reservation_priority
                
                	Reservation Priority
                	**type**\: int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute, self).__init__()

                    self.yang_name = "session-attribute"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("sess-attribute-flags", ("sess_attribute_flags", RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('setup_priority', YLeaf(YType.uint8, 'setup-priority')),
                        ('reservation_priority', YLeaf(YType.uint8, 'reservation-priority')),
                    ])
                    self.setup_priority = None
                    self.reservation_priority = None

                    self.sess_attribute_flags = RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags()
                    self.sess_attribute_flags.parent = self
                    self._children_name_map["sess_attribute_flags"] = "sess-attribute-flags"
                    self._children_yang_names.add("sess-attribute-flags")
                    self._segment_path = lambda: "session-attribute"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute, ['setup_priority', 'reservation_priority'], name, value)


                class SessAttributeFlags(Entity):
                    """
                    Session Attributes
                    
                    .. attribute:: is_local_protect
                    
                    	Local Protection
                    	**type**\: bool
                    
                    .. attribute:: is_node_protect
                    
                    	Node Protection
                    	**type**\: bool
                    
                    .. attribute:: is_bandwidth_protect
                    
                    	Bandwidth Protection
                    	**type**\: bool
                    
                    .. attribute:: is_record_labels
                    
                    	Records Labels
                    	**type**\: bool
                    
                    .. attribute:: is_shared_explicit_requested
                    
                    	Shared Explicit Requested
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags, self).__init__()

                        self.yang_name = "sess-attribute-flags"
                        self.yang_parent_name = "session-attribute"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_local_protect', YLeaf(YType.boolean, 'is-local-protect')),
                            ('is_node_protect', YLeaf(YType.boolean, 'is-node-protect')),
                            ('is_bandwidth_protect', YLeaf(YType.boolean, 'is-bandwidth-protect')),
                            ('is_record_labels', YLeaf(YType.boolean, 'is-record-labels')),
                            ('is_shared_explicit_requested', YLeaf(YType.boolean, 'is-shared-explicit-requested')),
                        ])
                        self.is_local_protect = None
                        self.is_node_protect = None
                        self.is_bandwidth_protect = None
                        self.is_record_labels = None
                        self.is_shared_explicit_requested = None
                        self._segment_path = lambda: "sess-attribute-flags"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session-attribute/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags, ['is_local_protect', 'is_node_protect', 'is_bandwidth_protect', 'is_record_labels', 'is_shared_explicit_requested'], name, value)


            class TrafficSpec(Entity):
                """
                RSVP Traffic Spec Info
                
                .. attribute:: traffic_average_rate
                
                	Traffic Average Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_max_burst
                
                	Traffic Maximum Burst
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: traffic_peak_rate
                
                	Traffic Peak Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_min_unit
                
                	Traffic Minimum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_max_unit
                
                	Traffic Maximum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.TrafficSpec, self).__init__()

                    self.yang_name = "traffic-spec"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                        ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                        ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                        ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                        ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                    ])
                    self.traffic_average_rate = None
                    self.traffic_max_burst = None
                    self.traffic_peak_rate = None
                    self.traffic_min_unit = None
                    self.traffic_max_unit = None
                    self._segment_path = lambda: "traffic-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.TrafficSpec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


            class GenericTrafficSpec(Entity):
                """
                RSVP Generic Traffic Spec Info
                
                .. attribute:: g709otn_tspec
                
                	G709 OTN Sender Tspec
                	**type**\:  :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec>`
                
                .. attribute:: intsrv_tspec
                
                	Integrated Services Sender Tspec
                	**type**\:  :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec>`
                
                .. attribute:: tspec_type
                
                	TspecType
                	**type**\:  :py:class:`RsvpMgmtTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec, self).__init__()

                    self.yang_name = "generic-traffic-spec"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("g709otn-tspec", ("g709otn_tspec", RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec)), ("intsrv-tspec", ("intsrv_tspec", RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('tspec_type', YLeaf(YType.enumeration, 'tspec-type')),
                    ])
                    self.tspec_type = None

                    self.g709otn_tspec = RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec()
                    self.g709otn_tspec.parent = self
                    self._children_name_map["g709otn_tspec"] = "g709otn-tspec"
                    self._children_yang_names.add("g709otn-tspec")

                    self.intsrv_tspec = RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec()
                    self.intsrv_tspec.parent = self
                    self._children_name_map["intsrv_tspec"] = "intsrv-tspec"
                    self._children_yang_names.add("intsrv-tspec")
                    self._segment_path = lambda: "generic-traffic-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec, ['tspec_type'], name, value)


                class G709OtnTspec(Entity):
                    """
                    G709 OTN Sender Tspec
                    
                    .. attribute:: traffic_signal_type
                    
                    	G709 OTN Traffic Signal Type (Refer G709 v3)
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: traffic_nvc
                    
                    	G709 OTN Traffic NVC
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_multiplier
                    
                    	G709 OTN Traffic Multiplier
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_bit_rate
                    
                    	G709 OTN Traffic Bit Rate
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec, self).__init__()

                        self.yang_name = "g709otn-tspec"
                        self.yang_parent_name = "generic-traffic-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('traffic_signal_type', YLeaf(YType.uint8, 'traffic-signal-type')),
                            ('traffic_nvc', YLeaf(YType.uint16, 'traffic-nvc')),
                            ('traffic_multiplier', YLeaf(YType.uint16, 'traffic-multiplier')),
                            ('traffic_bit_rate', YLeaf(YType.uint64, 'traffic-bit-rate')),
                        ])
                        self.traffic_signal_type = None
                        self.traffic_nvc = None
                        self.traffic_multiplier = None
                        self.traffic_bit_rate = None
                        self._segment_path = lambda: "g709otn-tspec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/generic-traffic-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec, ['traffic_signal_type', 'traffic_nvc', 'traffic_multiplier', 'traffic_bit_rate'], name, value)


                class IntsrvTspec(Entity):
                    """
                    Integrated Services Sender Tspec
                    
                    .. attribute:: traffic_average_rate
                    
                    	Traffic Average Rate in bytes per second
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_max_burst
                    
                    	Traffic Maximum Burst
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_peak_rate
                    
                    	Traffic Peak Rate in bytes per second
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_min_unit
                    
                    	Traffic Minimum Unit
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_max_unit
                    
                    	Traffic Maximum Unit
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec, self).__init__()

                        self.yang_name = "intsrv-tspec"
                        self.yang_parent_name = "generic-traffic-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                            ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                            ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                            ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                            ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                        ])
                        self.traffic_average_rate = None
                        self.traffic_max_burst = None
                        self.traffic_peak_rate = None
                        self.traffic_min_unit = None
                        self.traffic_max_unit = None
                        self._segment_path = lambda: "intsrv-tspec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/generic-traffic-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


            class PathFlags(Entity):
                """
                Path Flags
                
                .. attribute:: is_non_rsvp_hop_upstream
                
                	Non\-RSVP Hop Upstream
                	**type**\: bool
                
                .. attribute:: is_local_sender
                
                	Local Sender
                	**type**\: bool
                
                .. attribute:: is_message_id_valid
                
                	MessageID Valid
                	**type**\: bool
                
                .. attribute:: is_local_repair
                
                	Rerouted
                	**type**\: bool
                
                .. attribute:: is_bidirectional
                
                	Bidirectional
                	**type**\: bool
                
                .. attribute:: is_lockout
                
                	Locked Out
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.PathFlags, self).__init__()

                    self.yang_name = "path-flags"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_non_rsvp_hop_upstream', YLeaf(YType.boolean, 'is-non-rsvp-hop-upstream')),
                        ('is_local_sender', YLeaf(YType.boolean, 'is-local-sender')),
                        ('is_message_id_valid', YLeaf(YType.boolean, 'is-message-id-valid')),
                        ('is_local_repair', YLeaf(YType.boolean, 'is-local-repair')),
                        ('is_bidirectional', YLeaf(YType.boolean, 'is-bidirectional')),
                        ('is_lockout', YLeaf(YType.boolean, 'is-lockout')),
                    ])
                    self.is_non_rsvp_hop_upstream = None
                    self.is_local_sender = None
                    self.is_message_id_valid = None
                    self.is_local_repair = None
                    self.is_bidirectional = None
                    self.is_lockout = None
                    self._segment_path = lambda: "path-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.PathFlags, ['is_non_rsvp_hop_upstream', 'is_local_sender', 'is_message_id_valid', 'is_local_repair', 'is_bidirectional', 'is_lockout'], name, value)


            class Hop(Entity):
                """
                Path Hop Info
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.Hop, self).__init__()

                    self.yang_name = "hop"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                        ('neighbor_logical_interface_name', YLeaf(YType.str, 'neighbor-logical-interface-name')),
                    ])
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None
                    self._segment_path = lambda: "hop"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.Hop, ['neighbor_address', 'neighbor_logical_interface_name'], name, value)


            class PolicySourceInfo(Entity):
                """
                Policy Sources Info
                
                .. attribute:: is_te_link
                
                	Policy Source is TE Link
                	**type**\: bool
                
                .. attribute:: is_local
                
                	Policy Source is Local
                	**type**\: bool
                
                .. attribute:: is_cops
                
                	Policy Source is COPS
                	**type**\: bool
                
                .. attribute:: is_default
                
                	Policy Source is Default
                	**type**\: bool
                
                .. attribute:: is_cable
                
                	Policy Source is Cable
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.PolicySourceInfo, self).__init__()

                    self.yang_name = "policy-source-info"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_te_link', YLeaf(YType.boolean, 'is-te-link')),
                        ('is_local', YLeaf(YType.boolean, 'is-local')),
                        ('is_cops', YLeaf(YType.boolean, 'is-cops')),
                        ('is_default', YLeaf(YType.boolean, 'is-default')),
                        ('is_cable', YLeaf(YType.boolean, 'is-cable')),
                    ])
                    self.is_te_link = None
                    self.is_local = None
                    self.is_cops = None
                    self.is_default = None
                    self.is_cable = None
                    self._segment_path = lambda: "policy-source-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.PolicySourceInfo, ['is_te_link', 'is_local', 'is_cops', 'is_default', 'is_cable'], name, value)


            class Header(Entity):
                """
                RSVP Header Info
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.Header, self).__init__()

                    self.yang_name = "header"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('rsvp_version', YLeaf(YType.uint8, 'rsvp-version')),
                        ('rsvp_header_flags', YLeaf(YType.uint8, 'rsvp-header-flags')),
                        ('rsvp_ttl', YLeaf(YType.uint8, 'rsvp-ttl')),
                        ('rsvp_message_type', YLeaf(YType.uint8, 'rsvp-message-type')),
                        ('ip_tos', YLeaf(YType.uint8, 'ip-tos')),
                        ('ip_ttl', YLeaf(YType.uint8, 'ip-ttl')),
                        ('ip_source_address', YLeaf(YType.str, 'ip-source-address')),
                    ])
                    self.rsvp_version = None
                    self.rsvp_header_flags = None
                    self.rsvp_ttl = None
                    self.rsvp_message_type = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.ip_source_address = None
                    self._segment_path = lambda: "header"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.Header, ['rsvp_version', 'rsvp_header_flags', 'rsvp_ttl', 'rsvp_message_type', 'ip_tos', 'ip_ttl', 'ip_source_address'], name, value)


            class ExpiryTime(Entity):
                """
                Expiry Time
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.ExpiryTime, self).__init__()

                    self.yang_name = "expiry-time"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "expiry-time"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.ExpiryTime, ['seconds', 'nanoseconds'], name, value)


            class PolicyFlags(Entity):
                """
                Policy Flags
                
                .. attribute:: is_accepted
                
                	Accepted
                	**type**\: bool
                
                .. attribute:: is_installed
                
                	Installed
                	**type**\: bool
                
                .. attribute:: is_forwarding
                
                	Forwarding
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.PolicyFlags, self).__init__()

                    self.yang_name = "policy-flags"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_accepted', YLeaf(YType.boolean, 'is-accepted')),
                        ('is_installed', YLeaf(YType.boolean, 'is-installed')),
                        ('is_forwarding', YLeaf(YType.boolean, 'is-forwarding')),
                    ])
                    self.is_accepted = None
                    self.is_installed = None
                    self.is_forwarding = None
                    self._segment_path = lambda: "policy-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.PolicyFlags, ['is_accepted', 'is_installed', 'is_forwarding'], name, value)


            class PolicyQueryFlags(Entity):
                """
                Policy Query Flags
                
                .. attribute:: is_needed
                
                	Needed
                	**type**\: bool
                
                .. attribute:: is_report_required
                
                	Report Required
                	**type**\: bool
                
                .. attribute:: is_resync
                
                	Resynchronization
                	**type**\: bool
                
                .. attribute:: is_bypass
                
                	Bypass
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.PolicyQueryFlags, self).__init__()

                    self.yang_name = "policy-query-flags"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_needed', YLeaf(YType.boolean, 'is-needed')),
                        ('is_report_required', YLeaf(YType.boolean, 'is-report-required')),
                        ('is_resync', YLeaf(YType.boolean, 'is-resync')),
                        ('is_bypass', YLeaf(YType.boolean, 'is-bypass')),
                    ])
                    self.is_needed = None
                    self.is_report_required = None
                    self.is_resync = None
                    self.is_bypass = None
                    self._segment_path = lambda: "policy-query-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.PolicyQueryFlags, ['is_needed', 'is_report_required', 'is_resync', 'is_bypass'], name, value)


            class LabelInfo(Entity):
                """
                Label Information
                
                .. attribute:: generic_local_downstream_label
                
                	Generic Local Downstream Label
                	**type**\:  :py:class:`GenericLocalDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel>`
                
                .. attribute:: generic_outgoing_downstream_label
                
                	Generic Outgoing Downstream Label
                	**type**\:  :py:class:`GenericOutgoingDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel>`
                
                .. attribute:: generic_merge_point_label
                
                	Generic MergePoint Label
                	**type**\:  :py:class:`GenericMergePointLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel>`
                
                .. attribute:: generic_outgoing_upstream_label
                
                	Generic Outgoing Upstream Label
                	**type**\:  :py:class:`GenericOutgoingUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel>`
                
                .. attribute:: generic_local_upstream_label
                
                	Generic Local Upstream Label
                	**type**\:  :py:class:`GenericLocalUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel>`
                
                .. attribute:: generic_recovery_label
                
                	Generic Recovery Label
                	**type**\:  :py:class:`GenericRecoveryLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel>`
                
                .. attribute:: is_valid
                
                	Is the label information valid
                	**type**\: bool
                
                .. attribute:: local_downstream_label
                
                	Local Downstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_downstream_label
                
                	Outgoing Downstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: merge_point_label
                
                	MergePoint Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_upstream_label
                
                	Outgoing Upstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_upstream_label
                
                	Local Upstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: recovery_label
                
                	Recovery Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_wrap_label
                
                	LSP Wrap Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo, self).__init__()

                    self.yang_name = "label-info"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("generic-local-downstream-label", ("generic_local_downstream_label", RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel)), ("generic-outgoing-downstream-label", ("generic_outgoing_downstream_label", RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel)), ("generic-merge-point-label", ("generic_merge_point_label", RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel)), ("generic-outgoing-upstream-label", ("generic_outgoing_upstream_label", RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel)), ("generic-local-upstream-label", ("generic_local_upstream_label", RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel)), ("generic-recovery-label", ("generic_recovery_label", RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_valid', YLeaf(YType.boolean, 'is-valid')),
                        ('local_downstream_label', YLeaf(YType.uint32, 'local-downstream-label')),
                        ('outgoing_downstream_label', YLeaf(YType.uint32, 'outgoing-downstream-label')),
                        ('merge_point_label', YLeaf(YType.uint32, 'merge-point-label')),
                        ('outgoing_upstream_label', YLeaf(YType.uint32, 'outgoing-upstream-label')),
                        ('local_upstream_label', YLeaf(YType.uint32, 'local-upstream-label')),
                        ('recovery_label', YLeaf(YType.uint32, 'recovery-label')),
                        ('lsp_wrap_label', YLeaf(YType.uint32, 'lsp-wrap-label')),
                    ])
                    self.is_valid = None
                    self.local_downstream_label = None
                    self.outgoing_downstream_label = None
                    self.merge_point_label = None
                    self.outgoing_upstream_label = None
                    self.local_upstream_label = None
                    self.recovery_label = None
                    self.lsp_wrap_label = None

                    self.generic_local_downstream_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel()
                    self.generic_local_downstream_label.parent = self
                    self._children_name_map["generic_local_downstream_label"] = "generic-local-downstream-label"
                    self._children_yang_names.add("generic-local-downstream-label")

                    self.generic_outgoing_downstream_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel()
                    self.generic_outgoing_downstream_label.parent = self
                    self._children_name_map["generic_outgoing_downstream_label"] = "generic-outgoing-downstream-label"
                    self._children_yang_names.add("generic-outgoing-downstream-label")

                    self.generic_merge_point_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel()
                    self.generic_merge_point_label.parent = self
                    self._children_name_map["generic_merge_point_label"] = "generic-merge-point-label"
                    self._children_yang_names.add("generic-merge-point-label")

                    self.generic_outgoing_upstream_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel()
                    self.generic_outgoing_upstream_label.parent = self
                    self._children_name_map["generic_outgoing_upstream_label"] = "generic-outgoing-upstream-label"
                    self._children_yang_names.add("generic-outgoing-upstream-label")

                    self.generic_local_upstream_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel()
                    self.generic_local_upstream_label.parent = self
                    self._children_name_map["generic_local_upstream_label"] = "generic-local-upstream-label"
                    self._children_yang_names.add("generic-local-upstream-label")

                    self.generic_recovery_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel()
                    self.generic_recovery_label.parent = self
                    self._children_name_map["generic_recovery_label"] = "generic-recovery-label"
                    self._children_yang_names.add("generic-recovery-label")
                    self._segment_path = lambda: "label-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo, ['is_valid', 'local_downstream_label', 'outgoing_downstream_label', 'merge_point_label', 'outgoing_upstream_label', 'local_upstream_label', 'recovery_label', 'lsp_wrap_label'], name, value)


                class GenericLocalDownstreamLabel(Entity):
                    """
                    Generic Local Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel, self).__init__()

                        self.yang_name = "generic-local-downstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-local-downstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-local-downstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-local-downstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericOutgoingDownstreamLabel(Entity):
                    """
                    Generic Outgoing Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel, self).__init__()

                        self.yang_name = "generic-outgoing-downstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-outgoing-downstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-outgoing-downstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-outgoing-downstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericMergePointLabel(Entity):
                    """
                    Generic MergePoint Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel, self).__init__()

                        self.yang_name = "generic-merge-point-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-merge-point-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-merge-point-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-merge-point-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel, ['value'], name, value)


                class GenericOutgoingUpstreamLabel(Entity):
                    """
                    Generic Outgoing Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel, self).__init__()

                        self.yang_name = "generic-outgoing-upstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-outgoing-upstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-outgoing-upstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-outgoing-upstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericLocalUpstreamLabel(Entity):
                    """
                    Generic Local Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel, self).__init__()

                        self.yang_name = "generic-local-upstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-local-upstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-local-upstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-local-upstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericRecoveryLabel(Entity):
                    """
                    Generic Recovery Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel, self).__init__()

                        self.yang_name = "generic-recovery-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-recovery-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-recovery-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-recovery-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel, ['value'], name, value)


            class ClassType(Entity):
                """
                DS\-TE Class\-Type
                
                .. attribute:: is_class_type_info_valid
                
                	Is the Class\-Type information valid
                	**type**\: bool
                
                .. attribute:: class_type
                
                	DS\-TE Class\-Type
                	**type**\: int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.ClassType, self).__init__()

                    self.yang_name = "class-type"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_class_type_info_valid', YLeaf(YType.boolean, 'is-class-type-info-valid')),
                        ('class_type', YLeaf(YType.uint8, 'class-type')),
                    ])
                    self.is_class_type_info_valid = None
                    self.class_type = None
                    self._segment_path = lambda: "class-type"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.ClassType, ['is_class_type_info_valid', 'class_type'], name, value)


            class Pfc(Entity):
                """
                Path Forwarding Contexts
                
                .. attribute:: policy_flags
                
                	Policy Flags
                	**type**\:  :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags>`
                
                .. attribute:: policy_query_flags
                
                	Policy Query Flags
                	**type**\:  :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags>`
                
                .. attribute:: output_interface
                
                	Output interface
                	**type**\: str
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.Pfc, self).__init__()

                    self.yang_name = "pfc"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("policy-flags", ("policy_flags", RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags)), ("policy-query-flags", ("policy_query_flags", RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('output_interface', YLeaf(YType.str, 'output-interface')),
                    ])
                    self.output_interface = None

                    self.policy_flags = RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags()
                    self.policy_flags.parent = self
                    self._children_name_map["policy_flags"] = "policy-flags"
                    self._children_yang_names.add("policy-flags")

                    self.policy_query_flags = RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags()
                    self.policy_query_flags.parent = self
                    self._children_name_map["policy_query_flags"] = "policy-query-flags"
                    self._children_yang_names.add("policy-query-flags")
                    self._segment_path = lambda: "pfc"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.Pfc, ['output_interface'], name, value)


                class PolicyFlags(Entity):
                    """
                    Policy Flags
                    
                    .. attribute:: is_accepted
                    
                    	Accepted
                    	**type**\: bool
                    
                    .. attribute:: is_installed
                    
                    	Installed
                    	**type**\: bool
                    
                    .. attribute:: is_forwarding
                    
                    	Forwarding
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags, self).__init__()

                        self.yang_name = "policy-flags"
                        self.yang_parent_name = "pfc"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_accepted', YLeaf(YType.boolean, 'is-accepted')),
                            ('is_installed', YLeaf(YType.boolean, 'is-installed')),
                            ('is_forwarding', YLeaf(YType.boolean, 'is-forwarding')),
                        ])
                        self.is_accepted = None
                        self.is_installed = None
                        self.is_forwarding = None
                        self._segment_path = lambda: "policy-flags"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/pfc/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags, ['is_accepted', 'is_installed', 'is_forwarding'], name, value)


                class PolicyQueryFlags(Entity):
                    """
                    Policy Query Flags
                    
                    .. attribute:: is_needed
                    
                    	Needed
                    	**type**\: bool
                    
                    .. attribute:: is_report_required
                    
                    	Report Required
                    	**type**\: bool
                    
                    .. attribute:: is_resync
                    
                    	Resynchronization
                    	**type**\: bool
                    
                    .. attribute:: is_bypass
                    
                    	Bypass
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags, self).__init__()

                        self.yang_name = "policy-query-flags"
                        self.yang_parent_name = "pfc"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_needed', YLeaf(YType.boolean, 'is-needed')),
                            ('is_report_required', YLeaf(YType.boolean, 'is-report-required')),
                            ('is_resync', YLeaf(YType.boolean, 'is-resync')),
                            ('is_bypass', YLeaf(YType.boolean, 'is-bypass')),
                        ])
                        self.is_needed = None
                        self.is_report_required = None
                        self.is_resync = None
                        self.is_bypass = None
                        self._segment_path = lambda: "policy-query-flags"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/pfc/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags, ['is_needed', 'is_report_required', 'is_resync', 'is_bypass'], name, value)


            class InEro(Entity):
                """
                Incoming Explicit Route Sub Objects
                
                .. attribute:: ipv4ero_sub_object
                
                	IPV4 ERO Sub Object
                	**type**\:  :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject>`
                
                .. attribute:: unnumbered_ero_sub_object
                
                	Unnumbered ERO Sub Object
                	**type**\:  :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject>`
                
                .. attribute:: ero_type
                
                	EROType
                	**type**\:  :py:class:`RsvpMgmtEroSubobj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobj>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.InEro, self).__init__()

                    self.yang_name = "in-ero"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("ipv4ero-sub-object", ("ipv4ero_sub_object", RsvpStandby.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject)), ("unnumbered-ero-sub-object", ("unnumbered_ero_sub_object", RsvpStandby.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('ero_type', YLeaf(YType.enumeration, 'ero-type')),
                    ])
                    self.ero_type = None

                    self.ipv4ero_sub_object = RsvpStandby.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject()
                    self.ipv4ero_sub_object.parent = self
                    self._children_name_map["ipv4ero_sub_object"] = "ipv4ero-sub-object"
                    self._children_yang_names.add("ipv4ero-sub-object")

                    self.unnumbered_ero_sub_object = RsvpStandby.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject()
                    self.unnumbered_ero_sub_object.parent = self
                    self._children_name_map["unnumbered_ero_sub_object"] = "unnumbered-ero-sub-object"
                    self._children_yang_names.add("unnumbered-ero-sub-object")
                    self._segment_path = lambda: "in-ero"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.InEro, ['ero_type'], name, value)


                class Ipv4EroSubObject(Entity):
                    """
                    IPV4 ERO Sub Object
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\: bool
                    
                    .. attribute:: ero_address
                    
                    	The ERO IPV4 Address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: prefix_length
                    
                    	ERO Prefix Length
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject, self).__init__()

                        self.yang_name = "ipv4ero-sub-object"
                        self.yang_parent_name = "in-ero"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                            ('ero_address', YLeaf(YType.str, 'ero-address')),
                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                        ])
                        self.is_strict_route = None
                        self.ero_address = None
                        self.prefix_length = None
                        self._segment_path = lambda: "ipv4ero-sub-object"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/in-ero/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject, ['is_strict_route', 'ero_address', 'prefix_length'], name, value)


                class UnnumberedEroSubObject(Entity):
                    """
                    Unnumbered ERO Sub Object
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\: bool
                    
                    .. attribute:: ero_interface_id
                    
                    	The Interface ID in ERO
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ero_router_id
                    
                    	The Router ID in ERO
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: status
                    
                    	Status of ERO
                    	**type**\:  :py:class:`RsvpMgmtEroSubobjStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatus>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject, self).__init__()

                        self.yang_name = "unnumbered-ero-sub-object"
                        self.yang_parent_name = "in-ero"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                            ('ero_interface_id', YLeaf(YType.uint32, 'ero-interface-id')),
                            ('ero_router_id', YLeaf(YType.str, 'ero-router-id')),
                            ('status', YLeaf(YType.enumeration, 'status')),
                        ])
                        self.is_strict_route = None
                        self.ero_interface_id = None
                        self.ero_router_id = None
                        self.status = None
                        self._segment_path = lambda: "unnumbered-ero-sub-object"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/in-ero/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject, ['is_strict_route', 'ero_interface_id', 'ero_router_id', 'status'], name, value)


            class OutEro(Entity):
                """
                Outgoing Explicit Route Sub Objects
                
                .. attribute:: ipv4ero_sub_object
                
                	IPV4 ERO Sub Object
                	**type**\:  :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject>`
                
                .. attribute:: unnumbered_ero_sub_object
                
                	Unnumbered ERO Sub Object
                	**type**\:  :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject>`
                
                .. attribute:: ero_type
                
                	EROType
                	**type**\:  :py:class:`RsvpMgmtEroSubobj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobj>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbDetaileds.PsbDetailed.OutEro, self).__init__()

                    self.yang_name = "out-ero"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("ipv4ero-sub-object", ("ipv4ero_sub_object", RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject)), ("unnumbered-ero-sub-object", ("unnumbered_ero_sub_object", RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('ero_type', YLeaf(YType.enumeration, 'ero-type')),
                    ])
                    self.ero_type = None

                    self.ipv4ero_sub_object = RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject()
                    self.ipv4ero_sub_object.parent = self
                    self._children_name_map["ipv4ero_sub_object"] = "ipv4ero-sub-object"
                    self._children_yang_names.add("ipv4ero-sub-object")

                    self.unnumbered_ero_sub_object = RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject()
                    self.unnumbered_ero_sub_object.parent = self
                    self._children_name_map["unnumbered_ero_sub_object"] = "unnumbered-ero-sub-object"
                    self._children_yang_names.add("unnumbered-ero-sub-object")
                    self._segment_path = lambda: "out-ero"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.OutEro, ['ero_type'], name, value)


                class Ipv4EroSubObject(Entity):
                    """
                    IPV4 ERO Sub Object
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\: bool
                    
                    .. attribute:: ero_address
                    
                    	The ERO IPV4 Address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: prefix_length
                    
                    	ERO Prefix Length
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject, self).__init__()

                        self.yang_name = "ipv4ero-sub-object"
                        self.yang_parent_name = "out-ero"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                            ('ero_address', YLeaf(YType.str, 'ero-address')),
                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                        ])
                        self.is_strict_route = None
                        self.ero_address = None
                        self.prefix_length = None
                        self._segment_path = lambda: "ipv4ero-sub-object"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/out-ero/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject, ['is_strict_route', 'ero_address', 'prefix_length'], name, value)


                class UnnumberedEroSubObject(Entity):
                    """
                    Unnumbered ERO Sub Object
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\: bool
                    
                    .. attribute:: ero_interface_id
                    
                    	The Interface ID in ERO
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ero_router_id
                    
                    	The Router ID in ERO
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: status
                    
                    	Status of ERO
                    	**type**\:  :py:class:`RsvpMgmtEroSubobjStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatus>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject, self).__init__()

                        self.yang_name = "unnumbered-ero-sub-object"
                        self.yang_parent_name = "out-ero"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                            ('ero_interface_id', YLeaf(YType.uint32, 'ero-interface-id')),
                            ('ero_router_id', YLeaf(YType.str, 'ero-router-id')),
                            ('status', YLeaf(YType.enumeration, 'status')),
                        ])
                        self.is_strict_route = None
                        self.ero_interface_id = None
                        self.ero_router_id = None
                        self.status = None
                        self._segment_path = lambda: "unnumbered-ero-sub-object"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/out-ero/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject, ['is_strict_route', 'ero_interface_id', 'ero_router_id', 'status'], name, value)


    class ControllerDetaileds(Entity):
        """
        Table of detailed info about RSVP\-enabled
        controllers
        
        .. attribute:: controller_detailed
        
        	Detailed info about an RSVP\-enabled controller
        	**type**\: list of  		 :py:class:`ControllerDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerDetaileds.ControllerDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.ControllerDetaileds, self).__init__()

            self.yang_name = "controller-detaileds"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("controller-detailed", ("controller_detailed", RsvpStandby.ControllerDetaileds.ControllerDetailed))])
            self._leafs = OrderedDict()

            self.controller_detailed = YList(self)
            self._segment_path = lambda: "controller-detaileds"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.ControllerDetaileds, [], name, value)


        class ControllerDetailed(Entity):
            """
            Detailed info about an RSVP\-enabled controller
            
            .. attribute:: controller_name  (key)
            
            	Controller Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:  :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation>`
            
            .. attribute:: flags
            
            	Interface flags
            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerDetaileds.ControllerDetailed.Flags>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\: str
            
            .. attribute:: signalling_ip_tos
            
            	IP TOS (precedence/DSCP) to use in signalling messages
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: integrity_send_password
            
            	Integrity send password
            	**type**\: str
            
            	**length:** 0..40
            
            .. attribute:: integrity_receive_password
            
            	Integrity receive password
            	**type**\: str
            
            	**length:** 0..40
            
            .. attribute:: integrity_receive_password_optional
            
            	Integrity recv password optional
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: refresh_timer_state
            
            	Refresh timer state
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: summary_refresh_timer_state
            
            	Summary refresh timer state
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: refresh_interval
            
            	Refresh interval in msecs
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: millisecond
            
            .. attribute:: out_of_band_refresh_interval
            
            	Out\-of\-band Refresh interval in msecs
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: summary_refresh_max_size
            
            	Max size in bytes of a single SRefresh
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: bundle_message_max_size
            
            	Max size in bytes of a single Bundle message
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: expiry_timer_state
            
            	Expiry timer state
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: expiry_states
            
            	Number of states for expiry check
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: expiry_interval
            
            	Expiry interval in msecs
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: millisecond
            
            .. attribute:: expiry_drops_tolerated
            
            	Number of missed messages tolerated
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: out_of_band_expiry_drops_tolerated
            
            	Number of out\-of\-band missed messages tolerated
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ack_hold_time
            
            	ACK hold time in msec
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ack_max_size
            
            	Max size for ACK message
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: retransmit_time
            
            	Retransmit time in msec
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: pacing_interval
            
            	Pacing interval in msecs
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: pacing_message_rate
            
            	No. of messages per interval
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: pacing_timer_state
            
            	State of pacing timer
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: pacing_messages
            
            	Number of messages deferred for pacing
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: neighbor_array
            
            	Neighbor array
            	**type**\: list of  		 :py:class:`NeighborArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerDetaileds.ControllerDetailed.NeighborArray>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.ControllerDetaileds.ControllerDetailed, self).__init__()

                self.yang_name = "controller-detailed"
                self.yang_parent_name = "controller-detaileds"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['controller_name']
                self._child_container_classes = OrderedDict([("bandwidth-information", ("bandwidth_information", RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation)), ("flags", ("flags", RsvpStandby.ControllerDetaileds.ControllerDetailed.Flags))])
                self._child_list_classes = OrderedDict([("neighbor-array", ("neighbor_array", RsvpStandby.ControllerDetaileds.ControllerDetailed.NeighborArray))])
                self._leafs = OrderedDict([
                    ('controller_name', YLeaf(YType.str, 'controller-name')),
                    ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                    ('signalling_ip_tos', YLeaf(YType.uint8, 'signalling-ip-tos')),
                    ('integrity_send_password', YLeaf(YType.str, 'integrity-send-password')),
                    ('integrity_receive_password', YLeaf(YType.str, 'integrity-receive-password')),
                    ('integrity_receive_password_optional', YLeaf(YType.uint8, 'integrity-receive-password-optional')),
                    ('refresh_timer_state', YLeaf(YType.enumeration, 'refresh-timer-state')),
                    ('summary_refresh_timer_state', YLeaf(YType.enumeration, 'summary-refresh-timer-state')),
                    ('refresh_interval', YLeaf(YType.int32, 'refresh-interval')),
                    ('out_of_band_refresh_interval', YLeaf(YType.uint32, 'out-of-band-refresh-interval')),
                    ('summary_refresh_max_size', YLeaf(YType.uint32, 'summary-refresh-max-size')),
                    ('bundle_message_max_size', YLeaf(YType.uint32, 'bundle-message-max-size')),
                    ('expiry_timer_state', YLeaf(YType.enumeration, 'expiry-timer-state')),
                    ('expiry_states', YLeaf(YType.int32, 'expiry-states')),
                    ('expiry_interval', YLeaf(YType.int32, 'expiry-interval')),
                    ('expiry_drops_tolerated', YLeaf(YType.int32, 'expiry-drops-tolerated')),
                    ('out_of_band_expiry_drops_tolerated', YLeaf(YType.uint32, 'out-of-band-expiry-drops-tolerated')),
                    ('ack_hold_time', YLeaf(YType.uint32, 'ack-hold-time')),
                    ('ack_max_size', YLeaf(YType.uint32, 'ack-max-size')),
                    ('retransmit_time', YLeaf(YType.uint32, 'retransmit-time')),
                    ('pacing_interval', YLeaf(YType.uint32, 'pacing-interval')),
                    ('pacing_message_rate', YLeaf(YType.uint32, 'pacing-message-rate')),
                    ('pacing_timer_state', YLeaf(YType.enumeration, 'pacing-timer-state')),
                    ('pacing_messages', YLeaf(YType.int32, 'pacing-messages')),
                ])
                self.controller_name = None
                self.interface_name_xr = None
                self.signalling_ip_tos = None
                self.integrity_send_password = None
                self.integrity_receive_password = None
                self.integrity_receive_password_optional = None
                self.refresh_timer_state = None
                self.summary_refresh_timer_state = None
                self.refresh_interval = None
                self.out_of_band_refresh_interval = None
                self.summary_refresh_max_size = None
                self.bundle_message_max_size = None
                self.expiry_timer_state = None
                self.expiry_states = None
                self.expiry_interval = None
                self.expiry_drops_tolerated = None
                self.out_of_band_expiry_drops_tolerated = None
                self.ack_hold_time = None
                self.ack_max_size = None
                self.retransmit_time = None
                self.pacing_interval = None
                self.pacing_message_rate = None
                self.pacing_timer_state = None
                self.pacing_messages = None

                self.bandwidth_information = RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation()
                self.bandwidth_information.parent = self
                self._children_name_map["bandwidth_information"] = "bandwidth-information"
                self._children_yang_names.add("bandwidth-information")

                self.flags = RsvpStandby.ControllerDetaileds.ControllerDetailed.Flags()
                self.flags.parent = self
                self._children_name_map["flags"] = "flags"
                self._children_yang_names.add("flags")

                self.neighbor_array = YList(self)
                self._segment_path = lambda: "controller-detailed" + "[controller-name='" + str(self.controller_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-detaileds/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.ControllerDetaileds.ControllerDetailed, ['controller_name', 'interface_name_xr', 'signalling_ip_tos', 'integrity_send_password', 'integrity_receive_password', 'integrity_receive_password_optional', 'refresh_timer_state', 'summary_refresh_timer_state', 'refresh_interval', 'out_of_band_refresh_interval', 'summary_refresh_max_size', 'bundle_message_max_size', 'expiry_timer_state', 'expiry_states', 'expiry_interval', 'expiry_drops_tolerated', 'out_of_band_expiry_drops_tolerated', 'ack_hold_time', 'ack_max_size', 'retransmit_time', 'pacing_interval', 'pacing_message_rate', 'pacing_timer_state', 'pacing_messages'], name, value)


            class BandwidthInformation(Entity):
                """
                Interface bandwidth information
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:  :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:  :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation.StandardDsteInterface>`
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:  :py:class:`RsvpMgmtDsteModes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModes>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation, self).__init__()

                    self.yang_name = "bandwidth-information"
                    self.yang_parent_name = "controller-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("pre-standard-dste-interface", ("pre_standard_dste_interface", RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation.PreStandardDsteInterface)), ("standard-dste-interface", ("standard_dste_interface", RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation.StandardDsteInterface))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dste_mode', YLeaf(YType.enumeration, 'dste-mode')),
                    ])
                    self.dste_mode = None

                    self.pre_standard_dste_interface = RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self._children_name_map["pre_standard_dste_interface"] = "pre-standard-dste-interface"
                    self._children_yang_names.add("pre-standard-dste-interface")

                    self.standard_dste_interface = RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self
                    self._children_name_map["standard_dste_interface"] = "standard-dste-interface"
                    self._children_yang_names.add("standard-dste-interface")
                    self._segment_path = lambda: "bandwidth-information"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation, ['dste_mode'], name, value)


                class PreStandardDsteInterface(Entity):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation.PreStandardDsteInterface, self).__init__()

                        self.yang_name = "pre-standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_subpool_bandwidth', YLeaf(YType.uint64, 'max-subpool-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_subpool_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-subpool-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_subpool_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self._segment_path = lambda: "pre-standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation.PreStandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_subpool_bandwidth', 'is_max_bandwidth_absolute', 'is_max_subpool_bandwidth_absolute'], name, value)


                class StandardDsteInterface(Entity):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation.StandardDsteInterface, self).__init__()

                        self.yang_name = "standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_pool0_bandwidth', YLeaf(YType.uint64, 'max-pool0-bandwidth')),
                            ('max_pool1_bandwidth', YLeaf(YType.uint64, 'max-pool1-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_bc0_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc0-bandwidth-absolute')),
                            ('is_max_bc1_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc1-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self._segment_path = lambda: "standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.ControllerDetaileds.ControllerDetailed.BandwidthInformation.StandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_pool0_bandwidth', 'max_pool1_bandwidth', 'is_max_bandwidth_absolute', 'is_max_bc0_bandwidth_absolute', 'is_max_bc1_bandwidth_absolute'], name, value)


            class Flags(Entity):
                """
                Interface flags
                
                .. attribute:: is_mpls_enabled
                
                	MPLS enabled on interface
                	**type**\: bool
                
                .. attribute:: is_refresh_reduction_enabled
                
                	Refresh Reduction enabled
                	**type**\: bool
                
                .. attribute:: is_pacing_enabled
                
                	Message pacing enabled
                	**type**\: bool
                
                .. attribute:: is_refresh_enabled
                
                	Refresh enabled
                	**type**\: bool
                
                .. attribute:: is_s_refresh_enabled
                
                	Summary Refresh enabled
                	**type**\: bool
                
                .. attribute:: is_interface_down
                
                	Interface is DOWN
                	**type**\: bool
                
                .. attribute:: is_interface_created
                
                	Interface is created
                	**type**\: bool
                
                .. attribute:: is_rel_s_refresh_enabled
                
                	Use reliable xmt for SRefresh
                	**type**\: bool
                
                .. attribute:: is_backup_tunnel
                
                	This is backup tunnel
                	**type**\: bool
                
                .. attribute:: is_rsvp_configured
                
                	RSVP explicitly configured
                	**type**\: bool
                
                .. attribute:: is_non_default_vrf
                
                	Interface is defined in non\-Default VRF
                	**type**\: bool
                
                .. attribute:: is_message_bundling_enabled
                
                	Use bundling for outgoing RSVP messages
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.ControllerDetaileds.ControllerDetailed.Flags, self).__init__()

                    self.yang_name = "flags"
                    self.yang_parent_name = "controller-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_mpls_enabled', YLeaf(YType.boolean, 'is-mpls-enabled')),
                        ('is_refresh_reduction_enabled', YLeaf(YType.boolean, 'is-refresh-reduction-enabled')),
                        ('is_pacing_enabled', YLeaf(YType.boolean, 'is-pacing-enabled')),
                        ('is_refresh_enabled', YLeaf(YType.boolean, 'is-refresh-enabled')),
                        ('is_s_refresh_enabled', YLeaf(YType.boolean, 'is-s-refresh-enabled')),
                        ('is_interface_down', YLeaf(YType.boolean, 'is-interface-down')),
                        ('is_interface_created', YLeaf(YType.boolean, 'is-interface-created')),
                        ('is_rel_s_refresh_enabled', YLeaf(YType.boolean, 'is-rel-s-refresh-enabled')),
                        ('is_backup_tunnel', YLeaf(YType.boolean, 'is-backup-tunnel')),
                        ('is_rsvp_configured', YLeaf(YType.boolean, 'is-rsvp-configured')),
                        ('is_non_default_vrf', YLeaf(YType.boolean, 'is-non-default-vrf')),
                        ('is_message_bundling_enabled', YLeaf(YType.boolean, 'is-message-bundling-enabled')),
                    ])
                    self.is_mpls_enabled = None
                    self.is_refresh_reduction_enabled = None
                    self.is_pacing_enabled = None
                    self.is_refresh_enabled = None
                    self.is_s_refresh_enabled = None
                    self.is_interface_down = None
                    self.is_interface_created = None
                    self.is_rel_s_refresh_enabled = None
                    self.is_backup_tunnel = None
                    self.is_rsvp_configured = None
                    self.is_non_default_vrf = None
                    self.is_message_bundling_enabled = None
                    self._segment_path = lambda: "flags"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.ControllerDetaileds.ControllerDetailed.Flags, ['is_mpls_enabled', 'is_refresh_reduction_enabled', 'is_pacing_enabled', 'is_refresh_enabled', 'is_s_refresh_enabled', 'is_interface_down', 'is_interface_created', 'is_rel_s_refresh_enabled', 'is_backup_tunnel', 'is_rsvp_configured', 'is_non_default_vrf', 'is_message_bundling_enabled'], name, value)


            class NeighborArray(Entity):
                """
                Neighbor array
                
                .. attribute:: expiry_time
                
                	Expiry time
                	**type**\:  :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerDetaileds.ControllerDetailed.NeighborArray.ExpiryTime>`
                
                .. attribute:: is_neighbor_refresh_reduction_capable
                
                	Is neighbor capable of Refresh Reduction
                	**type**\: bool
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: message_ids
                
                	Number of MessageIDs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_states
                
                	Number of outgoing states to the neighbour
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: neighbor_message_id
                
                	List of Neighbor MessageIDs
                	**type**\: list of  		 :py:class:`NeighborMessageId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerDetaileds.ControllerDetailed.NeighborArray.NeighborMessageId>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.ControllerDetaileds.ControllerDetailed.NeighborArray, self).__init__()

                    self.yang_name = "neighbor-array"
                    self.yang_parent_name = "controller-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("expiry-time", ("expiry_time", RsvpStandby.ControllerDetaileds.ControllerDetailed.NeighborArray.ExpiryTime))])
                    self._child_list_classes = OrderedDict([("neighbor-message-id", ("neighbor_message_id", RsvpStandby.ControllerDetaileds.ControllerDetailed.NeighborArray.NeighborMessageId))])
                    self._leafs = OrderedDict([
                        ('is_neighbor_refresh_reduction_capable', YLeaf(YType.boolean, 'is-neighbor-refresh-reduction-capable')),
                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                        ('message_ids', YLeaf(YType.uint32, 'message-ids')),
                        ('outgoing_states', YLeaf(YType.int32, 'outgoing-states')),
                    ])
                    self.is_neighbor_refresh_reduction_capable = None
                    self.neighbor_address = None
                    self.message_ids = None
                    self.outgoing_states = None

                    self.expiry_time = RsvpStandby.ControllerDetaileds.ControllerDetailed.NeighborArray.ExpiryTime()
                    self.expiry_time.parent = self
                    self._children_name_map["expiry_time"] = "expiry-time"
                    self._children_yang_names.add("expiry-time")

                    self.neighbor_message_id = YList(self)
                    self._segment_path = lambda: "neighbor-array"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.ControllerDetaileds.ControllerDetailed.NeighborArray, ['is_neighbor_refresh_reduction_capable', 'neighbor_address', 'message_ids', 'outgoing_states'], name, value)


                class ExpiryTime(Entity):
                    """
                    Expiry time
                    
                    .. attribute:: seconds
                    
                    	Time Value in Seconds
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	Time Value in Nano\-seconds
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.ControllerDetaileds.ControllerDetailed.NeighborArray.ExpiryTime, self).__init__()

                        self.yang_name = "expiry-time"
                        self.yang_parent_name = "neighbor-array"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.int32, 'seconds')),
                            ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "expiry-time"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.ControllerDetaileds.ControllerDetailed.NeighborArray.ExpiryTime, ['seconds', 'nanoseconds'], name, value)


                class NeighborMessageId(Entity):
                    """
                    List of Neighbor MessageIDs
                    
                    .. attribute:: message_id
                    
                    	Message ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.ControllerDetaileds.ControllerDetailed.NeighborArray.NeighborMessageId, self).__init__()

                        self.yang_name = "neighbor-message-id"
                        self.yang_parent_name = "neighbor-array"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('message_id', YLeaf(YType.uint32, 'message-id')),
                        ])
                        self.message_id = None
                        self._segment_path = lambda: "neighbor-message-id"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.ControllerDetaileds.ControllerDetailed.NeighborArray.NeighborMessageId, ['message_id'], name, value)


    class FrrSummary(Entity):
        """
        Fast Re\-Route Summary State Information
        
        .. attribute:: path_states
        
        	Path state counters
        	**type**\:  :py:class:`PathStates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.FrrSummary.PathStates>`
        
        .. attribute:: reservation_states
        
        	Rerservation state counters
        	**type**\:  :py:class:`ReservationStates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.FrrSummary.ReservationStates>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.FrrSummary, self).__init__()

            self.yang_name = "frr-summary"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("path-states", ("path_states", RsvpStandby.FrrSummary.PathStates)), ("reservation-states", ("reservation_states", RsvpStandby.FrrSummary.ReservationStates))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.path_states = RsvpStandby.FrrSummary.PathStates()
            self.path_states.parent = self
            self._children_name_map["path_states"] = "path-states"
            self._children_yang_names.add("path-states")

            self.reservation_states = RsvpStandby.FrrSummary.ReservationStates()
            self.reservation_states.parent = self
            self._children_name_map["reservation_states"] = "reservation-states"
            self._children_yang_names.add("reservation-states")
            self._segment_path = lambda: "frr-summary"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()


        class PathStates(Entity):
            """
            Path state counters
            
            .. attribute:: total
            
            	Total number of instances of this state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: active_instances
            
            	Number of active instances of this state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ready_instances
            
            	Number of ready instances of this state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: active_wait_instances
            
            	Number of instances of this state awaiting Path messages to be sent out or Resv messages to be received
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.FrrSummary.PathStates, self).__init__()

                self.yang_name = "path-states"
                self.yang_parent_name = "frr-summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('total', YLeaf(YType.uint32, 'total')),
                    ('active_instances', YLeaf(YType.uint32, 'active-instances')),
                    ('ready_instances', YLeaf(YType.uint32, 'ready-instances')),
                    ('active_wait_instances', YLeaf(YType.uint32, 'active-wait-instances')),
                ])
                self.total = None
                self.active_instances = None
                self.ready_instances = None
                self.active_wait_instances = None
                self._segment_path = lambda: "path-states"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frr-summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.FrrSummary.PathStates, ['total', 'active_instances', 'ready_instances', 'active_wait_instances'], name, value)


        class ReservationStates(Entity):
            """
            Rerservation state counters
            
            .. attribute:: total
            
            	Total number of instances of this state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: active_instances
            
            	Number of active instances of this state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ready_instances
            
            	Number of ready instances of this state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: active_wait_instances
            
            	Number of instances of this state awaiting Path messages to be sent out or Resv messages to be received
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.FrrSummary.ReservationStates, self).__init__()

                self.yang_name = "reservation-states"
                self.yang_parent_name = "frr-summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('total', YLeaf(YType.uint32, 'total')),
                    ('active_instances', YLeaf(YType.uint32, 'active-instances')),
                    ('ready_instances', YLeaf(YType.uint32, 'ready-instances')),
                    ('active_wait_instances', YLeaf(YType.uint32, 'active-wait-instances')),
                ])
                self.total = None
                self.active_instances = None
                self.ready_instances = None
                self.active_wait_instances = None
                self._segment_path = lambda: "reservation-states"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frr-summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.FrrSummary.ReservationStates, ['total', 'active_instances', 'ready_instances', 'active_wait_instances'], name, value)


    class RsbDetaileds(Entity):
        """
        Table of detailed info about reservation state
        blocks
        
        .. attribute:: rsb_detailed
        
        	Detailed info for a single reservation state block
        	**type**\: list of  		 :py:class:`RsbDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.RsbDetaileds, self).__init__()

            self.yang_name = "rsb-detaileds"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("rsb-detailed", ("rsb_detailed", RsvpStandby.RsbDetaileds.RsbDetailed))])
            self._leafs = OrderedDict()

            self.rsb_detailed = YList(self)
            self._segment_path = lambda: "rsb-detaileds"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.RsbDetaileds, [], name, value)


        class RsbDetailed(Entity):
            """
            Detailed info for a single reservation state
            block
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:  :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Information
            	**type**\:  :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.S2LSubLsp>`
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:  :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Style>`
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:  :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Filter>`
            
            .. attribute:: rsb_flags
            
            	Reservation State Block Flags
            	**type**\:  :py:class:`RsbFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.RsbFlags>`
            
            .. attribute:: hop
            
            	Hop Infomation
            	**type**\:  :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Hop>`
            
            .. attribute:: policy_sources
            
            	RSVP Policy Sources
            	**type**\:  :py:class:`PolicySources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.PolicySources>`
            
            .. attribute:: header
            
            	RSVP Header Information
            	**type**\:  :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Header>`
            
            .. attribute:: policy_flags
            
            	RSVP Policy Flags
            	**type**\:  :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.PolicyFlags>`
            
            .. attribute:: expiry_time
            
            	Expiry Time
            	**type**\:  :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.ExpiryTime>`
            
            .. attribute:: policy_query_flags
            
            	RSVP Query Flags
            	**type**\:  :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.PolicyQueryFlags>`
            
            .. attribute:: label_info
            
            	Label Information
            	**type**\:  :py:class:`LabelInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo>`
            
            .. attribute:: input_adjusted_interface
            
            	Input Adjusted Interface
            	**type**\: str
            
            .. attribute:: input_physical_interface
            
            	Input Physical Interface
            	**type**\: str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.RsbDetaileds.RsbDetailed, self).__init__()

                self.yang_name = "rsb-detailed"
                self.yang_parent_name = "rsb-detaileds"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("flow-spec", ("flow_spec", RsvpStandby.RsbDetaileds.RsbDetailed.FlowSpec)), ("generic-flow-spec", ("generic_flow_spec", RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec)), ("session", ("session", RsvpStandby.RsbDetaileds.RsbDetailed.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", RsvpStandby.RsbDetaileds.RsbDetailed.S2LSubLsp)), ("style", ("style", RsvpStandby.RsbDetaileds.RsbDetailed.Style)), ("filter", ("filter", RsvpStandby.RsbDetaileds.RsbDetailed.Filter)), ("rsb-flags", ("rsb_flags", RsvpStandby.RsbDetaileds.RsbDetailed.RsbFlags)), ("hop", ("hop", RsvpStandby.RsbDetaileds.RsbDetailed.Hop)), ("policy-sources", ("policy_sources", RsvpStandby.RsbDetaileds.RsbDetailed.PolicySources)), ("header", ("header", RsvpStandby.RsbDetaileds.RsbDetailed.Header)), ("policy-flags", ("policy_flags", RsvpStandby.RsbDetaileds.RsbDetailed.PolicyFlags)), ("expiry-time", ("expiry_time", RsvpStandby.RsbDetaileds.RsbDetailed.ExpiryTime)), ("policy-query-flags", ("policy_query_flags", RsvpStandby.RsbDetaileds.RsbDetailed.PolicyQueryFlags)), ("label-info", ("label_info", RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('input_adjusted_interface', YLeaf(YType.str, 'input-adjusted-interface')),
                    ('input_physical_interface', YLeaf(YType.str, 'input-physical-interface')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.input_adjusted_interface = None
                self.input_physical_interface = None

                self.flow_spec = RsvpStandby.RsbDetaileds.RsbDetailed.FlowSpec()
                self.flow_spec.parent = self
                self._children_name_map["flow_spec"] = "flow-spec"
                self._children_yang_names.add("flow-spec")

                self.generic_flow_spec = RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self._children_name_map["generic_flow_spec"] = "generic-flow-spec"
                self._children_yang_names.add("generic-flow-spec")

                self.session = RsvpStandby.RsbDetaileds.RsbDetailed.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = RsvpStandby.RsbDetaileds.RsbDetailed.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.style = RsvpStandby.RsbDetaileds.RsbDetailed.Style()
                self.style.parent = self
                self._children_name_map["style"] = "style"
                self._children_yang_names.add("style")

                self.filter = RsvpStandby.RsbDetaileds.RsbDetailed.Filter()
                self.filter.parent = self
                self._children_name_map["filter"] = "filter"
                self._children_yang_names.add("filter")

                self.rsb_flags = RsvpStandby.RsbDetaileds.RsbDetailed.RsbFlags()
                self.rsb_flags.parent = self
                self._children_name_map["rsb_flags"] = "rsb-flags"
                self._children_yang_names.add("rsb-flags")

                self.hop = RsvpStandby.RsbDetaileds.RsbDetailed.Hop()
                self.hop.parent = self
                self._children_name_map["hop"] = "hop"
                self._children_yang_names.add("hop")

                self.policy_sources = RsvpStandby.RsbDetaileds.RsbDetailed.PolicySources()
                self.policy_sources.parent = self
                self._children_name_map["policy_sources"] = "policy-sources"
                self._children_yang_names.add("policy-sources")

                self.header = RsvpStandby.RsbDetaileds.RsbDetailed.Header()
                self.header.parent = self
                self._children_name_map["header"] = "header"
                self._children_yang_names.add("header")

                self.policy_flags = RsvpStandby.RsbDetaileds.RsbDetailed.PolicyFlags()
                self.policy_flags.parent = self
                self._children_name_map["policy_flags"] = "policy-flags"
                self._children_yang_names.add("policy-flags")

                self.expiry_time = RsvpStandby.RsbDetaileds.RsbDetailed.ExpiryTime()
                self.expiry_time.parent = self
                self._children_name_map["expiry_time"] = "expiry-time"
                self._children_yang_names.add("expiry-time")

                self.policy_query_flags = RsvpStandby.RsbDetaileds.RsbDetailed.PolicyQueryFlags()
                self.policy_query_flags.parent = self
                self._children_name_map["policy_query_flags"] = "policy-query-flags"
                self._children_yang_names.add("policy-query-flags")

                self.label_info = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo()
                self.label_info.parent = self
                self._children_name_map["label_info"] = "label-info"
                self._children_yang_names.add("label-info")
                self._segment_path = lambda: "rsb-detailed"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'input_adjusted_interface', 'input_physical_interface'], name, value)


            class FlowSpec(Entity):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:  :py:class:`RsvpMgmtQosServiceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbDetaileds.RsbDetailed.FlowSpec, self).__init__()

                    self.yang_name = "flow-spec"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_average_rate', YLeaf(YType.uint64, 'flow-average-rate')),
                        ('flow_max_burst', YLeaf(YType.uint64, 'flow-max-burst')),
                        ('flow_peak_rate', YLeaf(YType.uint64, 'flow-peak-rate')),
                        ('flow_min_unit', YLeaf(YType.uint32, 'flow-min-unit')),
                        ('flow_max_unit', YLeaf(YType.uint32, 'flow-max-unit')),
                        ('flow_requested_rate', YLeaf(YType.uint64, 'flow-requested-rate')),
                        ('flow_slack', YLeaf(YType.uint32, 'flow-slack')),
                        ('flow_qos', YLeaf(YType.enumeration, 'flow-qos')),
                    ])
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_peak_rate = None
                    self.flow_min_unit = None
                    self.flow_max_unit = None
                    self.flow_requested_rate = None
                    self.flow_slack = None
                    self.flow_qos = None
                    self._segment_path = lambda: "flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.FlowSpec, ['flow_average_rate', 'flow_max_burst', 'flow_peak_rate', 'flow_min_unit', 'flow_max_unit', 'flow_requested_rate', 'flow_slack', 'flow_qos'], name, value)


            class GenericFlowSpec(Entity):
                """
                Generic Flow Spec Information
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:  :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec>`
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:  :py:class:`RsvpMgmtFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec, self).__init__()

                    self.yang_name = "generic-flow-spec"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("g709otn-flow-spec", ("g709otn_flow_spec", RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_spec_type', YLeaf(YType.enumeration, 'flow-spec-type')),
                    ])
                    self.flow_spec_type = None

                    self.g709otn_flow_spec = RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self
                    self._children_name_map["g709otn_flow_spec"] = "g709otn-flow-spec"
                    self._children_yang_names.add("g709otn-flow-spec")
                    self._segment_path = lambda: "generic-flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec, ['flow_spec_type'], name, value)


                class G709OtnFlowSpec(Entity):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec, self).__init__()

                        self.yang_name = "g709otn-flow-spec"
                        self.yang_parent_name = "generic-flow-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('flow_signal_type', YLeaf(YType.uint8, 'flow-signal-type')),
                            ('flow_nvc', YLeaf(YType.uint16, 'flow-nvc')),
                            ('flow_multiplier', YLeaf(YType.uint16, 'flow-multiplier')),
                            ('flow_bit_rate', YLeaf(YType.uint64, 'flow-bit-rate')),
                        ])
                        self.flow_signal_type = None
                        self.flow_nvc = None
                        self.flow_multiplier = None
                        self.flow_bit_rate = None
                        self._segment_path = lambda: "g709otn-flow-spec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/generic-flow-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec, ['flow_signal_type', 'flow_nvc', 'flow_multiplier', 'flow_bit_rate'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbDetaileds.RsbDetailed.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbDetaileds.RsbDetailed.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.S2LSubLsp, ['s2l_destination_address'], name, value)


            class Style(Entity):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:  :py:class:`RsvpMgmtReservationTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbDetaileds.RsbDetailed.Style, self).__init__()

                    self.yang_name = "style"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('reservation_type', YLeaf(YType.enumeration, 'reservation-type')),
                    ])
                    self.reservation_type = None
                    self._segment_path = lambda: "style"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.Style, ['reservation_type'], name, value)


            class Filter(Entity):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:  :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbDetaileds.RsbDetailed.Filter, self).__init__()

                    self.yang_name = "filter"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-filter", ("rsvp_filter", RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_filter = RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self
                    self._children_name_map["rsvp_filter"] = "rsvp-filter"
                    self._children_yang_names.add("rsvp-filter")
                    self._segment_path = lambda: "filter"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/%s" % self._segment_path()


                class RsvpFilter(Entity):
                    """
                    RSVP Filter
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:  :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:  :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:  :py:class:`RsvpMgmtFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilter>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter, self).__init__()

                        self.yang_name = "rsvp-filter"
                        self.yang_parent_name = "filter"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("udp-ipv4-session", ("udp_ipv4_session", RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session)), ("p2mp-ipv4-session", ("p2mp_ipv4_session", RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('filter_type', YLeaf(YType.enumeration, 'filter-type')),
                        ])
                        self.filter_type = None

                        self.udp_ipv4_session = RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self
                        self._children_name_map["udp_ipv4_session"] = "udp-ipv4-session"
                        self._children_yang_names.add("udp-ipv4-session")

                        self.p2mp_ipv4_session = RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self._children_name_map["p2mp_ipv4_session"] = "p2mp-ipv4-session"
                        self._children_yang_names.add("p2mp-ipv4-session")
                        self._segment_path = lambda: "rsvp-filter"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/filter/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter, ['filter_type'], name, value)


                    class UdpIpv4Session(Entity):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session, self).__init__()

                            self.yang_name = "udp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self._segment_path = lambda: "udp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session, ['source_address', 'source_port'], name, value)


                    class P2MpIpv4Session(Entity):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session, self).__init__()

                            self.yang_name = "p2mp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                                ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                                ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self.p2mp_sub_group_origin = None
                            self.sub_group_id = None
                            self._segment_path = lambda: "p2mp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session, ['source_address', 'source_port', 'p2mp_sub_group_origin', 'sub_group_id'], name, value)


            class RsbFlags(Entity):
                """
                Reservation State Block Flags
                
                .. attribute:: is_local_receiver
                
                	Local Receiver
                	**type**\: bool
                
                .. attribute:: is_message_id_valid
                
                	MessageID Valid
                	**type**\: bool
                
                .. attribute:: is_local_repair
                
                	Rerouted
                	**type**\: bool
                
                .. attribute:: is_merge_point
                
                	Is node a Merge Point
                	**type**\: bool
                
                .. attribute:: is_lockout
                
                	Locked Out
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbDetaileds.RsbDetailed.RsbFlags, self).__init__()

                    self.yang_name = "rsb-flags"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_local_receiver', YLeaf(YType.boolean, 'is-local-receiver')),
                        ('is_message_id_valid', YLeaf(YType.boolean, 'is-message-id-valid')),
                        ('is_local_repair', YLeaf(YType.boolean, 'is-local-repair')),
                        ('is_merge_point', YLeaf(YType.boolean, 'is-merge-point')),
                        ('is_lockout', YLeaf(YType.boolean, 'is-lockout')),
                    ])
                    self.is_local_receiver = None
                    self.is_message_id_valid = None
                    self.is_local_repair = None
                    self.is_merge_point = None
                    self.is_lockout = None
                    self._segment_path = lambda: "rsb-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.RsbFlags, ['is_local_receiver', 'is_message_id_valid', 'is_local_repair', 'is_merge_point', 'is_lockout'], name, value)


            class Hop(Entity):
                """
                Hop Infomation
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbDetaileds.RsbDetailed.Hop, self).__init__()

                    self.yang_name = "hop"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                        ('neighbor_logical_interface_name', YLeaf(YType.str, 'neighbor-logical-interface-name')),
                    ])
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None
                    self._segment_path = lambda: "hop"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.Hop, ['neighbor_address', 'neighbor_logical_interface_name'], name, value)


            class PolicySources(Entity):
                """
                RSVP Policy Sources
                
                .. attribute:: is_te_link
                
                	Policy Source is TE Link
                	**type**\: bool
                
                .. attribute:: is_local
                
                	Policy Source is Local
                	**type**\: bool
                
                .. attribute:: is_cops
                
                	Policy Source is COPS
                	**type**\: bool
                
                .. attribute:: is_default
                
                	Policy Source is Default
                	**type**\: bool
                
                .. attribute:: is_cable
                
                	Policy Source is Cable
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbDetaileds.RsbDetailed.PolicySources, self).__init__()

                    self.yang_name = "policy-sources"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_te_link', YLeaf(YType.boolean, 'is-te-link')),
                        ('is_local', YLeaf(YType.boolean, 'is-local')),
                        ('is_cops', YLeaf(YType.boolean, 'is-cops')),
                        ('is_default', YLeaf(YType.boolean, 'is-default')),
                        ('is_cable', YLeaf(YType.boolean, 'is-cable')),
                    ])
                    self.is_te_link = None
                    self.is_local = None
                    self.is_cops = None
                    self.is_default = None
                    self.is_cable = None
                    self._segment_path = lambda: "policy-sources"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.PolicySources, ['is_te_link', 'is_local', 'is_cops', 'is_default', 'is_cable'], name, value)


            class Header(Entity):
                """
                RSVP Header Information
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbDetaileds.RsbDetailed.Header, self).__init__()

                    self.yang_name = "header"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('rsvp_version', YLeaf(YType.uint8, 'rsvp-version')),
                        ('rsvp_header_flags', YLeaf(YType.uint8, 'rsvp-header-flags')),
                        ('rsvp_ttl', YLeaf(YType.uint8, 'rsvp-ttl')),
                        ('rsvp_message_type', YLeaf(YType.uint8, 'rsvp-message-type')),
                        ('ip_tos', YLeaf(YType.uint8, 'ip-tos')),
                        ('ip_ttl', YLeaf(YType.uint8, 'ip-ttl')),
                        ('ip_source_address', YLeaf(YType.str, 'ip-source-address')),
                    ])
                    self.rsvp_version = None
                    self.rsvp_header_flags = None
                    self.rsvp_ttl = None
                    self.rsvp_message_type = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.ip_source_address = None
                    self._segment_path = lambda: "header"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.Header, ['rsvp_version', 'rsvp_header_flags', 'rsvp_ttl', 'rsvp_message_type', 'ip_tos', 'ip_ttl', 'ip_source_address'], name, value)


            class PolicyFlags(Entity):
                """
                RSVP Policy Flags
                
                .. attribute:: is_accepted
                
                	Accepted
                	**type**\: bool
                
                .. attribute:: is_installed
                
                	Installed
                	**type**\: bool
                
                .. attribute:: is_forwarding
                
                	Forwarding
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbDetaileds.RsbDetailed.PolicyFlags, self).__init__()

                    self.yang_name = "policy-flags"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_accepted', YLeaf(YType.boolean, 'is-accepted')),
                        ('is_installed', YLeaf(YType.boolean, 'is-installed')),
                        ('is_forwarding', YLeaf(YType.boolean, 'is-forwarding')),
                    ])
                    self.is_accepted = None
                    self.is_installed = None
                    self.is_forwarding = None
                    self._segment_path = lambda: "policy-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.PolicyFlags, ['is_accepted', 'is_installed', 'is_forwarding'], name, value)


            class ExpiryTime(Entity):
                """
                Expiry Time
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbDetaileds.RsbDetailed.ExpiryTime, self).__init__()

                    self.yang_name = "expiry-time"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "expiry-time"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.ExpiryTime, ['seconds', 'nanoseconds'], name, value)


            class PolicyQueryFlags(Entity):
                """
                RSVP Query Flags
                
                .. attribute:: is_needed
                
                	Needed
                	**type**\: bool
                
                .. attribute:: is_report_required
                
                	Report Required
                	**type**\: bool
                
                .. attribute:: is_resync
                
                	Resynchronization
                	**type**\: bool
                
                .. attribute:: is_bypass
                
                	Bypass
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbDetaileds.RsbDetailed.PolicyQueryFlags, self).__init__()

                    self.yang_name = "policy-query-flags"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_needed', YLeaf(YType.boolean, 'is-needed')),
                        ('is_report_required', YLeaf(YType.boolean, 'is-report-required')),
                        ('is_resync', YLeaf(YType.boolean, 'is-resync')),
                        ('is_bypass', YLeaf(YType.boolean, 'is-bypass')),
                    ])
                    self.is_needed = None
                    self.is_report_required = None
                    self.is_resync = None
                    self.is_bypass = None
                    self._segment_path = lambda: "policy-query-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.PolicyQueryFlags, ['is_needed', 'is_report_required', 'is_resync', 'is_bypass'], name, value)


            class LabelInfo(Entity):
                """
                Label Information
                
                .. attribute:: generic_local_downstream_label
                
                	Generic Local Downstream Label
                	**type**\:  :py:class:`GenericLocalDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel>`
                
                .. attribute:: generic_outgoing_downstream_label
                
                	Generic Outgoing Downstream Label
                	**type**\:  :py:class:`GenericOutgoingDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel>`
                
                .. attribute:: generic_merge_point_label
                
                	Generic MergePoint Label
                	**type**\:  :py:class:`GenericMergePointLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel>`
                
                .. attribute:: generic_outgoing_upstream_label
                
                	Generic Outgoing Upstream Label
                	**type**\:  :py:class:`GenericOutgoingUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel>`
                
                .. attribute:: generic_local_upstream_label
                
                	Generic Local Upstream Label
                	**type**\:  :py:class:`GenericLocalUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel>`
                
                .. attribute:: generic_recovery_label
                
                	Generic Recovery Label
                	**type**\:  :py:class:`GenericRecoveryLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel>`
                
                .. attribute:: is_valid
                
                	Is the label information valid
                	**type**\: bool
                
                .. attribute:: local_downstream_label
                
                	Local Downstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_downstream_label
                
                	Outgoing Downstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: merge_point_label
                
                	MergePoint Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_upstream_label
                
                	Outgoing Upstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_upstream_label
                
                	Local Upstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: recovery_label
                
                	Recovery Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_wrap_label
                
                	LSP Wrap Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo, self).__init__()

                    self.yang_name = "label-info"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("generic-local-downstream-label", ("generic_local_downstream_label", RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel)), ("generic-outgoing-downstream-label", ("generic_outgoing_downstream_label", RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel)), ("generic-merge-point-label", ("generic_merge_point_label", RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel)), ("generic-outgoing-upstream-label", ("generic_outgoing_upstream_label", RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel)), ("generic-local-upstream-label", ("generic_local_upstream_label", RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel)), ("generic-recovery-label", ("generic_recovery_label", RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_valid', YLeaf(YType.boolean, 'is-valid')),
                        ('local_downstream_label', YLeaf(YType.uint32, 'local-downstream-label')),
                        ('outgoing_downstream_label', YLeaf(YType.uint32, 'outgoing-downstream-label')),
                        ('merge_point_label', YLeaf(YType.uint32, 'merge-point-label')),
                        ('outgoing_upstream_label', YLeaf(YType.uint32, 'outgoing-upstream-label')),
                        ('local_upstream_label', YLeaf(YType.uint32, 'local-upstream-label')),
                        ('recovery_label', YLeaf(YType.uint32, 'recovery-label')),
                        ('lsp_wrap_label', YLeaf(YType.uint32, 'lsp-wrap-label')),
                    ])
                    self.is_valid = None
                    self.local_downstream_label = None
                    self.outgoing_downstream_label = None
                    self.merge_point_label = None
                    self.outgoing_upstream_label = None
                    self.local_upstream_label = None
                    self.recovery_label = None
                    self.lsp_wrap_label = None

                    self.generic_local_downstream_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel()
                    self.generic_local_downstream_label.parent = self
                    self._children_name_map["generic_local_downstream_label"] = "generic-local-downstream-label"
                    self._children_yang_names.add("generic-local-downstream-label")

                    self.generic_outgoing_downstream_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel()
                    self.generic_outgoing_downstream_label.parent = self
                    self._children_name_map["generic_outgoing_downstream_label"] = "generic-outgoing-downstream-label"
                    self._children_yang_names.add("generic-outgoing-downstream-label")

                    self.generic_merge_point_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel()
                    self.generic_merge_point_label.parent = self
                    self._children_name_map["generic_merge_point_label"] = "generic-merge-point-label"
                    self._children_yang_names.add("generic-merge-point-label")

                    self.generic_outgoing_upstream_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel()
                    self.generic_outgoing_upstream_label.parent = self
                    self._children_name_map["generic_outgoing_upstream_label"] = "generic-outgoing-upstream-label"
                    self._children_yang_names.add("generic-outgoing-upstream-label")

                    self.generic_local_upstream_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel()
                    self.generic_local_upstream_label.parent = self
                    self._children_name_map["generic_local_upstream_label"] = "generic-local-upstream-label"
                    self._children_yang_names.add("generic-local-upstream-label")

                    self.generic_recovery_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel()
                    self.generic_recovery_label.parent = self
                    self._children_name_map["generic_recovery_label"] = "generic-recovery-label"
                    self._children_yang_names.add("generic-recovery-label")
                    self._segment_path = lambda: "label-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo, ['is_valid', 'local_downstream_label', 'outgoing_downstream_label', 'merge_point_label', 'outgoing_upstream_label', 'local_upstream_label', 'recovery_label', 'lsp_wrap_label'], name, value)


                class GenericLocalDownstreamLabel(Entity):
                    """
                    Generic Local Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel, self).__init__()

                        self.yang_name = "generic-local-downstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-local-downstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-local-downstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-local-downstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericOutgoingDownstreamLabel(Entity):
                    """
                    Generic Outgoing Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel, self).__init__()

                        self.yang_name = "generic-outgoing-downstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-outgoing-downstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-outgoing-downstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-downstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericMergePointLabel(Entity):
                    """
                    Generic MergePoint Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel, self).__init__()

                        self.yang_name = "generic-merge-point-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-merge-point-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-merge-point-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-merge-point-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel, ['value'], name, value)


                class GenericOutgoingUpstreamLabel(Entity):
                    """
                    Generic Outgoing Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel, self).__init__()

                        self.yang_name = "generic-outgoing-upstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-outgoing-upstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-outgoing-upstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-upstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericLocalUpstreamLabel(Entity):
                    """
                    Generic Local Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel, self).__init__()

                        self.yang_name = "generic-local-upstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-local-upstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-local-upstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-local-upstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericRecoveryLabel(Entity):
                    """
                    Generic Recovery Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel, self).__init__()

                        self.yang_name = "generic-recovery-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-recovery-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-recovery-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-recovery-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel, ['value'], name, value)


    class InterfaceSummaries(Entity):
        """
        Table of summary info about RSVP\-enabled
        interfaces
        
        .. attribute:: interface_summary
        
        	Summary info about an RSVP\-enabled interface
        	**type**\: list of  		 :py:class:`InterfaceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceSummaries.InterfaceSummary>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.InterfaceSummaries, self).__init__()

            self.yang_name = "interface-summaries"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("interface-summary", ("interface_summary", RsvpStandby.InterfaceSummaries.InterfaceSummary))])
            self._leafs = OrderedDict()

            self.interface_summary = YList(self)
            self._segment_path = lambda: "interface-summaries"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.InterfaceSummaries, [], name, value)


        class InterfaceSummary(Entity):
            """
            Summary info about an RSVP\-enabled interface
            
            .. attribute:: interface_name  (key)
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:  :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\: str
            
            .. attribute:: paths_in
            
            	Number of locally created and incoming path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: paths_out
            
            	Number of outgoing path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: reservations_in
            
            	Number of locally created and incoming reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: reservations_out
            
            	Number of outgoing reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.InterfaceSummaries.InterfaceSummary, self).__init__()

                self.yang_name = "interface-summary"
                self.yang_parent_name = "interface-summaries"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['interface_name']
                self._child_container_classes = OrderedDict([("bandwidth-information", ("bandwidth_information", RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                    ('paths_in', YLeaf(YType.uint32, 'paths-in')),
                    ('paths_out', YLeaf(YType.uint32, 'paths-out')),
                    ('reservations_in', YLeaf(YType.uint32, 'reservations-in')),
                    ('reservations_out', YLeaf(YType.uint32, 'reservations-out')),
                ])
                self.interface_name = None
                self.interface_name_xr = None
                self.paths_in = None
                self.paths_out = None
                self.reservations_in = None
                self.reservations_out = None

                self.bandwidth_information = RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation()
                self.bandwidth_information.parent = self
                self._children_name_map["bandwidth_information"] = "bandwidth-information"
                self._children_yang_names.add("bandwidth-information")
                self._segment_path = lambda: "interface-summary" + "[interface-name='" + str(self.interface_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-summaries/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.InterfaceSummaries.InterfaceSummary, ['interface_name', 'interface_name_xr', 'paths_in', 'paths_out', 'reservations_in', 'reservations_out'], name, value)


            class BandwidthInformation(Entity):
                """
                Interface bandwidth information
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:  :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:  :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface>`
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:  :py:class:`RsvpMgmtDsteModes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModes>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation, self).__init__()

                    self.yang_name = "bandwidth-information"
                    self.yang_parent_name = "interface-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("pre-standard-dste-interface", ("pre_standard_dste_interface", RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface)), ("standard-dste-interface", ("standard_dste_interface", RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dste_mode', YLeaf(YType.enumeration, 'dste-mode')),
                    ])
                    self.dste_mode = None

                    self.pre_standard_dste_interface = RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self._children_name_map["pre_standard_dste_interface"] = "pre-standard-dste-interface"
                    self._children_yang_names.add("pre-standard-dste-interface")

                    self.standard_dste_interface = RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self
                    self._children_name_map["standard_dste_interface"] = "standard-dste-interface"
                    self._children_yang_names.add("standard-dste-interface")
                    self._segment_path = lambda: "bandwidth-information"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation, ['dste_mode'], name, value)


                class PreStandardDsteInterface(Entity):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface, self).__init__()

                        self.yang_name = "pre-standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_subpool_bandwidth', YLeaf(YType.uint64, 'max-subpool-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_subpool_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-subpool-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_subpool_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self._segment_path = lambda: "pre-standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_subpool_bandwidth', 'is_max_bandwidth_absolute', 'is_max_subpool_bandwidth_absolute'], name, value)


                class StandardDsteInterface(Entity):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface, self).__init__()

                        self.yang_name = "standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_pool0_bandwidth', YLeaf(YType.uint64, 'max-pool0-bandwidth')),
                            ('max_pool1_bandwidth', YLeaf(YType.uint64, 'max-pool1-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_bc0_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc0-bandwidth-absolute')),
                            ('is_max_bc1_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc1-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self._segment_path = lambda: "standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_pool0_bandwidth', 'max_pool1_bandwidth', 'is_max_bandwidth_absolute', 'is_max_bc0_bandwidth_absolute', 'is_max_bc1_bandwidth_absolute'], name, value)


    class HelloInstanceBriefs(Entity):
        """
        Table of brief info about hello instances
        
        .. attribute:: hello_instance_brief
        
        	Brief info for a single hello instance
        	**type**\: list of  		 :py:class:`HelloInstanceBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInstanceBriefs.HelloInstanceBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.HelloInstanceBriefs, self).__init__()

            self.yang_name = "hello-instance-briefs"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("hello-instance-brief", ("hello_instance_brief", RsvpStandby.HelloInstanceBriefs.HelloInstanceBrief))])
            self._leafs = OrderedDict()

            self.hello_instance_brief = YList(self)
            self._segment_path = lambda: "hello-instance-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.HelloInstanceBriefs, [], name, value)


        class HelloInstanceBrief(Entity):
            """
            Brief info for a single hello instance
            
            .. attribute:: source_address  (key)
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address  (key)
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor Hello state
            	**type**\:  :py:class:`RsvpMgmtHelloState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloState>`
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:  :py:class:`RsvpMgmtHelloInstance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstance>`
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: lost_communication_total
            
            	Total number of times communication got lost
            	**type**\: int
            
            	**range:** 0..65535
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.HelloInstanceBriefs.HelloInstanceBrief, self).__init__()

                self.yang_name = "hello-instance-brief"
                self.yang_parent_name = "hello-instance-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['source_address','destination_address']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('source_address_xr', YLeaf(YType.str, 'source-address-xr')),
                    ('destination_address_xr', YLeaf(YType.str, 'destination-address-xr')),
                    ('neighbor_hello_state', YLeaf(YType.enumeration, 'neighbor-hello-state')),
                    ('instance_type', YLeaf(YType.enumeration, 'instance-type')),
                    ('hello_interface', YLeaf(YType.str, 'hello-interface')),
                    ('lost_communication_total', YLeaf(YType.uint16, 'lost-communication-total')),
                ])
                self.source_address = None
                self.destination_address = None
                self.source_address_xr = None
                self.destination_address_xr = None
                self.neighbor_hello_state = None
                self.instance_type = None
                self.hello_interface = None
                self.lost_communication_total = None
                self._segment_path = lambda: "hello-instance-brief" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-instance-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.HelloInstanceBriefs.HelloInstanceBrief, ['source_address', 'destination_address', 'source_address_xr', 'destination_address_xr', 'neighbor_hello_state', 'instance_type', 'hello_interface', 'lost_communication_total'], name, value)


    class AuthenticationDetails(Entity):
        """
        Table for detailed authentication related
        information
        
        .. attribute:: authentication_detail
        
        	Brief Authentication information
        	**type**\: list of  		 :py:class:`AuthenticationDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails.AuthenticationDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.AuthenticationDetails, self).__init__()

            self.yang_name = "authentication-details"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("authentication-detail", ("authentication_detail", RsvpStandby.AuthenticationDetails.AuthenticationDetail))])
            self._leafs = OrderedDict()

            self.authentication_detail = YList(self)
            self._segment_path = lambda: "authentication-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.AuthenticationDetails, [], name, value)


        class AuthenticationDetail(Entity):
            """
            Brief Authentication information
            
            .. attribute:: source_address  (key)
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address  (key)
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: mode_id  (key)
            
            	Mode (Tx or Rx)
            	**type**\:  :py:class:`RsvpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMode>`
            
            .. attribute:: interface_name  (key)
            
            	InterfaceName
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: auth_compact
            
            	Basic authentication data
            	**type**\:  :py:class:`AuthCompact <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails.AuthenticationDetail.AuthCompact>`
            
            .. attribute:: direction_info
            
            	direction info
            	**type**\:  :py:class:`DirectionInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo>`
            
            .. attribute:: key_status
            
            	Key status
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: key_digest_info
            
            	Direction
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: lifetime
            
            	Lifetime (seconds)
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: lifetime_left
            
            	Remaining lifetime (seconds)
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: challenge_status
            
            	Challenge status
            	**type**\:  :py:class:`RsvpMgmtAuthChallengeStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthChallengeStatus>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.AuthenticationDetails.AuthenticationDetail, self).__init__()

                self.yang_name = "authentication-detail"
                self.yang_parent_name = "authentication-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['source_address','destination_address','mode_id','interface_name']
                self._child_container_classes = OrderedDict([("auth-compact", ("auth_compact", RsvpStandby.AuthenticationDetails.AuthenticationDetail.AuthCompact)), ("direction-info", ("direction_info", RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('mode_id', YLeaf(YType.enumeration, 'mode-id')),
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('key_status', YLeaf(YType.uint32, 'key-status')),
                    ('key_digest_info', YLeaf(YType.uint32, 'key-digest-info')),
                    ('lifetime', YLeaf(YType.uint32, 'lifetime')),
                    ('lifetime_left', YLeaf(YType.uint32, 'lifetime-left')),
                    ('challenge_status', YLeaf(YType.enumeration, 'challenge-status')),
                ])
                self.source_address = None
                self.destination_address = None
                self.mode_id = None
                self.interface_name = None
                self.key_status = None
                self.key_digest_info = None
                self.lifetime = None
                self.lifetime_left = None
                self.challenge_status = None

                self.auth_compact = RsvpStandby.AuthenticationDetails.AuthenticationDetail.AuthCompact()
                self.auth_compact.parent = self
                self._children_name_map["auth_compact"] = "auth-compact"
                self._children_yang_names.add("auth-compact")

                self.direction_info = RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo()
                self.direction_info.parent = self
                self._children_name_map["direction_info"] = "direction-info"
                self._children_yang_names.add("direction-info")
                self._segment_path = lambda: "authentication-detail" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']" + "[mode-id='" + str(self.mode_id) + "']" + "[interface-name='" + str(self.interface_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/authentication-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.AuthenticationDetails.AuthenticationDetail, ['source_address', 'destination_address', 'mode_id', 'interface_name', 'key_status', 'key_digest_info', 'lifetime', 'lifetime_left', 'challenge_status'], name, value)


            class AuthCompact(Entity):
                """
                Basic authentication data
                
                .. attribute:: source_address_xr
                
                	Source address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: destination_address_xr
                
                	Destination address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_address
                
                	Neighbor address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: direction
                
                	Direction
                	**type**\:  :py:class:`RsvpMgmtAuthDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthDirection>`
                
                .. attribute:: key_type
                
                	Key type
                	**type**\:  :py:class:`RsvpMgmtAuthKi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthKi>`
                
                .. attribute:: key_source
                
                	Key source
                	**type**\: str
                
                .. attribute:: key_id
                
                	Key ID
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: key_id_valid
                
                	Key validity
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.AuthenticationDetails.AuthenticationDetail.AuthCompact, self).__init__()

                    self.yang_name = "auth-compact"
                    self.yang_parent_name = "authentication-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('source_address_xr', YLeaf(YType.str, 'source-address-xr')),
                        ('destination_address_xr', YLeaf(YType.str, 'destination-address-xr')),
                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                        ('direction', YLeaf(YType.enumeration, 'direction')),
                        ('key_type', YLeaf(YType.enumeration, 'key-type')),
                        ('key_source', YLeaf(YType.str, 'key-source')),
                        ('key_id', YLeaf(YType.uint64, 'key-id')),
                        ('key_id_valid', YLeaf(YType.uint32, 'key-id-valid')),
                    ])
                    self.source_address_xr = None
                    self.destination_address_xr = None
                    self.neighbor_address = None
                    self.direction = None
                    self.key_type = None
                    self.key_source = None
                    self.key_id = None
                    self.key_id_valid = None
                    self._segment_path = lambda: "auth-compact"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.AuthenticationDetails.AuthenticationDetail.AuthCompact, ['source_address_xr', 'destination_address_xr', 'neighbor_address', 'direction', 'key_type', 'key_source', 'key_id', 'key_id_valid'], name, value)


            class DirectionInfo(Entity):
                """
                direction info
                
                .. attribute:: send_info
                
                	send info
                	**type**\:  :py:class:`SendInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo>`
                
                .. attribute:: receive_info
                
                	receive info
                	**type**\:  :py:class:`ReceiveInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo>`
                
                .. attribute:: auth_direction
                
                	AuthDirection
                	**type**\:  :py:class:`RsvpMgmtAuthDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthDirection>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo, self).__init__()

                    self.yang_name = "direction-info"
                    self.yang_parent_name = "authentication-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("send-info", ("send_info", RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo)), ("receive-info", ("receive_info", RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('auth_direction', YLeaf(YType.enumeration, 'auth-direction')),
                    ])
                    self.auth_direction = None

                    self.send_info = RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo()
                    self.send_info.parent = self
                    self._children_name_map["send_info"] = "send-info"
                    self._children_yang_names.add("send-info")

                    self.receive_info = RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo()
                    self.receive_info.parent = self
                    self._children_name_map["receive_info"] = "receive-info"
                    self._children_yang_names.add("receive-info")
                    self._segment_path = lambda: "direction-info"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo, ['auth_direction'], name, value)


                class SendInfo(Entity):
                    """
                    send info
                    
                    .. attribute:: counters
                    
                    	Counters
                    	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters>`
                    
                    .. attribute:: sequence
                    
                    	Sequence number
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo, self).__init__()

                        self.yang_name = "send-info"
                        self.yang_parent_name = "direction-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("counters", ("counters", RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('sequence', YLeaf(YType.uint64, 'sequence')),
                        ])
                        self.sequence = None

                        self.counters = RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters()
                        self.counters.parent = self
                        self._children_name_map["counters"] = "counters"
                        self._children_yang_names.add("counters")
                        self._segment_path = lambda: "send-info"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo, ['sequence'], name, value)


                    class Counters(Entity):
                        """
                        Counters
                        
                        .. attribute:: authentication_sent
                        
                        	Messages sent
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_failures
                        
                        	Failures
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_send_challenges_received
                        
                        	Challenges received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_challenge_responses_sent
                        
                        	Challenge responses sent
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters, self).__init__()

                            self.yang_name = "counters"
                            self.yang_parent_name = "send-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('authentication_sent', YLeaf(YType.uint32, 'authentication-sent')),
                                ('authentication_failures', YLeaf(YType.uint32, 'authentication-failures')),
                                ('authentication_send_challenges_received', YLeaf(YType.uint32, 'authentication-send-challenges-received')),
                                ('authentication_challenge_responses_sent', YLeaf(YType.uint32, 'authentication-challenge-responses-sent')),
                            ])
                            self.authentication_sent = None
                            self.authentication_failures = None
                            self.authentication_send_challenges_received = None
                            self.authentication_challenge_responses_sent = None
                            self._segment_path = lambda: "counters"

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters, ['authentication_sent', 'authentication_failures', 'authentication_send_challenges_received', 'authentication_challenge_responses_sent'], name, value)


                class ReceiveInfo(Entity):
                    """
                    receive info
                    
                    .. attribute:: counters
                    
                    	Counters
                    	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters>`
                    
                    .. attribute:: sequence
                    
                    	Sequence number
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: sequence_window_size
                    
                    	Sequence window size
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: sequence_window_count
                    
                    	Sequence window count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: sequence_window
                    
                    	Sequence window
                    	**type**\: list of int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo, self).__init__()

                        self.yang_name = "receive-info"
                        self.yang_parent_name = "direction-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("counters", ("counters", RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('sequence', YLeaf(YType.uint64, 'sequence')),
                            ('sequence_window_size', YLeaf(YType.uint32, 'sequence-window-size')),
                            ('sequence_window_count', YLeaf(YType.uint32, 'sequence-window-count')),
                            ('sequence_window', YLeafList(YType.uint64, 'sequence-window')),
                        ])
                        self.sequence = None
                        self.sequence_window_size = None
                        self.sequence_window_count = None
                        self.sequence_window = []

                        self.counters = RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters()
                        self.counters.parent = self
                        self._children_name_map["counters"] = "counters"
                        self._children_yang_names.add("counters")
                        self._segment_path = lambda: "receive-info"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo, ['sequence', 'sequence_window_size', 'sequence_window_count', 'sequence_window'], name, value)


                    class Counters(Entity):
                        """
                        Counters
                        
                        .. attribute:: authentication_received_valid_messages
                        
                        	Valid messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenges_sent
                        
                        	Challenges sent
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenge_response
                        
                        	Challenge responses received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenges_resent
                        
                        	Challenges resent
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenge_timeouts
                        
                        	Challenge timeouts
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_during_challenge
                        
                        	Authentication received during challenge
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_incomplete
                        
                        	Authentication received incomplete
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_no_integrity
                        
                        	Authentication received with no integrity
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_bad_digest
                        
                        	Authentication received with bad digest
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_wrong_digest_type
                        
                        	Authentication received with wrong digest type
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_sequence_number_duplicate
                        
                        	Authentication received with duplicate sequence number
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_sequence_number_outof_range
                        
                        	Authentication received with sequence number out of range
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_wrong_challenges_response
                        
                        	Incorect challenge responses received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenges_response_duplicate
                        
                        	Duplicate challenge responses received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_response_late
                        
                        	Challenge responses received late
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_bad_message_format
                        
                        	Authentication received with bad mesage format
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters, self).__init__()

                            self.yang_name = "counters"
                            self.yang_parent_name = "receive-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('authentication_received_valid_messages', YLeaf(YType.uint32, 'authentication-received-valid-messages')),
                                ('authentication_received_challenges_sent', YLeaf(YType.uint32, 'authentication-received-challenges-sent')),
                                ('authentication_received_challenge_response', YLeaf(YType.uint32, 'authentication-received-challenge-response')),
                                ('authentication_received_challenges_resent', YLeaf(YType.uint32, 'authentication-received-challenges-resent')),
                                ('authentication_received_challenge_timeouts', YLeaf(YType.uint32, 'authentication-received-challenge-timeouts')),
                                ('authentication_received_during_challenge', YLeaf(YType.uint32, 'authentication-received-during-challenge')),
                                ('authentication_received_incomplete', YLeaf(YType.uint32, 'authentication-received-incomplete')),
                                ('authentication_received_no_integrity', YLeaf(YType.uint32, 'authentication-received-no-integrity')),
                                ('authentication_received_bad_digest', YLeaf(YType.uint32, 'authentication-received-bad-digest')),
                                ('authentication_received_wrong_digest_type', YLeaf(YType.uint32, 'authentication-received-wrong-digest-type')),
                                ('authentication_received_sequence_number_duplicate', YLeaf(YType.uint32, 'authentication-received-sequence-number-duplicate')),
                                ('authentication_received_sequence_number_outof_range', YLeaf(YType.uint32, 'authentication-received-sequence-number-outof-range')),
                                ('authentication_received_wrong_challenges_response', YLeaf(YType.uint32, 'authentication-received-wrong-challenges-response')),
                                ('authentication_received_challenges_response_duplicate', YLeaf(YType.uint32, 'authentication-received-challenges-response-duplicate')),
                                ('authentication_received_response_late', YLeaf(YType.uint32, 'authentication-received-response-late')),
                                ('authentication_received_bad_message_format', YLeaf(YType.uint32, 'authentication-received-bad-message-format')),
                            ])
                            self.authentication_received_valid_messages = None
                            self.authentication_received_challenges_sent = None
                            self.authentication_received_challenge_response = None
                            self.authentication_received_challenges_resent = None
                            self.authentication_received_challenge_timeouts = None
                            self.authentication_received_during_challenge = None
                            self.authentication_received_incomplete = None
                            self.authentication_received_no_integrity = None
                            self.authentication_received_bad_digest = None
                            self.authentication_received_wrong_digest_type = None
                            self.authentication_received_sequence_number_duplicate = None
                            self.authentication_received_sequence_number_outof_range = None
                            self.authentication_received_wrong_challenges_response = None
                            self.authentication_received_challenges_response_duplicate = None
                            self.authentication_received_response_late = None
                            self.authentication_received_bad_message_format = None
                            self._segment_path = lambda: "counters"

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters, ['authentication_received_valid_messages', 'authentication_received_challenges_sent', 'authentication_received_challenge_response', 'authentication_received_challenges_resent', 'authentication_received_challenge_timeouts', 'authentication_received_during_challenge', 'authentication_received_incomplete', 'authentication_received_no_integrity', 'authentication_received_bad_digest', 'authentication_received_wrong_digest_type', 'authentication_received_sequence_number_duplicate', 'authentication_received_sequence_number_outof_range', 'authentication_received_wrong_challenges_response', 'authentication_received_challenges_response_duplicate', 'authentication_received_response_late', 'authentication_received_bad_message_format'], name, value)


    class RsbBriefs(Entity):
        """
        Table of brief info about reservation state
        blocks
        
        .. attribute:: rsb_brief
        
        	Brief info for a single reservation state block
        	**type**\: list of  		 :py:class:`RsbBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.RsbBriefs, self).__init__()

            self.yang_name = "rsb-briefs"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("rsb-brief", ("rsb_brief", RsvpStandby.RsbBriefs.RsbBrief))])
            self._leafs = OrderedDict()

            self.rsb_brief = YList(self)
            self._segment_path = lambda: "rsb-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.RsbBriefs, [], name, value)


        class RsbBrief(Entity):
            """
            Brief info for a single reservation state block
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.S2LSubLsp>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:  :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Info
            	**type**\:  :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec>`
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:  :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Style>`
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:  :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Filter>`
            
            .. attribute:: input_interface
            
            	Reservation Input Interface
            	**type**\: str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.RsbBriefs.RsbBrief, self).__init__()

                self.yang_name = "rsb-brief"
                self.yang_parent_name = "rsb-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", RsvpStandby.RsbBriefs.RsbBrief.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", RsvpStandby.RsbBriefs.RsbBrief.S2LSubLsp)), ("flow-spec", ("flow_spec", RsvpStandby.RsbBriefs.RsbBrief.FlowSpec)), ("generic-flow-spec", ("generic_flow_spec", RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec)), ("style", ("style", RsvpStandby.RsbBriefs.RsbBrief.Style)), ("filter", ("filter", RsvpStandby.RsbBriefs.RsbBrief.Filter))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('input_interface', YLeaf(YType.str, 'input-interface')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.input_interface = None

                self.session = RsvpStandby.RsbBriefs.RsbBrief.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = RsvpStandby.RsbBriefs.RsbBrief.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.flow_spec = RsvpStandby.RsbBriefs.RsbBrief.FlowSpec()
                self.flow_spec.parent = self
                self._children_name_map["flow_spec"] = "flow-spec"
                self._children_yang_names.add("flow-spec")

                self.generic_flow_spec = RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self._children_name_map["generic_flow_spec"] = "generic-flow-spec"
                self._children_yang_names.add("generic-flow-spec")

                self.style = RsvpStandby.RsbBriefs.RsbBrief.Style()
                self.style.parent = self
                self._children_name_map["style"] = "style"
                self._children_yang_names.add("style")

                self.filter = RsvpStandby.RsbBriefs.RsbBrief.Filter()
                self.filter.parent = self
                self._children_name_map["filter"] = "filter"
                self._children_yang_names.add("filter")
                self._segment_path = lambda: "rsb-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.RsbBriefs.RsbBrief, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'input_interface'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbBriefs.RsbBrief.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "rsb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbBriefs.RsbBrief.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "rsb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbBriefs.RsbBrief.S2LSubLsp, ['s2l_destination_address'], name, value)


            class FlowSpec(Entity):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:  :py:class:`RsvpMgmtQosServiceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbBriefs.RsbBrief.FlowSpec, self).__init__()

                    self.yang_name = "flow-spec"
                    self.yang_parent_name = "rsb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_average_rate', YLeaf(YType.uint64, 'flow-average-rate')),
                        ('flow_max_burst', YLeaf(YType.uint64, 'flow-max-burst')),
                        ('flow_peak_rate', YLeaf(YType.uint64, 'flow-peak-rate')),
                        ('flow_min_unit', YLeaf(YType.uint32, 'flow-min-unit')),
                        ('flow_max_unit', YLeaf(YType.uint32, 'flow-max-unit')),
                        ('flow_requested_rate', YLeaf(YType.uint64, 'flow-requested-rate')),
                        ('flow_slack', YLeaf(YType.uint32, 'flow-slack')),
                        ('flow_qos', YLeaf(YType.enumeration, 'flow-qos')),
                    ])
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_peak_rate = None
                    self.flow_min_unit = None
                    self.flow_max_unit = None
                    self.flow_requested_rate = None
                    self.flow_slack = None
                    self.flow_qos = None
                    self._segment_path = lambda: "flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbBriefs.RsbBrief.FlowSpec, ['flow_average_rate', 'flow_max_burst', 'flow_peak_rate', 'flow_min_unit', 'flow_max_unit', 'flow_requested_rate', 'flow_slack', 'flow_qos'], name, value)


            class GenericFlowSpec(Entity):
                """
                Generic Flow Spec Info
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:  :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec>`
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:  :py:class:`RsvpMgmtFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec, self).__init__()

                    self.yang_name = "generic-flow-spec"
                    self.yang_parent_name = "rsb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("g709otn-flow-spec", ("g709otn_flow_spec", RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_spec_type', YLeaf(YType.enumeration, 'flow-spec-type')),
                    ])
                    self.flow_spec_type = None

                    self.g709otn_flow_spec = RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self
                    self._children_name_map["g709otn_flow_spec"] = "g709otn-flow-spec"
                    self._children_yang_names.add("g709otn-flow-spec")
                    self._segment_path = lambda: "generic-flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec, ['flow_spec_type'], name, value)


                class G709OtnFlowSpec(Entity):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec, self).__init__()

                        self.yang_name = "g709otn-flow-spec"
                        self.yang_parent_name = "generic-flow-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('flow_signal_type', YLeaf(YType.uint8, 'flow-signal-type')),
                            ('flow_nvc', YLeaf(YType.uint16, 'flow-nvc')),
                            ('flow_multiplier', YLeaf(YType.uint16, 'flow-multiplier')),
                            ('flow_bit_rate', YLeaf(YType.uint64, 'flow-bit-rate')),
                        ])
                        self.flow_signal_type = None
                        self.flow_nvc = None
                        self.flow_multiplier = None
                        self.flow_bit_rate = None
                        self._segment_path = lambda: "g709otn-flow-spec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/generic-flow-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec, ['flow_signal_type', 'flow_nvc', 'flow_multiplier', 'flow_bit_rate'], name, value)


            class Style(Entity):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:  :py:class:`RsvpMgmtReservationTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbBriefs.RsbBrief.Style, self).__init__()

                    self.yang_name = "style"
                    self.yang_parent_name = "rsb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('reservation_type', YLeaf(YType.enumeration, 'reservation-type')),
                    ])
                    self.reservation_type = None
                    self._segment_path = lambda: "style"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RsbBriefs.RsbBrief.Style, ['reservation_type'], name, value)


            class Filter(Entity):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:  :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RsbBriefs.RsbBrief.Filter, self).__init__()

                    self.yang_name = "filter"
                    self.yang_parent_name = "rsb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-filter", ("rsvp_filter", RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_filter = RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self
                    self._children_name_map["rsvp_filter"] = "rsvp-filter"
                    self._children_yang_names.add("rsvp-filter")
                    self._segment_path = lambda: "filter"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/%s" % self._segment_path()


                class RsvpFilter(Entity):
                    """
                    RSVP Filter
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:  :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:  :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:  :py:class:`RsvpMgmtFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilter>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter, self).__init__()

                        self.yang_name = "rsvp-filter"
                        self.yang_parent_name = "filter"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("udp-ipv4-session", ("udp_ipv4_session", RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session)), ("p2mp-ipv4-session", ("p2mp_ipv4_session", RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('filter_type', YLeaf(YType.enumeration, 'filter-type')),
                        ])
                        self.filter_type = None

                        self.udp_ipv4_session = RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self
                        self._children_name_map["udp_ipv4_session"] = "udp-ipv4-session"
                        self._children_yang_names.add("udp-ipv4-session")

                        self.p2mp_ipv4_session = RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self._children_name_map["p2mp_ipv4_session"] = "p2mp-ipv4-session"
                        self._children_yang_names.add("p2mp-ipv4-session")
                        self._segment_path = lambda: "rsvp-filter"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/filter/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter, ['filter_type'], name, value)


                    class UdpIpv4Session(Entity):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session, self).__init__()

                            self.yang_name = "udp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self._segment_path = lambda: "udp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session, ['source_address', 'source_port'], name, value)


                    class P2MpIpv4Session(Entity):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session, self).__init__()

                            self.yang_name = "p2mp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                                ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                                ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self.p2mp_sub_group_origin = None
                            self.sub_group_id = None
                            self._segment_path = lambda: "p2mp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session, ['source_address', 'source_port', 'p2mp_sub_group_origin', 'sub_group_id'], name, value)


    class OpenConfig(Entity):
        """
        OpenConfig info
        
        .. attribute:: global_counters
        
        	Platform wide RSVP statistics and counters
        	**type**\:  :py:class:`GlobalCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.OpenConfig.GlobalCounters>`
        
        .. attribute:: interface_counters
        
        	Table of info about RSVP\-enabled interface counters for OpenConfig
        	**type**\:  :py:class:`InterfaceCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.OpenConfig.InterfaceCounters>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.OpenConfig, self).__init__()

            self.yang_name = "open-config"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("global-counters", ("global_counters", RsvpStandby.OpenConfig.GlobalCounters)), ("interface-counters", ("interface_counters", RsvpStandby.OpenConfig.InterfaceCounters))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.global_counters = RsvpStandby.OpenConfig.GlobalCounters()
            self.global_counters.parent = self
            self._children_name_map["global_counters"] = "global-counters"
            self._children_yang_names.add("global-counters")

            self.interface_counters = RsvpStandby.OpenConfig.InterfaceCounters()
            self.interface_counters.parent = self
            self._children_name_map["interface_counters"] = "interface-counters"
            self._children_yang_names.add("interface-counters")
            self._segment_path = lambda: "open-config"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()


        class GlobalCounters(Entity):
            """
            Platform wide RSVP statistics and counters
            
            .. attribute:: path_timeouts
            
            	Global count of Path Timeouts
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: reservation_timeouts
            
            	Global count of reservation timeouts
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: rate_limited_messages
            
            	Global count of rate limited messages
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_path_messages
            
            	Global count of path messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_path_error_messages
            
            	Global count of path error messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_path_tear_messages
            
            	Global count of path tear messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_reservation_messages
            
            	Global count of reservation messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_reservation_error_messages
            
            	Global count of reservation error messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_reservation_tear_messages
            
            	Global count of reservation tear messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_hello_messages
            
            	Global count of hello messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_srefresh_messages
            
            	Global count of srefresh messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_ack_messages
            
            	Global count of ack messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_path_messages
            
            	Global count of path messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_path_error_messages
            
            	Global count of path error messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_path_tear_messages
            
            	Global count of path tear messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_reservation_messages
            
            	Global count of reservation messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_reservation_error_messages
            
            	Global count of reservation error messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_reservation_tear_messages
            
            	Global count of reservation tear messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_hello_messages
            
            	Global count of hello messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_srefresh_messages
            
            	Global count of srefresh messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_ack_messages
            
            	Global count of ack messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.OpenConfig.GlobalCounters, self).__init__()

                self.yang_name = "global-counters"
                self.yang_parent_name = "open-config"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('path_timeouts', YLeaf(YType.uint64, 'path-timeouts')),
                    ('reservation_timeouts', YLeaf(YType.uint64, 'reservation-timeouts')),
                    ('rate_limited_messages', YLeaf(YType.uint64, 'rate-limited-messages')),
                    ('in_path_messages', YLeaf(YType.uint64, 'in-path-messages')),
                    ('in_path_error_messages', YLeaf(YType.uint64, 'in-path-error-messages')),
                    ('in_path_tear_messages', YLeaf(YType.uint64, 'in-path-tear-messages')),
                    ('in_reservation_messages', YLeaf(YType.uint64, 'in-reservation-messages')),
                    ('in_reservation_error_messages', YLeaf(YType.uint64, 'in-reservation-error-messages')),
                    ('in_reservation_tear_messages', YLeaf(YType.uint64, 'in-reservation-tear-messages')),
                    ('in_hello_messages', YLeaf(YType.uint64, 'in-hello-messages')),
                    ('in_srefresh_messages', YLeaf(YType.uint64, 'in-srefresh-messages')),
                    ('in_ack_messages', YLeaf(YType.uint64, 'in-ack-messages')),
                    ('out_path_messages', YLeaf(YType.uint64, 'out-path-messages')),
                    ('out_path_error_messages', YLeaf(YType.uint64, 'out-path-error-messages')),
                    ('out_path_tear_messages', YLeaf(YType.uint64, 'out-path-tear-messages')),
                    ('out_reservation_messages', YLeaf(YType.uint64, 'out-reservation-messages')),
                    ('out_reservation_error_messages', YLeaf(YType.uint64, 'out-reservation-error-messages')),
                    ('out_reservation_tear_messages', YLeaf(YType.uint64, 'out-reservation-tear-messages')),
                    ('out_hello_messages', YLeaf(YType.uint64, 'out-hello-messages')),
                    ('out_srefresh_messages', YLeaf(YType.uint64, 'out-srefresh-messages')),
                    ('out_ack_messages', YLeaf(YType.uint64, 'out-ack-messages')),
                ])
                self.path_timeouts = None
                self.reservation_timeouts = None
                self.rate_limited_messages = None
                self.in_path_messages = None
                self.in_path_error_messages = None
                self.in_path_tear_messages = None
                self.in_reservation_messages = None
                self.in_reservation_error_messages = None
                self.in_reservation_tear_messages = None
                self.in_hello_messages = None
                self.in_srefresh_messages = None
                self.in_ack_messages = None
                self.out_path_messages = None
                self.out_path_error_messages = None
                self.out_path_tear_messages = None
                self.out_reservation_messages = None
                self.out_reservation_error_messages = None
                self.out_reservation_tear_messages = None
                self.out_hello_messages = None
                self.out_srefresh_messages = None
                self.out_ack_messages = None
                self._segment_path = lambda: "global-counters"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/open-config/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.OpenConfig.GlobalCounters, ['path_timeouts', 'reservation_timeouts', 'rate_limited_messages', 'in_path_messages', 'in_path_error_messages', 'in_path_tear_messages', 'in_reservation_messages', 'in_reservation_error_messages', 'in_reservation_tear_messages', 'in_hello_messages', 'in_srefresh_messages', 'in_ack_messages', 'out_path_messages', 'out_path_error_messages', 'out_path_tear_messages', 'out_reservation_messages', 'out_reservation_error_messages', 'out_reservation_tear_messages', 'out_hello_messages', 'out_srefresh_messages', 'out_ack_messages'], name, value)


        class InterfaceCounters(Entity):
            """
            Table of info about RSVP\-enabled interface
            counters for OpenConfig
            
            .. attribute:: interface_counter
            
            	Info about an RSVP\-enabled interface counters
            	**type**\: list of  		 :py:class:`InterfaceCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.OpenConfig.InterfaceCounters.InterfaceCounter>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.OpenConfig.InterfaceCounters, self).__init__()

                self.yang_name = "interface-counters"
                self.yang_parent_name = "open-config"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("interface-counter", ("interface_counter", RsvpStandby.OpenConfig.InterfaceCounters.InterfaceCounter))])
                self._leafs = OrderedDict()

                self.interface_counter = YList(self)
                self._segment_path = lambda: "interface-counters"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/open-config/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.OpenConfig.InterfaceCounters, [], name, value)


            class InterfaceCounter(Entity):
                """
                Info about an RSVP\-enabled interface counters
                
                .. attribute:: interface_name  (key)
                
                	Interface name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: interface_name_xr
                
                	Interface name
                	**type**\: str
                
                .. attribute:: in_path_messages
                
                	Per interface count of path messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_path_error_messages
                
                	Per interface count of path error messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_path_tear_messages
                
                	Per interface count of path tear messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_reservation_messages
                
                	Per interface count of reservation messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_reservation_error_messages
                
                	Per interface count of reservation error messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_reservation_tear_messages
                
                	Per interface count of reservation tear messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_hello_messages
                
                	Per interface count of hello messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_srefresh_messages
                
                	Per interface count of srefresh messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_ack_messages
                
                	Per interface count of ack messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_path_messages
                
                	Per interface count of path messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_path_error_messages
                
                	Per interface count of path error messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_path_tear_messages
                
                	Per interface count of path tear messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_reservation_messages
                
                	Per interface count of reservation messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_reservation_error_messages
                
                	Per interface count of reservation error messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_reservation_tear_messages
                
                	Per interface count of reservation tear messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_hello_messages
                
                	Per interface count of hello messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_srefresh_messages
                
                	Per interface count of srefresh messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_ack_messages
                
                	Per interface count of ack messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.OpenConfig.InterfaceCounters.InterfaceCounter, self).__init__()

                    self.yang_name = "interface-counter"
                    self.yang_parent_name = "interface-counters"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                        ('in_path_messages', YLeaf(YType.uint64, 'in-path-messages')),
                        ('in_path_error_messages', YLeaf(YType.uint64, 'in-path-error-messages')),
                        ('in_path_tear_messages', YLeaf(YType.uint64, 'in-path-tear-messages')),
                        ('in_reservation_messages', YLeaf(YType.uint64, 'in-reservation-messages')),
                        ('in_reservation_error_messages', YLeaf(YType.uint64, 'in-reservation-error-messages')),
                        ('in_reservation_tear_messages', YLeaf(YType.uint64, 'in-reservation-tear-messages')),
                        ('in_hello_messages', YLeaf(YType.uint64, 'in-hello-messages')),
                        ('in_srefresh_messages', YLeaf(YType.uint64, 'in-srefresh-messages')),
                        ('in_ack_messages', YLeaf(YType.uint64, 'in-ack-messages')),
                        ('out_path_messages', YLeaf(YType.uint64, 'out-path-messages')),
                        ('out_path_error_messages', YLeaf(YType.uint64, 'out-path-error-messages')),
                        ('out_path_tear_messages', YLeaf(YType.uint64, 'out-path-tear-messages')),
                        ('out_reservation_messages', YLeaf(YType.uint64, 'out-reservation-messages')),
                        ('out_reservation_error_messages', YLeaf(YType.uint64, 'out-reservation-error-messages')),
                        ('out_reservation_tear_messages', YLeaf(YType.uint64, 'out-reservation-tear-messages')),
                        ('out_hello_messages', YLeaf(YType.uint64, 'out-hello-messages')),
                        ('out_srefresh_messages', YLeaf(YType.uint64, 'out-srefresh-messages')),
                        ('out_ack_messages', YLeaf(YType.uint64, 'out-ack-messages')),
                    ])
                    self.interface_name = None
                    self.interface_name_xr = None
                    self.in_path_messages = None
                    self.in_path_error_messages = None
                    self.in_path_tear_messages = None
                    self.in_reservation_messages = None
                    self.in_reservation_error_messages = None
                    self.in_reservation_tear_messages = None
                    self.in_hello_messages = None
                    self.in_srefresh_messages = None
                    self.in_ack_messages = None
                    self.out_path_messages = None
                    self.out_path_error_messages = None
                    self.out_path_tear_messages = None
                    self.out_reservation_messages = None
                    self.out_reservation_error_messages = None
                    self.out_reservation_tear_messages = None
                    self.out_hello_messages = None
                    self.out_srefresh_messages = None
                    self.out_ack_messages = None
                    self._segment_path = lambda: "interface-counter" + "[interface-name='" + str(self.interface_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/open-config/interface-counters/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.OpenConfig.InterfaceCounters.InterfaceCounter, ['interface_name', 'interface_name_xr', 'in_path_messages', 'in_path_error_messages', 'in_path_tear_messages', 'in_reservation_messages', 'in_reservation_error_messages', 'in_reservation_tear_messages', 'in_hello_messages', 'in_srefresh_messages', 'in_ack_messages', 'out_path_messages', 'out_path_error_messages', 'out_path_tear_messages', 'out_reservation_messages', 'out_reservation_error_messages', 'out_reservation_tear_messages', 'out_hello_messages', 'out_srefresh_messages', 'out_ack_messages'], name, value)


    class Counters(Entity):
        """
        Counters
        
        .. attribute:: interface_messages
        
        	Table of message counters
        	**type**\:  :py:class:`InterfaceMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceMessages>`
        
        .. attribute:: message_summary
        
        	Summary information for all RSVP message counters
        	**type**\:  :py:class:`MessageSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.MessageSummary>`
        
        .. attribute:: prefix_filtering
        
        	Prefix filtering counters
        	**type**\:  :py:class:`PrefixFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering>`
        
        .. attribute:: out_of_resource
        
        	Out of resource counters
        	**type**\:  :py:class:`OutOfResource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.OutOfResource>`
        
        .. attribute:: interface_events
        
        	Event counters
        	**type**\:  :py:class:`InterfaceEvents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceEvents>`
        
        .. attribute:: nsr
        
        	Summary information for all RSVP NSR counters
        	**type**\:  :py:class:`Nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.Nsr>`
        
        .. attribute:: issu
        
        	Summary information for all RSVP ISSU counters
        	**type**\:  :py:class:`Issu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.Issu>`
        
        .. attribute:: database
        
        	Summary information for all RSVP database counters
        	**type**\:  :py:class:`Database <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.Database>`
        
        .. attribute:: event_syncs
        
        	Table containing event sync counters
        	**type**\:  :py:class:`EventSyncs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.EventSyncs>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.Counters, self).__init__()

            self.yang_name = "counters"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("interface-messages", ("interface_messages", RsvpStandby.Counters.InterfaceMessages)), ("message-summary", ("message_summary", RsvpStandby.Counters.MessageSummary)), ("prefix-filtering", ("prefix_filtering", RsvpStandby.Counters.PrefixFiltering)), ("out-of-resource", ("out_of_resource", RsvpStandby.Counters.OutOfResource)), ("interface-events", ("interface_events", RsvpStandby.Counters.InterfaceEvents)), ("nsr", ("nsr", RsvpStandby.Counters.Nsr)), ("issu", ("issu", RsvpStandby.Counters.Issu)), ("database", ("database", RsvpStandby.Counters.Database)), ("event-syncs", ("event_syncs", RsvpStandby.Counters.EventSyncs))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.interface_messages = RsvpStandby.Counters.InterfaceMessages()
            self.interface_messages.parent = self
            self._children_name_map["interface_messages"] = "interface-messages"
            self._children_yang_names.add("interface-messages")

            self.message_summary = RsvpStandby.Counters.MessageSummary()
            self.message_summary.parent = self
            self._children_name_map["message_summary"] = "message-summary"
            self._children_yang_names.add("message-summary")

            self.prefix_filtering = RsvpStandby.Counters.PrefixFiltering()
            self.prefix_filtering.parent = self
            self._children_name_map["prefix_filtering"] = "prefix-filtering"
            self._children_yang_names.add("prefix-filtering")

            self.out_of_resource = RsvpStandby.Counters.OutOfResource()
            self.out_of_resource.parent = self
            self._children_name_map["out_of_resource"] = "out-of-resource"
            self._children_yang_names.add("out-of-resource")

            self.interface_events = RsvpStandby.Counters.InterfaceEvents()
            self.interface_events.parent = self
            self._children_name_map["interface_events"] = "interface-events"
            self._children_yang_names.add("interface-events")

            self.nsr = RsvpStandby.Counters.Nsr()
            self.nsr.parent = self
            self._children_name_map["nsr"] = "nsr"
            self._children_yang_names.add("nsr")

            self.issu = RsvpStandby.Counters.Issu()
            self.issu.parent = self
            self._children_name_map["issu"] = "issu"
            self._children_yang_names.add("issu")

            self.database = RsvpStandby.Counters.Database()
            self.database.parent = self
            self._children_name_map["database"] = "database"
            self._children_yang_names.add("database")

            self.event_syncs = RsvpStandby.Counters.EventSyncs()
            self.event_syncs.parent = self
            self._children_name_map["event_syncs"] = "event-syncs"
            self._children_yang_names.add("event-syncs")
            self._segment_path = lambda: "counters"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()


        class InterfaceMessages(Entity):
            """
            Table of message counters
            
            .. attribute:: interface_message
            
            	Interface message counters
            	**type**\: list of  		 :py:class:`InterfaceMessage <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceMessages.InterfaceMessage>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.Counters.InterfaceMessages, self).__init__()

                self.yang_name = "interface-messages"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("interface-message", ("interface_message", RsvpStandby.Counters.InterfaceMessages.InterfaceMessage))])
                self._leafs = OrderedDict()

                self.interface_message = YList(self)
                self._segment_path = lambda: "interface-messages"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.Counters.InterfaceMessages, [], name, value)


            class InterfaceMessage(Entity):
                """
                Interface message counters
                
                .. attribute:: interface_name  (key)
                
                	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: received_messages
                
                	Count of messages received
                	**type**\:  :py:class:`ReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages>`
                
                .. attribute:: transmitted_messages
                
                	Count of messages transmitted
                	**type**\:  :py:class:`TransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages>`
                
                .. attribute:: bundle_received_messages
                
                	Count of Bundle messages received
                	**type**\:  :py:class:`BundleReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages>`
                
                .. attribute:: bundle_transmitted_messages
                
                	Count of Bundle messages transmitted
                	**type**\:  :py:class:`BundleTransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages>`
                
                .. attribute:: retransmitted_messages
                
                	Count of messages retransmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: out_of_order_messages
                
                	Count of Out of Order messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: rate_limited_messages
                
                	Count of Rate Limited messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Counters.InterfaceMessages.InterfaceMessage, self).__init__()

                    self.yang_name = "interface-message"
                    self.yang_parent_name = "interface-messages"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([("received-messages", ("received_messages", RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages)), ("transmitted-messages", ("transmitted_messages", RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages)), ("bundle-received-messages", ("bundle_received_messages", RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages)), ("bundle-transmitted-messages", ("bundle_transmitted_messages", RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('retransmitted_messages', YLeaf(YType.uint32, 'retransmitted-messages')),
                        ('out_of_order_messages', YLeaf(YType.uint32, 'out-of-order-messages')),
                        ('rate_limited_messages', YLeaf(YType.uint32, 'rate-limited-messages')),
                    ])
                    self.interface_name = None
                    self.retransmitted_messages = None
                    self.out_of_order_messages = None
                    self.rate_limited_messages = None

                    self.received_messages = RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages()
                    self.received_messages.parent = self
                    self._children_name_map["received_messages"] = "received-messages"
                    self._children_yang_names.add("received-messages")

                    self.transmitted_messages = RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages()
                    self.transmitted_messages.parent = self
                    self._children_name_map["transmitted_messages"] = "transmitted-messages"
                    self._children_yang_names.add("transmitted-messages")

                    self.bundle_received_messages = RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages()
                    self.bundle_received_messages.parent = self
                    self._children_name_map["bundle_received_messages"] = "bundle-received-messages"
                    self._children_yang_names.add("bundle-received-messages")

                    self.bundle_transmitted_messages = RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages()
                    self.bundle_transmitted_messages.parent = self
                    self._children_name_map["bundle_transmitted_messages"] = "bundle-transmitted-messages"
                    self._children_yang_names.add("bundle-transmitted-messages")
                    self._segment_path = lambda: "interface-message" + "[interface-name='" + str(self.interface_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/interface-messages/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Counters.InterfaceMessages.InterfaceMessage, ['interface_name', 'retransmitted_messages', 'out_of_order_messages', 'rate_limited_messages'], name, value)


                class ReceivedMessages(Entity):
                    """
                    Count of messages received
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages, self).__init__()

                        self.yang_name = "received-messages"
                        self.yang_parent_name = "interface-message"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('path', YLeaf(YType.uint32, 'path')),
                            ('reservation', YLeaf(YType.uint32, 'reservation')),
                            ('path_error', YLeaf(YType.uint32, 'path-error')),
                            ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                            ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                            ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                            ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                            ('bundle', YLeaf(YType.uint32, 'bundle')),
                            ('ack', YLeaf(YType.uint32, 'ack')),
                            ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                            ('hello', YLeaf(YType.uint32, 'hello')),
                            ('challenge', YLeaf(YType.uint32, 'challenge')),
                            ('response', YLeaf(YType.uint32, 'response')),
                        ])
                        self.path = None
                        self.reservation = None
                        self.path_error = None
                        self.reservation_error = None
                        self.path_tear = None
                        self.reservation_tear = None
                        self.reservation_confirm = None
                        self.bundle = None
                        self.ack = None
                        self.srefresh = None
                        self.hello = None
                        self.challenge = None
                        self.response = None
                        self._segment_path = lambda: "received-messages"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


                class TransmittedMessages(Entity):
                    """
                    Count of messages transmitted
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages, self).__init__()

                        self.yang_name = "transmitted-messages"
                        self.yang_parent_name = "interface-message"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('path', YLeaf(YType.uint32, 'path')),
                            ('reservation', YLeaf(YType.uint32, 'reservation')),
                            ('path_error', YLeaf(YType.uint32, 'path-error')),
                            ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                            ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                            ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                            ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                            ('bundle', YLeaf(YType.uint32, 'bundle')),
                            ('ack', YLeaf(YType.uint32, 'ack')),
                            ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                            ('hello', YLeaf(YType.uint32, 'hello')),
                            ('challenge', YLeaf(YType.uint32, 'challenge')),
                            ('response', YLeaf(YType.uint32, 'response')),
                        ])
                        self.path = None
                        self.reservation = None
                        self.path_error = None
                        self.reservation_error = None
                        self.path_tear = None
                        self.reservation_tear = None
                        self.reservation_confirm = None
                        self.bundle = None
                        self.ack = None
                        self.srefresh = None
                        self.hello = None
                        self.challenge = None
                        self.response = None
                        self._segment_path = lambda: "transmitted-messages"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


                class BundleReceivedMessages(Entity):
                    """
                    Count of Bundle messages received
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages, self).__init__()

                        self.yang_name = "bundle-received-messages"
                        self.yang_parent_name = "interface-message"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('path', YLeaf(YType.uint32, 'path')),
                            ('reservation', YLeaf(YType.uint32, 'reservation')),
                            ('path_error', YLeaf(YType.uint32, 'path-error')),
                            ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                            ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                            ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                            ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                            ('bundle', YLeaf(YType.uint32, 'bundle')),
                            ('ack', YLeaf(YType.uint32, 'ack')),
                            ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                            ('hello', YLeaf(YType.uint32, 'hello')),
                            ('challenge', YLeaf(YType.uint32, 'challenge')),
                            ('response', YLeaf(YType.uint32, 'response')),
                        ])
                        self.path = None
                        self.reservation = None
                        self.path_error = None
                        self.reservation_error = None
                        self.path_tear = None
                        self.reservation_tear = None
                        self.reservation_confirm = None
                        self.bundle = None
                        self.ack = None
                        self.srefresh = None
                        self.hello = None
                        self.challenge = None
                        self.response = None
                        self._segment_path = lambda: "bundle-received-messages"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


                class BundleTransmittedMessages(Entity):
                    """
                    Count of Bundle messages transmitted
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages, self).__init__()

                        self.yang_name = "bundle-transmitted-messages"
                        self.yang_parent_name = "interface-message"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('path', YLeaf(YType.uint32, 'path')),
                            ('reservation', YLeaf(YType.uint32, 'reservation')),
                            ('path_error', YLeaf(YType.uint32, 'path-error')),
                            ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                            ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                            ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                            ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                            ('bundle', YLeaf(YType.uint32, 'bundle')),
                            ('ack', YLeaf(YType.uint32, 'ack')),
                            ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                            ('hello', YLeaf(YType.uint32, 'hello')),
                            ('challenge', YLeaf(YType.uint32, 'challenge')),
                            ('response', YLeaf(YType.uint32, 'response')),
                        ])
                        self.path = None
                        self.reservation = None
                        self.path_error = None
                        self.reservation_error = None
                        self.path_tear = None
                        self.reservation_tear = None
                        self.reservation_confirm = None
                        self.bundle = None
                        self.ack = None
                        self.srefresh = None
                        self.hello = None
                        self.challenge = None
                        self.response = None
                        self._segment_path = lambda: "bundle-transmitted-messages"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


        class MessageSummary(Entity):
            """
            Summary information for all RSVP message
            counters
            
            .. attribute:: received_messages
            
            	Count of messages received
            	**type**\:  :py:class:`ReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.MessageSummary.ReceivedMessages>`
            
            .. attribute:: transmitted_messages
            
            	Count of messages transmitted
            	**type**\:  :py:class:`TransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.MessageSummary.TransmittedMessages>`
            
            .. attribute:: bundle_received_messages
            
            	Count of Bundle messages received
            	**type**\:  :py:class:`BundleReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.MessageSummary.BundleReceivedMessages>`
            
            .. attribute:: bundle_transmitted_messages
            
            	Count of Bundle messages transmitted
            	**type**\:  :py:class:`BundleTransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.MessageSummary.BundleTransmittedMessages>`
            
            .. attribute:: retransmitted_messages
            
            	Count of messages retransmitted
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: out_of_order_messages
            
            	Count of Out of Order messages
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: rate_limited_messages
            
            	Count of Rate Limited messages
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.Counters.MessageSummary, self).__init__()

                self.yang_name = "message-summary"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("received-messages", ("received_messages", RsvpStandby.Counters.MessageSummary.ReceivedMessages)), ("transmitted-messages", ("transmitted_messages", RsvpStandby.Counters.MessageSummary.TransmittedMessages)), ("bundle-received-messages", ("bundle_received_messages", RsvpStandby.Counters.MessageSummary.BundleReceivedMessages)), ("bundle-transmitted-messages", ("bundle_transmitted_messages", RsvpStandby.Counters.MessageSummary.BundleTransmittedMessages))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('retransmitted_messages', YLeaf(YType.uint32, 'retransmitted-messages')),
                    ('out_of_order_messages', YLeaf(YType.uint32, 'out-of-order-messages')),
                    ('rate_limited_messages', YLeaf(YType.uint32, 'rate-limited-messages')),
                ])
                self.retransmitted_messages = None
                self.out_of_order_messages = None
                self.rate_limited_messages = None

                self.received_messages = RsvpStandby.Counters.MessageSummary.ReceivedMessages()
                self.received_messages.parent = self
                self._children_name_map["received_messages"] = "received-messages"
                self._children_yang_names.add("received-messages")

                self.transmitted_messages = RsvpStandby.Counters.MessageSummary.TransmittedMessages()
                self.transmitted_messages.parent = self
                self._children_name_map["transmitted_messages"] = "transmitted-messages"
                self._children_yang_names.add("transmitted-messages")

                self.bundle_received_messages = RsvpStandby.Counters.MessageSummary.BundleReceivedMessages()
                self.bundle_received_messages.parent = self
                self._children_name_map["bundle_received_messages"] = "bundle-received-messages"
                self._children_yang_names.add("bundle-received-messages")

                self.bundle_transmitted_messages = RsvpStandby.Counters.MessageSummary.BundleTransmittedMessages()
                self.bundle_transmitted_messages.parent = self
                self._children_name_map["bundle_transmitted_messages"] = "bundle-transmitted-messages"
                self._children_yang_names.add("bundle-transmitted-messages")
                self._segment_path = lambda: "message-summary"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.Counters.MessageSummary, ['retransmitted_messages', 'out_of_order_messages', 'rate_limited_messages'], name, value)


            class ReceivedMessages(Entity):
                """
                Count of messages received
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Counters.MessageSummary.ReceivedMessages, self).__init__()

                    self.yang_name = "received-messages"
                    self.yang_parent_name = "message-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('path', YLeaf(YType.uint32, 'path')),
                        ('reservation', YLeaf(YType.uint32, 'reservation')),
                        ('path_error', YLeaf(YType.uint32, 'path-error')),
                        ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                        ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                        ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                        ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                        ('bundle', YLeaf(YType.uint32, 'bundle')),
                        ('ack', YLeaf(YType.uint32, 'ack')),
                        ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                        ('hello', YLeaf(YType.uint32, 'hello')),
                        ('challenge', YLeaf(YType.uint32, 'challenge')),
                        ('response', YLeaf(YType.uint32, 'response')),
                    ])
                    self.path = None
                    self.reservation = None
                    self.path_error = None
                    self.reservation_error = None
                    self.path_tear = None
                    self.reservation_tear = None
                    self.reservation_confirm = None
                    self.bundle = None
                    self.ack = None
                    self.srefresh = None
                    self.hello = None
                    self.challenge = None
                    self.response = None
                    self._segment_path = lambda: "received-messages"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/message-summary/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Counters.MessageSummary.ReceivedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


            class TransmittedMessages(Entity):
                """
                Count of messages transmitted
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Counters.MessageSummary.TransmittedMessages, self).__init__()

                    self.yang_name = "transmitted-messages"
                    self.yang_parent_name = "message-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('path', YLeaf(YType.uint32, 'path')),
                        ('reservation', YLeaf(YType.uint32, 'reservation')),
                        ('path_error', YLeaf(YType.uint32, 'path-error')),
                        ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                        ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                        ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                        ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                        ('bundle', YLeaf(YType.uint32, 'bundle')),
                        ('ack', YLeaf(YType.uint32, 'ack')),
                        ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                        ('hello', YLeaf(YType.uint32, 'hello')),
                        ('challenge', YLeaf(YType.uint32, 'challenge')),
                        ('response', YLeaf(YType.uint32, 'response')),
                    ])
                    self.path = None
                    self.reservation = None
                    self.path_error = None
                    self.reservation_error = None
                    self.path_tear = None
                    self.reservation_tear = None
                    self.reservation_confirm = None
                    self.bundle = None
                    self.ack = None
                    self.srefresh = None
                    self.hello = None
                    self.challenge = None
                    self.response = None
                    self._segment_path = lambda: "transmitted-messages"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/message-summary/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Counters.MessageSummary.TransmittedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


            class BundleReceivedMessages(Entity):
                """
                Count of Bundle messages received
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Counters.MessageSummary.BundleReceivedMessages, self).__init__()

                    self.yang_name = "bundle-received-messages"
                    self.yang_parent_name = "message-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('path', YLeaf(YType.uint32, 'path')),
                        ('reservation', YLeaf(YType.uint32, 'reservation')),
                        ('path_error', YLeaf(YType.uint32, 'path-error')),
                        ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                        ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                        ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                        ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                        ('bundle', YLeaf(YType.uint32, 'bundle')),
                        ('ack', YLeaf(YType.uint32, 'ack')),
                        ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                        ('hello', YLeaf(YType.uint32, 'hello')),
                        ('challenge', YLeaf(YType.uint32, 'challenge')),
                        ('response', YLeaf(YType.uint32, 'response')),
                    ])
                    self.path = None
                    self.reservation = None
                    self.path_error = None
                    self.reservation_error = None
                    self.path_tear = None
                    self.reservation_tear = None
                    self.reservation_confirm = None
                    self.bundle = None
                    self.ack = None
                    self.srefresh = None
                    self.hello = None
                    self.challenge = None
                    self.response = None
                    self._segment_path = lambda: "bundle-received-messages"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/message-summary/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Counters.MessageSummary.BundleReceivedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


            class BundleTransmittedMessages(Entity):
                """
                Count of Bundle messages transmitted
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Counters.MessageSummary.BundleTransmittedMessages, self).__init__()

                    self.yang_name = "bundle-transmitted-messages"
                    self.yang_parent_name = "message-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('path', YLeaf(YType.uint32, 'path')),
                        ('reservation', YLeaf(YType.uint32, 'reservation')),
                        ('path_error', YLeaf(YType.uint32, 'path-error')),
                        ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                        ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                        ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                        ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                        ('bundle', YLeaf(YType.uint32, 'bundle')),
                        ('ack', YLeaf(YType.uint32, 'ack')),
                        ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                        ('hello', YLeaf(YType.uint32, 'hello')),
                        ('challenge', YLeaf(YType.uint32, 'challenge')),
                        ('response', YLeaf(YType.uint32, 'response')),
                    ])
                    self.path = None
                    self.reservation = None
                    self.path_error = None
                    self.reservation_error = None
                    self.path_tear = None
                    self.reservation_tear = None
                    self.reservation_confirm = None
                    self.bundle = None
                    self.ack = None
                    self.srefresh = None
                    self.hello = None
                    self.challenge = None
                    self.response = None
                    self._segment_path = lambda: "bundle-transmitted-messages"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/message-summary/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Counters.MessageSummary.BundleTransmittedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


        class PrefixFiltering(Entity):
            """
            Prefix filtering counters
            
            .. attribute:: accesses
            
            	AccessList specific prefix filtering counters
            	**type**\:  :py:class:`Accesses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Accesses>`
            
            .. attribute:: interfaces
            
            	Interface specific prefix filtering counters
            	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.Counters.PrefixFiltering, self).__init__()

                self.yang_name = "prefix-filtering"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("accesses", ("accesses", RsvpStandby.Counters.PrefixFiltering.Accesses)), ("interfaces", ("interfaces", RsvpStandby.Counters.PrefixFiltering.Interfaces))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict()

                self.accesses = RsvpStandby.Counters.PrefixFiltering.Accesses()
                self.accesses.parent = self
                self._children_name_map["accesses"] = "accesses"
                self._children_yang_names.add("accesses")

                self.interfaces = RsvpStandby.Counters.PrefixFiltering.Interfaces()
                self.interfaces.parent = self
                self._children_name_map["interfaces"] = "interfaces"
                self._children_yang_names.add("interfaces")
                self._segment_path = lambda: "prefix-filtering"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/%s" % self._segment_path()


            class Accesses(Entity):
                """
                AccessList specific prefix filtering counters
                
                .. attribute:: access
                
                	Prefix filtering counters for a specific AccessList
                	**type**\: list of  		 :py:class:`Access <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Accesses.Access>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Counters.PrefixFiltering.Accesses, self).__init__()

                    self.yang_name = "accesses"
                    self.yang_parent_name = "prefix-filtering"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("access", ("access", RsvpStandby.Counters.PrefixFiltering.Accesses.Access))])
                    self._leafs = OrderedDict()

                    self.access = YList(self)
                    self._segment_path = lambda: "accesses"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Accesses, [], name, value)


                class Access(Entity):
                    """
                    Prefix filtering counters for a specific
                    AccessList
                    
                    .. attribute:: access_list_name  (key)
                    
                    	AccessList Name
                    	**type**\: str
                    
                    	**length:** 1..65
                    
                    .. attribute:: forwarded
                    
                    	Count of messages which got forwarded
                    	**type**\:  :py:class:`Forwarded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Forwarded>`
                    
                    .. attribute:: locally_destined
                    
                    	Count of locally destined messages
                    	**type**\:  :py:class:`LocallyDestined <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Accesses.Access.LocallyDestined>`
                    
                    .. attribute:: dropped
                    
                    	Count of messages dropped
                    	**type**\:  :py:class:`Dropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Dropped>`
                    
                    .. attribute:: total
                    
                    	Count of total messages
                    	**type**\:  :py:class:`Total <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Total>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.Counters.PrefixFiltering.Accesses.Access, self).__init__()

                        self.yang_name = "access"
                        self.yang_parent_name = "accesses"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['access_list_name']
                        self._child_container_classes = OrderedDict([("forwarded", ("forwarded", RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Forwarded)), ("locally-destined", ("locally_destined", RsvpStandby.Counters.PrefixFiltering.Accesses.Access.LocallyDestined)), ("dropped", ("dropped", RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Dropped)), ("total", ("total", RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Total))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                        ])
                        self.access_list_name = None

                        self.forwarded = RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Forwarded()
                        self.forwarded.parent = self
                        self._children_name_map["forwarded"] = "forwarded"
                        self._children_yang_names.add("forwarded")

                        self.locally_destined = RsvpStandby.Counters.PrefixFiltering.Accesses.Access.LocallyDestined()
                        self.locally_destined.parent = self
                        self._children_name_map["locally_destined"] = "locally-destined"
                        self._children_yang_names.add("locally-destined")

                        self.dropped = RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Dropped()
                        self.dropped.parent = self
                        self._children_name_map["dropped"] = "dropped"
                        self._children_yang_names.add("dropped")

                        self.total = RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Total()
                        self.total.parent = self
                        self._children_name_map["total"] = "total"
                        self._children_yang_names.add("total")
                        self._segment_path = lambda: "access" + "[access-list-name='" + str(self.access_list_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/accesses/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Accesses.Access, ['access_list_name'], name, value)


                    class Forwarded(Entity):
                        """
                        Count of messages which got forwarded
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Forwarded, self).__init__()

                            self.yang_name = "forwarded"
                            self.yang_parent_name = "access"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "forwarded"

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Forwarded, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class LocallyDestined(Entity):
                        """
                        Count of locally destined messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Counters.PrefixFiltering.Accesses.Access.LocallyDestined, self).__init__()

                            self.yang_name = "locally-destined"
                            self.yang_parent_name = "access"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "locally-destined"

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Accesses.Access.LocallyDestined, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class Dropped(Entity):
                        """
                        Count of messages dropped
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Dropped, self).__init__()

                            self.yang_name = "dropped"
                            self.yang_parent_name = "access"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "dropped"

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Dropped, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class Total(Entity):
                        """
                        Count of total messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Total, self).__init__()

                            self.yang_name = "total"
                            self.yang_parent_name = "access"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "total"

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Accesses.Access.Total, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


            class Interfaces(Entity):
                """
                Interface specific prefix filtering counters
                
                .. attribute:: summary
                
                	Summary of prefix filtering counts for all interfaces
                	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary>`
                
                .. attribute:: interfaces
                
                	Table of interface specific prefix filtering counters
                	**type**\:  :py:class:`Interfaces_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Counters.PrefixFiltering.Interfaces, self).__init__()

                    self.yang_name = "interfaces"
                    self.yang_parent_name = "prefix-filtering"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("summary", ("summary", RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary)), ("interfaces", ("interfaces", RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.summary = RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary()
                    self.summary.parent = self
                    self._children_name_map["summary"] = "summary"
                    self._children_yang_names.add("summary")

                    self.interfaces = RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_()
                    self.interfaces.parent = self
                    self._children_name_map["interfaces"] = "interfaces"
                    self._children_yang_names.add("interfaces")
                    self._segment_path = lambda: "interfaces"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/%s" % self._segment_path()


                class Summary(Entity):
                    """
                    Summary of prefix filtering counts for all
                    interfaces
                    
                    .. attribute:: forwarded
                    
                    	Count of messages which got forwarded
                    	**type**\:  :py:class:`Forwarded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Forwarded>`
                    
                    .. attribute:: locally_destined
                    
                    	Count of locally destined messages
                    	**type**\:  :py:class:`LocallyDestined <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined>`
                    
                    .. attribute:: dropped
                    
                    	Count of messages dropped
                    	**type**\:  :py:class:`Dropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Dropped>`
                    
                    .. attribute:: default_action_dropped
                    
                    	Count of messages which got dropped due to default ACL action
                    	**type**\:  :py:class:`DefaultActionDropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped>`
                    
                    .. attribute:: default_action_processed
                    
                    	Count of messages which were processed due to default ACL action
                    	**type**\:  :py:class:`DefaultActionProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed>`
                    
                    .. attribute:: total
                    
                    	Count of total messages
                    	**type**\:  :py:class:`Total <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Total>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary, self).__init__()

                        self.yang_name = "summary"
                        self.yang_parent_name = "interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("forwarded", ("forwarded", RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Forwarded)), ("locally-destined", ("locally_destined", RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined)), ("dropped", ("dropped", RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Dropped)), ("default-action-dropped", ("default_action_dropped", RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped)), ("default-action-processed", ("default_action_processed", RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed)), ("total", ("total", RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Total))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.forwarded = RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Forwarded()
                        self.forwarded.parent = self
                        self._children_name_map["forwarded"] = "forwarded"
                        self._children_yang_names.add("forwarded")

                        self.locally_destined = RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined()
                        self.locally_destined.parent = self
                        self._children_name_map["locally_destined"] = "locally-destined"
                        self._children_yang_names.add("locally-destined")

                        self.dropped = RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Dropped()
                        self.dropped.parent = self
                        self._children_name_map["dropped"] = "dropped"
                        self._children_yang_names.add("dropped")

                        self.default_action_dropped = RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped()
                        self.default_action_dropped.parent = self
                        self._children_name_map["default_action_dropped"] = "default-action-dropped"
                        self._children_yang_names.add("default-action-dropped")

                        self.default_action_processed = RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed()
                        self.default_action_processed.parent = self
                        self._children_name_map["default_action_processed"] = "default-action-processed"
                        self._children_yang_names.add("default-action-processed")

                        self.total = RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Total()
                        self.total.parent = self
                        self._children_name_map["total"] = "total"
                        self._children_yang_names.add("total")
                        self._segment_path = lambda: "summary"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/%s" % self._segment_path()


                    class Forwarded(Entity):
                        """
                        Count of messages which got forwarded
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Forwarded, self).__init__()

                            self.yang_name = "forwarded"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "forwarded"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Forwarded, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class LocallyDestined(Entity):
                        """
                        Count of locally destined messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined, self).__init__()

                            self.yang_name = "locally-destined"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "locally-destined"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class Dropped(Entity):
                        """
                        Count of messages dropped
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Dropped, self).__init__()

                            self.yang_name = "dropped"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "dropped"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Dropped, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class DefaultActionDropped(Entity):
                        """
                        Count of messages which got dropped due to
                        default ACL action
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped, self).__init__()

                            self.yang_name = "default-action-dropped"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "default-action-dropped"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class DefaultActionProcessed(Entity):
                        """
                        Count of messages which were processed due to
                        default ACL action
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed, self).__init__()

                            self.yang_name = "default-action-processed"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "default-action-processed"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class Total(Entity):
                        """
                        Count of total messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Total, self).__init__()

                            self.yang_name = "total"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "total"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Interfaces.Summary.Total, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                class Interfaces_(Entity):
                    """
                    Table of interface specific prefix filtering
                    counters
                    
                    .. attribute:: interface
                    
                    	Prefix filtering counters for a specific interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_, self).__init__()

                        self.yang_name = "interfaces"
                        self.yang_parent_name = "interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("interface", ("interface", RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface))])
                        self._leafs = OrderedDict()

                        self.interface = YList(self)
                        self._segment_path = lambda: "interfaces"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_, [], name, value)


                    class Interface(Entity):
                        """
                        Prefix filtering counters for a specific
                        interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                        	**type**\: str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: forwarded
                        
                        	Count of messages which got forwarded
                        	**type**\:  :py:class:`Forwarded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded>`
                        
                        .. attribute:: locally_destined
                        
                        	Count of locally destined messages
                        	**type**\:  :py:class:`LocallyDestined <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined>`
                        
                        .. attribute:: dropped
                        
                        	Count of messages dropped
                        	**type**\:  :py:class:`Dropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped>`
                        
                        .. attribute:: default_action_dropped
                        
                        	Count of messages which got dropped due to default ACL action
                        	**type**\:  :py:class:`DefaultActionDropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped>`
                        
                        .. attribute:: default_action_processed
                        
                        	Count of messages which were processed due to default ACL action
                        	**type**\:  :py:class:`DefaultActionProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed>`
                        
                        .. attribute:: total
                        
                        	Count of total messages
                        	**type**\:  :py:class:`Total <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['interface_name']
                            self._child_container_classes = OrderedDict([("forwarded", ("forwarded", RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded)), ("locally-destined", ("locally_destined", RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined)), ("dropped", ("dropped", RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped)), ("default-action-dropped", ("default_action_dropped", RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped)), ("default-action-processed", ("default_action_processed", RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed)), ("total", ("total", RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ])
                            self.interface_name = None

                            self.forwarded = RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded()
                            self.forwarded.parent = self
                            self._children_name_map["forwarded"] = "forwarded"
                            self._children_yang_names.add("forwarded")

                            self.locally_destined = RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined()
                            self.locally_destined.parent = self
                            self._children_name_map["locally_destined"] = "locally-destined"
                            self._children_yang_names.add("locally-destined")

                            self.dropped = RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped()
                            self.dropped.parent = self
                            self._children_name_map["dropped"] = "dropped"
                            self._children_yang_names.add("dropped")

                            self.default_action_dropped = RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped()
                            self.default_action_dropped.parent = self
                            self._children_name_map["default_action_dropped"] = "default-action-dropped"
                            self._children_yang_names.add("default-action-dropped")

                            self.default_action_processed = RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed()
                            self.default_action_processed.parent = self
                            self._children_name_map["default_action_processed"] = "default-action-processed"
                            self._children_yang_names.add("default-action-processed")

                            self.total = RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total()
                            self.total.parent = self
                            self._children_name_map["total"] = "total"
                            self._children_yang_names.add("total")
                            self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/interfaces/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface, ['interface_name'], name, value)


                        class Forwarded(Entity):
                            """
                            Count of messages which got forwarded
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded, self).__init__()

                                self.yang_name = "forwarded"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path', YLeaf(YType.uint32, 'path')),
                                    ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                    ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                    ('total', YLeaf(YType.uint32, 'total')),
                                ])
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None
                                self._segment_path = lambda: "forwarded"

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                        class LocallyDestined(Entity):
                            """
                            Count of locally destined messages
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined, self).__init__()

                                self.yang_name = "locally-destined"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path', YLeaf(YType.uint32, 'path')),
                                    ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                    ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                    ('total', YLeaf(YType.uint32, 'total')),
                                ])
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None
                                self._segment_path = lambda: "locally-destined"

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                        class Dropped(Entity):
                            """
                            Count of messages dropped
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped, self).__init__()

                                self.yang_name = "dropped"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path', YLeaf(YType.uint32, 'path')),
                                    ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                    ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                    ('total', YLeaf(YType.uint32, 'total')),
                                ])
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None
                                self._segment_path = lambda: "dropped"

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                        class DefaultActionDropped(Entity):
                            """
                            Count of messages which got dropped due to
                            default ACL action
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped, self).__init__()

                                self.yang_name = "default-action-dropped"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path', YLeaf(YType.uint32, 'path')),
                                    ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                    ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                    ('total', YLeaf(YType.uint32, 'total')),
                                ])
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None
                                self._segment_path = lambda: "default-action-dropped"

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                        class DefaultActionProcessed(Entity):
                            """
                            Count of messages which were processed due to
                            default ACL action
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed, self).__init__()

                                self.yang_name = "default-action-processed"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path', YLeaf(YType.uint32, 'path')),
                                    ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                    ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                    ('total', YLeaf(YType.uint32, 'total')),
                                ])
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None
                                self._segment_path = lambda: "default-action-processed"

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                        class Total(Entity):
                            """
                            Count of total messages
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total, self).__init__()

                                self.yang_name = "total"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path', YLeaf(YType.uint32, 'path')),
                                    ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                    ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                    ('total', YLeaf(YType.uint32, 'total')),
                                ])
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None
                                self._segment_path = lambda: "total"

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


        class OutOfResource(Entity):
            """
            Out of resource counters
            
            .. attribute:: interfaces
            
            	Interface specific out of resource counters
            	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.OutOfResource.Interfaces>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.Counters.OutOfResource, self).__init__()

                self.yang_name = "out-of-resource"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("interfaces", ("interfaces", RsvpStandby.Counters.OutOfResource.Interfaces))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict()

                self.interfaces = RsvpStandby.Counters.OutOfResource.Interfaces()
                self.interfaces.parent = self
                self._children_name_map["interfaces"] = "interfaces"
                self._children_yang_names.add("interfaces")
                self._segment_path = lambda: "out-of-resource"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/%s" % self._segment_path()


            class Interfaces(Entity):
                """
                Interface specific out of resource counters
                
                .. attribute:: summary
                
                	Summary of out of resource counts for all interfaces
                	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.OutOfResource.Interfaces.Summary>`
                
                .. attribute:: interfaces
                
                	Table of interface specific out of resource counters
                	**type**\:  :py:class:`Interfaces_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.OutOfResource.Interfaces.Interfaces_>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Counters.OutOfResource.Interfaces, self).__init__()

                    self.yang_name = "interfaces"
                    self.yang_parent_name = "out-of-resource"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("summary", ("summary", RsvpStandby.Counters.OutOfResource.Interfaces.Summary)), ("interfaces", ("interfaces", RsvpStandby.Counters.OutOfResource.Interfaces.Interfaces_))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.summary = RsvpStandby.Counters.OutOfResource.Interfaces.Summary()
                    self.summary.parent = self
                    self._children_name_map["summary"] = "summary"
                    self._children_yang_names.add("summary")

                    self.interfaces = RsvpStandby.Counters.OutOfResource.Interfaces.Interfaces_()
                    self.interfaces.parent = self
                    self._children_name_map["interfaces"] = "interfaces"
                    self._children_yang_names.add("interfaces")
                    self._segment_path = lambda: "interfaces"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/out-of-resource/%s" % self._segment_path()


                class Summary(Entity):
                    """
                    Summary of out of resource counts for all
                    interfaces
                    
                    .. attribute:: dropped_path_messages
                    
                    	Count of Path messages dropped due to an out of resource condition
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.Counters.OutOfResource.Interfaces.Summary, self).__init__()

                        self.yang_name = "summary"
                        self.yang_parent_name = "interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('dropped_path_messages', YLeaf(YType.uint32, 'dropped-path-messages')),
                        ])
                        self.dropped_path_messages = None
                        self._segment_path = lambda: "summary"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/out-of-resource/interfaces/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.Counters.OutOfResource.Interfaces.Summary, ['dropped_path_messages'], name, value)


                class Interfaces_(Entity):
                    """
                    Table of interface specific out of resource
                    counters
                    
                    .. attribute:: interface
                    
                    	Out of resource counters for a specific interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.OutOfResource.Interfaces.Interfaces_.Interface>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.Counters.OutOfResource.Interfaces.Interfaces_, self).__init__()

                        self.yang_name = "interfaces"
                        self.yang_parent_name = "interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("interface", ("interface", RsvpStandby.Counters.OutOfResource.Interfaces.Interfaces_.Interface))])
                        self._leafs = OrderedDict()

                        self.interface = YList(self)
                        self._segment_path = lambda: "interfaces"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/out-of-resource/interfaces/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.Counters.OutOfResource.Interfaces.Interfaces_, [], name, value)


                    class Interface(Entity):
                        """
                        Out of resource counters for a specific
                        interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                        	**type**\: str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: dropped_path_messages
                        
                        	Count of Path messages dropped due to an out of resource condition
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Counters.OutOfResource.Interfaces.Interfaces_.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['interface_name']
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                                ('dropped_path_messages', YLeaf(YType.uint32, 'dropped-path-messages')),
                            ])
                            self.interface_name = None
                            self.dropped_path_messages = None
                            self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/out-of-resource/interfaces/interfaces/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Counters.OutOfResource.Interfaces.Interfaces_.Interface, ['interface_name', 'dropped_path_messages'], name, value)


        class InterfaceEvents(Entity):
            """
            Event counters
            
            .. attribute:: interface_event
            
            	Event counters for an interface
            	**type**\: list of  		 :py:class:`InterfaceEvent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.InterfaceEvents.InterfaceEvent>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.Counters.InterfaceEvents, self).__init__()

                self.yang_name = "interface-events"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("interface-event", ("interface_event", RsvpStandby.Counters.InterfaceEvents.InterfaceEvent))])
                self._leafs = OrderedDict()

                self.interface_event = YList(self)
                self._segment_path = lambda: "interface-events"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.Counters.InterfaceEvents, [], name, value)


            class InterfaceEvent(Entity):
                """
                Event counters for an interface
                
                .. attribute:: interface_name  (key)
                
                	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: expired_paths
                
                	Counter for Expired Path states
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: expired_reservations
                
                	Counter for Expired Reservation states
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: nac_ks
                
                	Counter for NACKs received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Counters.InterfaceEvents.InterfaceEvent, self).__init__()

                    self.yang_name = "interface-event"
                    self.yang_parent_name = "interface-events"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('expired_paths', YLeaf(YType.uint32, 'expired-paths')),
                        ('expired_reservations', YLeaf(YType.uint32, 'expired-reservations')),
                        ('nac_ks', YLeaf(YType.uint32, 'nac-ks')),
                    ])
                    self.interface_name = None
                    self.expired_paths = None
                    self.expired_reservations = None
                    self.nac_ks = None
                    self._segment_path = lambda: "interface-event" + "[interface-name='" + str(self.interface_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/interface-events/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Counters.InterfaceEvents.InterfaceEvent, ['interface_name', 'expired_paths', 'expired_reservations', 'nac_ks'], name, value)


        class Nsr(Entity):
            """
            Summary information for all RSVP NSR counters
            
            .. attribute:: last_cleared_timestamp
            
            	The timestamp, in seconds, when these statistics are cleared              since 00\:00\:00 UTC, January 1, 1970
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: rsvp_process_role
            
            	Process role
            	**type**\:  :py:class:`RsvpProcRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRole>`
            
            .. attribute:: last_idt_states
            
            	Last IDT number of states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_states
            
            	Total number of states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_deletions
            
            	Total number of deletions
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_nacks
            
            	Total number of NACKs
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: total_id_ts
            
            	Total number of IDTs
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.Counters.Nsr, self).__init__()

                self.yang_name = "nsr"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('last_cleared_timestamp', YLeaf(YType.uint32, 'last-cleared-timestamp')),
                    ('rsvp_process_role', YLeaf(YType.enumeration, 'rsvp-process-role')),
                    ('last_idt_states', YLeaf(YType.uint32, 'last-idt-states')),
                    ('total_states', YLeaf(YType.uint32, 'total-states')),
                    ('total_deletions', YLeaf(YType.uint32, 'total-deletions')),
                    ('total_nacks', YLeaf(YType.uint64, 'total-nacks')),
                    ('total_id_ts', YLeaf(YType.uint32, 'total-id-ts')),
                ])
                self.last_cleared_timestamp = None
                self.rsvp_process_role = None
                self.last_idt_states = None
                self.total_states = None
                self.total_deletions = None
                self.total_nacks = None
                self.total_id_ts = None
                self._segment_path = lambda: "nsr"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.Counters.Nsr, ['last_cleared_timestamp', 'rsvp_process_role', 'last_idt_states', 'total_states', 'total_deletions', 'total_nacks', 'total_id_ts'], name, value)


        class Issu(Entity):
            """
            Summary information for all RSVP ISSU counters
            
            .. attribute:: last_cleared_timestamp
            
            	The timestamp, in seconds, when these statistics are cleared              since 00\:00\:00 UTC, January 1, 1970
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: rsvp_process_role
            
            	Process role
            	**type**\:  :py:class:`RsvpProcRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRole>`
            
            .. attribute:: last_idt_states
            
            	Last IDT number of states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_states
            
            	Total number of states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_deletions
            
            	Total number of deletions
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_nacks
            
            	Total number of NACKs
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: total_id_ts
            
            	Total number of IDTs
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.Counters.Issu, self).__init__()

                self.yang_name = "issu"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('last_cleared_timestamp', YLeaf(YType.uint32, 'last-cleared-timestamp')),
                    ('rsvp_process_role', YLeaf(YType.enumeration, 'rsvp-process-role')),
                    ('last_idt_states', YLeaf(YType.uint32, 'last-idt-states')),
                    ('total_states', YLeaf(YType.uint32, 'total-states')),
                    ('total_deletions', YLeaf(YType.uint32, 'total-deletions')),
                    ('total_nacks', YLeaf(YType.uint64, 'total-nacks')),
                    ('total_id_ts', YLeaf(YType.uint32, 'total-id-ts')),
                ])
                self.last_cleared_timestamp = None
                self.rsvp_process_role = None
                self.last_idt_states = None
                self.total_states = None
                self.total_deletions = None
                self.total_nacks = None
                self.total_id_ts = None
                self._segment_path = lambda: "issu"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.Counters.Issu, ['last_cleared_timestamp', 'rsvp_process_role', 'last_idt_states', 'total_states', 'total_deletions', 'total_nacks', 'total_id_ts'], name, value)


        class Database(Entity):
            """
            Summary information for all RSVP database
            counters
            
            .. attribute:: sessions
            
            	Number of sessions
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: incoming_paths
            
            	Number of locally created and incoming path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_paths
            
            	Number of outgoing path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: incoming_reservations
            
            	Number of locally created and incoming reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_reservations
            
            	Number of outgoing reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: interfaces
            
            	Number of Interfaces
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.Counters.Database, self).__init__()

                self.yang_name = "database"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('sessions', YLeaf(YType.uint32, 'sessions')),
                    ('incoming_paths', YLeaf(YType.uint32, 'incoming-paths')),
                    ('outgoing_paths', YLeaf(YType.uint32, 'outgoing-paths')),
                    ('incoming_reservations', YLeaf(YType.uint32, 'incoming-reservations')),
                    ('outgoing_reservations', YLeaf(YType.uint32, 'outgoing-reservations')),
                    ('interfaces', YLeaf(YType.uint32, 'interfaces')),
                ])
                self.sessions = None
                self.incoming_paths = None
                self.outgoing_paths = None
                self.incoming_reservations = None
                self.outgoing_reservations = None
                self.interfaces = None
                self._segment_path = lambda: "database"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.Counters.Database, ['sessions', 'incoming_paths', 'outgoing_paths', 'incoming_reservations', 'outgoing_reservations', 'interfaces'], name, value)


        class EventSyncs(Entity):
            """
            Table containing event sync counters
            
            .. attribute:: event_sync
            
            	Event sync counters
            	**type**\: list of  		 :py:class:`EventSync <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Counters.EventSyncs.EventSync>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.Counters.EventSyncs, self).__init__()

                self.yang_name = "event-syncs"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("event-sync", ("event_sync", RsvpStandby.Counters.EventSyncs.EventSync))])
                self._leafs = OrderedDict()

                self.event_sync = YList(self)
                self._segment_path = lambda: "event-syncs"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.Counters.EventSyncs, [], name, value)


            class EventSync(Entity):
                """
                Event sync counters
                
                .. attribute:: interface_name  (key)
                
                	Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: expired_paths
                
                	Counter for Expired Path states
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: expired_reservations
                
                	Counter for Expired Reservation states
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: nac_ks
                
                	Counter for NACKs received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Counters.EventSyncs.EventSync, self).__init__()

                    self.yang_name = "event-sync"
                    self.yang_parent_name = "event-syncs"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('expired_paths', YLeaf(YType.uint32, 'expired-paths')),
                        ('expired_reservations', YLeaf(YType.uint32, 'expired-reservations')),
                        ('nac_ks', YLeaf(YType.uint32, 'nac-ks')),
                    ])
                    self.interface_name = None
                    self.expired_paths = None
                    self.expired_reservations = None
                    self.nac_ks = None
                    self._segment_path = lambda: "event-sync" + "[interface-name='" + str(self.interface_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/event-syncs/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Counters.EventSyncs.EventSync, ['interface_name', 'expired_paths', 'expired_reservations', 'nac_ks'], name, value)


    class InterfaceDetaileds(Entity):
        """
        Table of detailed info about RSVP\-enabled
        interfaces
        
        .. attribute:: interface_detailed
        
        	Detailed info about an RSVP\-enabled interface
        	**type**\: list of  		 :py:class:`InterfaceDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.InterfaceDetaileds, self).__init__()

            self.yang_name = "interface-detaileds"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("interface-detailed", ("interface_detailed", RsvpStandby.InterfaceDetaileds.InterfaceDetailed))])
            self._leafs = OrderedDict()

            self.interface_detailed = YList(self)
            self._segment_path = lambda: "interface-detaileds"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.InterfaceDetaileds, [], name, value)


        class InterfaceDetailed(Entity):
            """
            Detailed info about an RSVP\-enabled interface
            
            .. attribute:: interface_name  (key)
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:  :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation>`
            
            .. attribute:: flags
            
            	Interface flags
            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed.Flags>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\: str
            
            .. attribute:: signalling_ip_tos
            
            	IP TOS (precedence/DSCP) to use in signalling messages
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: integrity_send_password
            
            	Integrity send password
            	**type**\: str
            
            	**length:** 0..40
            
            .. attribute:: integrity_receive_password
            
            	Integrity receive password
            	**type**\: str
            
            	**length:** 0..40
            
            .. attribute:: integrity_receive_password_optional
            
            	Integrity recv password optional
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: refresh_timer_state
            
            	Refresh timer state
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: summary_refresh_timer_state
            
            	Summary refresh timer state
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: refresh_interval
            
            	Refresh interval in msecs
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: millisecond
            
            .. attribute:: out_of_band_refresh_interval
            
            	Out\-of\-band Refresh interval in msecs
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: summary_refresh_max_size
            
            	Max size in bytes of a single SRefresh
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: bundle_message_max_size
            
            	Max size in bytes of a single Bundle message
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: expiry_timer_state
            
            	Expiry timer state
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: expiry_states
            
            	Number of states for expiry check
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: expiry_interval
            
            	Expiry interval in msecs
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: millisecond
            
            .. attribute:: expiry_drops_tolerated
            
            	Number of missed messages tolerated
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: out_of_band_expiry_drops_tolerated
            
            	Number of out\-of\-band missed messages tolerated
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ack_hold_time
            
            	ACK hold time in msec
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ack_max_size
            
            	Max size for ACK message
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: retransmit_time
            
            	Retransmit time in msec
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: pacing_interval
            
            	Pacing interval in msecs
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: pacing_message_rate
            
            	No. of messages per interval
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: pacing_timer_state
            
            	State of pacing timer
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: pacing_messages
            
            	Number of messages deferred for pacing
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: neighbor_array
            
            	Neighbor array
            	**type**\: list of  		 :py:class:`NeighborArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.InterfaceDetaileds.InterfaceDetailed, self).__init__()

                self.yang_name = "interface-detailed"
                self.yang_parent_name = "interface-detaileds"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['interface_name']
                self._child_container_classes = OrderedDict([("bandwidth-information", ("bandwidth_information", RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation)), ("flags", ("flags", RsvpStandby.InterfaceDetaileds.InterfaceDetailed.Flags))])
                self._child_list_classes = OrderedDict([("neighbor-array", ("neighbor_array", RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray))])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                    ('signalling_ip_tos', YLeaf(YType.uint8, 'signalling-ip-tos')),
                    ('integrity_send_password', YLeaf(YType.str, 'integrity-send-password')),
                    ('integrity_receive_password', YLeaf(YType.str, 'integrity-receive-password')),
                    ('integrity_receive_password_optional', YLeaf(YType.uint8, 'integrity-receive-password-optional')),
                    ('refresh_timer_state', YLeaf(YType.enumeration, 'refresh-timer-state')),
                    ('summary_refresh_timer_state', YLeaf(YType.enumeration, 'summary-refresh-timer-state')),
                    ('refresh_interval', YLeaf(YType.int32, 'refresh-interval')),
                    ('out_of_band_refresh_interval', YLeaf(YType.uint32, 'out-of-band-refresh-interval')),
                    ('summary_refresh_max_size', YLeaf(YType.uint32, 'summary-refresh-max-size')),
                    ('bundle_message_max_size', YLeaf(YType.uint32, 'bundle-message-max-size')),
                    ('expiry_timer_state', YLeaf(YType.enumeration, 'expiry-timer-state')),
                    ('expiry_states', YLeaf(YType.int32, 'expiry-states')),
                    ('expiry_interval', YLeaf(YType.int32, 'expiry-interval')),
                    ('expiry_drops_tolerated', YLeaf(YType.int32, 'expiry-drops-tolerated')),
                    ('out_of_band_expiry_drops_tolerated', YLeaf(YType.uint32, 'out-of-band-expiry-drops-tolerated')),
                    ('ack_hold_time', YLeaf(YType.uint32, 'ack-hold-time')),
                    ('ack_max_size', YLeaf(YType.uint32, 'ack-max-size')),
                    ('retransmit_time', YLeaf(YType.uint32, 'retransmit-time')),
                    ('pacing_interval', YLeaf(YType.uint32, 'pacing-interval')),
                    ('pacing_message_rate', YLeaf(YType.uint32, 'pacing-message-rate')),
                    ('pacing_timer_state', YLeaf(YType.enumeration, 'pacing-timer-state')),
                    ('pacing_messages', YLeaf(YType.int32, 'pacing-messages')),
                ])
                self.interface_name = None
                self.interface_name_xr = None
                self.signalling_ip_tos = None
                self.integrity_send_password = None
                self.integrity_receive_password = None
                self.integrity_receive_password_optional = None
                self.refresh_timer_state = None
                self.summary_refresh_timer_state = None
                self.refresh_interval = None
                self.out_of_band_refresh_interval = None
                self.summary_refresh_max_size = None
                self.bundle_message_max_size = None
                self.expiry_timer_state = None
                self.expiry_states = None
                self.expiry_interval = None
                self.expiry_drops_tolerated = None
                self.out_of_band_expiry_drops_tolerated = None
                self.ack_hold_time = None
                self.ack_max_size = None
                self.retransmit_time = None
                self.pacing_interval = None
                self.pacing_message_rate = None
                self.pacing_timer_state = None
                self.pacing_messages = None

                self.bandwidth_information = RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation()
                self.bandwidth_information.parent = self
                self._children_name_map["bandwidth_information"] = "bandwidth-information"
                self._children_yang_names.add("bandwidth-information")

                self.flags = RsvpStandby.InterfaceDetaileds.InterfaceDetailed.Flags()
                self.flags.parent = self
                self._children_name_map["flags"] = "flags"
                self._children_yang_names.add("flags")

                self.neighbor_array = YList(self)
                self._segment_path = lambda: "interface-detailed" + "[interface-name='" + str(self.interface_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-detaileds/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.InterfaceDetaileds.InterfaceDetailed, ['interface_name', 'interface_name_xr', 'signalling_ip_tos', 'integrity_send_password', 'integrity_receive_password', 'integrity_receive_password_optional', 'refresh_timer_state', 'summary_refresh_timer_state', 'refresh_interval', 'out_of_band_refresh_interval', 'summary_refresh_max_size', 'bundle_message_max_size', 'expiry_timer_state', 'expiry_states', 'expiry_interval', 'expiry_drops_tolerated', 'out_of_band_expiry_drops_tolerated', 'ack_hold_time', 'ack_max_size', 'retransmit_time', 'pacing_interval', 'pacing_message_rate', 'pacing_timer_state', 'pacing_messages'], name, value)


            class BandwidthInformation(Entity):
                """
                Interface bandwidth information
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:  :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:  :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface>`
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:  :py:class:`RsvpMgmtDsteModes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModes>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation, self).__init__()

                    self.yang_name = "bandwidth-information"
                    self.yang_parent_name = "interface-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("pre-standard-dste-interface", ("pre_standard_dste_interface", RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface)), ("standard-dste-interface", ("standard_dste_interface", RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dste_mode', YLeaf(YType.enumeration, 'dste-mode')),
                    ])
                    self.dste_mode = None

                    self.pre_standard_dste_interface = RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self._children_name_map["pre_standard_dste_interface"] = "pre-standard-dste-interface"
                    self._children_yang_names.add("pre-standard-dste-interface")

                    self.standard_dste_interface = RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self
                    self._children_name_map["standard_dste_interface"] = "standard-dste-interface"
                    self._children_yang_names.add("standard-dste-interface")
                    self._segment_path = lambda: "bandwidth-information"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation, ['dste_mode'], name, value)


                class PreStandardDsteInterface(Entity):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface, self).__init__()

                        self.yang_name = "pre-standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_subpool_bandwidth', YLeaf(YType.uint64, 'max-subpool-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_subpool_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-subpool-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_subpool_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self._segment_path = lambda: "pre-standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_subpool_bandwidth', 'is_max_bandwidth_absolute', 'is_max_subpool_bandwidth_absolute'], name, value)


                class StandardDsteInterface(Entity):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface, self).__init__()

                        self.yang_name = "standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_pool0_bandwidth', YLeaf(YType.uint64, 'max-pool0-bandwidth')),
                            ('max_pool1_bandwidth', YLeaf(YType.uint64, 'max-pool1-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_bc0_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc0-bandwidth-absolute')),
                            ('is_max_bc1_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc1-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self._segment_path = lambda: "standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_pool0_bandwidth', 'max_pool1_bandwidth', 'is_max_bandwidth_absolute', 'is_max_bc0_bandwidth_absolute', 'is_max_bc1_bandwidth_absolute'], name, value)


            class Flags(Entity):
                """
                Interface flags
                
                .. attribute:: is_mpls_enabled
                
                	MPLS enabled on interface
                	**type**\: bool
                
                .. attribute:: is_refresh_reduction_enabled
                
                	Refresh Reduction enabled
                	**type**\: bool
                
                .. attribute:: is_pacing_enabled
                
                	Message pacing enabled
                	**type**\: bool
                
                .. attribute:: is_refresh_enabled
                
                	Refresh enabled
                	**type**\: bool
                
                .. attribute:: is_s_refresh_enabled
                
                	Summary Refresh enabled
                	**type**\: bool
                
                .. attribute:: is_interface_down
                
                	Interface is DOWN
                	**type**\: bool
                
                .. attribute:: is_interface_created
                
                	Interface is created
                	**type**\: bool
                
                .. attribute:: is_rel_s_refresh_enabled
                
                	Use reliable xmt for SRefresh
                	**type**\: bool
                
                .. attribute:: is_backup_tunnel
                
                	This is backup tunnel
                	**type**\: bool
                
                .. attribute:: is_rsvp_configured
                
                	RSVP explicitly configured
                	**type**\: bool
                
                .. attribute:: is_non_default_vrf
                
                	Interface is defined in non\-Default VRF
                	**type**\: bool
                
                .. attribute:: is_message_bundling_enabled
                
                	Use bundling for outgoing RSVP messages
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.InterfaceDetaileds.InterfaceDetailed.Flags, self).__init__()

                    self.yang_name = "flags"
                    self.yang_parent_name = "interface-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_mpls_enabled', YLeaf(YType.boolean, 'is-mpls-enabled')),
                        ('is_refresh_reduction_enabled', YLeaf(YType.boolean, 'is-refresh-reduction-enabled')),
                        ('is_pacing_enabled', YLeaf(YType.boolean, 'is-pacing-enabled')),
                        ('is_refresh_enabled', YLeaf(YType.boolean, 'is-refresh-enabled')),
                        ('is_s_refresh_enabled', YLeaf(YType.boolean, 'is-s-refresh-enabled')),
                        ('is_interface_down', YLeaf(YType.boolean, 'is-interface-down')),
                        ('is_interface_created', YLeaf(YType.boolean, 'is-interface-created')),
                        ('is_rel_s_refresh_enabled', YLeaf(YType.boolean, 'is-rel-s-refresh-enabled')),
                        ('is_backup_tunnel', YLeaf(YType.boolean, 'is-backup-tunnel')),
                        ('is_rsvp_configured', YLeaf(YType.boolean, 'is-rsvp-configured')),
                        ('is_non_default_vrf', YLeaf(YType.boolean, 'is-non-default-vrf')),
                        ('is_message_bundling_enabled', YLeaf(YType.boolean, 'is-message-bundling-enabled')),
                    ])
                    self.is_mpls_enabled = None
                    self.is_refresh_reduction_enabled = None
                    self.is_pacing_enabled = None
                    self.is_refresh_enabled = None
                    self.is_s_refresh_enabled = None
                    self.is_interface_down = None
                    self.is_interface_created = None
                    self.is_rel_s_refresh_enabled = None
                    self.is_backup_tunnel = None
                    self.is_rsvp_configured = None
                    self.is_non_default_vrf = None
                    self.is_message_bundling_enabled = None
                    self._segment_path = lambda: "flags"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.InterfaceDetaileds.InterfaceDetailed.Flags, ['is_mpls_enabled', 'is_refresh_reduction_enabled', 'is_pacing_enabled', 'is_refresh_enabled', 'is_s_refresh_enabled', 'is_interface_down', 'is_interface_created', 'is_rel_s_refresh_enabled', 'is_backup_tunnel', 'is_rsvp_configured', 'is_non_default_vrf', 'is_message_bundling_enabled'], name, value)


            class NeighborArray(Entity):
                """
                Neighbor array
                
                .. attribute:: expiry_time
                
                	Expiry time
                	**type**\:  :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime>`
                
                .. attribute:: is_neighbor_refresh_reduction_capable
                
                	Is neighbor capable of Refresh Reduction
                	**type**\: bool
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: message_ids
                
                	Number of MessageIDs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_states
                
                	Number of outgoing states to the neighbour
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: neighbor_message_id
                
                	List of Neighbor MessageIDs
                	**type**\: list of  		 :py:class:`NeighborMessageId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray.NeighborMessageId>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray, self).__init__()

                    self.yang_name = "neighbor-array"
                    self.yang_parent_name = "interface-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("expiry-time", ("expiry_time", RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime))])
                    self._child_list_classes = OrderedDict([("neighbor-message-id", ("neighbor_message_id", RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray.NeighborMessageId))])
                    self._leafs = OrderedDict([
                        ('is_neighbor_refresh_reduction_capable', YLeaf(YType.boolean, 'is-neighbor-refresh-reduction-capable')),
                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                        ('message_ids', YLeaf(YType.uint32, 'message-ids')),
                        ('outgoing_states', YLeaf(YType.int32, 'outgoing-states')),
                    ])
                    self.is_neighbor_refresh_reduction_capable = None
                    self.neighbor_address = None
                    self.message_ids = None
                    self.outgoing_states = None

                    self.expiry_time = RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime()
                    self.expiry_time.parent = self
                    self._children_name_map["expiry_time"] = "expiry-time"
                    self._children_yang_names.add("expiry-time")

                    self.neighbor_message_id = YList(self)
                    self._segment_path = lambda: "neighbor-array"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray, ['is_neighbor_refresh_reduction_capable', 'neighbor_address', 'message_ids', 'outgoing_states'], name, value)


                class ExpiryTime(Entity):
                    """
                    Expiry time
                    
                    .. attribute:: seconds
                    
                    	Time Value in Seconds
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	Time Value in Nano\-seconds
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime, self).__init__()

                        self.yang_name = "expiry-time"
                        self.yang_parent_name = "neighbor-array"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.int32, 'seconds')),
                            ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "expiry-time"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime, ['seconds', 'nanoseconds'], name, value)


                class NeighborMessageId(Entity):
                    """
                    List of Neighbor MessageIDs
                    
                    .. attribute:: message_id
                    
                    	Message ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray.NeighborMessageId, self).__init__()

                        self.yang_name = "neighbor-message-id"
                        self.yang_parent_name = "neighbor-array"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('message_id', YLeaf(YType.uint32, 'message-id')),
                        ])
                        self.message_id = None
                        self._segment_path = lambda: "neighbor-message-id"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.InterfaceDetaileds.InterfaceDetailed.NeighborArray.NeighborMessageId, ['message_id'], name, value)


    class ControllerBriefs(Entity):
        """
        Table of brief info about RSVP\-enabled
        controller
        
        .. attribute:: controller_brief
        
        	Brief info about an RSVP\-enabled controller
        	**type**\: list of  		 :py:class:`ControllerBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerBriefs.ControllerBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.ControllerBriefs, self).__init__()

            self.yang_name = "controller-briefs"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("controller-brief", ("controller_brief", RsvpStandby.ControllerBriefs.ControllerBrief))])
            self._leafs = OrderedDict()

            self.controller_brief = YList(self)
            self._segment_path = lambda: "controller-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.ControllerBriefs, [], name, value)


        class ControllerBrief(Entity):
            """
            Brief info about an RSVP\-enabled controller
            
            .. attribute:: controller_name  (key)
            
            	Controller Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:  :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\: str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.ControllerBriefs.ControllerBrief, self).__init__()

                self.yang_name = "controller-brief"
                self.yang_parent_name = "controller-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['controller_name']
                self._child_container_classes = OrderedDict([("bandwidth-information", ("bandwidth_information", RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('controller_name', YLeaf(YType.str, 'controller-name')),
                    ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                ])
                self.controller_name = None
                self.interface_name_xr = None

                self.bandwidth_information = RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation()
                self.bandwidth_information.parent = self
                self._children_name_map["bandwidth_information"] = "bandwidth-information"
                self._children_yang_names.add("bandwidth-information")
                self._segment_path = lambda: "controller-brief" + "[controller-name='" + str(self.controller_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.ControllerBriefs.ControllerBrief, ['controller_name', 'interface_name_xr'], name, value)


            class BandwidthInformation(Entity):
                """
                Interface bandwidth information
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:  :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:  :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation.StandardDsteInterface>`
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:  :py:class:`RsvpMgmtDsteModes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModes>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation, self).__init__()

                    self.yang_name = "bandwidth-information"
                    self.yang_parent_name = "controller-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("pre-standard-dste-interface", ("pre_standard_dste_interface", RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation.PreStandardDsteInterface)), ("standard-dste-interface", ("standard_dste_interface", RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation.StandardDsteInterface))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dste_mode', YLeaf(YType.enumeration, 'dste-mode')),
                    ])
                    self.dste_mode = None

                    self.pre_standard_dste_interface = RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self._children_name_map["pre_standard_dste_interface"] = "pre-standard-dste-interface"
                    self._children_yang_names.add("pre-standard-dste-interface")

                    self.standard_dste_interface = RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self
                    self._children_name_map["standard_dste_interface"] = "standard-dste-interface"
                    self._children_yang_names.add("standard-dste-interface")
                    self._segment_path = lambda: "bandwidth-information"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation, ['dste_mode'], name, value)


                class PreStandardDsteInterface(Entity):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation.PreStandardDsteInterface, self).__init__()

                        self.yang_name = "pre-standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_subpool_bandwidth', YLeaf(YType.uint64, 'max-subpool-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_subpool_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-subpool-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_subpool_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self._segment_path = lambda: "pre-standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation.PreStandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_subpool_bandwidth', 'is_max_bandwidth_absolute', 'is_max_subpool_bandwidth_absolute'], name, value)


                class StandardDsteInterface(Entity):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation.StandardDsteInterface, self).__init__()

                        self.yang_name = "standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_pool0_bandwidth', YLeaf(YType.uint64, 'max-pool0-bandwidth')),
                            ('max_pool1_bandwidth', YLeaf(YType.uint64, 'max-pool1-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_bc0_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc0-bandwidth-absolute')),
                            ('is_max_bc1_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc1-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self._segment_path = lambda: "standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.ControllerBriefs.ControllerBrief.BandwidthInformation.StandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_pool0_bandwidth', 'max_pool1_bandwidth', 'is_max_bandwidth_absolute', 'is_max_bc0_bandwidth_absolute', 'is_max_bc1_bandwidth_absolute'], name, value)


    class GracefulRestart(Entity):
        """
        Info about graceful\-restart
        
        .. attribute:: recovery_time_left
        
        	How much recovery timer remains
        	**type**\:  :py:class:`RecoveryTimeLeft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GracefulRestart.RecoveryTimeLeft>`
        
        .. attribute:: recovery_timer_exp_time
        
        	Time at which recovery timer will expire
        	**type**\:  :py:class:`RecoveryTimerExpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GracefulRestart.RecoveryTimerExpTime>`
        
        .. attribute:: is_gr_enabled
        
        	Whether GR is enabled
        	**type**\: bool
        
        .. attribute:: global_neighbors
        
        	Global neighbor count
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: restart_time
        
        	Restart time (milliseconds)
        	**type**\: int
        
        	**range:** 0..4294967295
        
        	**units**\: millisecond
        
        .. attribute:: recovery_time
        
        	Recovery time (milliseconds)
        	**type**\: int
        
        	**range:** 0..4294967295
        
        	**units**\: millisecond
        
        .. attribute:: is_recovery_timer_running
        
        	Whether recovery timer is running
        	**type**\: bool
        
        .. attribute:: hello_interval
        
        	Interval at which hello messages are sent
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: missed_hellos
        
        	Max number of hellos missed before hellos declared down
        	**type**\: int
        
        	**range:** 0..255
        
        .. attribute:: pending_states
        
        	Total number of pending states
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: local_node_address
        
        	Local node address
        	**type**\: list of  		 :py:class:`LocalNodeAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GracefulRestart.LocalNodeAddress>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.GracefulRestart, self).__init__()

            self.yang_name = "graceful-restart"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("recovery-time-left", ("recovery_time_left", RsvpStandby.GracefulRestart.RecoveryTimeLeft)), ("recovery-timer-exp-time", ("recovery_timer_exp_time", RsvpStandby.GracefulRestart.RecoveryTimerExpTime))])
            self._child_list_classes = OrderedDict([("local-node-address", ("local_node_address", RsvpStandby.GracefulRestart.LocalNodeAddress))])
            self._leafs = OrderedDict([
                ('is_gr_enabled', YLeaf(YType.boolean, 'is-gr-enabled')),
                ('global_neighbors', YLeaf(YType.uint32, 'global-neighbors')),
                ('restart_time', YLeaf(YType.uint32, 'restart-time')),
                ('recovery_time', YLeaf(YType.uint32, 'recovery-time')),
                ('is_recovery_timer_running', YLeaf(YType.boolean, 'is-recovery-timer-running')),
                ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                ('missed_hellos', YLeaf(YType.uint8, 'missed-hellos')),
                ('pending_states', YLeaf(YType.uint32, 'pending-states')),
            ])
            self.is_gr_enabled = None
            self.global_neighbors = None
            self.restart_time = None
            self.recovery_time = None
            self.is_recovery_timer_running = None
            self.hello_interval = None
            self.missed_hellos = None
            self.pending_states = None

            self.recovery_time_left = RsvpStandby.GracefulRestart.RecoveryTimeLeft()
            self.recovery_time_left.parent = self
            self._children_name_map["recovery_time_left"] = "recovery-time-left"
            self._children_yang_names.add("recovery-time-left")

            self.recovery_timer_exp_time = RsvpStandby.GracefulRestart.RecoveryTimerExpTime()
            self.recovery_timer_exp_time.parent = self
            self._children_name_map["recovery_timer_exp_time"] = "recovery-timer-exp-time"
            self._children_yang_names.add("recovery-timer-exp-time")

            self.local_node_address = YList(self)
            self._segment_path = lambda: "graceful-restart"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.GracefulRestart, ['is_gr_enabled', 'global_neighbors', 'restart_time', 'recovery_time', 'is_recovery_timer_running', 'hello_interval', 'missed_hellos', 'pending_states'], name, value)


        class RecoveryTimeLeft(Entity):
            """
            How much recovery timer remains
            
            .. attribute:: seconds
            
            	Time Value in Seconds
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: second
            
            .. attribute:: nanoseconds
            
            	Time Value in Nano\-seconds
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: nanosecond
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.GracefulRestart.RecoveryTimeLeft, self).__init__()

                self.yang_name = "recovery-time-left"
                self.yang_parent_name = "graceful-restart"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('seconds', YLeaf(YType.int32, 'seconds')),
                    ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                ])
                self.seconds = None
                self.nanoseconds = None
                self._segment_path = lambda: "recovery-time-left"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/graceful-restart/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.GracefulRestart.RecoveryTimeLeft, ['seconds', 'nanoseconds'], name, value)


        class RecoveryTimerExpTime(Entity):
            """
            Time at which recovery timer will expire
            
            .. attribute:: seconds
            
            	Time Value in Seconds
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: second
            
            .. attribute:: nanoseconds
            
            	Time Value in Nano\-seconds
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: nanosecond
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.GracefulRestart.RecoveryTimerExpTime, self).__init__()

                self.yang_name = "recovery-timer-exp-time"
                self.yang_parent_name = "graceful-restart"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('seconds', YLeaf(YType.int32, 'seconds')),
                    ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                ])
                self.seconds = None
                self.nanoseconds = None
                self._segment_path = lambda: "recovery-timer-exp-time"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/graceful-restart/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.GracefulRestart.RecoveryTimerExpTime, ['seconds', 'nanoseconds'], name, value)


        class LocalNodeAddress(Entity):
            """
            Local node address
            
            .. attribute:: local_node_ip_address
            
            	Local node address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: application_type
            
            	GR local node\-id app type
            	**type**\:  :py:class:`RsvpMgmtGrApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGrApp>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.GracefulRestart.LocalNodeAddress, self).__init__()

                self.yang_name = "local-node-address"
                self.yang_parent_name = "graceful-restart"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('local_node_ip_address', YLeaf(YType.str, 'local-node-ip-address')),
                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                ])
                self.local_node_ip_address = None
                self.application_type = None
                self._segment_path = lambda: "local-node-address"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/graceful-restart/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.GracefulRestart.LocalNodeAddress, ['local_node_ip_address', 'application_type'], name, value)


    class HelloInterfaceInstanceBriefs(Entity):
        """
        Table of brief info about i/f\-based hello
        instances
        
        .. attribute:: hello_interface_instance_brief
        
        	Brief info for a single interface\-based hello instance
        	**type**\: list of  		 :py:class:`HelloInterfaceInstanceBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.HelloInterfaceInstanceBriefs, self).__init__()

            self.yang_name = "hello-interface-instance-briefs"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("hello-interface-instance-brief", ("hello_interface_instance_brief", RsvpStandby.HelloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief))])
            self._leafs = OrderedDict()

            self.hello_interface_instance_brief = YList(self)
            self._segment_path = lambda: "hello-interface-instance-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.HelloInterfaceInstanceBriefs, [], name, value)


        class HelloInterfaceInstanceBrief(Entity):
            """
            Brief info for a single interface\-based hello
            instance
            
            .. attribute:: source_address  (key)
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address  (key)
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:  :py:class:`RsvpMgmtHelloInstance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstance>`
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.HelloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief, self).__init__()

                self.yang_name = "hello-interface-instance-brief"
                self.yang_parent_name = "hello-interface-instance-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['source_address','destination_address']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('source_address_xr', YLeaf(YType.str, 'source-address-xr')),
                    ('destination_address_xr', YLeaf(YType.str, 'destination-address-xr')),
                    ('instance_type', YLeaf(YType.enumeration, 'instance-type')),
                    ('hello_interface', YLeaf(YType.str, 'hello-interface')),
                ])
                self.source_address = None
                self.destination_address = None
                self.source_address_xr = None
                self.destination_address_xr = None
                self.instance_type = None
                self.hello_interface = None
                self._segment_path = lambda: "hello-interface-instance-brief" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-interface-instance-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.HelloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief, ['source_address', 'destination_address', 'source_address_xr', 'destination_address_xr', 'instance_type', 'hello_interface'], name, value)


    class HelloInterfaceInstanceDetails(Entity):
        """
        Table of detailed info about i/f\-based hello
        instances
        
        .. attribute:: hello_interface_instance_detail
        
        	Detailed info for a single interface\-based hello instance
        	**type**\: list of  		 :py:class:`HelloInterfaceInstanceDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.HelloInterfaceInstanceDetails, self).__init__()

            self.yang_name = "hello-interface-instance-details"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("hello-interface-instance-detail", ("hello_interface_instance_detail", RsvpStandby.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail))])
            self._leafs = OrderedDict()

            self.hello_interface_instance_detail = YList(self)
            self._segment_path = lambda: "hello-interface-instance-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.HelloInterfaceInstanceDetails, [], name, value)


        class HelloInterfaceInstanceDetail(Entity):
            """
            Detailed info for a single interface\-based
            hello instance
            
            .. attribute:: source_address  (key)
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address  (key)
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: last_message_sent_time
            
            	Last Ack/msg sent time
            	**type**\:  :py:class:`LastMessageSentTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime>`
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: hello_global_neighbor_id
            
            	Global Neighbor ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:  :py:class:`RsvpMgmtHelloInstance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstance>`
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: source_instance
            
            	Source Instance
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: destination_instance
            
            	Destination Instance
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: hello_messages_sent
            
            	Number of hello messages sent
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: hello_messages_received
            
            	Number of hello messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail, self).__init__()

                self.yang_name = "hello-interface-instance-detail"
                self.yang_parent_name = "hello-interface-instance-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['source_address','destination_address']
                self._child_container_classes = OrderedDict([("last-message-sent-time", ("last_message_sent_time", RsvpStandby.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('source_address_xr', YLeaf(YType.str, 'source-address-xr')),
                    ('destination_address_xr', YLeaf(YType.str, 'destination-address-xr')),
                    ('hello_global_neighbor_id', YLeaf(YType.str, 'hello-global-neighbor-id')),
                    ('instance_type', YLeaf(YType.enumeration, 'instance-type')),
                    ('hello_interface', YLeaf(YType.str, 'hello-interface')),
                    ('source_instance', YLeaf(YType.uint32, 'source-instance')),
                    ('destination_instance', YLeaf(YType.uint32, 'destination-instance')),
                    ('hello_messages_sent', YLeaf(YType.uint64, 'hello-messages-sent')),
                    ('hello_messages_received', YLeaf(YType.uint64, 'hello-messages-received')),
                ])
                self.source_address = None
                self.destination_address = None
                self.source_address_xr = None
                self.destination_address_xr = None
                self.hello_global_neighbor_id = None
                self.instance_type = None
                self.hello_interface = None
                self.source_instance = None
                self.destination_instance = None
                self.hello_messages_sent = None
                self.hello_messages_received = None

                self.last_message_sent_time = RsvpStandby.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime()
                self.last_message_sent_time.parent = self
                self._children_name_map["last_message_sent_time"] = "last-message-sent-time"
                self._children_yang_names.add("last-message-sent-time")
                self._segment_path = lambda: "hello-interface-instance-detail" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-interface-instance-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail, ['source_address', 'destination_address', 'source_address_xr', 'destination_address_xr', 'hello_global_neighbor_id', 'instance_type', 'hello_interface', 'source_instance', 'destination_instance', 'hello_messages_sent', 'hello_messages_received'], name, value)


            class LastMessageSentTime(Entity):
                """
                Last Ack/msg sent time
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime, self).__init__()

                    self.yang_name = "last-message-sent-time"
                    self.yang_parent_name = "hello-interface-instance-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "last-message-sent-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime, ['seconds', 'nanoseconds'], name, value)


    class InterfaceNeighborDetails(Entity):
        """
        Table of detailed info about I/F neighbors
        
        .. attribute:: interface_neighbor_detail
        
        	Detailed info for a single interface neighbor
        	**type**\: list of  		 :py:class:`InterfaceNeighborDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceNeighborDetails.InterfaceNeighborDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.InterfaceNeighborDetails, self).__init__()

            self.yang_name = "interface-neighbor-details"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("interface-neighbor-detail", ("interface_neighbor_detail", RsvpStandby.InterfaceNeighborDetails.InterfaceNeighborDetail))])
            self._leafs = OrderedDict()

            self.interface_neighbor_detail = YList(self)
            self._segment_path = lambda: "interface-neighbor-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.InterfaceNeighborDetails, [], name, value)


        class InterfaceNeighborDetail(Entity):
            """
            Detailed info for a single interface neighbor
            
            .. attribute:: neighbor_address  (key)
            
            	Address of global neighbor
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_neighbor_list_detail
            
            	Detail list of I/F Neighbors
            	**type**\: list of  		 :py:class:`InterfaceNeighborListDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceNeighborDetails.InterfaceNeighborDetail.InterfaceNeighborListDetail>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.InterfaceNeighborDetails.InterfaceNeighborDetail, self).__init__()

                self.yang_name = "interface-neighbor-detail"
                self.yang_parent_name = "interface-neighbor-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['neighbor_address']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("interface-neighbor-list-detail", ("interface_neighbor_list_detail", RsvpStandby.InterfaceNeighborDetails.InterfaceNeighborDetail.InterfaceNeighborListDetail))])
                self._leafs = OrderedDict([
                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                    ('node_address', YLeaf(YType.str, 'node-address')),
                ])
                self.neighbor_address = None
                self.node_address = None

                self.interface_neighbor_list_detail = YList(self)
                self._segment_path = lambda: "interface-neighbor-detail" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-neighbor-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.InterfaceNeighborDetails.InterfaceNeighborDetail, ['neighbor_address', 'node_address'], name, value)


            class InterfaceNeighborListDetail(Entity):
                """
                Detail list of I/F Neighbors
                
                .. attribute:: interface_neighbor_address
                
                	Interface Neighbor address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_interface_name
                
                	Neighbor's Interface handle
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: is_rr_enabled
                
                	Is Neighbor's RR enable
                	**type**\: bool
                
                .. attribute:: neighbor_epoch
                
                	Neighbor's epoch value
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: out_of_order_messages
                
                	Number of out of order msgs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: retransmitted_messages
                
                	Number of retransmitted msgs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.InterfaceNeighborDetails.InterfaceNeighborDetail.InterfaceNeighborListDetail, self).__init__()

                    self.yang_name = "interface-neighbor-list-detail"
                    self.yang_parent_name = "interface-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_neighbor_address', YLeaf(YType.str, 'interface-neighbor-address')),
                        ('neighbor_interface_name', YLeaf(YType.str, 'neighbor-interface-name')),
                        ('is_rr_enabled', YLeaf(YType.boolean, 'is-rr-enabled')),
                        ('neighbor_epoch', YLeaf(YType.uint32, 'neighbor-epoch')),
                        ('out_of_order_messages', YLeaf(YType.uint32, 'out-of-order-messages')),
                        ('retransmitted_messages', YLeaf(YType.uint32, 'retransmitted-messages')),
                    ])
                    self.interface_neighbor_address = None
                    self.neighbor_interface_name = None
                    self.is_rr_enabled = None
                    self.neighbor_epoch = None
                    self.out_of_order_messages = None
                    self.retransmitted_messages = None
                    self._segment_path = lambda: "interface-neighbor-list-detail"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.InterfaceNeighborDetails.InterfaceNeighborDetail.InterfaceNeighborListDetail, ['interface_neighbor_address', 'neighbor_interface_name', 'is_rr_enabled', 'neighbor_epoch', 'out_of_order_messages', 'retransmitted_messages'], name, value)


    class Nsr(Entity):
        """
        RSVP NSR information
        
        .. attribute:: status
        
        	RSVP NSR status information
        	**type**\:  :py:class:`Status <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Nsr.Status>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.Nsr, self).__init__()

            self.yang_name = "nsr"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("status", ("status", RsvpStandby.Nsr.Status))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.status = RsvpStandby.Nsr.Status()
            self.status.parent = self
            self._children_name_map["status"] = "status"
            self._children_yang_names.add("status")
            self._segment_path = lambda: "nsr"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()


        class Status(Entity):
            """
            RSVP NSR status information
            
            .. attribute:: idt_status
            
            	IDT status
            	**type**\:  :py:class:`IdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Nsr.Status.IdtStatus>`
            
            .. attribute:: previous_idt_status
            
            	Previous IDT status
            	**type**\:  :py:class:`PreviousIdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Nsr.Status.PreviousIdtStatus>`
            
            .. attribute:: role
            
            	Process role
            	**type**\:  :py:class:`RsvpProcRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRole>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.Nsr.Status, self).__init__()

                self.yang_name = "status"
                self.yang_parent_name = "nsr"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("idt-status", ("idt_status", RsvpStandby.Nsr.Status.IdtStatus)), ("previous-idt-status", ("previous_idt_status", RsvpStandby.Nsr.Status.PreviousIdtStatus))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('role', YLeaf(YType.enumeration, 'role')),
                ])
                self.role = None

                self.idt_status = RsvpStandby.Nsr.Status.IdtStatus()
                self.idt_status.parent = self
                self._children_name_map["idt_status"] = "idt-status"
                self._children_yang_names.add("idt-status")

                self.previous_idt_status = RsvpStandby.Nsr.Status.PreviousIdtStatus()
                self.previous_idt_status.parent = self
                self._children_name_map["previous_idt_status"] = "previous-idt-status"
                self._children_yang_names.add("previous-idt-status")
                self._segment_path = lambda: "status"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/nsr/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.Nsr.Status, ['role'], name, value)


            class IdtStatus(Entity):
                """
                IDT status
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:  :py:class:`RsvpSyncStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatus>`
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:  :py:class:`RsvpProcNsrNotReadyReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReason>`
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Nsr.Status.IdtStatus, self).__init__()

                    self.yang_name = "idt-status"
                    self.yang_parent_name = "status"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sync_status', YLeaf(YType.enumeration, 'sync-status')),
                        ('not_ready_reason', YLeaf(YType.enumeration, 'not-ready-reason')),
                        ('idt_start_time', YLeaf(YType.uint32, 'idt-start-time')),
                        ('idt_end_time', YLeaf(YType.uint32, 'idt-end-time')),
                        ('declare_time', YLeaf(YType.uint32, 'declare-time')),
                        ('withdraw_time', YLeaf(YType.uint32, 'withdraw-time')),
                    ])
                    self.sync_status = None
                    self.not_ready_reason = None
                    self.idt_start_time = None
                    self.idt_end_time = None
                    self.declare_time = None
                    self.withdraw_time = None
                    self._segment_path = lambda: "idt-status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/nsr/status/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Nsr.Status.IdtStatus, ['sync_status', 'not_ready_reason', 'idt_start_time', 'idt_end_time', 'declare_time', 'withdraw_time'], name, value)


            class PreviousIdtStatus(Entity):
                """
                Previous IDT status
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:  :py:class:`RsvpSyncStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatus>`
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:  :py:class:`RsvpProcNsrNotReadyReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReason>`
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Nsr.Status.PreviousIdtStatus, self).__init__()

                    self.yang_name = "previous-idt-status"
                    self.yang_parent_name = "status"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sync_status', YLeaf(YType.enumeration, 'sync-status')),
                        ('not_ready_reason', YLeaf(YType.enumeration, 'not-ready-reason')),
                        ('idt_start_time', YLeaf(YType.uint32, 'idt-start-time')),
                        ('idt_end_time', YLeaf(YType.uint32, 'idt-end-time')),
                        ('declare_time', YLeaf(YType.uint32, 'declare-time')),
                        ('withdraw_time', YLeaf(YType.uint32, 'withdraw-time')),
                    ])
                    self.sync_status = None
                    self.not_ready_reason = None
                    self.idt_start_time = None
                    self.idt_end_time = None
                    self.declare_time = None
                    self.withdraw_time = None
                    self._segment_path = lambda: "previous-idt-status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/nsr/status/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Nsr.Status.PreviousIdtStatus, ['sync_status', 'not_ready_reason', 'idt_start_time', 'idt_end_time', 'declare_time', 'withdraw_time'], name, value)


    class Summary(Entity):
        """
        RSVP summary information
        
        .. attribute:: issu_status
        
        	Issu status
        	**type**\:  :py:class:`IssuStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary.IssuStatus>`
        
        .. attribute:: nsr_status
        
        	NSR status
        	**type**\:  :py:class:`NsrStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary.NsrStatus>`
        
        .. attribute:: database_counters
        
        	All database counters
        	**type**\:  :py:class:`DatabaseCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary.DatabaseCounters>`
        
        .. attribute:: interfaces
        
        	Total interfaces
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: ls_ps
        
        	Total LSPs
        	**type**\: int
        
        	**range:** 0..4294967295
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.Summary, self).__init__()

            self.yang_name = "summary"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("issu-status", ("issu_status", RsvpStandby.Summary.IssuStatus)), ("nsr-status", ("nsr_status", RsvpStandby.Summary.NsrStatus)), ("database-counters", ("database_counters", RsvpStandby.Summary.DatabaseCounters))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('interfaces', YLeaf(YType.uint32, 'interfaces')),
                ('ls_ps', YLeaf(YType.uint32, 'ls-ps')),
            ])
            self.interfaces = None
            self.ls_ps = None

            self.issu_status = RsvpStandby.Summary.IssuStatus()
            self.issu_status.parent = self
            self._children_name_map["issu_status"] = "issu-status"
            self._children_yang_names.add("issu-status")

            self.nsr_status = RsvpStandby.Summary.NsrStatus()
            self.nsr_status.parent = self
            self._children_name_map["nsr_status"] = "nsr-status"
            self._children_yang_names.add("nsr-status")

            self.database_counters = RsvpStandby.Summary.DatabaseCounters()
            self.database_counters.parent = self
            self._children_name_map["database_counters"] = "database-counters"
            self._children_yang_names.add("database-counters")
            self._segment_path = lambda: "summary"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.Summary, ['interfaces', 'ls_ps'], name, value)


        class IssuStatus(Entity):
            """
            Issu status
            
            .. attribute:: idt_status
            
            	IDT status
            	**type**\:  :py:class:`IdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary.IssuStatus.IdtStatus>`
            
            .. attribute:: previous_idt_status
            
            	Previous IDT status
            	**type**\:  :py:class:`PreviousIdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary.IssuStatus.PreviousIdtStatus>`
            
            .. attribute:: role
            
            	Process role
            	**type**\:  :py:class:`RsvpProcRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRole>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.Summary.IssuStatus, self).__init__()

                self.yang_name = "issu-status"
                self.yang_parent_name = "summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("idt-status", ("idt_status", RsvpStandby.Summary.IssuStatus.IdtStatus)), ("previous-idt-status", ("previous_idt_status", RsvpStandby.Summary.IssuStatus.PreviousIdtStatus))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('role', YLeaf(YType.enumeration, 'role')),
                ])
                self.role = None

                self.idt_status = RsvpStandby.Summary.IssuStatus.IdtStatus()
                self.idt_status.parent = self
                self._children_name_map["idt_status"] = "idt-status"
                self._children_yang_names.add("idt-status")

                self.previous_idt_status = RsvpStandby.Summary.IssuStatus.PreviousIdtStatus()
                self.previous_idt_status.parent = self
                self._children_name_map["previous_idt_status"] = "previous-idt-status"
                self._children_yang_names.add("previous-idt-status")
                self._segment_path = lambda: "issu-status"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.Summary.IssuStatus, ['role'], name, value)


            class IdtStatus(Entity):
                """
                IDT status
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:  :py:class:`RsvpSyncStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatus>`
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:  :py:class:`RsvpProcNsrNotReadyReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReason>`
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Summary.IssuStatus.IdtStatus, self).__init__()

                    self.yang_name = "idt-status"
                    self.yang_parent_name = "issu-status"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sync_status', YLeaf(YType.enumeration, 'sync-status')),
                        ('not_ready_reason', YLeaf(YType.enumeration, 'not-ready-reason')),
                        ('idt_start_time', YLeaf(YType.uint32, 'idt-start-time')),
                        ('idt_end_time', YLeaf(YType.uint32, 'idt-end-time')),
                        ('declare_time', YLeaf(YType.uint32, 'declare-time')),
                        ('withdraw_time', YLeaf(YType.uint32, 'withdraw-time')),
                    ])
                    self.sync_status = None
                    self.not_ready_reason = None
                    self.idt_start_time = None
                    self.idt_end_time = None
                    self.declare_time = None
                    self.withdraw_time = None
                    self._segment_path = lambda: "idt-status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/issu-status/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Summary.IssuStatus.IdtStatus, ['sync_status', 'not_ready_reason', 'idt_start_time', 'idt_end_time', 'declare_time', 'withdraw_time'], name, value)


            class PreviousIdtStatus(Entity):
                """
                Previous IDT status
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:  :py:class:`RsvpSyncStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatus>`
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:  :py:class:`RsvpProcNsrNotReadyReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReason>`
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Summary.IssuStatus.PreviousIdtStatus, self).__init__()

                    self.yang_name = "previous-idt-status"
                    self.yang_parent_name = "issu-status"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sync_status', YLeaf(YType.enumeration, 'sync-status')),
                        ('not_ready_reason', YLeaf(YType.enumeration, 'not-ready-reason')),
                        ('idt_start_time', YLeaf(YType.uint32, 'idt-start-time')),
                        ('idt_end_time', YLeaf(YType.uint32, 'idt-end-time')),
                        ('declare_time', YLeaf(YType.uint32, 'declare-time')),
                        ('withdraw_time', YLeaf(YType.uint32, 'withdraw-time')),
                    ])
                    self.sync_status = None
                    self.not_ready_reason = None
                    self.idt_start_time = None
                    self.idt_end_time = None
                    self.declare_time = None
                    self.withdraw_time = None
                    self._segment_path = lambda: "previous-idt-status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/issu-status/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Summary.IssuStatus.PreviousIdtStatus, ['sync_status', 'not_ready_reason', 'idt_start_time', 'idt_end_time', 'declare_time', 'withdraw_time'], name, value)


        class NsrStatus(Entity):
            """
            NSR status
            
            .. attribute:: idt_status
            
            	IDT status
            	**type**\:  :py:class:`IdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary.NsrStatus.IdtStatus>`
            
            .. attribute:: previous_idt_status
            
            	Previous IDT status
            	**type**\:  :py:class:`PreviousIdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Summary.NsrStatus.PreviousIdtStatus>`
            
            .. attribute:: role
            
            	Process role
            	**type**\:  :py:class:`RsvpProcRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRole>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.Summary.NsrStatus, self).__init__()

                self.yang_name = "nsr-status"
                self.yang_parent_name = "summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("idt-status", ("idt_status", RsvpStandby.Summary.NsrStatus.IdtStatus)), ("previous-idt-status", ("previous_idt_status", RsvpStandby.Summary.NsrStatus.PreviousIdtStatus))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('role', YLeaf(YType.enumeration, 'role')),
                ])
                self.role = None

                self.idt_status = RsvpStandby.Summary.NsrStatus.IdtStatus()
                self.idt_status.parent = self
                self._children_name_map["idt_status"] = "idt-status"
                self._children_yang_names.add("idt-status")

                self.previous_idt_status = RsvpStandby.Summary.NsrStatus.PreviousIdtStatus()
                self.previous_idt_status.parent = self
                self._children_name_map["previous_idt_status"] = "previous-idt-status"
                self._children_yang_names.add("previous-idt-status")
                self._segment_path = lambda: "nsr-status"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.Summary.NsrStatus, ['role'], name, value)


            class IdtStatus(Entity):
                """
                IDT status
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:  :py:class:`RsvpSyncStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatus>`
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:  :py:class:`RsvpProcNsrNotReadyReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReason>`
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Summary.NsrStatus.IdtStatus, self).__init__()

                    self.yang_name = "idt-status"
                    self.yang_parent_name = "nsr-status"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sync_status', YLeaf(YType.enumeration, 'sync-status')),
                        ('not_ready_reason', YLeaf(YType.enumeration, 'not-ready-reason')),
                        ('idt_start_time', YLeaf(YType.uint32, 'idt-start-time')),
                        ('idt_end_time', YLeaf(YType.uint32, 'idt-end-time')),
                        ('declare_time', YLeaf(YType.uint32, 'declare-time')),
                        ('withdraw_time', YLeaf(YType.uint32, 'withdraw-time')),
                    ])
                    self.sync_status = None
                    self.not_ready_reason = None
                    self.idt_start_time = None
                    self.idt_end_time = None
                    self.declare_time = None
                    self.withdraw_time = None
                    self._segment_path = lambda: "idt-status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/nsr-status/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Summary.NsrStatus.IdtStatus, ['sync_status', 'not_ready_reason', 'idt_start_time', 'idt_end_time', 'declare_time', 'withdraw_time'], name, value)


            class PreviousIdtStatus(Entity):
                """
                Previous IDT status
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:  :py:class:`RsvpSyncStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatus>`
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:  :py:class:`RsvpProcNsrNotReadyReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReason>`
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Summary.NsrStatus.PreviousIdtStatus, self).__init__()

                    self.yang_name = "previous-idt-status"
                    self.yang_parent_name = "nsr-status"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sync_status', YLeaf(YType.enumeration, 'sync-status')),
                        ('not_ready_reason', YLeaf(YType.enumeration, 'not-ready-reason')),
                        ('idt_start_time', YLeaf(YType.uint32, 'idt-start-time')),
                        ('idt_end_time', YLeaf(YType.uint32, 'idt-end-time')),
                        ('declare_time', YLeaf(YType.uint32, 'declare-time')),
                        ('withdraw_time', YLeaf(YType.uint32, 'withdraw-time')),
                    ])
                    self.sync_status = None
                    self.not_ready_reason = None
                    self.idt_start_time = None
                    self.idt_end_time = None
                    self.declare_time = None
                    self.withdraw_time = None
                    self._segment_path = lambda: "previous-idt-status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/nsr-status/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Summary.NsrStatus.PreviousIdtStatus, ['sync_status', 'not_ready_reason', 'idt_start_time', 'idt_end_time', 'declare_time', 'withdraw_time'], name, value)


        class DatabaseCounters(Entity):
            """
            All database counters
            
            .. attribute:: sessions
            
            	Number of sessions
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: incoming_paths
            
            	Number of locally created and incoming path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_paths
            
            	Number of outgoing path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: incoming_reservations
            
            	Number of locally created and incoming reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_reservations
            
            	Number of outgoing reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: interfaces
            
            	Number of Interfaces
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.Summary.DatabaseCounters, self).__init__()

                self.yang_name = "database-counters"
                self.yang_parent_name = "summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('sessions', YLeaf(YType.uint32, 'sessions')),
                    ('incoming_paths', YLeaf(YType.uint32, 'incoming-paths')),
                    ('outgoing_paths', YLeaf(YType.uint32, 'outgoing-paths')),
                    ('incoming_reservations', YLeaf(YType.uint32, 'incoming-reservations')),
                    ('outgoing_reservations', YLeaf(YType.uint32, 'outgoing-reservations')),
                    ('interfaces', YLeaf(YType.uint32, 'interfaces')),
                ])
                self.sessions = None
                self.incoming_paths = None
                self.outgoing_paths = None
                self.incoming_reservations = None
                self.outgoing_reservations = None
                self.interfaces = None
                self._segment_path = lambda: "database-counters"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.Summary.DatabaseCounters, ['sessions', 'incoming_paths', 'outgoing_paths', 'incoming_reservations', 'outgoing_reservations', 'interfaces'], name, value)


    class Frrs(Entity):
        """
        Table of detailed info about Fast Re\-route
        states
        
        .. attribute:: frr
        
        	Detailed info for a single Fast Re\-route state
        	**type**\: list of  		 :py:class:`Frr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.Frrs, self).__init__()

            self.yang_name = "frrs"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("frr", ("frr", RsvpStandby.Frrs.Frr))])
            self._leafs = OrderedDict()

            self.frr = YList(self)
            self._segment_path = lambda: "frrs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.Frrs, [], name, value)


        class Frr(Entity):
            """
            Detailed info for a single Fast Re\-route state
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr.S2LSubLsp>`
            
            .. attribute:: path_status
            
            	RSVP FRR Path States
            	**type**\:  :py:class:`RsvpMgmtFrrStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFrrStateEnum>`
            
            .. attribute:: reservation_status
            
            	RSVP FRR Reservation States
            	**type**\:  :py:class:`RsvpMgmtFrrStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFrrStateEnum>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.Frrs.Frr, self).__init__()

                self.yang_name = "frr"
                self.yang_parent_name = "frrs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", RsvpStandby.Frrs.Frr.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", RsvpStandby.Frrs.Frr.S2LSubLsp))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('path_status', YLeaf(YType.enumeration, 'path-status')),
                    ('reservation_status', YLeaf(YType.enumeration, 'reservation-status')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.path_status = None
                self.reservation_status = None

                self.session = RsvpStandby.Frrs.Frr.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = RsvpStandby.Frrs.Frr.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")
                self._segment_path = lambda: "frr"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.Frrs.Frr, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'path_status', 'reservation_status'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Frrs.Frr.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "frr"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", RsvpStandby.Frrs.Frr.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = RsvpStandby.Frrs.Frr.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.Frrs.Frr.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.Frrs.Frr.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.Frrs.Frr.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "frr"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.Frrs.Frr.S2LSubLsp, ['s2l_destination_address'], name, value)


    class RequestBriefs(Entity):
        """
        Table of brief info about requests
        
        .. attribute:: request_brief
        
        	Brief info for a request
        	**type**\: list of  		 :py:class:`RequestBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.RequestBriefs, self).__init__()

            self.yang_name = "request-briefs"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("request-brief", ("request_brief", RsvpStandby.RequestBriefs.RequestBrief))])
            self._leafs = OrderedDict()

            self.request_brief = YList(self)
            self._segment_path = lambda: "request-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.RequestBriefs, [], name, value)


        class RequestBrief(Entity):
            """
            Brief info for a request
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.S2LSubLsp>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:  :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Information
            	**type**\:  :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec>`
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:  :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Filter>`
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:  :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Style>`
            
            .. attribute:: output_interface
            
            	Output Interface
            	**type**\: str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.RequestBriefs.RequestBrief, self).__init__()

                self.yang_name = "request-brief"
                self.yang_parent_name = "request-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", RsvpStandby.RequestBriefs.RequestBrief.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", RsvpStandby.RequestBriefs.RequestBrief.S2LSubLsp)), ("flow-spec", ("flow_spec", RsvpStandby.RequestBriefs.RequestBrief.FlowSpec)), ("generic-flow-spec", ("generic_flow_spec", RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec)), ("filter", ("filter", RsvpStandby.RequestBriefs.RequestBrief.Filter)), ("style", ("style", RsvpStandby.RequestBriefs.RequestBrief.Style))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('output_interface', YLeaf(YType.str, 'output-interface')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.output_interface = None

                self.session = RsvpStandby.RequestBriefs.RequestBrief.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = RsvpStandby.RequestBriefs.RequestBrief.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.flow_spec = RsvpStandby.RequestBriefs.RequestBrief.FlowSpec()
                self.flow_spec.parent = self
                self._children_name_map["flow_spec"] = "flow-spec"
                self._children_yang_names.add("flow-spec")

                self.generic_flow_spec = RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self._children_name_map["generic_flow_spec"] = "generic-flow-spec"
                self._children_yang_names.add("generic-flow-spec")

                self.filter = RsvpStandby.RequestBriefs.RequestBrief.Filter()
                self.filter.parent = self
                self._children_name_map["filter"] = "filter"
                self._children_yang_names.add("filter")

                self.style = RsvpStandby.RequestBriefs.RequestBrief.Style()
                self.style.parent = self
                self._children_name_map["style"] = "style"
                self._children_yang_names.add("style")
                self._segment_path = lambda: "request-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.RequestBriefs.RequestBrief, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'output_interface'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestBriefs.RequestBrief.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "request-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestBriefs.RequestBrief.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "request-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestBriefs.RequestBrief.S2LSubLsp, ['s2l_destination_address'], name, value)


            class FlowSpec(Entity):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:  :py:class:`RsvpMgmtQosServiceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestBriefs.RequestBrief.FlowSpec, self).__init__()

                    self.yang_name = "flow-spec"
                    self.yang_parent_name = "request-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_average_rate', YLeaf(YType.uint64, 'flow-average-rate')),
                        ('flow_max_burst', YLeaf(YType.uint64, 'flow-max-burst')),
                        ('flow_peak_rate', YLeaf(YType.uint64, 'flow-peak-rate')),
                        ('flow_min_unit', YLeaf(YType.uint32, 'flow-min-unit')),
                        ('flow_max_unit', YLeaf(YType.uint32, 'flow-max-unit')),
                        ('flow_requested_rate', YLeaf(YType.uint64, 'flow-requested-rate')),
                        ('flow_slack', YLeaf(YType.uint32, 'flow-slack')),
                        ('flow_qos', YLeaf(YType.enumeration, 'flow-qos')),
                    ])
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_peak_rate = None
                    self.flow_min_unit = None
                    self.flow_max_unit = None
                    self.flow_requested_rate = None
                    self.flow_slack = None
                    self.flow_qos = None
                    self._segment_path = lambda: "flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestBriefs.RequestBrief.FlowSpec, ['flow_average_rate', 'flow_max_burst', 'flow_peak_rate', 'flow_min_unit', 'flow_max_unit', 'flow_requested_rate', 'flow_slack', 'flow_qos'], name, value)


            class GenericFlowSpec(Entity):
                """
                Generic Flow Spec Information
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:  :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec>`
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:  :py:class:`RsvpMgmtFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec, self).__init__()

                    self.yang_name = "generic-flow-spec"
                    self.yang_parent_name = "request-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("g709otn-flow-spec", ("g709otn_flow_spec", RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_spec_type', YLeaf(YType.enumeration, 'flow-spec-type')),
                    ])
                    self.flow_spec_type = None

                    self.g709otn_flow_spec = RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self
                    self._children_name_map["g709otn_flow_spec"] = "g709otn-flow-spec"
                    self._children_yang_names.add("g709otn-flow-spec")
                    self._segment_path = lambda: "generic-flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec, ['flow_spec_type'], name, value)


                class G709OtnFlowSpec(Entity):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec, self).__init__()

                        self.yang_name = "g709otn-flow-spec"
                        self.yang_parent_name = "generic-flow-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('flow_signal_type', YLeaf(YType.uint8, 'flow-signal-type')),
                            ('flow_nvc', YLeaf(YType.uint16, 'flow-nvc')),
                            ('flow_multiplier', YLeaf(YType.uint16, 'flow-multiplier')),
                            ('flow_bit_rate', YLeaf(YType.uint64, 'flow-bit-rate')),
                        ])
                        self.flow_signal_type = None
                        self.flow_nvc = None
                        self.flow_multiplier = None
                        self.flow_bit_rate = None
                        self._segment_path = lambda: "g709otn-flow-spec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/generic-flow-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec, ['flow_signal_type', 'flow_nvc', 'flow_multiplier', 'flow_bit_rate'], name, value)


            class Filter(Entity):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:  :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestBriefs.RequestBrief.Filter, self).__init__()

                    self.yang_name = "filter"
                    self.yang_parent_name = "request-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-filter", ("rsvp_filter", RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_filter = RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self
                    self._children_name_map["rsvp_filter"] = "rsvp-filter"
                    self._children_yang_names.add("rsvp-filter")
                    self._segment_path = lambda: "filter"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/%s" % self._segment_path()


                class RsvpFilter(Entity):
                    """
                    RSVP Filter
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:  :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:  :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:  :py:class:`RsvpMgmtFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilter>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter, self).__init__()

                        self.yang_name = "rsvp-filter"
                        self.yang_parent_name = "filter"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("udp-ipv4-session", ("udp_ipv4_session", RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session)), ("p2mp-ipv4-session", ("p2mp_ipv4_session", RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('filter_type', YLeaf(YType.enumeration, 'filter-type')),
                        ])
                        self.filter_type = None

                        self.udp_ipv4_session = RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self
                        self._children_name_map["udp_ipv4_session"] = "udp-ipv4-session"
                        self._children_yang_names.add("udp-ipv4-session")

                        self.p2mp_ipv4_session = RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self._children_name_map["p2mp_ipv4_session"] = "p2mp-ipv4-session"
                        self._children_yang_names.add("p2mp-ipv4-session")
                        self._segment_path = lambda: "rsvp-filter"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/filter/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter, ['filter_type'], name, value)


                    class UdpIpv4Session(Entity):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session, self).__init__()

                            self.yang_name = "udp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self._segment_path = lambda: "udp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session, ['source_address', 'source_port'], name, value)


                    class P2MpIpv4Session(Entity):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session, self).__init__()

                            self.yang_name = "p2mp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                                ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                                ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self.p2mp_sub_group_origin = None
                            self.sub_group_id = None
                            self._segment_path = lambda: "p2mp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session, ['source_address', 'source_port', 'p2mp_sub_group_origin', 'sub_group_id'], name, value)


            class Style(Entity):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:  :py:class:`RsvpMgmtReservationTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestBriefs.RequestBrief.Style, self).__init__()

                    self.yang_name = "style"
                    self.yang_parent_name = "request-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('reservation_type', YLeaf(YType.enumeration, 'reservation-type')),
                    ])
                    self.reservation_type = None
                    self._segment_path = lambda: "style"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestBriefs.RequestBrief.Style, ['reservation_type'], name, value)


    class RequestDetails(Entity):
        """
        Table of detail info about requests
        
        .. attribute:: request_detail
        
        	Detail info for a request
        	**type**\: list of  		 :py:class:`RequestDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.RequestDetails, self).__init__()

            self.yang_name = "request-details"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("request-detail", ("request_detail", RsvpStandby.RequestDetails.RequestDetail))])
            self._leafs = OrderedDict()

            self.request_detail = YList(self)
            self._segment_path = lambda: "request-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.RequestDetails, [], name, value)


        class RequestDetail(Entity):
            """
            Detail info for a request
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.S2LSubLsp>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:  :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Information
            	**type**\:  :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec>`
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:  :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Filter>`
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:  :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Style>`
            
            .. attribute:: req_flags
            
            	Request flags
            	**type**\:  :py:class:`ReqFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.ReqFlags>`
            
            .. attribute:: hop
            
            	Hop Infomation
            	**type**\:  :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Hop>`
            
            .. attribute:: header
            
            	RSVP Header Information
            	**type**\:  :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Header>`
            
            .. attribute:: policy_sources
            
            	RSVP Policy Sources
            	**type**\:  :py:class:`PolicySources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.PolicySources>`
            
            .. attribute:: policy_flags
            
            	RSVP Policy Flags
            	**type**\:  :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.PolicyFlags>`
            
            .. attribute:: policy_query_flags
            
            	RSVP Query Flags
            	**type**\:  :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.PolicyQueryFlags>`
            
            .. attribute:: output_interface
            
            	output Interface
            	**type**\: str
            
            .. attribute:: psb_key
            
            	List of RSB keys
            	**type**\: list of  		 :py:class:`PsbKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.PsbKey>`
            
            .. attribute:: rsb_key
            
            	List of RSB keys
            	**type**\: list of  		 :py:class:`RsbKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.RsbKey>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.RequestDetails.RequestDetail, self).__init__()

                self.yang_name = "request-detail"
                self.yang_parent_name = "request-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", RsvpStandby.RequestDetails.RequestDetail.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", RsvpStandby.RequestDetails.RequestDetail.S2LSubLsp)), ("flow-spec", ("flow_spec", RsvpStandby.RequestDetails.RequestDetail.FlowSpec)), ("generic-flow-spec", ("generic_flow_spec", RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec)), ("filter", ("filter", RsvpStandby.RequestDetails.RequestDetail.Filter)), ("style", ("style", RsvpStandby.RequestDetails.RequestDetail.Style)), ("req-flags", ("req_flags", RsvpStandby.RequestDetails.RequestDetail.ReqFlags)), ("hop", ("hop", RsvpStandby.RequestDetails.RequestDetail.Hop)), ("header", ("header", RsvpStandby.RequestDetails.RequestDetail.Header)), ("policy-sources", ("policy_sources", RsvpStandby.RequestDetails.RequestDetail.PolicySources)), ("policy-flags", ("policy_flags", RsvpStandby.RequestDetails.RequestDetail.PolicyFlags)), ("policy-query-flags", ("policy_query_flags", RsvpStandby.RequestDetails.RequestDetail.PolicyQueryFlags))])
                self._child_list_classes = OrderedDict([("psb-key", ("psb_key", RsvpStandby.RequestDetails.RequestDetail.PsbKey)), ("rsb-key", ("rsb_key", RsvpStandby.RequestDetails.RequestDetail.RsbKey))])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('output_interface', YLeaf(YType.str, 'output-interface')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.output_interface = None

                self.session = RsvpStandby.RequestDetails.RequestDetail.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = RsvpStandby.RequestDetails.RequestDetail.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.flow_spec = RsvpStandby.RequestDetails.RequestDetail.FlowSpec()
                self.flow_spec.parent = self
                self._children_name_map["flow_spec"] = "flow-spec"
                self._children_yang_names.add("flow-spec")

                self.generic_flow_spec = RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self._children_name_map["generic_flow_spec"] = "generic-flow-spec"
                self._children_yang_names.add("generic-flow-spec")

                self.filter = RsvpStandby.RequestDetails.RequestDetail.Filter()
                self.filter.parent = self
                self._children_name_map["filter"] = "filter"
                self._children_yang_names.add("filter")

                self.style = RsvpStandby.RequestDetails.RequestDetail.Style()
                self.style.parent = self
                self._children_name_map["style"] = "style"
                self._children_yang_names.add("style")

                self.req_flags = RsvpStandby.RequestDetails.RequestDetail.ReqFlags()
                self.req_flags.parent = self
                self._children_name_map["req_flags"] = "req-flags"
                self._children_yang_names.add("req-flags")

                self.hop = RsvpStandby.RequestDetails.RequestDetail.Hop()
                self.hop.parent = self
                self._children_name_map["hop"] = "hop"
                self._children_yang_names.add("hop")

                self.header = RsvpStandby.RequestDetails.RequestDetail.Header()
                self.header.parent = self
                self._children_name_map["header"] = "header"
                self._children_yang_names.add("header")

                self.policy_sources = RsvpStandby.RequestDetails.RequestDetail.PolicySources()
                self.policy_sources.parent = self
                self._children_name_map["policy_sources"] = "policy-sources"
                self._children_yang_names.add("policy-sources")

                self.policy_flags = RsvpStandby.RequestDetails.RequestDetail.PolicyFlags()
                self.policy_flags.parent = self
                self._children_name_map["policy_flags"] = "policy-flags"
                self._children_yang_names.add("policy-flags")

                self.policy_query_flags = RsvpStandby.RequestDetails.RequestDetail.PolicyQueryFlags()
                self.policy_query_flags.parent = self
                self._children_name_map["policy_query_flags"] = "policy-query-flags"
                self._children_yang_names.add("policy-query-flags")

                self.psb_key = YList(self)
                self.rsb_key = YList(self)
                self._segment_path = lambda: "request-detail"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'output_interface'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestDetails.RequestDetail.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestDetails.RequestDetail.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.S2LSubLsp, ['s2l_destination_address'], name, value)


            class FlowSpec(Entity):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:  :py:class:`RsvpMgmtQosServiceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestDetails.RequestDetail.FlowSpec, self).__init__()

                    self.yang_name = "flow-spec"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_average_rate', YLeaf(YType.uint64, 'flow-average-rate')),
                        ('flow_max_burst', YLeaf(YType.uint64, 'flow-max-burst')),
                        ('flow_peak_rate', YLeaf(YType.uint64, 'flow-peak-rate')),
                        ('flow_min_unit', YLeaf(YType.uint32, 'flow-min-unit')),
                        ('flow_max_unit', YLeaf(YType.uint32, 'flow-max-unit')),
                        ('flow_requested_rate', YLeaf(YType.uint64, 'flow-requested-rate')),
                        ('flow_slack', YLeaf(YType.uint32, 'flow-slack')),
                        ('flow_qos', YLeaf(YType.enumeration, 'flow-qos')),
                    ])
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_peak_rate = None
                    self.flow_min_unit = None
                    self.flow_max_unit = None
                    self.flow_requested_rate = None
                    self.flow_slack = None
                    self.flow_qos = None
                    self._segment_path = lambda: "flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.FlowSpec, ['flow_average_rate', 'flow_max_burst', 'flow_peak_rate', 'flow_min_unit', 'flow_max_unit', 'flow_requested_rate', 'flow_slack', 'flow_qos'], name, value)


            class GenericFlowSpec(Entity):
                """
                Generic Flow Spec Information
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:  :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec>`
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:  :py:class:`RsvpMgmtFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec, self).__init__()

                    self.yang_name = "generic-flow-spec"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("g709otn-flow-spec", ("g709otn_flow_spec", RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_spec_type', YLeaf(YType.enumeration, 'flow-spec-type')),
                    ])
                    self.flow_spec_type = None

                    self.g709otn_flow_spec = RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self
                    self._children_name_map["g709otn_flow_spec"] = "g709otn-flow-spec"
                    self._children_yang_names.add("g709otn-flow-spec")
                    self._segment_path = lambda: "generic-flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec, ['flow_spec_type'], name, value)


                class G709OtnFlowSpec(Entity):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec, self).__init__()

                        self.yang_name = "g709otn-flow-spec"
                        self.yang_parent_name = "generic-flow-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('flow_signal_type', YLeaf(YType.uint8, 'flow-signal-type')),
                            ('flow_nvc', YLeaf(YType.uint16, 'flow-nvc')),
                            ('flow_multiplier', YLeaf(YType.uint16, 'flow-multiplier')),
                            ('flow_bit_rate', YLeaf(YType.uint64, 'flow-bit-rate')),
                        ])
                        self.flow_signal_type = None
                        self.flow_nvc = None
                        self.flow_multiplier = None
                        self.flow_bit_rate = None
                        self._segment_path = lambda: "g709otn-flow-spec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/generic-flow-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec, ['flow_signal_type', 'flow_nvc', 'flow_multiplier', 'flow_bit_rate'], name, value)


            class Filter(Entity):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:  :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestDetails.RequestDetail.Filter, self).__init__()

                    self.yang_name = "filter"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-filter", ("rsvp_filter", RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_filter = RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self
                    self._children_name_map["rsvp_filter"] = "rsvp-filter"
                    self._children_yang_names.add("rsvp-filter")
                    self._segment_path = lambda: "filter"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/%s" % self._segment_path()


                class RsvpFilter(Entity):
                    """
                    RSVP Filter
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:  :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:  :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:  :py:class:`RsvpMgmtFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilter>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter, self).__init__()

                        self.yang_name = "rsvp-filter"
                        self.yang_parent_name = "filter"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("udp-ipv4-session", ("udp_ipv4_session", RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session)), ("p2mp-ipv4-session", ("p2mp_ipv4_session", RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('filter_type', YLeaf(YType.enumeration, 'filter-type')),
                        ])
                        self.filter_type = None

                        self.udp_ipv4_session = RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self
                        self._children_name_map["udp_ipv4_session"] = "udp-ipv4-session"
                        self._children_yang_names.add("udp-ipv4-session")

                        self.p2mp_ipv4_session = RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self._children_name_map["p2mp_ipv4_session"] = "p2mp-ipv4-session"
                        self._children_yang_names.add("p2mp-ipv4-session")
                        self._segment_path = lambda: "rsvp-filter"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/filter/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter, ['filter_type'], name, value)


                    class UdpIpv4Session(Entity):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session, self).__init__()

                            self.yang_name = "udp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self._segment_path = lambda: "udp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session, ['source_address', 'source_port'], name, value)


                    class P2MpIpv4Session(Entity):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session, self).__init__()

                            self.yang_name = "p2mp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                                ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                                ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self.p2mp_sub_group_origin = None
                            self.sub_group_id = None
                            self._segment_path = lambda: "p2mp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session, ['source_address', 'source_port', 'p2mp_sub_group_origin', 'sub_group_id'], name, value)


            class Style(Entity):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:  :py:class:`RsvpMgmtReservationTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestDetails.RequestDetail.Style, self).__init__()

                    self.yang_name = "style"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('reservation_type', YLeaf(YType.enumeration, 'reservation-type')),
                    ])
                    self.reservation_type = None
                    self._segment_path = lambda: "style"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.Style, ['reservation_type'], name, value)


            class ReqFlags(Entity):
                """
                Request flags
                
                .. attribute:: is_local_receiver
                
                	Local Receiver
                	**type**\: bool
                
                .. attribute:: is_refreshing
                
                	Is neighbor refreshing
                	**type**\: bool
                
                .. attribute:: is_send_confirm
                
                	Send Confirm message
                	**type**\: bool
                
                .. attribute:: is_ack_outstanding
                
                	Is ACK message outstanding
                	**type**\: bool
                
                .. attribute:: is_message_id_allocated
                
                	Is MessageID allocated
                	**type**\: bool
                
                .. attribute:: is_nack_received
                
                	A NACK message was received
                	**type**\: bool
                
                .. attribute:: is_retransmit
                
                	Retransmit the message
                	**type**\: bool
                
                .. attribute:: is_paced
                
                	Message is paced
                	**type**\: bool
                
                .. attribute:: is_label_request_in_path
                
                	The Path message contains Label Request
                	**type**\: bool
                
                .. attribute:: is_rro_in_path
                
                	The Path message contains RRO
                	**type**\: bool
                
                .. attribute:: is_record_label_in_path
                
                	Path has Session\-Attr object with Record Labels set
                	**type**\: bool
                
                .. attribute:: is_merge_point
                
                	Is node a Merge Point
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestDetails.RequestDetail.ReqFlags, self).__init__()

                    self.yang_name = "req-flags"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_local_receiver', YLeaf(YType.boolean, 'is-local-receiver')),
                        ('is_refreshing', YLeaf(YType.boolean, 'is-refreshing')),
                        ('is_send_confirm', YLeaf(YType.boolean, 'is-send-confirm')),
                        ('is_ack_outstanding', YLeaf(YType.boolean, 'is-ack-outstanding')),
                        ('is_message_id_allocated', YLeaf(YType.boolean, 'is-message-id-allocated')),
                        ('is_nack_received', YLeaf(YType.boolean, 'is-nack-received')),
                        ('is_retransmit', YLeaf(YType.boolean, 'is-retransmit')),
                        ('is_paced', YLeaf(YType.boolean, 'is-paced')),
                        ('is_label_request_in_path', YLeaf(YType.boolean, 'is-label-request-in-path')),
                        ('is_rro_in_path', YLeaf(YType.boolean, 'is-rro-in-path')),
                        ('is_record_label_in_path', YLeaf(YType.boolean, 'is-record-label-in-path')),
                        ('is_merge_point', YLeaf(YType.boolean, 'is-merge-point')),
                    ])
                    self.is_local_receiver = None
                    self.is_refreshing = None
                    self.is_send_confirm = None
                    self.is_ack_outstanding = None
                    self.is_message_id_allocated = None
                    self.is_nack_received = None
                    self.is_retransmit = None
                    self.is_paced = None
                    self.is_label_request_in_path = None
                    self.is_rro_in_path = None
                    self.is_record_label_in_path = None
                    self.is_merge_point = None
                    self._segment_path = lambda: "req-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.ReqFlags, ['is_local_receiver', 'is_refreshing', 'is_send_confirm', 'is_ack_outstanding', 'is_message_id_allocated', 'is_nack_received', 'is_retransmit', 'is_paced', 'is_label_request_in_path', 'is_rro_in_path', 'is_record_label_in_path', 'is_merge_point'], name, value)


            class Hop(Entity):
                """
                Hop Infomation
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestDetails.RequestDetail.Hop, self).__init__()

                    self.yang_name = "hop"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                        ('neighbor_logical_interface_name', YLeaf(YType.str, 'neighbor-logical-interface-name')),
                    ])
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None
                    self._segment_path = lambda: "hop"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.Hop, ['neighbor_address', 'neighbor_logical_interface_name'], name, value)


            class Header(Entity):
                """
                RSVP Header Information
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestDetails.RequestDetail.Header, self).__init__()

                    self.yang_name = "header"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('rsvp_version', YLeaf(YType.uint8, 'rsvp-version')),
                        ('rsvp_header_flags', YLeaf(YType.uint8, 'rsvp-header-flags')),
                        ('rsvp_ttl', YLeaf(YType.uint8, 'rsvp-ttl')),
                        ('rsvp_message_type', YLeaf(YType.uint8, 'rsvp-message-type')),
                        ('ip_tos', YLeaf(YType.uint8, 'ip-tos')),
                        ('ip_ttl', YLeaf(YType.uint8, 'ip-ttl')),
                        ('ip_source_address', YLeaf(YType.str, 'ip-source-address')),
                    ])
                    self.rsvp_version = None
                    self.rsvp_header_flags = None
                    self.rsvp_ttl = None
                    self.rsvp_message_type = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.ip_source_address = None
                    self._segment_path = lambda: "header"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.Header, ['rsvp_version', 'rsvp_header_flags', 'rsvp_ttl', 'rsvp_message_type', 'ip_tos', 'ip_ttl', 'ip_source_address'], name, value)


            class PolicySources(Entity):
                """
                RSVP Policy Sources
                
                .. attribute:: is_te_link
                
                	Policy Source is TE Link
                	**type**\: bool
                
                .. attribute:: is_local
                
                	Policy Source is Local
                	**type**\: bool
                
                .. attribute:: is_cops
                
                	Policy Source is COPS
                	**type**\: bool
                
                .. attribute:: is_default
                
                	Policy Source is Default
                	**type**\: bool
                
                .. attribute:: is_cable
                
                	Policy Source is Cable
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestDetails.RequestDetail.PolicySources, self).__init__()

                    self.yang_name = "policy-sources"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_te_link', YLeaf(YType.boolean, 'is-te-link')),
                        ('is_local', YLeaf(YType.boolean, 'is-local')),
                        ('is_cops', YLeaf(YType.boolean, 'is-cops')),
                        ('is_default', YLeaf(YType.boolean, 'is-default')),
                        ('is_cable', YLeaf(YType.boolean, 'is-cable')),
                    ])
                    self.is_te_link = None
                    self.is_local = None
                    self.is_cops = None
                    self.is_default = None
                    self.is_cable = None
                    self._segment_path = lambda: "policy-sources"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.PolicySources, ['is_te_link', 'is_local', 'is_cops', 'is_default', 'is_cable'], name, value)


            class PolicyFlags(Entity):
                """
                RSVP Policy Flags
                
                .. attribute:: is_accepted
                
                	Accepted
                	**type**\: bool
                
                .. attribute:: is_installed
                
                	Installed
                	**type**\: bool
                
                .. attribute:: is_forwarding
                
                	Forwarding
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestDetails.RequestDetail.PolicyFlags, self).__init__()

                    self.yang_name = "policy-flags"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_accepted', YLeaf(YType.boolean, 'is-accepted')),
                        ('is_installed', YLeaf(YType.boolean, 'is-installed')),
                        ('is_forwarding', YLeaf(YType.boolean, 'is-forwarding')),
                    ])
                    self.is_accepted = None
                    self.is_installed = None
                    self.is_forwarding = None
                    self._segment_path = lambda: "policy-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.PolicyFlags, ['is_accepted', 'is_installed', 'is_forwarding'], name, value)


            class PolicyQueryFlags(Entity):
                """
                RSVP Query Flags
                
                .. attribute:: is_needed
                
                	Needed
                	**type**\: bool
                
                .. attribute:: is_report_required
                
                	Report Required
                	**type**\: bool
                
                .. attribute:: is_resync
                
                	Resynchronization
                	**type**\: bool
                
                .. attribute:: is_bypass
                
                	Bypass
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestDetails.RequestDetail.PolicyQueryFlags, self).__init__()

                    self.yang_name = "policy-query-flags"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_needed', YLeaf(YType.boolean, 'is-needed')),
                        ('is_report_required', YLeaf(YType.boolean, 'is-report-required')),
                        ('is_resync', YLeaf(YType.boolean, 'is-resync')),
                        ('is_bypass', YLeaf(YType.boolean, 'is-bypass')),
                    ])
                    self.is_needed = None
                    self.is_report_required = None
                    self.is_resync = None
                    self.is_bypass = None
                    self._segment_path = lambda: "policy-query-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.PolicyQueryFlags, ['is_needed', 'is_report_required', 'is_resync', 'is_bypass'], name, value)


            class PsbKey(Entity):
                """
                List of RSB keys
                
                .. attribute:: p2mp_id
                
                	Point\-to\-multipoint ID
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: destination_address
                
                	Destination address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: destination_port_or_tunnel_id
                
                	Destination Port or Tunnel ID. For the LSP and OUNI session types this represents the Tunnel ID whereas for the UDP session type this represents the Destination Port
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: protocol
                
                	Protocol. UDP session type this represents the Protocol (UDP not supported at present)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: extended_tunnel_id
                
                	Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this represents the Extended Tunnel ID
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: session_type
                
                	Session Type (e.g. LSP, OUNI or UDP)
                	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                
                .. attribute:: source_address
                
                	Source Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: source_port_or_lsp_id
                
                	Source Port or LSP\_ID. For the LSP and OUNI session types this represents the LSP\_ID whereas for the UDP session type this represents the SourcePort
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: p2mp_sub_group_origin
                
                	Point to Multipoint SubGroup Origin
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: sub_group_id
                
                	Point to Multipoint Subgroup ID
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: vrfid
                
                	Signalling VRF ID
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestDetails.RequestDetail.PsbKey, self).__init__()

                    self.yang_name = "psb-key"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                        ('destination_address', YLeaf(YType.str, 'destination-address')),
                        ('destination_port_or_tunnel_id', YLeaf(YType.uint32, 'destination-port-or-tunnel-id')),
                        ('protocol', YLeaf(YType.uint32, 'protocol')),
                        ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                        ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ('source_address', YLeaf(YType.str, 'source-address')),
                        ('source_port_or_lsp_id', YLeaf(YType.uint32, 'source-port-or-lsp-id')),
                        ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                        ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                        ('vrfid', YLeaf(YType.uint32, 'vrfid')),
                    ])
                    self.p2mp_id = None
                    self.destination_address = None
                    self.destination_port_or_tunnel_id = None
                    self.protocol = None
                    self.extended_tunnel_id = None
                    self.session_type = None
                    self.source_address = None
                    self.source_port_or_lsp_id = None
                    self.p2mp_sub_group_origin = None
                    self.sub_group_id = None
                    self.vrfid = None
                    self._segment_path = lambda: "psb-key"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.PsbKey, ['p2mp_id', 'destination_address', 'destination_port_or_tunnel_id', 'protocol', 'extended_tunnel_id', 'session_type', 'source_address', 'source_port_or_lsp_id', 'p2mp_sub_group_origin', 'sub_group_id', 'vrfid'], name, value)


            class RsbKey(Entity):
                """
                List of RSB keys
                
                .. attribute:: p2mp_id
                
                	Point\-to\-multipoint ID
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: destination_address
                
                	Destination address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: destination_port_or_tunnel_id
                
                	Destination Port or Tunnel ID. For the LSP and OUNI session types this represents the Tunnel ID whereas for the UDP session type this represents the Destination Port
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: protocol
                
                	Protocol. UDP session type this represents the Protocol (UDP not supported at present)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: extended_tunnel_id
                
                	Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this represents the Extended Tunnel ID
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: session_type
                
                	Session Type (e.g. LSP, OUNI or UDP)
                	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                
                .. attribute:: source_address
                
                	Source Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: source_port_or_lsp_id
                
                	Source Port or LSP\_ID. For the LSP and OUNI session types this represents the LSP\_ID whereas for the UDP session type this represents the SourcePort
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: p2mp_sub_group_origin
                
                	Point to Multipoint SubGroup Origin
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: sub_group_id
                
                	Point to Multipoint Subgroup ID
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: vrfid
                
                	Signalling VRF ID
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.RequestDetails.RequestDetail.RsbKey, self).__init__()

                    self.yang_name = "rsb-key"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                        ('destination_address', YLeaf(YType.str, 'destination-address')),
                        ('destination_port_or_tunnel_id', YLeaf(YType.uint32, 'destination-port-or-tunnel-id')),
                        ('protocol', YLeaf(YType.uint32, 'protocol')),
                        ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                        ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ('source_address', YLeaf(YType.str, 'source-address')),
                        ('source_port_or_lsp_id', YLeaf(YType.uint32, 'source-port-or-lsp-id')),
                        ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                        ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                        ('vrfid', YLeaf(YType.uint32, 'vrfid')),
                    ])
                    self.p2mp_id = None
                    self.destination_address = None
                    self.destination_port_or_tunnel_id = None
                    self.protocol = None
                    self.extended_tunnel_id = None
                    self.session_type = None
                    self.source_address = None
                    self.source_port_or_lsp_id = None
                    self.p2mp_sub_group_origin = None
                    self.sub_group_id = None
                    self.vrfid = None
                    self._segment_path = lambda: "rsb-key"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.RequestDetails.RequestDetail.RsbKey, ['p2mp_id', 'destination_address', 'destination_port_or_tunnel_id', 'protocol', 'extended_tunnel_id', 'session_type', 'source_address', 'source_port_or_lsp_id', 'p2mp_sub_group_origin', 'sub_group_id', 'vrfid'], name, value)


    class InterfaceBriefs(Entity):
        """
        Table of brief info about RSVP\-enabled
        interfaces
        
        .. attribute:: interface_brief
        
        	Brief info about an RSVP\-enabled interface
        	**type**\: list of  		 :py:class:`InterfaceBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceBriefs.InterfaceBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.InterfaceBriefs, self).__init__()

            self.yang_name = "interface-briefs"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("interface-brief", ("interface_brief", RsvpStandby.InterfaceBriefs.InterfaceBrief))])
            self._leafs = OrderedDict()

            self.interface_brief = YList(self)
            self._segment_path = lambda: "interface-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.InterfaceBriefs, [], name, value)


        class InterfaceBrief(Entity):
            """
            Brief info about an RSVP\-enabled interface
            
            .. attribute:: interface_name  (key)
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:  :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\: str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.InterfaceBriefs.InterfaceBrief, self).__init__()

                self.yang_name = "interface-brief"
                self.yang_parent_name = "interface-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['interface_name']
                self._child_container_classes = OrderedDict([("bandwidth-information", ("bandwidth_information", RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                ])
                self.interface_name = None
                self.interface_name_xr = None

                self.bandwidth_information = RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation()
                self.bandwidth_information.parent = self
                self._children_name_map["bandwidth_information"] = "bandwidth-information"
                self._children_yang_names.add("bandwidth-information")
                self._segment_path = lambda: "interface-brief" + "[interface-name='" + str(self.interface_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.InterfaceBriefs.InterfaceBrief, ['interface_name', 'interface_name_xr'], name, value)


            class BandwidthInformation(Entity):
                """
                Interface bandwidth information
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:  :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:  :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface>`
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:  :py:class:`RsvpMgmtDsteModes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModes>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation, self).__init__()

                    self.yang_name = "bandwidth-information"
                    self.yang_parent_name = "interface-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("pre-standard-dste-interface", ("pre_standard_dste_interface", RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface)), ("standard-dste-interface", ("standard_dste_interface", RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dste_mode', YLeaf(YType.enumeration, 'dste-mode')),
                    ])
                    self.dste_mode = None

                    self.pre_standard_dste_interface = RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self._children_name_map["pre_standard_dste_interface"] = "pre-standard-dste-interface"
                    self._children_yang_names.add("pre-standard-dste-interface")

                    self.standard_dste_interface = RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self
                    self._children_name_map["standard_dste_interface"] = "standard-dste-interface"
                    self._children_yang_names.add("standard-dste-interface")
                    self._segment_path = lambda: "bandwidth-information"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation, ['dste_mode'], name, value)


                class PreStandardDsteInterface(Entity):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface, self).__init__()

                        self.yang_name = "pre-standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_subpool_bandwidth', YLeaf(YType.uint64, 'max-subpool-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_subpool_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-subpool-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_subpool_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self._segment_path = lambda: "pre-standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_subpool_bandwidth', 'is_max_bandwidth_absolute', 'is_max_subpool_bandwidth_absolute'], name, value)


                class StandardDsteInterface(Entity):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface, self).__init__()

                        self.yang_name = "standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_pool0_bandwidth', YLeaf(YType.uint64, 'max-pool0-bandwidth')),
                            ('max_pool1_bandwidth', YLeaf(YType.uint64, 'max-pool1-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_bc0_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc0-bandwidth-absolute')),
                            ('is_max_bc1_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc1-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self._segment_path = lambda: "standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_pool0_bandwidth', 'max_pool1_bandwidth', 'is_max_bandwidth_absolute', 'is_max_bc0_bandwidth_absolute', 'is_max_bc1_bandwidth_absolute'], name, value)


    class SessionDetaileds(Entity):
        """
        Table of detailed info about sessions
        
        .. attribute:: session_detailed
        
        	Detailed info about session
        	**type**\: list of  		 :py:class:`SessionDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.SessionDetaileds, self).__init__()

            self.yang_name = "session-detaileds"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("session-detailed", ("session_detailed", RsvpStandby.SessionDetaileds.SessionDetailed))])
            self._leafs = OrderedDict()

            self.session_detailed = YList(self)
            self._segment_path = lambda: "session-detaileds"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.SessionDetaileds, [], name, value)


        class SessionDetailed(Entity):
            """
            Detailed info about session
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: compact
            
            	Compact session data
            	**type**\:  :py:class:`Compact <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.Compact>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.S2LSubLsp>`
            
            .. attribute:: psb_rsb_info
            
            	Path and Reservation Info
            	**type**\: list of  		 :py:class:`PsbRsbInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.SessionDetaileds.SessionDetailed, self).__init__()

                self.yang_name = "session-detailed"
                self.yang_parent_name = "session-detaileds"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("compact", ("compact", RsvpStandby.SessionDetaileds.SessionDetailed.Compact)), ("s2l-sub-lsp", ("s2l_sub_lsp", RsvpStandby.SessionDetaileds.SessionDetailed.S2LSubLsp))])
                self._child_list_classes = OrderedDict([("psb-rsb-info", ("psb_rsb_info", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo))])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.vrf_name = None

                self.compact = RsvpStandby.SessionDetaileds.SessionDetailed.Compact()
                self.compact.parent = self
                self._children_name_map["compact"] = "compact"
                self._children_yang_names.add("compact")

                self.s2l_sub_lsp = RsvpStandby.SessionDetaileds.SessionDetailed.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.psb_rsb_info = YList(self)
                self._segment_path = lambda: "session-detailed"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'vrf_name'], name, value)


            class Compact(Entity):
                """
                Compact session data
                
                .. attribute:: session
                
                	RSVP Session Information
                	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session>`
                
                .. attribute:: ps_bs
                
                	Number of path state block states
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: rs_bs
                
                	Number of reservation state block states
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: requests
                
                	Number of request states
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: detail_list_size
                
                	Number of elements in detail list
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.SessionDetaileds.SessionDetailed.Compact, self).__init__()

                    self.yang_name = "compact"
                    self.yang_parent_name = "session-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("session", ("session", RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('ps_bs', YLeaf(YType.uint32, 'ps-bs')),
                        ('rs_bs', YLeaf(YType.uint32, 'rs-bs')),
                        ('requests', YLeaf(YType.uint32, 'requests')),
                        ('detail_list_size', YLeaf(YType.uint32, 'detail-list-size')),
                    ])
                    self.ps_bs = None
                    self.rs_bs = None
                    self.requests = None
                    self.detail_list_size = None

                    self.session = RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session()
                    self.session.parent = self
                    self._children_name_map["session"] = "session"
                    self._children_yang_names.add("session")
                    self._segment_path = lambda: "compact"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.Compact, ['ps_bs', 'rs_bs', 'requests', 'detail_list_size'], name, value)


                class Session(Entity):
                    """
                    RSVP Session Information
                    
                    .. attribute:: rsvp_session
                    
                    	RSVP Session
                    	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session, self).__init__()

                        self.yang_name = "session"
                        self.yang_parent_name = "compact"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.rsvp_session = RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession()
                        self.rsvp_session.parent = self
                        self._children_name_map["rsvp_session"] = "rsvp-session"
                        self._children_yang_names.add("rsvp-session")
                        self._segment_path = lambda: "session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/%s" % self._segment_path()


                    class RsvpSession(Entity):
                        """
                        RSVP Session
                        
                        .. attribute:: ipv4
                        
                        	UDP IPv4 session
                        	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4>`
                        
                        .. attribute:: ipv4_lsp_session
                        
                        	IPv4 LSP session
                        	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession>`
                        
                        .. attribute:: ipv4_uni_session
                        
                        	IPv4 UNI session
                        	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession>`
                        
                        .. attribute:: ipv4_p2mp_lsp_session
                        
                        	IPv4 P2MP LSP session
                        	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession>`
                        
                        .. attribute:: session_type
                        
                        	SessionType
                        	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession, self).__init__()

                            self.yang_name = "rsvp-session"
                            self.yang_parent_name = "session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ipv4", ("ipv4", RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('session_type', YLeaf(YType.enumeration, 'session-type')),
                            ])
                            self.session_type = None

                            self.ipv4 = RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4()
                            self.ipv4.parent = self
                            self._children_name_map["ipv4"] = "ipv4"
                            self._children_yang_names.add("ipv4")

                            self.ipv4_lsp_session = RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession()
                            self.ipv4_lsp_session.parent = self
                            self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                            self._children_yang_names.add("ipv4-lsp-session")

                            self.ipv4_uni_session = RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession()
                            self.ipv4_uni_session.parent = self
                            self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                            self._children_yang_names.add("ipv4-uni-session")

                            self.ipv4_p2mp_lsp_session = RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession()
                            self.ipv4_p2mp_lsp_session.parent = self
                            self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                            self._children_yang_names.add("ipv4-p2mp-lsp-session")
                            self._segment_path = lambda: "rsvp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession, ['session_type'], name, value)


                        class Ipv4(Entity):
                            """
                            UDP IPv4 session
                            
                            .. attribute:: destination_address
                            
                            	Destination address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: protocol
                            
                            	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: destination_port
                            
                            	The Session Destination Port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4, self).__init__()

                                self.yang_name = "ipv4"
                                self.yang_parent_name = "rsvp-session"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                                    ('protocol', YLeaf(YType.uint8, 'protocol')),
                                    ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                                ])
                                self.destination_address = None
                                self.protocol = None
                                self.destination_port = None
                                self._segment_path = lambda: "ipv4"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/rsvp-session/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                        class Ipv4LspSession(Entity):
                            """
                            IPv4 LSP session
                            
                            .. attribute:: destination_address
                            
                            	Destination address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: tunnel_id
                            
                            	The Session Tunnel ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: extended_tunnel_id
                            
                            	The Session Extended Tunnel ID
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession, self).__init__()

                                self.yang_name = "ipv4-lsp-session"
                                self.yang_parent_name = "rsvp-session"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                                    ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                                ])
                                self.destination_address = None
                                self.tunnel_id = None
                                self.extended_tunnel_id = None
                                self._segment_path = lambda: "ipv4-lsp-session"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/rsvp-session/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                        class Ipv4UniSession(Entity):
                            """
                            IPv4 UNI session
                            
                            .. attribute:: destination_address
                            
                            	Destination address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: tunnel_id
                            
                            	The Session Tunnel ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: extended_address
                            
                            	The Session Extended Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession, self).__init__()

                                self.yang_name = "ipv4-uni-session"
                                self.yang_parent_name = "rsvp-session"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                                    ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                    ('extended_address', YLeaf(YType.str, 'extended-address')),
                                ])
                                self.destination_address = None
                                self.tunnel_id = None
                                self.extended_address = None
                                self._segment_path = lambda: "ipv4-uni-session"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/rsvp-session/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                        class Ipv4P2MpLspSession(Entity):
                            """
                            IPv4 P2MP LSP session
                            
                            .. attribute:: p2mp_id
                            
                            	The Point to Multipoint ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_id
                            
                            	The Session Tunnel ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: extended_tunnel_id
                            
                            	The Session Extended Tunnel ID
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                                self.yang_name = "ipv4-p2mp-lsp-session"
                                self.yang_parent_name = "rsvp-session"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                    ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                                ])
                                self.p2mp_id = None
                                self.tunnel_id = None
                                self.extended_tunnel_id = None
                                self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/rsvp-session/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.SessionDetaileds.SessionDetailed.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "session-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.S2LSubLsp, ['s2l_destination_address'], name, value)


            class PsbRsbInfo(Entity):
                """
                Path and Reservation Info
                
                .. attribute:: psb_info
                
                	Path Info
                	**type**\: list of  		 :py:class:`PsbInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo>`
                
                .. attribute:: rsb_info
                
                	Reservation Info
                	**type**\: list of  		 :py:class:`RsbInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo, self).__init__()

                    self.yang_name = "psb-rsb-info"
                    self.yang_parent_name = "session-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("psb-info", ("psb_info", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo)), ("rsb-info", ("rsb_info", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo))])
                    self._leafs = OrderedDict()

                    self.psb_info = YList(self)
                    self.rsb_info = YList(self)
                    self._segment_path = lambda: "psb-rsb-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo, [], name, value)


                class PsbInfo(Entity):
                    """
                    Path Info
                    
                    .. attribute:: generic_in_label
                    
                    	Generic Label for inbound traffic
                    	**type**\:  :py:class:`GenericInLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel>`
                    
                    .. attribute:: traffic_spec
                    
                    	Traffic Spec object
                    	**type**\:  :py:class:`TrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec>`
                    
                    .. attribute:: generic_traffic_spec
                    
                    	Generic Traffic Spec object
                    	**type**\:  :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec>`
                    
                    .. attribute:: association
                    
                    	Association object
                    	**type**\:  :py:class:`Association <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association>`
                    
                    .. attribute:: protection
                    
                    	Protection object
                    	**type**\:  :py:class:`Protection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection>`
                    
                    .. attribute:: reverse_lsp
                    
                    	Reverse LSP object
                    	**type**\:  :py:class:`ReverseLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp>`
                    
                    .. attribute:: is_valid
                    
                    	Entry validity
                    	**type**\: bool
                    
                    .. attribute:: destination_address
                    
                    	Destination address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: lsp_id
                    
                    	LSP ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: p2mp_sub_group_origin
                    
                    	Point to Multipoint SubGroup Origin
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: sub_group_id
                    
                    	Point to Multipoint Subgroup ID
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: in_interface
                    
                    	Interface on which inbound message was received
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: in_label
                    
                    	Label for inbound traffic
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: lsp_wrap_label
                    
                    	LSP Wrap Label
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: is_bad_address
                    
                    	Address validity
                    	**type**\: bool
                    
                    .. attribute:: incoming_interface_address
                    
                    	IP address of Path's incoming interface
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: is_ero_valid
                    
                    	ERO validity
                    	**type**\: bool
                    
                    .. attribute:: is_rro_valid
                    
                    	RRO validity
                    	**type**\: bool
                    
                    .. attribute:: is_traffic_spec_valid
                    
                    	Traffic Spec validity
                    	**type**\: bool
                    
                    .. attribute:: tunnel_name
                    
                    	Tunnel name
                    	**type**\: str
                    
                    .. attribute:: ero
                    
                    	Explicit Route Sub Objects
                    	**type**\: list of  		 :py:class:`Ero <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero>`
                    
                    .. attribute:: rro
                    
                    	Record Route Sub Objects
                    	**type**\: list of  		 :py:class:`Rro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo, self).__init__()

                        self.yang_name = "psb-info"
                        self.yang_parent_name = "psb-rsb-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generic-in-label", ("generic_in_label", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel)), ("traffic-spec", ("traffic_spec", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec)), ("generic-traffic-spec", ("generic_traffic_spec", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec)), ("association", ("association", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association)), ("protection", ("protection", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection)), ("reverse-lsp", ("reverse_lsp", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp))])
                        self._child_list_classes = OrderedDict([("ero", ("ero", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero)), ("rro", ("rro", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro))])
                        self._leafs = OrderedDict([
                            ('is_valid', YLeaf(YType.boolean, 'is-valid')),
                            ('destination_address', YLeaf(YType.str, 'destination-address')),
                            ('lsp_id', YLeaf(YType.uint32, 'lsp-id')),
                            ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                            ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ('in_interface', YLeaf(YType.str, 'in-interface')),
                            ('in_label', YLeaf(YType.uint32, 'in-label')),
                            ('lsp_wrap_label', YLeaf(YType.uint32, 'lsp-wrap-label')),
                            ('is_bad_address', YLeaf(YType.boolean, 'is-bad-address')),
                            ('incoming_interface_address', YLeaf(YType.str, 'incoming-interface-address')),
                            ('is_ero_valid', YLeaf(YType.boolean, 'is-ero-valid')),
                            ('is_rro_valid', YLeaf(YType.boolean, 'is-rro-valid')),
                            ('is_traffic_spec_valid', YLeaf(YType.boolean, 'is-traffic-spec-valid')),
                            ('tunnel_name', YLeaf(YType.str, 'tunnel-name')),
                        ])
                        self.is_valid = None
                        self.destination_address = None
                        self.lsp_id = None
                        self.p2mp_sub_group_origin = None
                        self.sub_group_id = None
                        self.in_interface = None
                        self.in_label = None
                        self.lsp_wrap_label = None
                        self.is_bad_address = None
                        self.incoming_interface_address = None
                        self.is_ero_valid = None
                        self.is_rro_valid = None
                        self.is_traffic_spec_valid = None
                        self.tunnel_name = None

                        self.generic_in_label = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel()
                        self.generic_in_label.parent = self
                        self._children_name_map["generic_in_label"] = "generic-in-label"
                        self._children_yang_names.add("generic-in-label")

                        self.traffic_spec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec()
                        self.traffic_spec.parent = self
                        self._children_name_map["traffic_spec"] = "traffic-spec"
                        self._children_yang_names.add("traffic-spec")

                        self.generic_traffic_spec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec()
                        self.generic_traffic_spec.parent = self
                        self._children_name_map["generic_traffic_spec"] = "generic-traffic-spec"
                        self._children_yang_names.add("generic-traffic-spec")

                        self.association = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association()
                        self.association.parent = self
                        self._children_name_map["association"] = "association"
                        self._children_yang_names.add("association")

                        self.protection = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection()
                        self.protection.parent = self
                        self._children_name_map["protection"] = "protection"
                        self._children_yang_names.add("protection")

                        self.reverse_lsp = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp()
                        self.reverse_lsp.parent = self
                        self._children_name_map["reverse_lsp"] = "reverse-lsp"
                        self._children_yang_names.add("reverse-lsp")

                        self.ero = YList(self)
                        self.rro = YList(self)
                        self._segment_path = lambda: "psb-info"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo, ['is_valid', 'destination_address', 'lsp_id', 'p2mp_sub_group_origin', 'sub_group_id', 'in_interface', 'in_label', 'lsp_wrap_label', 'is_bad_address', 'incoming_interface_address', 'is_ero_valid', 'is_rro_valid', 'is_traffic_spec_valid', 'tunnel_name'], name, value)


                    class GenericInLabel(Entity):
                        """
                        Generic Label for inbound traffic
                        
                        .. attribute:: generalized_label
                        
                        	Generalized Label
                        	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel>`
                        
                        .. attribute:: generic_label_type
                        
                        	GenericLabelType
                        	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel, self).__init__()

                            self.yang_name = "generic-in-label"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                            ])
                            self.generic_label_type = None

                            self.generalized_label = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel()
                            self.generalized_label.parent = self
                            self._children_name_map["generalized_label"] = "generalized-label"
                            self._children_yang_names.add("generalized-label")
                            self._segment_path = lambda: "generic-in-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel, ['generic_label_type'], name, value)


                        class GeneralizedLabel(Entity):
                            """
                            Generalized Label
                            
                            .. attribute:: value
                            
                            	Generalized Label Value
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel, self).__init__()

                                self.yang_name = "generalized-label"
                                self.yang_parent_name = "generic-in-label"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('value', YLeafList(YType.uint32, 'value')),
                                ])
                                self.value = []
                                self._segment_path = lambda: "generalized-label"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-in-label/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel, ['value'], name, value)


                    class TrafficSpec(Entity):
                        """
                        Traffic Spec object
                        
                        .. attribute:: traffic_average_rate
                        
                        	Traffic Average Rate in bytes per second
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: traffic_max_burst
                        
                        	Traffic Maximum Burst
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: traffic_peak_rate
                        
                        	Traffic Peak Rate in bytes per second
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: traffic_min_unit
                        
                        	Traffic Minimum Unit
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: traffic_max_unit
                        
                        	Traffic Maximum Unit
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec, self).__init__()

                            self.yang_name = "traffic-spec"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                                ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                                ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                                ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                                ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                            ])
                            self.traffic_average_rate = None
                            self.traffic_max_burst = None
                            self.traffic_peak_rate = None
                            self.traffic_min_unit = None
                            self.traffic_max_unit = None
                            self._segment_path = lambda: "traffic-spec"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


                    class GenericTrafficSpec(Entity):
                        """
                        Generic Traffic Spec object
                        
                        .. attribute:: g709otn_tspec
                        
                        	G709 OTN Sender Tspec
                        	**type**\:  :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec>`
                        
                        .. attribute:: intsrv_tspec
                        
                        	Integrated Services Sender Tspec
                        	**type**\:  :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec>`
                        
                        .. attribute:: tspec_type
                        
                        	TspecType
                        	**type**\:  :py:class:`RsvpMgmtTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspec>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec, self).__init__()

                            self.yang_name = "generic-traffic-spec"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("g709otn-tspec", ("g709otn_tspec", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec)), ("intsrv-tspec", ("intsrv_tspec", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('tspec_type', YLeaf(YType.enumeration, 'tspec-type')),
                            ])
                            self.tspec_type = None

                            self.g709otn_tspec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec()
                            self.g709otn_tspec.parent = self
                            self._children_name_map["g709otn_tspec"] = "g709otn-tspec"
                            self._children_yang_names.add("g709otn-tspec")

                            self.intsrv_tspec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec()
                            self.intsrv_tspec.parent = self
                            self._children_name_map["intsrv_tspec"] = "intsrv-tspec"
                            self._children_yang_names.add("intsrv-tspec")
                            self._segment_path = lambda: "generic-traffic-spec"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec, ['tspec_type'], name, value)


                        class G709OtnTspec(Entity):
                            """
                            G709 OTN Sender Tspec
                            
                            .. attribute:: traffic_signal_type
                            
                            	G709 OTN Traffic Signal Type (Refer G709 v3)
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: traffic_nvc
                            
                            	G709 OTN Traffic NVC
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: traffic_multiplier
                            
                            	G709 OTN Traffic Multiplier
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: traffic_bit_rate
                            
                            	G709 OTN Traffic Bit Rate
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec, self).__init__()

                                self.yang_name = "g709otn-tspec"
                                self.yang_parent_name = "generic-traffic-spec"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('traffic_signal_type', YLeaf(YType.uint8, 'traffic-signal-type')),
                                    ('traffic_nvc', YLeaf(YType.uint16, 'traffic-nvc')),
                                    ('traffic_multiplier', YLeaf(YType.uint16, 'traffic-multiplier')),
                                    ('traffic_bit_rate', YLeaf(YType.uint64, 'traffic-bit-rate')),
                                ])
                                self.traffic_signal_type = None
                                self.traffic_nvc = None
                                self.traffic_multiplier = None
                                self.traffic_bit_rate = None
                                self._segment_path = lambda: "g709otn-tspec"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-traffic-spec/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec, ['traffic_signal_type', 'traffic_nvc', 'traffic_multiplier', 'traffic_bit_rate'], name, value)


                        class IntsrvTspec(Entity):
                            """
                            Integrated Services Sender Tspec
                            
                            .. attribute:: traffic_average_rate
                            
                            	Traffic Average Rate in bytes per second
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: byte/s
                            
                            .. attribute:: traffic_max_burst
                            
                            	Traffic Maximum Burst
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: traffic_peak_rate
                            
                            	Traffic Peak Rate in bytes per second
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: byte/s
                            
                            .. attribute:: traffic_min_unit
                            
                            	Traffic Minimum Unit
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: traffic_max_unit
                            
                            	Traffic Maximum Unit
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec, self).__init__()

                                self.yang_name = "intsrv-tspec"
                                self.yang_parent_name = "generic-traffic-spec"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                                    ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                                    ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                                    ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                                    ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                                ])
                                self.traffic_average_rate = None
                                self.traffic_max_burst = None
                                self.traffic_peak_rate = None
                                self.traffic_min_unit = None
                                self.traffic_max_unit = None
                                self._segment_path = lambda: "intsrv-tspec"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-traffic-spec/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


                    class Association(Entity):
                        """
                        Association object
                        
                        .. attribute:: ipv4
                        
                        	IPV4 ASSOCIATION Object
                        	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4>`
                        
                        .. attribute:: ipv6
                        
                        	IPV6 ASSOCIATION Object
                        	**type**\:  :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6>`
                        
                        .. attribute:: extended_ipv4
                        
                        	EXTENDED IPV4 ASSOCIATION Object
                        	**type**\:  :py:class:`ExtendedIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4>`
                        
                        .. attribute:: extended_ipv6
                        
                        	EXTENDED IPV6 ASSOCIATION Object
                        	**type**\:  :py:class:`ExtendedIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6>`
                        
                        .. attribute:: association_type
                        
                        	AssociationType
                        	**type**\:  :py:class:`RsvpMgmtAssociation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAssociation>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association, self).__init__()

                            self.yang_name = "association"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ipv4", ("ipv4", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4)), ("ipv6", ("ipv6", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6)), ("extended-ipv4", ("extended_ipv4", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4)), ("extended-ipv6", ("extended_ipv6", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('association_type', YLeaf(YType.enumeration, 'association-type')),
                            ])
                            self.association_type = None

                            self.ipv4 = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4()
                            self.ipv4.parent = self
                            self._children_name_map["ipv4"] = "ipv4"
                            self._children_yang_names.add("ipv4")

                            self.ipv6 = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6()
                            self.ipv6.parent = self
                            self._children_name_map["ipv6"] = "ipv6"
                            self._children_yang_names.add("ipv6")

                            self.extended_ipv4 = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4()
                            self.extended_ipv4.parent = self
                            self._children_name_map["extended_ipv4"] = "extended-ipv4"
                            self._children_yang_names.add("extended-ipv4")

                            self.extended_ipv6 = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6()
                            self.extended_ipv6.parent = self
                            self._children_name_map["extended_ipv6"] = "extended-ipv6"
                            self._children_yang_names.add("extended-ipv6")
                            self._segment_path = lambda: "association"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association, ['association_type'], name, value)


                        class Ipv4(Entity):
                            """
                            IPV4 ASSOCIATION Object
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV4 Source Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4, self).__init__()

                                self.yang_name = "ipv4"
                                self.yang_parent_name = "association"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('type', YLeaf(YType.uint16, 'type')),
                                    ('id', YLeaf(YType.uint16, 'id')),
                                    ('source', YLeaf(YType.str, 'source')),
                                ])
                                self.type = None
                                self.id = None
                                self.source = None
                                self._segment_path = lambda: "ipv4"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4, ['type', 'id', 'source'], name, value)


                        class Ipv6(Entity):
                            """
                            IPV6 ASSOCIATION Object
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV6 Source Address
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6, self).__init__()

                                self.yang_name = "ipv6"
                                self.yang_parent_name = "association"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('type', YLeaf(YType.uint16, 'type')),
                                    ('id', YLeaf(YType.uint16, 'id')),
                                    ('source', YLeaf(YType.str, 'source')),
                                ])
                                self.type = None
                                self.id = None
                                self.source = None
                                self._segment_path = lambda: "ipv6"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6, ['type', 'id', 'source'], name, value)


                        class ExtendedIpv4(Entity):
                            """
                            EXTENDED IPV4 ASSOCIATION Object
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV4 Source Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: global_source
                            
                            	Global Association Source
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: extended_id
                            
                            	Extended Association ID
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4, self).__init__()

                                self.yang_name = "extended-ipv4"
                                self.yang_parent_name = "association"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('type', YLeaf(YType.uint16, 'type')),
                                    ('id', YLeaf(YType.uint16, 'id')),
                                    ('source', YLeaf(YType.str, 'source')),
                                    ('global_source', YLeaf(YType.uint32, 'global-source')),
                                    ('extended_id', YLeafList(YType.uint32, 'extended-id')),
                                ])
                                self.type = None
                                self.id = None
                                self.source = None
                                self.global_source = None
                                self.extended_id = []
                                self._segment_path = lambda: "extended-ipv4"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4, ['type', 'id', 'source', 'global_source', 'extended_id'], name, value)


                        class ExtendedIpv6(Entity):
                            """
                            EXTENDED IPV6 ASSOCIATION Object
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV6 Source Address
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: global_source
                            
                            	Global Association Source
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: extended_id
                            
                            	Extended Association ID
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6, self).__init__()

                                self.yang_name = "extended-ipv6"
                                self.yang_parent_name = "association"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('type', YLeaf(YType.uint16, 'type')),
                                    ('id', YLeaf(YType.uint16, 'id')),
                                    ('source', YLeaf(YType.str, 'source')),
                                    ('global_source', YLeaf(YType.uint32, 'global-source')),
                                    ('extended_id', YLeafList(YType.uint32, 'extended-id')),
                                ])
                                self.type = None
                                self.id = None
                                self.source = None
                                self.global_source = None
                                self.extended_id = []
                                self._segment_path = lambda: "extended-ipv6"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6, ['type', 'id', 'source', 'global_source', 'extended_id'], name, value)


                    class Protection(Entity):
                        """
                        Protection object
                        
                        .. attribute:: lsp_flags
                        
                        	PROTECTION Object LSP Flags
                        	**type**\:  :py:class:`LspFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags>`
                        
                        .. attribute:: link_flags
                        
                        	PROTECTION Object Link Flags
                        	**type**\:  :py:class:`LinkFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags>`
                        
                        .. attribute:: s
                        
                        	Secondary Bit
                        	**type**\: bool
                        
                        .. attribute:: p
                        
                        	Protecting Bit
                        	**type**\: bool
                        
                        .. attribute:: n
                        
                        	Notification Bit
                        	**type**\: bool
                        
                        .. attribute:: o
                        
                        	Operational Bit
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection, self).__init__()

                            self.yang_name = "protection"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("lsp-flags", ("lsp_flags", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags)), ("link-flags", ("link_flags", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('s', YLeaf(YType.boolean, 's')),
                                ('p', YLeaf(YType.boolean, 'p')),
                                ('n', YLeaf(YType.boolean, 'n')),
                                ('o', YLeaf(YType.boolean, 'o')),
                            ])
                            self.s = None
                            self.p = None
                            self.n = None
                            self.o = None

                            self.lsp_flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags()
                            self.lsp_flags.parent = self
                            self._children_name_map["lsp_flags"] = "lsp-flags"
                            self._children_yang_names.add("lsp-flags")

                            self.link_flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags()
                            self.link_flags.parent = self
                            self._children_name_map["link_flags"] = "link-flags"
                            self._children_yang_names.add("link-flags")
                            self._segment_path = lambda: "protection"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection, ['s', 'p', 'n', 'o'], name, value)


                        class LspFlags(Entity):
                            """
                            PROTECTION Object LSP Flags
                            
                            .. attribute:: rerouting
                            
                            	Full Rerouting
                            	**type**\: bool
                            
                            .. attribute:: rerouting_no_et
                            
                            	Rerouting Without Extra\-Traffic
                            	**type**\: bool
                            
                            .. attribute:: one_to_n_protection_et
                            
                            	1\:N Protection with Extra\-Traffic
                            	**type**\: bool
                            
                            .. attribute:: one_plus_one_uni
                            
                            	1+1 Unidirectional Protection
                            	**type**\: bool
                            
                            .. attribute:: one_plus_one_bi
                            
                            	1+1 Bidirectional Protection
                            	**type**\: bool
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags, self).__init__()

                                self.yang_name = "lsp-flags"
                                self.yang_parent_name = "protection"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rerouting', YLeaf(YType.boolean, 'rerouting')),
                                    ('rerouting_no_et', YLeaf(YType.boolean, 'rerouting-no-et')),
                                    ('one_to_n_protection_et', YLeaf(YType.boolean, 'one-to-n-protection-et')),
                                    ('one_plus_one_uni', YLeaf(YType.boolean, 'one-plus-one-uni')),
                                    ('one_plus_one_bi', YLeaf(YType.boolean, 'one-plus-one-bi')),
                                ])
                                self.rerouting = None
                                self.rerouting_no_et = None
                                self.one_to_n_protection_et = None
                                self.one_plus_one_uni = None
                                self.one_plus_one_bi = None
                                self._segment_path = lambda: "lsp-flags"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/protection/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags, ['rerouting', 'rerouting_no_et', 'one_to_n_protection_et', 'one_plus_one_uni', 'one_plus_one_bi'], name, value)


                        class LinkFlags(Entity):
                            """
                            PROTECTION Object Link Flags
                            
                            .. attribute:: enhanced
                            
                            	Indicates Enhanced Protection Scheme
                            	**type**\: bool
                            
                            .. attribute:: ded1_plus1
                            
                            	Dedicated 1+1 Protection
                            	**type**\: bool
                            
                            .. attribute:: ded1_to1
                            
                            	Dedicated 1\:1 Protection
                            	**type**\: bool
                            
                            .. attribute:: shared
                            
                            	Shared Link Layer Protection
                            	**type**\: bool
                            
                            .. attribute:: unprotected
                            
                            	LSP should not use any Link Layer Protection
                            	**type**\: bool
                            
                            .. attribute:: extra_traffic
                            
                            	LSP should use Links that are protecting other (primary) traffic
                            	**type**\: bool
                            
                            .. attribute:: reserved_bit1
                            
                            	Reserved Bit 1
                            	**type**\: bool
                            
                            .. attribute:: reserved_bit2
                            
                            	Reserved Bit 2
                            	**type**\: bool
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags, self).__init__()

                                self.yang_name = "link-flags"
                                self.yang_parent_name = "protection"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('enhanced', YLeaf(YType.boolean, 'enhanced')),
                                    ('ded1_plus1', YLeaf(YType.boolean, 'ded1-plus1')),
                                    ('ded1_to1', YLeaf(YType.boolean, 'ded1-to1')),
                                    ('shared', YLeaf(YType.boolean, 'shared')),
                                    ('unprotected', YLeaf(YType.boolean, 'unprotected')),
                                    ('extra_traffic', YLeaf(YType.boolean, 'extra-traffic')),
                                    ('reserved_bit1', YLeaf(YType.boolean, 'reserved-bit1')),
                                    ('reserved_bit2', YLeaf(YType.boolean, 'reserved-bit2')),
                                ])
                                self.enhanced = None
                                self.ded1_plus1 = None
                                self.ded1_to1 = None
                                self.shared = None
                                self.unprotected = None
                                self.extra_traffic = None
                                self.reserved_bit1 = None
                                self.reserved_bit2 = None
                                self._segment_path = lambda: "link-flags"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/protection/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags, ['enhanced', 'ded1_plus1', 'ded1_to1', 'shared', 'unprotected', 'extra_traffic', 'reserved_bit1', 'reserved_bit2'], name, value)


                    class ReverseLsp(Entity):
                        """
                        Reverse LSP object
                        
                        .. attribute:: generic_traffic_spec
                        
                        	Generic Traffic Spec object
                        	**type**\:  :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec>`
                        
                        .. attribute:: ero
                        
                        	Explicit Route Sub Objects
                        	**type**\: list of  		 :py:class:`Ero <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero>`
                        
                        .. attribute:: unsup_sub_object
                        
                        	Unsupported REVERSE\_LSP Sub Objects
                        	**type**\: list of  		 :py:class:`UnsupSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.UnsupSubObject>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp, self).__init__()

                            self.yang_name = "reverse-lsp"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("generic-traffic-spec", ("generic_traffic_spec", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec))])
                            self._child_list_classes = OrderedDict([("ero", ("ero", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero)), ("unsup-sub-object", ("unsup_sub_object", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.UnsupSubObject))])
                            self._leafs = OrderedDict()

                            self.generic_traffic_spec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec()
                            self.generic_traffic_spec.parent = self
                            self._children_name_map["generic_traffic_spec"] = "generic-traffic-spec"
                            self._children_yang_names.add("generic-traffic-spec")

                            self.ero = YList(self)
                            self.unsup_sub_object = YList(self)
                            self._segment_path = lambda: "reverse-lsp"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp, [], name, value)


                        class GenericTrafficSpec(Entity):
                            """
                            Generic Traffic Spec object
                            
                            .. attribute:: g709otn_tspec
                            
                            	G709 OTN Sender Tspec
                            	**type**\:  :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec>`
                            
                            .. attribute:: intsrv_tspec
                            
                            	Integrated Services Sender Tspec
                            	**type**\:  :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec>`
                            
                            .. attribute:: tspec_type
                            
                            	TspecType
                            	**type**\:  :py:class:`RsvpMgmtTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspec>`
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec, self).__init__()

                                self.yang_name = "generic-traffic-spec"
                                self.yang_parent_name = "reverse-lsp"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("g709otn-tspec", ("g709otn_tspec", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec)), ("intsrv-tspec", ("intsrv_tspec", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tspec_type', YLeaf(YType.enumeration, 'tspec-type')),
                                ])
                                self.tspec_type = None

                                self.g709otn_tspec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec()
                                self.g709otn_tspec.parent = self
                                self._children_name_map["g709otn_tspec"] = "g709otn-tspec"
                                self._children_yang_names.add("g709otn-tspec")

                                self.intsrv_tspec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec()
                                self.intsrv_tspec.parent = self
                                self._children_name_map["intsrv_tspec"] = "intsrv-tspec"
                                self._children_yang_names.add("intsrv-tspec")
                                self._segment_path = lambda: "generic-traffic-spec"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec, ['tspec_type'], name, value)


                            class G709OtnTspec(Entity):
                                """
                                G709 OTN Sender Tspec
                                
                                .. attribute:: traffic_signal_type
                                
                                	G709 OTN Traffic Signal Type (Refer G709 v3)
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: traffic_nvc
                                
                                	G709 OTN Traffic NVC
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_multiplier
                                
                                	G709 OTN Traffic Multiplier
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_bit_rate
                                
                                	G709 OTN Traffic Bit Rate
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec, self).__init__()

                                    self.yang_name = "g709otn-tspec"
                                    self.yang_parent_name = "generic-traffic-spec"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('traffic_signal_type', YLeaf(YType.uint8, 'traffic-signal-type')),
                                        ('traffic_nvc', YLeaf(YType.uint16, 'traffic-nvc')),
                                        ('traffic_multiplier', YLeaf(YType.uint16, 'traffic-multiplier')),
                                        ('traffic_bit_rate', YLeaf(YType.uint64, 'traffic-bit-rate')),
                                    ])
                                    self.traffic_signal_type = None
                                    self.traffic_nvc = None
                                    self.traffic_multiplier = None
                                    self.traffic_bit_rate = None
                                    self._segment_path = lambda: "g709otn-tspec"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/generic-traffic-spec/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec, ['traffic_signal_type', 'traffic_nvc', 'traffic_multiplier', 'traffic_bit_rate'], name, value)


                            class IntsrvTspec(Entity):
                                """
                                Integrated Services Sender Tspec
                                
                                .. attribute:: traffic_average_rate
                                
                                	Traffic Average Rate in bytes per second
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: byte/s
                                
                                .. attribute:: traffic_max_burst
                                
                                	Traffic Maximum Burst
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: traffic_peak_rate
                                
                                	Traffic Peak Rate in bytes per second
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: byte/s
                                
                                .. attribute:: traffic_min_unit
                                
                                	Traffic Minimum Unit
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: traffic_max_unit
                                
                                	Traffic Maximum Unit
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec, self).__init__()

                                    self.yang_name = "intsrv-tspec"
                                    self.yang_parent_name = "generic-traffic-spec"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                                        ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                                        ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                                        ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                                        ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                                    ])
                                    self.traffic_average_rate = None
                                    self.traffic_max_burst = None
                                    self.traffic_peak_rate = None
                                    self.traffic_min_unit = None
                                    self.traffic_max_unit = None
                                    self._segment_path = lambda: "intsrv-tspec"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/generic-traffic-spec/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


                        class Ero(Entity):
                            """
                            Explicit Route Sub Objects
                            
                            .. attribute:: ipv4ero_sub_object
                            
                            	IPV4 ERO Sub Object
                            	**type**\:  :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject>`
                            
                            .. attribute:: unnumbered_ero_sub_object
                            
                            	Unnumbered ERO Sub Object
                            	**type**\:  :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject>`
                            
                            .. attribute:: ero_type
                            
                            	EROType
                            	**type**\:  :py:class:`RsvpMgmtEroSubobj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobj>`
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero, self).__init__()

                                self.yang_name = "ero"
                                self.yang_parent_name = "reverse-lsp"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("ipv4ero-sub-object", ("ipv4ero_sub_object", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject)), ("unnumbered-ero-sub-object", ("unnumbered_ero_sub_object", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ero_type', YLeaf(YType.enumeration, 'ero-type')),
                                ])
                                self.ero_type = None

                                self.ipv4ero_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject()
                                self.ipv4ero_sub_object.parent = self
                                self._children_name_map["ipv4ero_sub_object"] = "ipv4ero-sub-object"
                                self._children_yang_names.add("ipv4ero-sub-object")

                                self.unnumbered_ero_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject()
                                self.unnumbered_ero_sub_object.parent = self
                                self._children_name_map["unnumbered_ero_sub_object"] = "unnumbered-ero-sub-object"
                                self._children_yang_names.add("unnumbered-ero-sub-object")
                                self._segment_path = lambda: "ero"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero, ['ero_type'], name, value)


                            class Ipv4EroSubObject(Entity):
                                """
                                IPV4 ERO Sub Object
                                
                                .. attribute:: is_strict_route
                                
                                	ERO Entry Is Strict
                                	**type**\: bool
                                
                                .. attribute:: ero_address
                                
                                	The ERO IPV4 Address
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	ERO Prefix Length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject, self).__init__()

                                    self.yang_name = "ipv4ero-sub-object"
                                    self.yang_parent_name = "ero"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                                        ('ero_address', YLeaf(YType.str, 'ero-address')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                    ])
                                    self.is_strict_route = None
                                    self.ero_address = None
                                    self.prefix_length = None
                                    self._segment_path = lambda: "ipv4ero-sub-object"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/ero/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject, ['is_strict_route', 'ero_address', 'prefix_length'], name, value)


                            class UnnumberedEroSubObject(Entity):
                                """
                                Unnumbered ERO Sub Object
                                
                                .. attribute:: is_strict_route
                                
                                	ERO Entry Is Strict
                                	**type**\: bool
                                
                                .. attribute:: ero_interface_id
                                
                                	The Interface ID in ERO
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ero_router_id
                                
                                	The Router ID in ERO
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: status
                                
                                	Status of ERO
                                	**type**\:  :py:class:`RsvpMgmtEroSubobjStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatus>`
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject, self).__init__()

                                    self.yang_name = "unnumbered-ero-sub-object"
                                    self.yang_parent_name = "ero"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                                        ('ero_interface_id', YLeaf(YType.uint32, 'ero-interface-id')),
                                        ('ero_router_id', YLeaf(YType.str, 'ero-router-id')),
                                        ('status', YLeaf(YType.enumeration, 'status')),
                                    ])
                                    self.is_strict_route = None
                                    self.ero_interface_id = None
                                    self.ero_router_id = None
                                    self.status = None
                                    self._segment_path = lambda: "unnumbered-ero-sub-object"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/ero/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject, ['is_strict_route', 'ero_interface_id', 'ero_router_id', 'status'], name, value)


                        class UnsupSubObject(Entity):
                            """
                            Unsupported REVERSE\_LSP Sub Objects
                            
                            .. attribute:: rsvp_mgmt_rev_lsp_unsupported_subobj
                            
                            	rsvp mgmt rev lsp unsupported subobj
                            	**type**\: list of int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.UnsupSubObject, self).__init__()

                                self.yang_name = "unsup-sub-object"
                                self.yang_parent_name = "reverse-lsp"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rsvp_mgmt_rev_lsp_unsupported_subobj', YLeafList(YType.uint8, 'rsvp-mgmt-rev-lsp-unsupported-subobj')),
                                ])
                                self.rsvp_mgmt_rev_lsp_unsupported_subobj = []
                                self._segment_path = lambda: "unsup-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.UnsupSubObject, ['rsvp_mgmt_rev_lsp_unsupported_subobj'], name, value)


                    class Ero(Entity):
                        """
                        Explicit Route Sub Objects
                        
                        .. attribute:: ipv4ero_sub_object
                        
                        	IPV4 ERO Sub Object
                        	**type**\:  :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject>`
                        
                        .. attribute:: unnumbered_ero_sub_object
                        
                        	Unnumbered ERO Sub Object
                        	**type**\:  :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject>`
                        
                        .. attribute:: ero_type
                        
                        	EROType
                        	**type**\:  :py:class:`RsvpMgmtEroSubobj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobj>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero, self).__init__()

                            self.yang_name = "ero"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ipv4ero-sub-object", ("ipv4ero_sub_object", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject)), ("unnumbered-ero-sub-object", ("unnumbered_ero_sub_object", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('ero_type', YLeaf(YType.enumeration, 'ero-type')),
                            ])
                            self.ero_type = None

                            self.ipv4ero_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject()
                            self.ipv4ero_sub_object.parent = self
                            self._children_name_map["ipv4ero_sub_object"] = "ipv4ero-sub-object"
                            self._children_yang_names.add("ipv4ero-sub-object")

                            self.unnumbered_ero_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject()
                            self.unnumbered_ero_sub_object.parent = self
                            self._children_name_map["unnumbered_ero_sub_object"] = "unnumbered-ero-sub-object"
                            self._children_yang_names.add("unnumbered-ero-sub-object")
                            self._segment_path = lambda: "ero"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero, ['ero_type'], name, value)


                        class Ipv4EroSubObject(Entity):
                            """
                            IPV4 ERO Sub Object
                            
                            .. attribute:: is_strict_route
                            
                            	ERO Entry Is Strict
                            	**type**\: bool
                            
                            .. attribute:: ero_address
                            
                            	The ERO IPV4 Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	ERO Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject, self).__init__()

                                self.yang_name = "ipv4ero-sub-object"
                                self.yang_parent_name = "ero"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                                    ('ero_address', YLeaf(YType.str, 'ero-address')),
                                    ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                ])
                                self.is_strict_route = None
                                self.ero_address = None
                                self.prefix_length = None
                                self._segment_path = lambda: "ipv4ero-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/ero/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject, ['is_strict_route', 'ero_address', 'prefix_length'], name, value)


                        class UnnumberedEroSubObject(Entity):
                            """
                            Unnumbered ERO Sub Object
                            
                            .. attribute:: is_strict_route
                            
                            	ERO Entry Is Strict
                            	**type**\: bool
                            
                            .. attribute:: ero_interface_id
                            
                            	The Interface ID in ERO
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ero_router_id
                            
                            	The Router ID in ERO
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: status
                            
                            	Status of ERO
                            	**type**\:  :py:class:`RsvpMgmtEroSubobjStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatus>`
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject, self).__init__()

                                self.yang_name = "unnumbered-ero-sub-object"
                                self.yang_parent_name = "ero"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                                    ('ero_interface_id', YLeaf(YType.uint32, 'ero-interface-id')),
                                    ('ero_router_id', YLeaf(YType.str, 'ero-router-id')),
                                    ('status', YLeaf(YType.enumeration, 'status')),
                                ])
                                self.is_strict_route = None
                                self.ero_interface_id = None
                                self.ero_router_id = None
                                self.status = None
                                self._segment_path = lambda: "unnumbered-ero-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/ero/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject, ['is_strict_route', 'ero_interface_id', 'ero_router_id', 'status'], name, value)


                    class Rro(Entity):
                        """
                        Record Route Sub Objects
                        
                        .. attribute:: ipv4rro_sub_object
                        
                        	IPV4 RRO Sub Object
                        	**type**\:  :py:class:`Ipv4RroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject>`
                        
                        .. attribute:: label_rro_sub_object
                        
                        	Label RRO Sub Object
                        	**type**\:  :py:class:`LabelRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject>`
                        
                        .. attribute:: unnumbered_rro_sub_object
                        
                        	Unnumbered RRO Sub Object
                        	**type**\:  :py:class:`UnnumberedRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject>`
                        
                        .. attribute:: srlg_rro_sub_object
                        
                        	SRLG RRO Sub Object
                        	**type**\:  :py:class:`SrlgRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject>`
                        
                        .. attribute:: rro_type
                        
                        	RROType
                        	**type**\:  :py:class:`RsvpMgmtRroSubobj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRroSubobj>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro, self).__init__()

                            self.yang_name = "rro"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ipv4rro-sub-object", ("ipv4rro_sub_object", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject)), ("label-rro-sub-object", ("label_rro_sub_object", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject)), ("unnumbered-rro-sub-object", ("unnumbered_rro_sub_object", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject)), ("srlg-rro-sub-object", ("srlg_rro_sub_object", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('rro_type', YLeaf(YType.enumeration, 'rro-type')),
                            ])
                            self.rro_type = None

                            self.ipv4rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject()
                            self.ipv4rro_sub_object.parent = self
                            self._children_name_map["ipv4rro_sub_object"] = "ipv4rro-sub-object"
                            self._children_yang_names.add("ipv4rro-sub-object")

                            self.label_rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject()
                            self.label_rro_sub_object.parent = self
                            self._children_name_map["label_rro_sub_object"] = "label-rro-sub-object"
                            self._children_yang_names.add("label-rro-sub-object")

                            self.unnumbered_rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject()
                            self.unnumbered_rro_sub_object.parent = self
                            self._children_name_map["unnumbered_rro_sub_object"] = "unnumbered-rro-sub-object"
                            self._children_yang_names.add("unnumbered-rro-sub-object")

                            self.srlg_rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject()
                            self.srlg_rro_sub_object.parent = self
                            self._children_name_map["srlg_rro_sub_object"] = "srlg-rro-sub-object"
                            self._children_yang_names.add("srlg-rro-sub-object")
                            self._segment_path = lambda: "rro"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro, ['rro_type'], name, value)


                        class Ipv4RroSubObject(Entity):
                            """
                            IPV4 RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO IPV4 Subobject Flags
                            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags>`
                            
                            .. attribute:: rro_address
                            
                            	The RRO IPV4 Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject, self).__init__()

                                self.yang_name = "ipv4rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("flags", ("flags", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rro_address', YLeaf(YType.str, 'rro-address')),
                                ])
                                self.rro_address = None

                                self.flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags()
                                self.flags.parent = self
                                self._children_name_map["flags"] = "flags"
                                self._children_yang_names.add("flags")
                                self._segment_path = lambda: "ipv4rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject, ['rro_address'], name, value)


                            class Flags(Entity):
                                """
                                The RRO IPV4 Subobject Flags
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\: bool
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags, self).__init__()

                                    self.yang_name = "flags"
                                    self.yang_parent_name = "ipv4rro-sub-object"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_protection_available', YLeaf(YType.boolean, 'is-protection-available')),
                                        ('is_protection_in_use', YLeaf(YType.boolean, 'is-protection-in-use')),
                                        ('is_bandwidth_protected', YLeaf(YType.boolean, 'is-bandwidth-protected')),
                                        ('is_node_protection_available', YLeaf(YType.boolean, 'is-node-protection-available')),
                                        ('is_node_id', YLeaf(YType.boolean, 'is-node-id')),
                                    ])
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_protection_available = None
                                    self.is_node_id = None
                                    self._segment_path = lambda: "flags"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/ipv4rro-sub-object/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags, ['is_protection_available', 'is_protection_in_use', 'is_bandwidth_protected', 'is_node_protection_available', 'is_node_id'], name, value)


                        class LabelRroSubObject(Entity):
                            """
                            Label RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Label Flags
                            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags>`
                            
                            .. attribute:: label
                            
                            	The RRO Subobject Label Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: is_label_variable_length
                            
                            	Is the RRO Subobject Label Variable Length
                            	**type**\: bool
                            
                            .. attribute:: variable_length_label
                            
                            	The RRO Subobject Variable Length Label
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject, self).__init__()

                                self.yang_name = "label-rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("flags", ("flags", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label', YLeaf(YType.uint32, 'label')),
                                    ('is_label_variable_length', YLeaf(YType.boolean, 'is-label-variable-length')),
                                    ('variable_length_label', YLeafList(YType.uint32, 'variable-length-label')),
                                ])
                                self.label = None
                                self.is_label_variable_length = None
                                self.variable_length_label = []

                                self.flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags()
                                self.flags.parent = self
                                self._children_name_map["flags"] = "flags"
                                self._children_yang_names.add("flags")
                                self._segment_path = lambda: "label-rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject, ['label', 'is_label_variable_length', 'variable_length_label'], name, value)


                            class Flags(Entity):
                                """
                                The RRO Subobject Label Flags
                                
                                .. attribute:: is_global_label
                                
                                	Label is Global across all interfaces
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags, self).__init__()

                                    self.yang_name = "flags"
                                    self.yang_parent_name = "label-rro-sub-object"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_global_label', YLeaf(YType.boolean, 'is-global-label')),
                                    ])
                                    self.is_global_label = None
                                    self._segment_path = lambda: "flags"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/label-rro-sub-object/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags, ['is_global_label'], name, value)


                        class UnnumberedRroSubObject(Entity):
                            """
                            Unnumbered RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Unnumbered Flags
                            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags>`
                            
                            .. attribute:: interface_address
                            
                            	The RRO Interface Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: interface_id
                            
                            	The RRO Interface ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject, self).__init__()

                                self.yang_name = "unnumbered-rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("flags", ("flags", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('interface_address', YLeaf(YType.str, 'interface-address')),
                                    ('interface_id', YLeaf(YType.uint32, 'interface-id')),
                                ])
                                self.interface_address = None
                                self.interface_id = None

                                self.flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags()
                                self.flags.parent = self
                                self._children_name_map["flags"] = "flags"
                                self._children_yang_names.add("flags")
                                self._segment_path = lambda: "unnumbered-rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject, ['interface_address', 'interface_id'], name, value)


                            class Flags(Entity):
                                """
                                The RRO Subobject Unnumbered Flags
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\: bool
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags, self).__init__()

                                    self.yang_name = "flags"
                                    self.yang_parent_name = "unnumbered-rro-sub-object"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_protection_available', YLeaf(YType.boolean, 'is-protection-available')),
                                        ('is_protection_in_use', YLeaf(YType.boolean, 'is-protection-in-use')),
                                        ('is_bandwidth_protected', YLeaf(YType.boolean, 'is-bandwidth-protected')),
                                        ('is_node_protection_available', YLeaf(YType.boolean, 'is-node-protection-available')),
                                        ('is_node_id', YLeaf(YType.boolean, 'is-node-id')),
                                    ])
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_protection_available = None
                                    self.is_node_id = None
                                    self._segment_path = lambda: "flags"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/unnumbered-rro-sub-object/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags, ['is_protection_available', 'is_protection_in_use', 'is_bandwidth_protected', 'is_node_protection_available', 'is_node_id'], name, value)


                        class SrlgRroSubObject(Entity):
                            """
                            SRLG RRO Sub Object
                            
                            .. attribute:: srl_gs
                            
                            	The RRO Subobject SRLGs
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject, self).__init__()

                                self.yang_name = "srlg-rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('srl_gs', YLeafList(YType.uint32, 'srl-gs')),
                                ])
                                self.srl_gs = []
                                self._segment_path = lambda: "srlg-rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject, ['srl_gs'], name, value)


                class RsbInfo(Entity):
                    """
                    Reservation Info
                    
                    .. attribute:: generic_out_label
                    
                    	Generic Label for outbound traffic
                    	**type**\:  :py:class:`GenericOutLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel>`
                    
                    .. attribute:: flow_spec
                    
                    	Flow spec object
                    	**type**\:  :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec>`
                    
                    .. attribute:: generic_flow_spec
                    
                    	Generic Flow Spec object
                    	**type**\:  :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec>`
                    
                    .. attribute:: is_valid
                    
                    	Entry validity
                    	**type**\: bool
                    
                    .. attribute:: destination_address
                    
                    	Destination address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: out_interface
                    
                    	Interface on which outbound message was sent
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: out_label
                    
                    	Label for outbound traffic
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: backup_interface
                    
                    	Backup tunnel interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: backup_label
                    
                    	Backup label
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: is_rro_valid
                    
                    	RRO validity
                    	**type**\: bool
                    
                    .. attribute:: is_flow_spec_valid
                    
                    	FlowSpec validity
                    	**type**\: bool
                    
                    .. attribute:: rro
                    
                    	Record route object
                    	**type**\: list of  		 :py:class:`Rro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo, self).__init__()

                        self.yang_name = "rsb-info"
                        self.yang_parent_name = "psb-rsb-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generic-out-label", ("generic_out_label", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel)), ("flow-spec", ("flow_spec", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec)), ("generic-flow-spec", ("generic_flow_spec", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec))])
                        self._child_list_classes = OrderedDict([("rro", ("rro", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro))])
                        self._leafs = OrderedDict([
                            ('is_valid', YLeaf(YType.boolean, 'is-valid')),
                            ('destination_address', YLeaf(YType.str, 'destination-address')),
                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                            ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                            ('backup_label', YLeaf(YType.uint32, 'backup-label')),
                            ('is_rro_valid', YLeaf(YType.boolean, 'is-rro-valid')),
                            ('is_flow_spec_valid', YLeaf(YType.boolean, 'is-flow-spec-valid')),
                        ])
                        self.is_valid = None
                        self.destination_address = None
                        self.out_interface = None
                        self.out_label = None
                        self.backup_interface = None
                        self.backup_label = None
                        self.is_rro_valid = None
                        self.is_flow_spec_valid = None

                        self.generic_out_label = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel()
                        self.generic_out_label.parent = self
                        self._children_name_map["generic_out_label"] = "generic-out-label"
                        self._children_yang_names.add("generic-out-label")

                        self.flow_spec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec()
                        self.flow_spec.parent = self
                        self._children_name_map["flow_spec"] = "flow-spec"
                        self._children_yang_names.add("flow-spec")

                        self.generic_flow_spec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec()
                        self.generic_flow_spec.parent = self
                        self._children_name_map["generic_flow_spec"] = "generic-flow-spec"
                        self._children_yang_names.add("generic-flow-spec")

                        self.rro = YList(self)
                        self._segment_path = lambda: "rsb-info"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo, ['is_valid', 'destination_address', 'out_interface', 'out_label', 'backup_interface', 'backup_label', 'is_rro_valid', 'is_flow_spec_valid'], name, value)


                    class GenericOutLabel(Entity):
                        """
                        Generic Label for outbound traffic
                        
                        .. attribute:: generalized_label
                        
                        	Generalized Label
                        	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel>`
                        
                        .. attribute:: generic_label_type
                        
                        	GenericLabelType
                        	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel, self).__init__()

                            self.yang_name = "generic-out-label"
                            self.yang_parent_name = "rsb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                            ])
                            self.generic_label_type = None

                            self.generalized_label = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel()
                            self.generalized_label.parent = self
                            self._children_name_map["generalized_label"] = "generalized-label"
                            self._children_yang_names.add("generalized-label")
                            self._segment_path = lambda: "generic-out-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel, ['generic_label_type'], name, value)


                        class GeneralizedLabel(Entity):
                            """
                            Generalized Label
                            
                            .. attribute:: value
                            
                            	Generalized Label Value
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel, self).__init__()

                                self.yang_name = "generalized-label"
                                self.yang_parent_name = "generic-out-label"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('value', YLeafList(YType.uint32, 'value')),
                                ])
                                self.value = []
                                self._segment_path = lambda: "generalized-label"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/generic-out-label/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel, ['value'], name, value)


                    class FlowSpec(Entity):
                        """
                        Flow spec object
                        
                        .. attribute:: flow_average_rate
                        
                        	The Flow Average Rate in bytes per second
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: flow_max_burst
                        
                        	The Flow Maximum Burst
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: flow_peak_rate
                        
                        	The Flow Peak Rate in bytes per second
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: flow_min_unit
                        
                        	The Flow Minimum Unit
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: flow_max_unit
                        
                        	The Flow Maximum Unit
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: flow_requested_rate
                        
                        	The Flow Requested Rate in bytes per second
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: flow_slack
                        
                        	The Flow Slack
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: flow_qos
                        
                        	The Flow Quality of Service
                        	**type**\:  :py:class:`RsvpMgmtQosServiceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnum>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec, self).__init__()

                            self.yang_name = "flow-spec"
                            self.yang_parent_name = "rsb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('flow_average_rate', YLeaf(YType.uint64, 'flow-average-rate')),
                                ('flow_max_burst', YLeaf(YType.uint64, 'flow-max-burst')),
                                ('flow_peak_rate', YLeaf(YType.uint64, 'flow-peak-rate')),
                                ('flow_min_unit', YLeaf(YType.uint32, 'flow-min-unit')),
                                ('flow_max_unit', YLeaf(YType.uint32, 'flow-max-unit')),
                                ('flow_requested_rate', YLeaf(YType.uint64, 'flow-requested-rate')),
                                ('flow_slack', YLeaf(YType.uint32, 'flow-slack')),
                                ('flow_qos', YLeaf(YType.enumeration, 'flow-qos')),
                            ])
                            self.flow_average_rate = None
                            self.flow_max_burst = None
                            self.flow_peak_rate = None
                            self.flow_min_unit = None
                            self.flow_max_unit = None
                            self.flow_requested_rate = None
                            self.flow_slack = None
                            self.flow_qos = None
                            self._segment_path = lambda: "flow-spec"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec, ['flow_average_rate', 'flow_max_burst', 'flow_peak_rate', 'flow_min_unit', 'flow_max_unit', 'flow_requested_rate', 'flow_slack', 'flow_qos'], name, value)


                    class GenericFlowSpec(Entity):
                        """
                        Generic Flow Spec object
                        
                        .. attribute:: g709otn_flow_spec
                        
                        	G709 OTN FlowSpec
                        	**type**\:  :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec>`
                        
                        .. attribute:: flow_spec_type
                        
                        	FlowSpecType
                        	**type**\:  :py:class:`RsvpMgmtFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpec>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec, self).__init__()

                            self.yang_name = "generic-flow-spec"
                            self.yang_parent_name = "rsb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("g709otn-flow-spec", ("g709otn_flow_spec", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('flow_spec_type', YLeaf(YType.enumeration, 'flow-spec-type')),
                            ])
                            self.flow_spec_type = None

                            self.g709otn_flow_spec = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec()
                            self.g709otn_flow_spec.parent = self
                            self._children_name_map["g709otn_flow_spec"] = "g709otn-flow-spec"
                            self._children_yang_names.add("g709otn-flow-spec")
                            self._segment_path = lambda: "generic-flow-spec"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec, ['flow_spec_type'], name, value)


                        class G709OtnFlowSpec(Entity):
                            """
                            G709 OTN FlowSpec
                            
                            .. attribute:: flow_signal_type
                            
                            	G709 OTN Flow Signal Type (Refer G709 v3)
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: flow_nvc
                            
                            	G709 OTN Flow NVC
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: flow_multiplier
                            
                            	G709 OTN Flow Multiplier
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: flow_bit_rate
                            
                            	G709 OTN Flow Bit Rate
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec, self).__init__()

                                self.yang_name = "g709otn-flow-spec"
                                self.yang_parent_name = "generic-flow-spec"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('flow_signal_type', YLeaf(YType.uint8, 'flow-signal-type')),
                                    ('flow_nvc', YLeaf(YType.uint16, 'flow-nvc')),
                                    ('flow_multiplier', YLeaf(YType.uint16, 'flow-multiplier')),
                                    ('flow_bit_rate', YLeaf(YType.uint64, 'flow-bit-rate')),
                                ])
                                self.flow_signal_type = None
                                self.flow_nvc = None
                                self.flow_multiplier = None
                                self.flow_bit_rate = None
                                self._segment_path = lambda: "g709otn-flow-spec"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/generic-flow-spec/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec, ['flow_signal_type', 'flow_nvc', 'flow_multiplier', 'flow_bit_rate'], name, value)


                    class Rro(Entity):
                        """
                        Record route object
                        
                        .. attribute:: ipv4rro_sub_object
                        
                        	IPV4 RRO Sub Object
                        	**type**\:  :py:class:`Ipv4RroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject>`
                        
                        .. attribute:: label_rro_sub_object
                        
                        	Label RRO Sub Object
                        	**type**\:  :py:class:`LabelRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject>`
                        
                        .. attribute:: unnumbered_rro_sub_object
                        
                        	Unnumbered RRO Sub Object
                        	**type**\:  :py:class:`UnnumberedRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject>`
                        
                        .. attribute:: srlg_rro_sub_object
                        
                        	SRLG RRO Sub Object
                        	**type**\:  :py:class:`SrlgRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject>`
                        
                        .. attribute:: rro_type
                        
                        	RROType
                        	**type**\:  :py:class:`RsvpMgmtRroSubobj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRroSubobj>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro, self).__init__()

                            self.yang_name = "rro"
                            self.yang_parent_name = "rsb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ipv4rro-sub-object", ("ipv4rro_sub_object", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject)), ("label-rro-sub-object", ("label_rro_sub_object", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject)), ("unnumbered-rro-sub-object", ("unnumbered_rro_sub_object", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject)), ("srlg-rro-sub-object", ("srlg_rro_sub_object", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('rro_type', YLeaf(YType.enumeration, 'rro-type')),
                            ])
                            self.rro_type = None

                            self.ipv4rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject()
                            self.ipv4rro_sub_object.parent = self
                            self._children_name_map["ipv4rro_sub_object"] = "ipv4rro-sub-object"
                            self._children_yang_names.add("ipv4rro-sub-object")

                            self.label_rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject()
                            self.label_rro_sub_object.parent = self
                            self._children_name_map["label_rro_sub_object"] = "label-rro-sub-object"
                            self._children_yang_names.add("label-rro-sub-object")

                            self.unnumbered_rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject()
                            self.unnumbered_rro_sub_object.parent = self
                            self._children_name_map["unnumbered_rro_sub_object"] = "unnumbered-rro-sub-object"
                            self._children_yang_names.add("unnumbered-rro-sub-object")

                            self.srlg_rro_sub_object = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject()
                            self.srlg_rro_sub_object.parent = self
                            self._children_name_map["srlg_rro_sub_object"] = "srlg-rro-sub-object"
                            self._children_yang_names.add("srlg-rro-sub-object")
                            self._segment_path = lambda: "rro"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro, ['rro_type'], name, value)


                        class Ipv4RroSubObject(Entity):
                            """
                            IPV4 RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO IPV4 Subobject Flags
                            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags>`
                            
                            .. attribute:: rro_address
                            
                            	The RRO IPV4 Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject, self).__init__()

                                self.yang_name = "ipv4rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("flags", ("flags", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rro_address', YLeaf(YType.str, 'rro-address')),
                                ])
                                self.rro_address = None

                                self.flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags()
                                self.flags.parent = self
                                self._children_name_map["flags"] = "flags"
                                self._children_yang_names.add("flags")
                                self._segment_path = lambda: "ipv4rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject, ['rro_address'], name, value)


                            class Flags(Entity):
                                """
                                The RRO IPV4 Subobject Flags
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\: bool
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags, self).__init__()

                                    self.yang_name = "flags"
                                    self.yang_parent_name = "ipv4rro-sub-object"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_protection_available', YLeaf(YType.boolean, 'is-protection-available')),
                                        ('is_protection_in_use', YLeaf(YType.boolean, 'is-protection-in-use')),
                                        ('is_bandwidth_protected', YLeaf(YType.boolean, 'is-bandwidth-protected')),
                                        ('is_node_protection_available', YLeaf(YType.boolean, 'is-node-protection-available')),
                                        ('is_node_id', YLeaf(YType.boolean, 'is-node-id')),
                                    ])
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_protection_available = None
                                    self.is_node_id = None
                                    self._segment_path = lambda: "flags"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/ipv4rro-sub-object/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags, ['is_protection_available', 'is_protection_in_use', 'is_bandwidth_protected', 'is_node_protection_available', 'is_node_id'], name, value)


                        class LabelRroSubObject(Entity):
                            """
                            Label RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Label Flags
                            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags>`
                            
                            .. attribute:: label
                            
                            	The RRO Subobject Label Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: is_label_variable_length
                            
                            	Is the RRO Subobject Label Variable Length
                            	**type**\: bool
                            
                            .. attribute:: variable_length_label
                            
                            	The RRO Subobject Variable Length Label
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject, self).__init__()

                                self.yang_name = "label-rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("flags", ("flags", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label', YLeaf(YType.uint32, 'label')),
                                    ('is_label_variable_length', YLeaf(YType.boolean, 'is-label-variable-length')),
                                    ('variable_length_label', YLeafList(YType.uint32, 'variable-length-label')),
                                ])
                                self.label = None
                                self.is_label_variable_length = None
                                self.variable_length_label = []

                                self.flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags()
                                self.flags.parent = self
                                self._children_name_map["flags"] = "flags"
                                self._children_yang_names.add("flags")
                                self._segment_path = lambda: "label-rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject, ['label', 'is_label_variable_length', 'variable_length_label'], name, value)


                            class Flags(Entity):
                                """
                                The RRO Subobject Label Flags
                                
                                .. attribute:: is_global_label
                                
                                	Label is Global across all interfaces
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags, self).__init__()

                                    self.yang_name = "flags"
                                    self.yang_parent_name = "label-rro-sub-object"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_global_label', YLeaf(YType.boolean, 'is-global-label')),
                                    ])
                                    self.is_global_label = None
                                    self._segment_path = lambda: "flags"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/label-rro-sub-object/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags, ['is_global_label'], name, value)


                        class UnnumberedRroSubObject(Entity):
                            """
                            Unnumbered RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Unnumbered Flags
                            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags>`
                            
                            .. attribute:: interface_address
                            
                            	The RRO Interface Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: interface_id
                            
                            	The RRO Interface ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject, self).__init__()

                                self.yang_name = "unnumbered-rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("flags", ("flags", RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('interface_address', YLeaf(YType.str, 'interface-address')),
                                    ('interface_id', YLeaf(YType.uint32, 'interface-id')),
                                ])
                                self.interface_address = None
                                self.interface_id = None

                                self.flags = RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags()
                                self.flags.parent = self
                                self._children_name_map["flags"] = "flags"
                                self._children_yang_names.add("flags")
                                self._segment_path = lambda: "unnumbered-rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject, ['interface_address', 'interface_id'], name, value)


                            class Flags(Entity):
                                """
                                The RRO Subobject Unnumbered Flags
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\: bool
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags, self).__init__()

                                    self.yang_name = "flags"
                                    self.yang_parent_name = "unnumbered-rro-sub-object"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_protection_available', YLeaf(YType.boolean, 'is-protection-available')),
                                        ('is_protection_in_use', YLeaf(YType.boolean, 'is-protection-in-use')),
                                        ('is_bandwidth_protected', YLeaf(YType.boolean, 'is-bandwidth-protected')),
                                        ('is_node_protection_available', YLeaf(YType.boolean, 'is-node-protection-available')),
                                        ('is_node_id', YLeaf(YType.boolean, 'is-node-id')),
                                    ])
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_protection_available = None
                                    self.is_node_id = None
                                    self._segment_path = lambda: "flags"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/unnumbered-rro-sub-object/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags, ['is_protection_available', 'is_protection_in_use', 'is_bandwidth_protected', 'is_node_protection_available', 'is_node_id'], name, value)


                        class SrlgRroSubObject(Entity):
                            """
                            SRLG RRO Sub Object
                            
                            .. attribute:: srl_gs
                            
                            	The RRO Subobject SRLGs
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject, self).__init__()

                                self.yang_name = "srlg-rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('srl_gs', YLeafList(YType.uint32, 'srl-gs')),
                                ])
                                self.srl_gs = []
                                self._segment_path = lambda: "srlg-rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(RsvpStandby.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject, ['srl_gs'], name, value)


    class HelloInstanceDetails(Entity):
        """
        Table of detailed info about hello instances
        
        .. attribute:: hello_instance_detail
        
        	Detailed info for a single hello instance
        	**type**\: list of  		 :py:class:`HelloInstanceDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInstanceDetails.HelloInstanceDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.HelloInstanceDetails, self).__init__()

            self.yang_name = "hello-instance-details"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("hello-instance-detail", ("hello_instance_detail", RsvpStandby.HelloInstanceDetails.HelloInstanceDetail))])
            self._leafs = OrderedDict()

            self.hello_instance_detail = YList(self)
            self._segment_path = lambda: "hello-instance-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.HelloInstanceDetails, [], name, value)


        class HelloInstanceDetail(Entity):
            """
            Detailed info for a single hello instance
            
            .. attribute:: source_address  (key)
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address  (key)
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: up_time
            
            	Hello up time
            	**type**\:  :py:class:`UpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.UpTime>`
            
            .. attribute:: communication_lost_time
            
            	Time when communication was lost
            	**type**\:  :py:class:`CommunicationLostTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime>`
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: hello_instance_owner
            
            	Hello instance owner
            	**type**\:  :py:class:`RsvpMgmtHelloInstanceOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstanceOwner>`
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor Hello state
            	**type**\:  :py:class:`RsvpMgmtHelloState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloState>`
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:  :py:class:`RsvpMgmtHelloInstance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstance>`
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: hello_interval
            
            	Hello Interval
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: missed_acks_allowed
            
            	Number of missed Hello allowed
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: source_instance
            
            	Source Instance
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: destination_instance
            
            	Destination Instance
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: communication_lost_reason
            
            	Reason why communication was lost
            	**type**\:  :py:class:`RsvpMgmtHelloDownReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloDownReason>`
            
            .. attribute:: total_communication_lost
            
            	Total number of times communication got lost
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_hello_missed
            
            	Lost Comm. Hello missed count
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_wrong_source_inst
            
            	Count of lost comm. due to wrong Source Inst
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_wrong_destination_inst
            
            	Count of lost comm. due to wrong Destination Inst
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_interface_down
            
            	Count of lost comm. due to interface down
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_neighbor_disabled_hello
            
            	Count of lost comm. due to nbor disabling Hellos
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: hello_messages_sent
            
            	Number of hello messages sent
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: hello_messages_received
            
            	Number of hello messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: hello_request_suppressed
            
            	Count of Hello Requests suppessed
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.HelloInstanceDetails.HelloInstanceDetail, self).__init__()

                self.yang_name = "hello-instance-detail"
                self.yang_parent_name = "hello-instance-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['source_address','destination_address']
                self._child_container_classes = OrderedDict([("up-time", ("up_time", RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.UpTime)), ("communication-lost-time", ("communication_lost_time", RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('source_address_xr', YLeaf(YType.str, 'source-address-xr')),
                    ('destination_address_xr', YLeaf(YType.str, 'destination-address-xr')),
                    ('hello_instance_owner', YLeaf(YType.enumeration, 'hello-instance-owner')),
                    ('neighbor_hello_state', YLeaf(YType.enumeration, 'neighbor-hello-state')),
                    ('instance_type', YLeaf(YType.enumeration, 'instance-type')),
                    ('hello_interface', YLeaf(YType.str, 'hello-interface')),
                    ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                    ('missed_acks_allowed', YLeaf(YType.uint32, 'missed-acks-allowed')),
                    ('source_instance', YLeaf(YType.uint32, 'source-instance')),
                    ('destination_instance', YLeaf(YType.uint32, 'destination-instance')),
                    ('communication_lost_reason', YLeaf(YType.enumeration, 'communication-lost-reason')),
                    ('total_communication_lost', YLeaf(YType.uint16, 'total-communication-lost')),
                    ('communication_lost_hello_missed', YLeaf(YType.uint16, 'communication-lost-hello-missed')),
                    ('communication_lost_wrong_source_inst', YLeaf(YType.uint16, 'communication-lost-wrong-source-inst')),
                    ('communication_lost_wrong_destination_inst', YLeaf(YType.uint16, 'communication-lost-wrong-destination-inst')),
                    ('communication_lost_interface_down', YLeaf(YType.uint16, 'communication-lost-interface-down')),
                    ('communication_lost_neighbor_disabled_hello', YLeaf(YType.uint16, 'communication-lost-neighbor-disabled-hello')),
                    ('hello_messages_sent', YLeaf(YType.uint64, 'hello-messages-sent')),
                    ('hello_messages_received', YLeaf(YType.uint64, 'hello-messages-received')),
                    ('hello_request_suppressed', YLeaf(YType.uint64, 'hello-request-suppressed')),
                ])
                self.source_address = None
                self.destination_address = None
                self.source_address_xr = None
                self.destination_address_xr = None
                self.hello_instance_owner = None
                self.neighbor_hello_state = None
                self.instance_type = None
                self.hello_interface = None
                self.hello_interval = None
                self.missed_acks_allowed = None
                self.source_instance = None
                self.destination_instance = None
                self.communication_lost_reason = None
                self.total_communication_lost = None
                self.communication_lost_hello_missed = None
                self.communication_lost_wrong_source_inst = None
                self.communication_lost_wrong_destination_inst = None
                self.communication_lost_interface_down = None
                self.communication_lost_neighbor_disabled_hello = None
                self.hello_messages_sent = None
                self.hello_messages_received = None
                self.hello_request_suppressed = None

                self.up_time = RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.UpTime()
                self.up_time.parent = self
                self._children_name_map["up_time"] = "up-time"
                self._children_yang_names.add("up-time")

                self.communication_lost_time = RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime()
                self.communication_lost_time.parent = self
                self._children_name_map["communication_lost_time"] = "communication-lost-time"
                self._children_yang_names.add("communication-lost-time")
                self._segment_path = lambda: "hello-instance-detail" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-instance-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.HelloInstanceDetails.HelloInstanceDetail, ['source_address', 'destination_address', 'source_address_xr', 'destination_address_xr', 'hello_instance_owner', 'neighbor_hello_state', 'instance_type', 'hello_interface', 'hello_interval', 'missed_acks_allowed', 'source_instance', 'destination_instance', 'communication_lost_reason', 'total_communication_lost', 'communication_lost_hello_missed', 'communication_lost_wrong_source_inst', 'communication_lost_wrong_destination_inst', 'communication_lost_interface_down', 'communication_lost_neighbor_disabled_hello', 'hello_messages_sent', 'hello_messages_received', 'hello_request_suppressed'], name, value)


            class UpTime(Entity):
                """
                Hello up time
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.UpTime, self).__init__()

                    self.yang_name = "up-time"
                    self.yang_parent_name = "hello-instance-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "up-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.UpTime, ['seconds', 'nanoseconds'], name, value)


            class CommunicationLostTime(Entity):
                """
                Time when communication was lost
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime, self).__init__()

                    self.yang_name = "communication-lost-time"
                    self.yang_parent_name = "hello-instance-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "communication-lost-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime, ['seconds', 'nanoseconds'], name, value)


    class GlobalNeighborDetails(Entity):
        """
        Table of detailed info about global neighbors
        
        .. attribute:: global_neighbor_detail
        
        	Detail info for a single global neighbor
        	**type**\: list of  		 :py:class:`GlobalNeighborDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.GlobalNeighborDetails, self).__init__()

            self.yang_name = "global-neighbor-details"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("global-neighbor-detail", ("global_neighbor_detail", RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail))])
            self._leafs = OrderedDict()

            self.global_neighbor_detail = YList(self)
            self._segment_path = lambda: "global-neighbor-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.GlobalNeighborDetails, [], name, value)


        class GlobalNeighborDetail(Entity):
            """
            Detail info for a single global neighbor
            
            .. attribute:: neighbor_address  (key)
            
            	Address of global neighbor
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: global_neighbor_flags
            
            	Global Neighbor Flags
            	**type**\:  :py:class:`GlobalNeighborFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags>`
            
            .. attribute:: restart_time_left
            
            	How much restart time remains
            	**type**\:  :py:class:`RestartTimeLeft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft>`
            
            .. attribute:: restart_timer_expiry_time
            
            	When will restart timer expire
            	**type**\:  :py:class:`RestartTimerExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime>`
            
            .. attribute:: recovery_time_left
            
            	How much recovery timer remains
            	**type**\:  :py:class:`RecoveryTimeLeft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft>`
            
            .. attribute:: recovery_timer_exp_time
            
            	Time at which recovery timer will expire
            	**type**\:  :py:class:`RecoveryTimerExpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime>`
            
            .. attribute:: is_gr_enabled
            
            	Is GR enabled
            	**type**\: bool
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: restart_state
            
            	Current restart state
            	**type**\:  :py:class:`RsvpMgmtRestartState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRestartState>`
            
            .. attribute:: restart_time
            
            	GR Restart Time (milliseconds)
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: is_restart_timer_running
            
            	Is GR restart timer running
            	**type**\: bool
            
            .. attribute:: recovery_time
            
            	GR Recovery Time (milliseconds)
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: is_recovery_timer_running
            
            	Is RSVP recovery timer running
            	**type**\: bool
            
            .. attribute:: hello_interval
            
            	Hello Interval (milliseconds)
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: missed_hellos
            
            	Hello missed count
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: pending_states
            
            	Number of pending states for this neighbor
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: local_node_address
            
            	Local node address
            	**type**\: list of str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_neighbor
            
            	Interface Neighbor List
            	**type**\: list of str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor's hello state
            	**type**\: list of   :py:class:`RsvpMgmtHelloState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloState>`
            
            .. attribute:: lost_communication_reason
            
            	Reason why communication was lost
            	**type**\: list of   :py:class:`RsvpMgmtHelloDownReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloDownReason>`
            
            .. attribute:: lost_communication_total
            
            	Total number of times communication got lost
            	**type**\: list of int
            
            	**range:** 0..65535
            
            .. attribute:: up_time
            
            	Hello up time
            	**type**\: list of  		 :py:class:`UpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.UpTime>`
            
            .. attribute:: lost_communication_time
            
            	Time when communication was lost
            	**type**\: list of  		 :py:class:`LostCommunicationTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.LostCommunicationTime>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail, self).__init__()

                self.yang_name = "global-neighbor-detail"
                self.yang_parent_name = "global-neighbor-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['neighbor_address']
                self._child_container_classes = OrderedDict([("global-neighbor-flags", ("global_neighbor_flags", RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags)), ("restart-time-left", ("restart_time_left", RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft)), ("restart-timer-expiry-time", ("restart_timer_expiry_time", RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime)), ("recovery-time-left", ("recovery_time_left", RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft)), ("recovery-timer-exp-time", ("recovery_timer_exp_time", RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime))])
                self._child_list_classes = OrderedDict([("up-time", ("up_time", RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.UpTime)), ("lost-communication-time", ("lost_communication_time", RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.LostCommunicationTime))])
                self._leafs = OrderedDict([
                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                    ('is_gr_enabled', YLeaf(YType.boolean, 'is-gr-enabled')),
                    ('node_address', YLeaf(YType.str, 'node-address')),
                    ('restart_state', YLeaf(YType.enumeration, 'restart-state')),
                    ('restart_time', YLeaf(YType.uint32, 'restart-time')),
                    ('is_restart_timer_running', YLeaf(YType.boolean, 'is-restart-timer-running')),
                    ('recovery_time', YLeaf(YType.uint32, 'recovery-time')),
                    ('is_recovery_timer_running', YLeaf(YType.boolean, 'is-recovery-timer-running')),
                    ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                    ('missed_hellos', YLeaf(YType.uint8, 'missed-hellos')),
                    ('pending_states', YLeaf(YType.uint32, 'pending-states')),
                    ('local_node_address', YLeafList(YType.str, 'local-node-address')),
                    ('interface_neighbor', YLeafList(YType.str, 'interface-neighbor')),
                    ('neighbor_hello_state', YLeafList(YType.enumeration, 'neighbor-hello-state')),
                    ('lost_communication_reason', YLeafList(YType.enumeration, 'lost-communication-reason')),
                    ('lost_communication_total', YLeafList(YType.uint16, 'lost-communication-total')),
                ])
                self.neighbor_address = None
                self.is_gr_enabled = None
                self.node_address = None
                self.restart_state = None
                self.restart_time = None
                self.is_restart_timer_running = None
                self.recovery_time = None
                self.is_recovery_timer_running = None
                self.hello_interval = None
                self.missed_hellos = None
                self.pending_states = None
                self.local_node_address = []
                self.interface_neighbor = []
                self.neighbor_hello_state = []
                self.lost_communication_reason = []
                self.lost_communication_total = []

                self.global_neighbor_flags = RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags()
                self.global_neighbor_flags.parent = self
                self._children_name_map["global_neighbor_flags"] = "global-neighbor-flags"
                self._children_yang_names.add("global-neighbor-flags")

                self.restart_time_left = RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft()
                self.restart_time_left.parent = self
                self._children_name_map["restart_time_left"] = "restart-time-left"
                self._children_yang_names.add("restart-time-left")

                self.restart_timer_expiry_time = RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime()
                self.restart_timer_expiry_time.parent = self
                self._children_name_map["restart_timer_expiry_time"] = "restart-timer-expiry-time"
                self._children_yang_names.add("restart-timer-expiry-time")

                self.recovery_time_left = RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft()
                self.recovery_time_left.parent = self
                self._children_name_map["recovery_time_left"] = "recovery-time-left"
                self._children_yang_names.add("recovery-time-left")

                self.recovery_timer_exp_time = RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime()
                self.recovery_timer_exp_time.parent = self
                self._children_name_map["recovery_timer_exp_time"] = "recovery-timer-exp-time"
                self._children_yang_names.add("recovery-timer-exp-time")

                self.up_time = YList(self)
                self.lost_communication_time = YList(self)
                self._segment_path = lambda: "global-neighbor-detail" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail, ['neighbor_address', 'is_gr_enabled', 'node_address', 'restart_state', 'restart_time', 'is_restart_timer_running', 'recovery_time', 'is_recovery_timer_running', 'hello_interval', 'missed_hellos', 'pending_states', 'local_node_address', 'interface_neighbor', 'neighbor_hello_state', 'lost_communication_reason', 'lost_communication_total'], name, value)


            class GlobalNeighborFlags(Entity):
                """
                Global Neighbor Flags
                
                .. attribute:: is_application_ouni
                
                	OUNI Application
                	**type**\: bool
                
                .. attribute:: is_application_mpls
                
                	MPLS Application
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags, self).__init__()

                    self.yang_name = "global-neighbor-flags"
                    self.yang_parent_name = "global-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_application_ouni', YLeaf(YType.boolean, 'is-application-ouni')),
                        ('is_application_mpls', YLeaf(YType.boolean, 'is-application-mpls')),
                    ])
                    self.is_application_ouni = None
                    self.is_application_mpls = None
                    self._segment_path = lambda: "global-neighbor-flags"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags, ['is_application_ouni', 'is_application_mpls'], name, value)


            class RestartTimeLeft(Entity):
                """
                How much restart time remains
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft, self).__init__()

                    self.yang_name = "restart-time-left"
                    self.yang_parent_name = "global-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "restart-time-left"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft, ['seconds', 'nanoseconds'], name, value)


            class RestartTimerExpiryTime(Entity):
                """
                When will restart timer expire
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime, self).__init__()

                    self.yang_name = "restart-timer-expiry-time"
                    self.yang_parent_name = "global-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "restart-timer-expiry-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime, ['seconds', 'nanoseconds'], name, value)


            class RecoveryTimeLeft(Entity):
                """
                How much recovery timer remains
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft, self).__init__()

                    self.yang_name = "recovery-time-left"
                    self.yang_parent_name = "global-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "recovery-time-left"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft, ['seconds', 'nanoseconds'], name, value)


            class RecoveryTimerExpTime(Entity):
                """
                Time at which recovery timer will expire
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime, self).__init__()

                    self.yang_name = "recovery-timer-exp-time"
                    self.yang_parent_name = "global-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "recovery-timer-exp-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime, ['seconds', 'nanoseconds'], name, value)


            class UpTime(Entity):
                """
                Hello up time
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.UpTime, self).__init__()

                    self.yang_name = "up-time"
                    self.yang_parent_name = "global-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "up-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.UpTime, ['seconds', 'nanoseconds'], name, value)


            class LostCommunicationTime(Entity):
                """
                Time when communication was lost
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.LostCommunicationTime, self).__init__()

                    self.yang_name = "lost-communication-time"
                    self.yang_parent_name = "global-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "lost-communication-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.GlobalNeighborDetails.GlobalNeighborDetail.LostCommunicationTime, ['seconds', 'nanoseconds'], name, value)


    class PsbBriefs(Entity):
        """
        Table of brief info about path state blocks
        
        .. attribute:: psb_brief
        
        	Brief info for a single path state block
        	**type**\: list of  		 :py:class:`PsbBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.PsbBriefs, self).__init__()

            self.yang_name = "psb-briefs"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("psb-brief", ("psb_brief", RsvpStandby.PsbBriefs.PsbBrief))])
            self._leafs = OrderedDict()

            self.psb_brief = YList(self)
            self._segment_path = lambda: "psb-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.PsbBriefs, [], name, value)


        class PsbBrief(Entity):
            """
            Brief info for a single path state block
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.S2LSubLsp>`
            
            .. attribute:: template
            
            	RSVP Template
            	**type**\:  :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Template>`
            
            .. attribute:: session_attribute
            
            	RSVP Session Attribute
            	**type**\:  :py:class:`SessionAttribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute>`
            
            .. attribute:: traffic_spec
            
            	RSVP Traffic Spec Info
            	**type**\:  :py:class:`TrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.TrafficSpec>`
            
            .. attribute:: generic_traffic_spec
            
            	RSVP Generic Traffic Spec Info
            	**type**\:  :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec>`
            
            .. attribute:: input_interface
            
            	Path Input Interface
            	**type**\: str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.PsbBriefs.PsbBrief, self).__init__()

                self.yang_name = "psb-brief"
                self.yang_parent_name = "psb-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", RsvpStandby.PsbBriefs.PsbBrief.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", RsvpStandby.PsbBriefs.PsbBrief.S2LSubLsp)), ("template", ("template", RsvpStandby.PsbBriefs.PsbBrief.Template)), ("session-attribute", ("session_attribute", RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute)), ("traffic-spec", ("traffic_spec", RsvpStandby.PsbBriefs.PsbBrief.TrafficSpec)), ("generic-traffic-spec", ("generic_traffic_spec", RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('input_interface', YLeaf(YType.str, 'input-interface')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.input_interface = None

                self.session = RsvpStandby.PsbBriefs.PsbBrief.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = RsvpStandby.PsbBriefs.PsbBrief.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.template = RsvpStandby.PsbBriefs.PsbBrief.Template()
                self.template.parent = self
                self._children_name_map["template"] = "template"
                self._children_yang_names.add("template")

                self.session_attribute = RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute()
                self.session_attribute.parent = self
                self._children_name_map["session_attribute"] = "session-attribute"
                self._children_yang_names.add("session-attribute")

                self.traffic_spec = RsvpStandby.PsbBriefs.PsbBrief.TrafficSpec()
                self.traffic_spec.parent = self
                self._children_name_map["traffic_spec"] = "traffic-spec"
                self._children_yang_names.add("traffic-spec")

                self.generic_traffic_spec = RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec()
                self.generic_traffic_spec.parent = self
                self._children_name_map["generic_traffic_spec"] = "generic-traffic-spec"
                self._children_yang_names.add("generic-traffic-spec")
                self._segment_path = lambda: "psb-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'input_interface'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbBriefs.PsbBrief.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "psb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbBriefs.PsbBrief.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "psb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.S2LSubLsp, ['s2l_destination_address'], name, value)


            class Template(Entity):
                """
                RSVP Template
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:  :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbBriefs.PsbBrief.Template, self).__init__()

                    self.yang_name = "template"
                    self.yang_parent_name = "psb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-filter", ("rsvp_filter", RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_filter = RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter()
                    self.rsvp_filter.parent = self
                    self._children_name_map["rsvp_filter"] = "rsvp-filter"
                    self._children_yang_names.add("rsvp-filter")
                    self._segment_path = lambda: "template"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/%s" % self._segment_path()


                class RsvpFilter(Entity):
                    """
                    RSVP Filter
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:  :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:  :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:  :py:class:`RsvpMgmtFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilter>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter, self).__init__()

                        self.yang_name = "rsvp-filter"
                        self.yang_parent_name = "template"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("udp-ipv4-session", ("udp_ipv4_session", RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session)), ("p2mp-ipv4-session", ("p2mp_ipv4_session", RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('filter_type', YLeaf(YType.enumeration, 'filter-type')),
                        ])
                        self.filter_type = None

                        self.udp_ipv4_session = RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self
                        self._children_name_map["udp_ipv4_session"] = "udp-ipv4-session"
                        self._children_yang_names.add("udp-ipv4-session")

                        self.p2mp_ipv4_session = RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self._children_name_map["p2mp_ipv4_session"] = "p2mp-ipv4-session"
                        self._children_yang_names.add("p2mp-ipv4-session")
                        self._segment_path = lambda: "rsvp-filter"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/template/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter, ['filter_type'], name, value)


                    class UdpIpv4Session(Entity):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session, self).__init__()

                            self.yang_name = "udp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self._segment_path = lambda: "udp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/template/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session, ['source_address', 'source_port'], name, value)


                    class P2MpIpv4Session(Entity):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session, self).__init__()

                            self.yang_name = "p2mp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                                ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                                ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self.p2mp_sub_group_origin = None
                            self.sub_group_id = None
                            self._segment_path = lambda: "p2mp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/template/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session, ['source_address', 'source_port', 'p2mp_sub_group_origin', 'sub_group_id'], name, value)


            class SessionAttribute(Entity):
                """
                RSVP Session Attribute
                
                .. attribute:: sess_attribute_flags
                
                	Session Attributes
                	**type**\:  :py:class:`SessAttributeFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags>`
                
                .. attribute:: setup_priority
                
                	Setup Priority
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: reservation_priority
                
                	Reservation Priority
                	**type**\: int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute, self).__init__()

                    self.yang_name = "session-attribute"
                    self.yang_parent_name = "psb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("sess-attribute-flags", ("sess_attribute_flags", RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('setup_priority', YLeaf(YType.uint8, 'setup-priority')),
                        ('reservation_priority', YLeaf(YType.uint8, 'reservation-priority')),
                    ])
                    self.setup_priority = None
                    self.reservation_priority = None

                    self.sess_attribute_flags = RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags()
                    self.sess_attribute_flags.parent = self
                    self._children_name_map["sess_attribute_flags"] = "sess-attribute-flags"
                    self._children_yang_names.add("sess-attribute-flags")
                    self._segment_path = lambda: "session-attribute"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute, ['setup_priority', 'reservation_priority'], name, value)


                class SessAttributeFlags(Entity):
                    """
                    Session Attributes
                    
                    .. attribute:: is_local_protect
                    
                    	Local Protection
                    	**type**\: bool
                    
                    .. attribute:: is_node_protect
                    
                    	Node Protection
                    	**type**\: bool
                    
                    .. attribute:: is_bandwidth_protect
                    
                    	Bandwidth Protection
                    	**type**\: bool
                    
                    .. attribute:: is_record_labels
                    
                    	Records Labels
                    	**type**\: bool
                    
                    .. attribute:: is_shared_explicit_requested
                    
                    	Shared Explicit Requested
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags, self).__init__()

                        self.yang_name = "sess-attribute-flags"
                        self.yang_parent_name = "session-attribute"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_local_protect', YLeaf(YType.boolean, 'is-local-protect')),
                            ('is_node_protect', YLeaf(YType.boolean, 'is-node-protect')),
                            ('is_bandwidth_protect', YLeaf(YType.boolean, 'is-bandwidth-protect')),
                            ('is_record_labels', YLeaf(YType.boolean, 'is-record-labels')),
                            ('is_shared_explicit_requested', YLeaf(YType.boolean, 'is-shared-explicit-requested')),
                        ])
                        self.is_local_protect = None
                        self.is_node_protect = None
                        self.is_bandwidth_protect = None
                        self.is_record_labels = None
                        self.is_shared_explicit_requested = None
                        self._segment_path = lambda: "sess-attribute-flags"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session-attribute/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags, ['is_local_protect', 'is_node_protect', 'is_bandwidth_protect', 'is_record_labels', 'is_shared_explicit_requested'], name, value)


            class TrafficSpec(Entity):
                """
                RSVP Traffic Spec Info
                
                .. attribute:: traffic_average_rate
                
                	Traffic Average Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_max_burst
                
                	Traffic Maximum Burst
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: traffic_peak_rate
                
                	Traffic Peak Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_min_unit
                
                	Traffic Minimum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_max_unit
                
                	Traffic Maximum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbBriefs.PsbBrief.TrafficSpec, self).__init__()

                    self.yang_name = "traffic-spec"
                    self.yang_parent_name = "psb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                        ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                        ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                        ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                        ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                    ])
                    self.traffic_average_rate = None
                    self.traffic_max_burst = None
                    self.traffic_peak_rate = None
                    self.traffic_min_unit = None
                    self.traffic_max_unit = None
                    self._segment_path = lambda: "traffic-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.TrafficSpec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


            class GenericTrafficSpec(Entity):
                """
                RSVP Generic Traffic Spec Info
                
                .. attribute:: g709otn_tspec
                
                	G709 OTN Sender Tspec
                	**type**\:  :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec>`
                
                .. attribute:: intsrv_tspec
                
                	Integrated Services Sender Tspec
                	**type**\:  :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec>`
                
                .. attribute:: tspec_type
                
                	TspecType
                	**type**\:  :py:class:`RsvpMgmtTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec, self).__init__()

                    self.yang_name = "generic-traffic-spec"
                    self.yang_parent_name = "psb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("g709otn-tspec", ("g709otn_tspec", RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec)), ("intsrv-tspec", ("intsrv_tspec", RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('tspec_type', YLeaf(YType.enumeration, 'tspec-type')),
                    ])
                    self.tspec_type = None

                    self.g709otn_tspec = RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec()
                    self.g709otn_tspec.parent = self
                    self._children_name_map["g709otn_tspec"] = "g709otn-tspec"
                    self._children_yang_names.add("g709otn-tspec")

                    self.intsrv_tspec = RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec()
                    self.intsrv_tspec.parent = self
                    self._children_name_map["intsrv_tspec"] = "intsrv-tspec"
                    self._children_yang_names.add("intsrv-tspec")
                    self._segment_path = lambda: "generic-traffic-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec, ['tspec_type'], name, value)


                class G709OtnTspec(Entity):
                    """
                    G709 OTN Sender Tspec
                    
                    .. attribute:: traffic_signal_type
                    
                    	G709 OTN Traffic Signal Type (Refer G709 v3)
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: traffic_nvc
                    
                    	G709 OTN Traffic NVC
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_multiplier
                    
                    	G709 OTN Traffic Multiplier
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_bit_rate
                    
                    	G709 OTN Traffic Bit Rate
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec, self).__init__()

                        self.yang_name = "g709otn-tspec"
                        self.yang_parent_name = "generic-traffic-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('traffic_signal_type', YLeaf(YType.uint8, 'traffic-signal-type')),
                            ('traffic_nvc', YLeaf(YType.uint16, 'traffic-nvc')),
                            ('traffic_multiplier', YLeaf(YType.uint16, 'traffic-multiplier')),
                            ('traffic_bit_rate', YLeaf(YType.uint64, 'traffic-bit-rate')),
                        ])
                        self.traffic_signal_type = None
                        self.traffic_nvc = None
                        self.traffic_multiplier = None
                        self.traffic_bit_rate = None
                        self._segment_path = lambda: "g709otn-tspec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/generic-traffic-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec, ['traffic_signal_type', 'traffic_nvc', 'traffic_multiplier', 'traffic_bit_rate'], name, value)


                class IntsrvTspec(Entity):
                    """
                    Integrated Services Sender Tspec
                    
                    .. attribute:: traffic_average_rate
                    
                    	Traffic Average Rate in bytes per second
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_max_burst
                    
                    	Traffic Maximum Burst
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_peak_rate
                    
                    	Traffic Peak Rate in bytes per second
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_min_unit
                    
                    	Traffic Minimum Unit
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_max_unit
                    
                    	Traffic Maximum Unit
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec, self).__init__()

                        self.yang_name = "intsrv-tspec"
                        self.yang_parent_name = "generic-traffic-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                            ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                            ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                            ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                            ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                        ])
                        self.traffic_average_rate = None
                        self.traffic_max_burst = None
                        self.traffic_peak_rate = None
                        self.traffic_min_unit = None
                        self.traffic_max_unit = None
                        self._segment_path = lambda: "intsrv-tspec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/generic-traffic-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(RsvpStandby.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


    class GlobalNeighborBriefs(Entity):
        """
        Table of brief info about global neighbors
        
        .. attribute:: global_neighbor_brief
        
        	Brief info for a single global neighbor
        	**type**\: list of  		 :py:class:`GlobalNeighborBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(RsvpStandby.GlobalNeighborBriefs, self).__init__()

            self.yang_name = "global-neighbor-briefs"
            self.yang_parent_name = "rsvp-standby"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("global-neighbor-brief", ("global_neighbor_brief", RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief))])
            self._leafs = OrderedDict()

            self.global_neighbor_brief = YList(self)
            self._segment_path = lambda: "global-neighbor-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(RsvpStandby.GlobalNeighborBriefs, [], name, value)


        class GlobalNeighborBrief(Entity):
            """
            Brief info for a single global neighbor
            
            .. attribute:: neighbor_address  (key)
            
            	Address of global neighbor
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: global_neighbor_flags
            
            	Global Neighbor Flags
            	**type**\:  :py:class:`GlobalNeighborFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags>`
            
            .. attribute:: is_gr_enabled
            
            	Is GR enabled
            	**type**\: bool
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: restart_state
            
            	Restart state
            	**type**\:  :py:class:`RsvpMgmtRestartState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRestartState>`
            
            .. attribute:: local_node_address
            
            	Local node address
            	**type**\: list of str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor Hello state
            	**type**\: list of   :py:class:`RsvpMgmtHelloState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloState>`
            
            .. attribute:: lost_communication_reason
            
            	Reason why communication was lost
            	**type**\: list of   :py:class:`RsvpMgmtHelloDownReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloDownReason>`
            
            .. attribute:: lost_communication_total
            
            	Total number of times communication got lost
            	**type**\: list of int
            
            	**range:** 0..65535
            
            .. attribute:: up_time
            
            	Time hellos have been up
            	**type**\: list of  		 :py:class:`UpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.UpTime>`
            
            .. attribute:: lost_communication_time
            
            	Time when communication was lost
            	**type**\: list of  		 :py:class:`LostCommunicationTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.LostCommunicationTime>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief, self).__init__()

                self.yang_name = "global-neighbor-brief"
                self.yang_parent_name = "global-neighbor-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['neighbor_address']
                self._child_container_classes = OrderedDict([("global-neighbor-flags", ("global_neighbor_flags", RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags))])
                self._child_list_classes = OrderedDict([("up-time", ("up_time", RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.UpTime)), ("lost-communication-time", ("lost_communication_time", RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.LostCommunicationTime))])
                self._leafs = OrderedDict([
                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                    ('is_gr_enabled', YLeaf(YType.boolean, 'is-gr-enabled')),
                    ('node_address', YLeaf(YType.str, 'node-address')),
                    ('restart_state', YLeaf(YType.enumeration, 'restart-state')),
                    ('local_node_address', YLeafList(YType.str, 'local-node-address')),
                    ('neighbor_hello_state', YLeafList(YType.enumeration, 'neighbor-hello-state')),
                    ('lost_communication_reason', YLeafList(YType.enumeration, 'lost-communication-reason')),
                    ('lost_communication_total', YLeafList(YType.uint16, 'lost-communication-total')),
                ])
                self.neighbor_address = None
                self.is_gr_enabled = None
                self.node_address = None
                self.restart_state = None
                self.local_node_address = []
                self.neighbor_hello_state = []
                self.lost_communication_reason = []
                self.lost_communication_total = []

                self.global_neighbor_flags = RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags()
                self.global_neighbor_flags.parent = self
                self._children_name_map["global_neighbor_flags"] = "global-neighbor-flags"
                self._children_yang_names.add("global-neighbor-flags")

                self.up_time = YList(self)
                self.lost_communication_time = YList(self)
                self._segment_path = lambda: "global-neighbor-brief" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief, ['neighbor_address', 'is_gr_enabled', 'node_address', 'restart_state', 'local_node_address', 'neighbor_hello_state', 'lost_communication_reason', 'lost_communication_total'], name, value)


            class GlobalNeighborFlags(Entity):
                """
                Global Neighbor Flags
                
                .. attribute:: is_application_ouni
                
                	OUNI Application
                	**type**\: bool
                
                .. attribute:: is_application_mpls
                
                	MPLS Application
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags, self).__init__()

                    self.yang_name = "global-neighbor-flags"
                    self.yang_parent_name = "global-neighbor-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_application_ouni', YLeaf(YType.boolean, 'is-application-ouni')),
                        ('is_application_mpls', YLeaf(YType.boolean, 'is-application-mpls')),
                    ])
                    self.is_application_ouni = None
                    self.is_application_mpls = None
                    self._segment_path = lambda: "global-neighbor-flags"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags, ['is_application_ouni', 'is_application_mpls'], name, value)


            class UpTime(Entity):
                """
                Time hellos have been up
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.UpTime, self).__init__()

                    self.yang_name = "up-time"
                    self.yang_parent_name = "global-neighbor-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "up-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.UpTime, ['seconds', 'nanoseconds'], name, value)


            class LostCommunicationTime(Entity):
                """
                Time when communication was lost
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.LostCommunicationTime, self).__init__()

                    self.yang_name = "lost-communication-time"
                    self.yang_parent_name = "global-neighbor-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "lost-communication-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(RsvpStandby.GlobalNeighborBriefs.GlobalNeighborBrief.LostCommunicationTime, ['seconds', 'nanoseconds'], name, value)

    def clone_ptr(self):
        self._top_entity = RsvpStandby()
        return self._top_entity

class Rsvp(Entity):
    """
    rsvp
    
    .. attribute:: issu
    
    	RSVP ISSU information
    	**type**\:  :py:class:`Issu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Issu>`
    
    .. attribute:: bw_pool_info
    
    	All B/W Pool info
    	**type**\:  :py:class:`BwPoolInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.BwPoolInfo>`
    
    .. attribute:: pxsb_details
    
    	Table of detailed PXSB info
    	**type**\:  :py:class:`PxsbDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails>`
    
    .. attribute:: rxsb_details
    
    	Table of detailed RXSB info
    	**type**\:  :py:class:`RxsbDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails>`
    
    .. attribute:: interface_neighbor_briefs
    
    	Table of brief info about I/F neighbors
    	**type**\:  :py:class:`InterfaceNeighborBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceNeighborBriefs>`
    
    .. attribute:: controller_summaries
    
    	Table of summary info about RSVP\-enabled controllers
    	**type**\:  :py:class:`ControllerSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerSummaries>`
    
    .. attribute:: authentication_briefs
    
    	Table for Authentication related information
    	**type**\:  :py:class:`AuthenticationBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationBriefs>`
    
    .. attribute:: session_briefs
    
    	Table of brief info about sessions
    	**type**\:  :py:class:`SessionBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs>`
    
    .. attribute:: psb_detaileds
    
    	Table of detailed info about path state blocks
    	**type**\:  :py:class:`PsbDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds>`
    
    .. attribute:: controller_detaileds
    
    	Table of detailed info about RSVP\-enabled controllers
    	**type**\:  :py:class:`ControllerDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds>`
    
    .. attribute:: frr_summary
    
    	Fast Re\-Route Summary State Information
    	**type**\:  :py:class:`FrrSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.FrrSummary>`
    
    .. attribute:: rsb_detaileds
    
    	Table of detailed info about reservation state blocks
    	**type**\:  :py:class:`RsbDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds>`
    
    .. attribute:: interface_summaries
    
    	Table of summary info about RSVP\-enabled interfaces
    	**type**\:  :py:class:`InterfaceSummaries <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceSummaries>`
    
    .. attribute:: hello_instance_briefs
    
    	Table of brief info about hello instances
    	**type**\:  :py:class:`HelloInstanceBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInstanceBriefs>`
    
    .. attribute:: authentication_details
    
    	Table for detailed authentication related information
    	**type**\:  :py:class:`AuthenticationDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails>`
    
    .. attribute:: rsb_briefs
    
    	Table of brief info about reservation state blocks
    	**type**\:  :py:class:`RsbBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs>`
    
    .. attribute:: open_config
    
    	OpenConfig info
    	**type**\:  :py:class:`OpenConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.OpenConfig>`
    
    .. attribute:: counters
    
    	Counters
    	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters>`
    
    .. attribute:: interface_detaileds
    
    	Table of detailed info about RSVP\-enabled interfaces
    	**type**\:  :py:class:`InterfaceDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds>`
    
    .. attribute:: controller_briefs
    
    	Table of brief info about RSVP\-enabled controller
    	**type**\:  :py:class:`ControllerBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerBriefs>`
    
    .. attribute:: graceful_restart
    
    	Info about graceful\-restart
    	**type**\:  :py:class:`GracefulRestart <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GracefulRestart>`
    
    .. attribute:: hello_interface_instance_briefs
    
    	Table of brief info about i/f\-based hello instances
    	**type**\:  :py:class:`HelloInterfaceInstanceBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInterfaceInstanceBriefs>`
    
    .. attribute:: hello_interface_instance_details
    
    	Table of detailed info about i/f\-based hello instances
    	**type**\:  :py:class:`HelloInterfaceInstanceDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInterfaceInstanceDetails>`
    
    .. attribute:: interface_neighbor_details
    
    	Table of detailed info about I/F neighbors
    	**type**\:  :py:class:`InterfaceNeighborDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceNeighborDetails>`
    
    .. attribute:: nsr
    
    	RSVP NSR information
    	**type**\:  :py:class:`Nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Nsr>`
    
    .. attribute:: summary
    
    	RSVP summary information
    	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary>`
    
    .. attribute:: frrs
    
    	Table of detailed info about Fast Re\-route states
    	**type**\:  :py:class:`Frrs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs>`
    
    .. attribute:: request_briefs
    
    	Table of brief info about requests
    	**type**\:  :py:class:`RequestBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs>`
    
    .. attribute:: request_details
    
    	Table of detail info about requests
    	**type**\:  :py:class:`RequestDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails>`
    
    .. attribute:: interface_briefs
    
    	Table of brief info about RSVP\-enabled interfaces
    	**type**\:  :py:class:`InterfaceBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceBriefs>`
    
    .. attribute:: session_detaileds
    
    	Table of detailed info about sessions
    	**type**\:  :py:class:`SessionDetaileds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds>`
    
    .. attribute:: hello_instance_details
    
    	Table of detailed info about hello instances
    	**type**\:  :py:class:`HelloInstanceDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInstanceDetails>`
    
    .. attribute:: global_neighbor_details
    
    	Table of detailed info about global neighbors
    	**type**\:  :py:class:`GlobalNeighborDetails <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails>`
    
    .. attribute:: psb_briefs
    
    	Table of brief info about path state blocks
    	**type**\:  :py:class:`PsbBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs>`
    
    .. attribute:: global_neighbor_briefs
    
    	Table of brief info about global neighbors
    	**type**\:  :py:class:`GlobalNeighborBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborBriefs>`
    
    

    """

    _prefix = 'ip-rsvp-oper'
    _revision = '2017-05-01'

    def __init__(self):
        super(Rsvp, self).__init__()
        self._top_entity = None

        self.yang_name = "rsvp"
        self.yang_parent_name = "Cisco-IOS-XR-ip-rsvp-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("issu", ("issu", Rsvp.Issu)), ("bw-pool-info", ("bw_pool_info", Rsvp.BwPoolInfo)), ("pxsb-details", ("pxsb_details", Rsvp.PxsbDetails)), ("rxsb-details", ("rxsb_details", Rsvp.RxsbDetails)), ("interface-neighbor-briefs", ("interface_neighbor_briefs", Rsvp.InterfaceNeighborBriefs)), ("controller-summaries", ("controller_summaries", Rsvp.ControllerSummaries)), ("authentication-briefs", ("authentication_briefs", Rsvp.AuthenticationBriefs)), ("session-briefs", ("session_briefs", Rsvp.SessionBriefs)), ("psb-detaileds", ("psb_detaileds", Rsvp.PsbDetaileds)), ("controller-detaileds", ("controller_detaileds", Rsvp.ControllerDetaileds)), ("frr-summary", ("frr_summary", Rsvp.FrrSummary)), ("rsb-detaileds", ("rsb_detaileds", Rsvp.RsbDetaileds)), ("interface-summaries", ("interface_summaries", Rsvp.InterfaceSummaries)), ("hello-instance-briefs", ("hello_instance_briefs", Rsvp.HelloInstanceBriefs)), ("authentication-details", ("authentication_details", Rsvp.AuthenticationDetails)), ("rsb-briefs", ("rsb_briefs", Rsvp.RsbBriefs)), ("open-config", ("open_config", Rsvp.OpenConfig)), ("counters", ("counters", Rsvp.Counters)), ("interface-detaileds", ("interface_detaileds", Rsvp.InterfaceDetaileds)), ("controller-briefs", ("controller_briefs", Rsvp.ControllerBriefs)), ("graceful-restart", ("graceful_restart", Rsvp.GracefulRestart)), ("hello-interface-instance-briefs", ("hello_interface_instance_briefs", Rsvp.HelloInterfaceInstanceBriefs)), ("hello-interface-instance-details", ("hello_interface_instance_details", Rsvp.HelloInterfaceInstanceDetails)), ("interface-neighbor-details", ("interface_neighbor_details", Rsvp.InterfaceNeighborDetails)), ("nsr", ("nsr", Rsvp.Nsr)), ("summary", ("summary", Rsvp.Summary)), ("frrs", ("frrs", Rsvp.Frrs)), ("request-briefs", ("request_briefs", Rsvp.RequestBriefs)), ("request-details", ("request_details", Rsvp.RequestDetails)), ("interface-briefs", ("interface_briefs", Rsvp.InterfaceBriefs)), ("session-detaileds", ("session_detaileds", Rsvp.SessionDetaileds)), ("hello-instance-details", ("hello_instance_details", Rsvp.HelloInstanceDetails)), ("global-neighbor-details", ("global_neighbor_details", Rsvp.GlobalNeighborDetails)), ("psb-briefs", ("psb_briefs", Rsvp.PsbBriefs)), ("global-neighbor-briefs", ("global_neighbor_briefs", Rsvp.GlobalNeighborBriefs))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.issu = Rsvp.Issu()
        self.issu.parent = self
        self._children_name_map["issu"] = "issu"
        self._children_yang_names.add("issu")

        self.bw_pool_info = Rsvp.BwPoolInfo()
        self.bw_pool_info.parent = self
        self._children_name_map["bw_pool_info"] = "bw-pool-info"
        self._children_yang_names.add("bw-pool-info")

        self.pxsb_details = Rsvp.PxsbDetails()
        self.pxsb_details.parent = self
        self._children_name_map["pxsb_details"] = "pxsb-details"
        self._children_yang_names.add("pxsb-details")

        self.rxsb_details = Rsvp.RxsbDetails()
        self.rxsb_details.parent = self
        self._children_name_map["rxsb_details"] = "rxsb-details"
        self._children_yang_names.add("rxsb-details")

        self.interface_neighbor_briefs = Rsvp.InterfaceNeighborBriefs()
        self.interface_neighbor_briefs.parent = self
        self._children_name_map["interface_neighbor_briefs"] = "interface-neighbor-briefs"
        self._children_yang_names.add("interface-neighbor-briefs")

        self.controller_summaries = Rsvp.ControllerSummaries()
        self.controller_summaries.parent = self
        self._children_name_map["controller_summaries"] = "controller-summaries"
        self._children_yang_names.add("controller-summaries")

        self.authentication_briefs = Rsvp.AuthenticationBriefs()
        self.authentication_briefs.parent = self
        self._children_name_map["authentication_briefs"] = "authentication-briefs"
        self._children_yang_names.add("authentication-briefs")

        self.session_briefs = Rsvp.SessionBriefs()
        self.session_briefs.parent = self
        self._children_name_map["session_briefs"] = "session-briefs"
        self._children_yang_names.add("session-briefs")

        self.psb_detaileds = Rsvp.PsbDetaileds()
        self.psb_detaileds.parent = self
        self._children_name_map["psb_detaileds"] = "psb-detaileds"
        self._children_yang_names.add("psb-detaileds")

        self.controller_detaileds = Rsvp.ControllerDetaileds()
        self.controller_detaileds.parent = self
        self._children_name_map["controller_detaileds"] = "controller-detaileds"
        self._children_yang_names.add("controller-detaileds")

        self.frr_summary = Rsvp.FrrSummary()
        self.frr_summary.parent = self
        self._children_name_map["frr_summary"] = "frr-summary"
        self._children_yang_names.add("frr-summary")

        self.rsb_detaileds = Rsvp.RsbDetaileds()
        self.rsb_detaileds.parent = self
        self._children_name_map["rsb_detaileds"] = "rsb-detaileds"
        self._children_yang_names.add("rsb-detaileds")

        self.interface_summaries = Rsvp.InterfaceSummaries()
        self.interface_summaries.parent = self
        self._children_name_map["interface_summaries"] = "interface-summaries"
        self._children_yang_names.add("interface-summaries")

        self.hello_instance_briefs = Rsvp.HelloInstanceBriefs()
        self.hello_instance_briefs.parent = self
        self._children_name_map["hello_instance_briefs"] = "hello-instance-briefs"
        self._children_yang_names.add("hello-instance-briefs")

        self.authentication_details = Rsvp.AuthenticationDetails()
        self.authentication_details.parent = self
        self._children_name_map["authentication_details"] = "authentication-details"
        self._children_yang_names.add("authentication-details")

        self.rsb_briefs = Rsvp.RsbBriefs()
        self.rsb_briefs.parent = self
        self._children_name_map["rsb_briefs"] = "rsb-briefs"
        self._children_yang_names.add("rsb-briefs")

        self.open_config = Rsvp.OpenConfig()
        self.open_config.parent = self
        self._children_name_map["open_config"] = "open-config"
        self._children_yang_names.add("open-config")

        self.counters = Rsvp.Counters()
        self.counters.parent = self
        self._children_name_map["counters"] = "counters"
        self._children_yang_names.add("counters")

        self.interface_detaileds = Rsvp.InterfaceDetaileds()
        self.interface_detaileds.parent = self
        self._children_name_map["interface_detaileds"] = "interface-detaileds"
        self._children_yang_names.add("interface-detaileds")

        self.controller_briefs = Rsvp.ControllerBriefs()
        self.controller_briefs.parent = self
        self._children_name_map["controller_briefs"] = "controller-briefs"
        self._children_yang_names.add("controller-briefs")

        self.graceful_restart = Rsvp.GracefulRestart()
        self.graceful_restart.parent = self
        self._children_name_map["graceful_restart"] = "graceful-restart"
        self._children_yang_names.add("graceful-restart")

        self.hello_interface_instance_briefs = Rsvp.HelloInterfaceInstanceBriefs()
        self.hello_interface_instance_briefs.parent = self
        self._children_name_map["hello_interface_instance_briefs"] = "hello-interface-instance-briefs"
        self._children_yang_names.add("hello-interface-instance-briefs")

        self.hello_interface_instance_details = Rsvp.HelloInterfaceInstanceDetails()
        self.hello_interface_instance_details.parent = self
        self._children_name_map["hello_interface_instance_details"] = "hello-interface-instance-details"
        self._children_yang_names.add("hello-interface-instance-details")

        self.interface_neighbor_details = Rsvp.InterfaceNeighborDetails()
        self.interface_neighbor_details.parent = self
        self._children_name_map["interface_neighbor_details"] = "interface-neighbor-details"
        self._children_yang_names.add("interface-neighbor-details")

        self.nsr = Rsvp.Nsr()
        self.nsr.parent = self
        self._children_name_map["nsr"] = "nsr"
        self._children_yang_names.add("nsr")

        self.summary = Rsvp.Summary()
        self.summary.parent = self
        self._children_name_map["summary"] = "summary"
        self._children_yang_names.add("summary")

        self.frrs = Rsvp.Frrs()
        self.frrs.parent = self
        self._children_name_map["frrs"] = "frrs"
        self._children_yang_names.add("frrs")

        self.request_briefs = Rsvp.RequestBriefs()
        self.request_briefs.parent = self
        self._children_name_map["request_briefs"] = "request-briefs"
        self._children_yang_names.add("request-briefs")

        self.request_details = Rsvp.RequestDetails()
        self.request_details.parent = self
        self._children_name_map["request_details"] = "request-details"
        self._children_yang_names.add("request-details")

        self.interface_briefs = Rsvp.InterfaceBriefs()
        self.interface_briefs.parent = self
        self._children_name_map["interface_briefs"] = "interface-briefs"
        self._children_yang_names.add("interface-briefs")

        self.session_detaileds = Rsvp.SessionDetaileds()
        self.session_detaileds.parent = self
        self._children_name_map["session_detaileds"] = "session-detaileds"
        self._children_yang_names.add("session-detaileds")

        self.hello_instance_details = Rsvp.HelloInstanceDetails()
        self.hello_instance_details.parent = self
        self._children_name_map["hello_instance_details"] = "hello-instance-details"
        self._children_yang_names.add("hello-instance-details")

        self.global_neighbor_details = Rsvp.GlobalNeighborDetails()
        self.global_neighbor_details.parent = self
        self._children_name_map["global_neighbor_details"] = "global-neighbor-details"
        self._children_yang_names.add("global-neighbor-details")

        self.psb_briefs = Rsvp.PsbBriefs()
        self.psb_briefs.parent = self
        self._children_name_map["psb_briefs"] = "psb-briefs"
        self._children_yang_names.add("psb-briefs")

        self.global_neighbor_briefs = Rsvp.GlobalNeighborBriefs()
        self.global_neighbor_briefs.parent = self
        self._children_name_map["global_neighbor_briefs"] = "global-neighbor-briefs"
        self._children_yang_names.add("global-neighbor-briefs")
        self._segment_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp"


    class Issu(Entity):
        """
        RSVP ISSU information
        
        .. attribute:: status
        
        	RSVP ISSU status information
        	**type**\:  :py:class:`Status <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Issu.Status>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.Issu, self).__init__()

            self.yang_name = "issu"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("status", ("status", Rsvp.Issu.Status))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.status = Rsvp.Issu.Status()
            self.status.parent = self
            self._children_name_map["status"] = "status"
            self._children_yang_names.add("status")
            self._segment_path = lambda: "issu"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()


        class Status(Entity):
            """
            RSVP ISSU status information
            
            .. attribute:: idt_status
            
            	IDT status
            	**type**\:  :py:class:`IdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Issu.Status.IdtStatus>`
            
            .. attribute:: previous_idt_status
            
            	Previous IDT status
            	**type**\:  :py:class:`PreviousIdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Issu.Status.PreviousIdtStatus>`
            
            .. attribute:: role
            
            	Process role
            	**type**\:  :py:class:`RsvpProcRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRole>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Issu.Status, self).__init__()

                self.yang_name = "status"
                self.yang_parent_name = "issu"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("idt-status", ("idt_status", Rsvp.Issu.Status.IdtStatus)), ("previous-idt-status", ("previous_idt_status", Rsvp.Issu.Status.PreviousIdtStatus))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('role', YLeaf(YType.enumeration, 'role')),
                ])
                self.role = None

                self.idt_status = Rsvp.Issu.Status.IdtStatus()
                self.idt_status.parent = self
                self._children_name_map["idt_status"] = "idt-status"
                self._children_yang_names.add("idt-status")

                self.previous_idt_status = Rsvp.Issu.Status.PreviousIdtStatus()
                self.previous_idt_status.parent = self
                self._children_name_map["previous_idt_status"] = "previous-idt-status"
                self._children_yang_names.add("previous-idt-status")
                self._segment_path = lambda: "status"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/issu/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.Issu.Status, ['role'], name, value)


            class IdtStatus(Entity):
                """
                IDT status
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:  :py:class:`RsvpSyncStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatus>`
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:  :py:class:`RsvpProcNsrNotReadyReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReason>`
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Issu.Status.IdtStatus, self).__init__()

                    self.yang_name = "idt-status"
                    self.yang_parent_name = "status"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sync_status', YLeaf(YType.enumeration, 'sync-status')),
                        ('not_ready_reason', YLeaf(YType.enumeration, 'not-ready-reason')),
                        ('idt_start_time', YLeaf(YType.uint32, 'idt-start-time')),
                        ('idt_end_time', YLeaf(YType.uint32, 'idt-end-time')),
                        ('declare_time', YLeaf(YType.uint32, 'declare-time')),
                        ('withdraw_time', YLeaf(YType.uint32, 'withdraw-time')),
                    ])
                    self.sync_status = None
                    self.not_ready_reason = None
                    self.idt_start_time = None
                    self.idt_end_time = None
                    self.declare_time = None
                    self.withdraw_time = None
                    self._segment_path = lambda: "idt-status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/issu/status/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Issu.Status.IdtStatus, ['sync_status', 'not_ready_reason', 'idt_start_time', 'idt_end_time', 'declare_time', 'withdraw_time'], name, value)


            class PreviousIdtStatus(Entity):
                """
                Previous IDT status
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:  :py:class:`RsvpSyncStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatus>`
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:  :py:class:`RsvpProcNsrNotReadyReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReason>`
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Issu.Status.PreviousIdtStatus, self).__init__()

                    self.yang_name = "previous-idt-status"
                    self.yang_parent_name = "status"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sync_status', YLeaf(YType.enumeration, 'sync-status')),
                        ('not_ready_reason', YLeaf(YType.enumeration, 'not-ready-reason')),
                        ('idt_start_time', YLeaf(YType.uint32, 'idt-start-time')),
                        ('idt_end_time', YLeaf(YType.uint32, 'idt-end-time')),
                        ('declare_time', YLeaf(YType.uint32, 'declare-time')),
                        ('withdraw_time', YLeaf(YType.uint32, 'withdraw-time')),
                    ])
                    self.sync_status = None
                    self.not_ready_reason = None
                    self.idt_start_time = None
                    self.idt_end_time = None
                    self.declare_time = None
                    self.withdraw_time = None
                    self._segment_path = lambda: "previous-idt-status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/issu/status/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Issu.Status.PreviousIdtStatus, ['sync_status', 'not_ready_reason', 'idt_start_time', 'idt_end_time', 'declare_time', 'withdraw_time'], name, value)


    class BwPoolInfo(Entity):
        """
        All B/W Pool info
        
        .. attribute:: max_res_pool_percent
        
        	Maxium reservable I/F percent B/W
        	**type**\: int
        
        	**range:** 0..4294967295
        
        	**units**\: percentage
        
        .. attribute:: bc0_percent
        
        	BC0 I/F percent B/W
        	**type**\: int
        
        	**range:** 0..4294967295
        
        	**units**\: percentage
        
        .. attribute:: bc1_percent
        
        	BC1 I/F percent B/W
        	**type**\: int
        
        	**range:** 0..4294967295
        
        	**units**\: percentage
        
        .. attribute:: is_max_res_pool_percent_configured
        
        	Is maximum reservable default I/F percent configured
        	**type**\: bool
        
        .. attribute:: is_bc0_percent_configured
        
        	Is BC0 default I/F percent configured
        	**type**\: bool
        
        .. attribute:: is_bc1_percent_configured
        
        	Is BC1 default I/F percent configured
        	**type**\: bool
        
        .. attribute:: bandwidth_configuration_model
        
        	Bandwith configuration model currently in use (MAM/RDM)
        	**type**\:  :py:class:`IgpteLibBwModel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.IgpteLibBwModel>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.BwPoolInfo, self).__init__()

            self.yang_name = "bw-pool-info"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('max_res_pool_percent', YLeaf(YType.uint32, 'max-res-pool-percent')),
                ('bc0_percent', YLeaf(YType.uint32, 'bc0-percent')),
                ('bc1_percent', YLeaf(YType.uint32, 'bc1-percent')),
                ('is_max_res_pool_percent_configured', YLeaf(YType.boolean, 'is-max-res-pool-percent-configured')),
                ('is_bc0_percent_configured', YLeaf(YType.boolean, 'is-bc0-percent-configured')),
                ('is_bc1_percent_configured', YLeaf(YType.boolean, 'is-bc1-percent-configured')),
                ('bandwidth_configuration_model', YLeaf(YType.enumeration, 'bandwidth-configuration-model')),
            ])
            self.max_res_pool_percent = None
            self.bc0_percent = None
            self.bc1_percent = None
            self.is_max_res_pool_percent_configured = None
            self.is_bc0_percent_configured = None
            self.is_bc1_percent_configured = None
            self.bandwidth_configuration_model = None
            self._segment_path = lambda: "bw-pool-info"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.BwPoolInfo, ['max_res_pool_percent', 'bc0_percent', 'bc1_percent', 'is_max_res_pool_percent_configured', 'is_bc0_percent_configured', 'is_bc1_percent_configured', 'bandwidth_configuration_model'], name, value)


    class PxsbDetails(Entity):
        """
        Table of detailed PXSB info
        
        .. attribute:: pxsb_detail
        
        	Detailed PXSB info
        	**type**\: list of  		 :py:class:`PxsbDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.PxsbDetails, self).__init__()

            self.yang_name = "pxsb-details"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("pxsb-detail", ("pxsb_detail", Rsvp.PxsbDetails.PxsbDetail))])
            self._leafs = OrderedDict()

            self.pxsb_detail = YList(self)
            self._segment_path = lambda: "pxsb-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.PxsbDetails, [], name, value)


        class PxsbDetail(Entity):
            """
            Detailed PXSB info
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.S2LSubLsp>`
            
            .. attribute:: template
            
            	RSVP Template
            	**type**\:  :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Template>`
            
            .. attribute:: traffic_spec
            
            	RSVP Traffic Spec Info
            	**type**\:  :py:class:`TrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.TrafficSpec>`
            
            .. attribute:: generic_traffic_spec
            
            	RSVP Generic Traffic Spec Info
            	**type**\:  :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec>`
            
            .. attribute:: hop
            
            	Path Hop Info
            	**type**\:  :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Hop>`
            
            .. attribute:: rsvp_header
            
            	RSVP Header
            	**type**\:  :py:class:`RsvpHeader <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.RsvpHeader>`
            
            .. attribute:: input_interface
            
            	Path Input Interface
            	**type**\: str
            
            .. attribute:: dynamic_state
            
            	Dynamic State Handle
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.PxsbDetails.PxsbDetail, self).__init__()

                self.yang_name = "pxsb-detail"
                self.yang_parent_name = "pxsb-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", Rsvp.PxsbDetails.PxsbDetail.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", Rsvp.PxsbDetails.PxsbDetail.S2LSubLsp)), ("template", ("template", Rsvp.PxsbDetails.PxsbDetail.Template)), ("traffic-spec", ("traffic_spec", Rsvp.PxsbDetails.PxsbDetail.TrafficSpec)), ("generic-traffic-spec", ("generic_traffic_spec", Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec)), ("hop", ("hop", Rsvp.PxsbDetails.PxsbDetail.Hop)), ("rsvp-header", ("rsvp_header", Rsvp.PxsbDetails.PxsbDetail.RsvpHeader))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('input_interface', YLeaf(YType.str, 'input-interface')),
                    ('dynamic_state', YLeaf(YType.uint32, 'dynamic-state')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.input_interface = None
                self.dynamic_state = None

                self.session = Rsvp.PxsbDetails.PxsbDetail.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = Rsvp.PxsbDetails.PxsbDetail.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.template = Rsvp.PxsbDetails.PxsbDetail.Template()
                self.template.parent = self
                self._children_name_map["template"] = "template"
                self._children_yang_names.add("template")

                self.traffic_spec = Rsvp.PxsbDetails.PxsbDetail.TrafficSpec()
                self.traffic_spec.parent = self
                self._children_name_map["traffic_spec"] = "traffic-spec"
                self._children_yang_names.add("traffic-spec")

                self.generic_traffic_spec = Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec()
                self.generic_traffic_spec.parent = self
                self._children_name_map["generic_traffic_spec"] = "generic-traffic-spec"
                self._children_yang_names.add("generic-traffic-spec")

                self.hop = Rsvp.PxsbDetails.PxsbDetail.Hop()
                self.hop.parent = self
                self._children_name_map["hop"] = "hop"
                self._children_yang_names.add("hop")

                self.rsvp_header = Rsvp.PxsbDetails.PxsbDetail.RsvpHeader()
                self.rsvp_header.parent = self
                self._children_name_map["rsvp_header"] = "rsvp-header"
                self._children_yang_names.add("rsvp-header")
                self._segment_path = lambda: "pxsb-detail"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'input_interface', 'dynamic_state'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PxsbDetails.PxsbDetail.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "pxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PxsbDetails.PxsbDetail.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "pxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.S2LSubLsp, ['s2l_destination_address'], name, value)


            class Template(Entity):
                """
                RSVP Template
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:  :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PxsbDetails.PxsbDetail.Template, self).__init__()

                    self.yang_name = "template"
                    self.yang_parent_name = "pxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-filter", ("rsvp_filter", Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_filter = Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter()
                    self.rsvp_filter.parent = self
                    self._children_name_map["rsvp_filter"] = "rsvp-filter"
                    self._children_yang_names.add("rsvp-filter")
                    self._segment_path = lambda: "template"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/%s" % self._segment_path()


                class RsvpFilter(Entity):
                    """
                    RSVP Filter
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:  :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.UdpIpv4Session>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:  :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:  :py:class:`RsvpMgmtFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilter>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter, self).__init__()

                        self.yang_name = "rsvp-filter"
                        self.yang_parent_name = "template"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("udp-ipv4-session", ("udp_ipv4_session", Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.UdpIpv4Session)), ("p2mp-ipv4-session", ("p2mp_ipv4_session", Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.P2MpIpv4Session))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('filter_type', YLeaf(YType.enumeration, 'filter-type')),
                        ])
                        self.filter_type = None

                        self.udp_ipv4_session = Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self
                        self._children_name_map["udp_ipv4_session"] = "udp-ipv4-session"
                        self._children_yang_names.add("udp-ipv4-session")

                        self.p2mp_ipv4_session = Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self._children_name_map["p2mp_ipv4_session"] = "p2mp-ipv4-session"
                        self._children_yang_names.add("p2mp-ipv4-session")
                        self._segment_path = lambda: "rsvp-filter"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/template/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter, ['filter_type'], name, value)


                    class UdpIpv4Session(Entity):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.UdpIpv4Session, self).__init__()

                            self.yang_name = "udp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self._segment_path = lambda: "udp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/template/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.UdpIpv4Session, ['source_address', 'source_port'], name, value)


                    class P2MpIpv4Session(Entity):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.P2MpIpv4Session, self).__init__()

                            self.yang_name = "p2mp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                                ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                                ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self.p2mp_sub_group_origin = None
                            self.sub_group_id = None
                            self._segment_path = lambda: "p2mp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/template/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.Template.RsvpFilter.P2MpIpv4Session, ['source_address', 'source_port', 'p2mp_sub_group_origin', 'sub_group_id'], name, value)


            class TrafficSpec(Entity):
                """
                RSVP Traffic Spec Info
                
                .. attribute:: traffic_average_rate
                
                	Traffic Average Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_max_burst
                
                	Traffic Maximum Burst
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: traffic_peak_rate
                
                	Traffic Peak Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_min_unit
                
                	Traffic Minimum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_max_unit
                
                	Traffic Maximum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PxsbDetails.PxsbDetail.TrafficSpec, self).__init__()

                    self.yang_name = "traffic-spec"
                    self.yang_parent_name = "pxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                        ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                        ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                        ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                        ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                    ])
                    self.traffic_average_rate = None
                    self.traffic_max_burst = None
                    self.traffic_peak_rate = None
                    self.traffic_min_unit = None
                    self.traffic_max_unit = None
                    self._segment_path = lambda: "traffic-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.TrafficSpec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


            class GenericTrafficSpec(Entity):
                """
                RSVP Generic Traffic Spec Info
                
                .. attribute:: g709otn_tspec
                
                	G709 OTN Sender Tspec
                	**type**\:  :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.G709OtnTspec>`
                
                .. attribute:: intsrv_tspec
                
                	Integrated Services Sender Tspec
                	**type**\:  :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.IntsrvTspec>`
                
                .. attribute:: tspec_type
                
                	TspecType
                	**type**\:  :py:class:`RsvpMgmtTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec, self).__init__()

                    self.yang_name = "generic-traffic-spec"
                    self.yang_parent_name = "pxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("g709otn-tspec", ("g709otn_tspec", Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.G709OtnTspec)), ("intsrv-tspec", ("intsrv_tspec", Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.IntsrvTspec))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('tspec_type', YLeaf(YType.enumeration, 'tspec-type')),
                    ])
                    self.tspec_type = None

                    self.g709otn_tspec = Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.G709OtnTspec()
                    self.g709otn_tspec.parent = self
                    self._children_name_map["g709otn_tspec"] = "g709otn-tspec"
                    self._children_yang_names.add("g709otn-tspec")

                    self.intsrv_tspec = Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.IntsrvTspec()
                    self.intsrv_tspec.parent = self
                    self._children_name_map["intsrv_tspec"] = "intsrv-tspec"
                    self._children_yang_names.add("intsrv-tspec")
                    self._segment_path = lambda: "generic-traffic-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec, ['tspec_type'], name, value)


                class G709OtnTspec(Entity):
                    """
                    G709 OTN Sender Tspec
                    
                    .. attribute:: traffic_signal_type
                    
                    	G709 OTN Traffic Signal Type (Refer G709 v3)
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: traffic_nvc
                    
                    	G709 OTN Traffic NVC
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_multiplier
                    
                    	G709 OTN Traffic Multiplier
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_bit_rate
                    
                    	G709 OTN Traffic Bit Rate
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.G709OtnTspec, self).__init__()

                        self.yang_name = "g709otn-tspec"
                        self.yang_parent_name = "generic-traffic-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('traffic_signal_type', YLeaf(YType.uint8, 'traffic-signal-type')),
                            ('traffic_nvc', YLeaf(YType.uint16, 'traffic-nvc')),
                            ('traffic_multiplier', YLeaf(YType.uint16, 'traffic-multiplier')),
                            ('traffic_bit_rate', YLeaf(YType.uint64, 'traffic-bit-rate')),
                        ])
                        self.traffic_signal_type = None
                        self.traffic_nvc = None
                        self.traffic_multiplier = None
                        self.traffic_bit_rate = None
                        self._segment_path = lambda: "g709otn-tspec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/generic-traffic-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.G709OtnTspec, ['traffic_signal_type', 'traffic_nvc', 'traffic_multiplier', 'traffic_bit_rate'], name, value)


                class IntsrvTspec(Entity):
                    """
                    Integrated Services Sender Tspec
                    
                    .. attribute:: traffic_average_rate
                    
                    	Traffic Average Rate in bytes per second
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_max_burst
                    
                    	Traffic Maximum Burst
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_peak_rate
                    
                    	Traffic Peak Rate in bytes per second
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_min_unit
                    
                    	Traffic Minimum Unit
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_max_unit
                    
                    	Traffic Maximum Unit
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.IntsrvTspec, self).__init__()

                        self.yang_name = "intsrv-tspec"
                        self.yang_parent_name = "generic-traffic-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                            ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                            ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                            ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                            ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                        ])
                        self.traffic_average_rate = None
                        self.traffic_max_burst = None
                        self.traffic_peak_rate = None
                        self.traffic_min_unit = None
                        self.traffic_max_unit = None
                        self._segment_path = lambda: "intsrv-tspec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/generic-traffic-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.GenericTrafficSpec.IntsrvTspec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


            class Hop(Entity):
                """
                Path Hop Info
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PxsbDetails.PxsbDetail.Hop, self).__init__()

                    self.yang_name = "hop"
                    self.yang_parent_name = "pxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                        ('neighbor_logical_interface_name', YLeaf(YType.str, 'neighbor-logical-interface-name')),
                    ])
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None
                    self._segment_path = lambda: "hop"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.Hop, ['neighbor_address', 'neighbor_logical_interface_name'], name, value)


            class RsvpHeader(Entity):
                """
                RSVP Header
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PxsbDetails.PxsbDetail.RsvpHeader, self).__init__()

                    self.yang_name = "rsvp-header"
                    self.yang_parent_name = "pxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('rsvp_version', YLeaf(YType.uint8, 'rsvp-version')),
                        ('rsvp_header_flags', YLeaf(YType.uint8, 'rsvp-header-flags')),
                        ('rsvp_ttl', YLeaf(YType.uint8, 'rsvp-ttl')),
                        ('rsvp_message_type', YLeaf(YType.uint8, 'rsvp-message-type')),
                        ('ip_tos', YLeaf(YType.uint8, 'ip-tos')),
                        ('ip_ttl', YLeaf(YType.uint8, 'ip-ttl')),
                        ('ip_source_address', YLeaf(YType.str, 'ip-source-address')),
                    ])
                    self.rsvp_version = None
                    self.rsvp_header_flags = None
                    self.rsvp_ttl = None
                    self.rsvp_message_type = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.ip_source_address = None
                    self._segment_path = lambda: "rsvp-header"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PxsbDetails.PxsbDetail.RsvpHeader, ['rsvp_version', 'rsvp_header_flags', 'rsvp_ttl', 'rsvp_message_type', 'ip_tos', 'ip_ttl', 'ip_source_address'], name, value)


    class RxsbDetails(Entity):
        """
        Table of detailed RXSB info
        
        .. attribute:: rxsb_detail
        
        	Detailed RXSB info
        	**type**\: list of  		 :py:class:`RxsbDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.RxsbDetails, self).__init__()

            self.yang_name = "rxsb-details"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("rxsb-detail", ("rxsb_detail", Rsvp.RxsbDetails.RxsbDetail))])
            self._leafs = OrderedDict()

            self.rxsb_detail = YList(self)
            self._segment_path = lambda: "rxsb-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.RxsbDetails, [], name, value)


        class RxsbDetail(Entity):
            """
            Detailed RXSB info
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.S2LSubLsp>`
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:  :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Style>`
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:  :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Filter>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:  :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Information
            	**type**\:  :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec>`
            
            .. attribute:: hop
            
            	Path Hop Info
            	**type**\:  :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Hop>`
            
            .. attribute:: rsvp_header
            
            	RSVP Header
            	**type**\:  :py:class:`RsvpHeader <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.RsvpHeader>`
            
            .. attribute:: input_interface
            
            	Path Input Interface
            	**type**\: str
            
            .. attribute:: dynamic_state
            
            	Dynamic State Handle
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.RxsbDetails.RxsbDetail, self).__init__()

                self.yang_name = "rxsb-detail"
                self.yang_parent_name = "rxsb-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", Rsvp.RxsbDetails.RxsbDetail.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", Rsvp.RxsbDetails.RxsbDetail.S2LSubLsp)), ("style", ("style", Rsvp.RxsbDetails.RxsbDetail.Style)), ("filter", ("filter", Rsvp.RxsbDetails.RxsbDetail.Filter)), ("flow-spec", ("flow_spec", Rsvp.RxsbDetails.RxsbDetail.FlowSpec)), ("generic-flow-spec", ("generic_flow_spec", Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec)), ("hop", ("hop", Rsvp.RxsbDetails.RxsbDetail.Hop)), ("rsvp-header", ("rsvp_header", Rsvp.RxsbDetails.RxsbDetail.RsvpHeader))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('input_interface', YLeaf(YType.str, 'input-interface')),
                    ('dynamic_state', YLeaf(YType.uint32, 'dynamic-state')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.input_interface = None
                self.dynamic_state = None

                self.session = Rsvp.RxsbDetails.RxsbDetail.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = Rsvp.RxsbDetails.RxsbDetail.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.style = Rsvp.RxsbDetails.RxsbDetail.Style()
                self.style.parent = self
                self._children_name_map["style"] = "style"
                self._children_yang_names.add("style")

                self.filter = Rsvp.RxsbDetails.RxsbDetail.Filter()
                self.filter.parent = self
                self._children_name_map["filter"] = "filter"
                self._children_yang_names.add("filter")

                self.flow_spec = Rsvp.RxsbDetails.RxsbDetail.FlowSpec()
                self.flow_spec.parent = self
                self._children_name_map["flow_spec"] = "flow-spec"
                self._children_yang_names.add("flow-spec")

                self.generic_flow_spec = Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self._children_name_map["generic_flow_spec"] = "generic-flow-spec"
                self._children_yang_names.add("generic-flow-spec")

                self.hop = Rsvp.RxsbDetails.RxsbDetail.Hop()
                self.hop.parent = self
                self._children_name_map["hop"] = "hop"
                self._children_yang_names.add("hop")

                self.rsvp_header = Rsvp.RxsbDetails.RxsbDetail.RsvpHeader()
                self.rsvp_header.parent = self
                self._children_name_map["rsvp_header"] = "rsvp-header"
                self._children_yang_names.add("rsvp-header")
                self._segment_path = lambda: "rxsb-detail"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'input_interface', 'dynamic_state'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RxsbDetails.RxsbDetail.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "rxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RxsbDetails.RxsbDetail.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "rxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.S2LSubLsp, ['s2l_destination_address'], name, value)


            class Style(Entity):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:  :py:class:`RsvpMgmtReservationTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RxsbDetails.RxsbDetail.Style, self).__init__()

                    self.yang_name = "style"
                    self.yang_parent_name = "rxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('reservation_type', YLeaf(YType.enumeration, 'reservation-type')),
                    ])
                    self.reservation_type = None
                    self._segment_path = lambda: "style"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.Style, ['reservation_type'], name, value)


            class Filter(Entity):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:  :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RxsbDetails.RxsbDetail.Filter, self).__init__()

                    self.yang_name = "filter"
                    self.yang_parent_name = "rxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-filter", ("rsvp_filter", Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_filter = Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self
                    self._children_name_map["rsvp_filter"] = "rsvp-filter"
                    self._children_yang_names.add("rsvp-filter")
                    self._segment_path = lambda: "filter"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/%s" % self._segment_path()


                class RsvpFilter(Entity):
                    """
                    RSVP Filter
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:  :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:  :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:  :py:class:`RsvpMgmtFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilter>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter, self).__init__()

                        self.yang_name = "rsvp-filter"
                        self.yang_parent_name = "filter"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("udp-ipv4-session", ("udp_ipv4_session", Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.UdpIpv4Session)), ("p2mp-ipv4-session", ("p2mp_ipv4_session", Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.P2MpIpv4Session))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('filter_type', YLeaf(YType.enumeration, 'filter-type')),
                        ])
                        self.filter_type = None

                        self.udp_ipv4_session = Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self
                        self._children_name_map["udp_ipv4_session"] = "udp-ipv4-session"
                        self._children_yang_names.add("udp-ipv4-session")

                        self.p2mp_ipv4_session = Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self._children_name_map["p2mp_ipv4_session"] = "p2mp-ipv4-session"
                        self._children_yang_names.add("p2mp-ipv4-session")
                        self._segment_path = lambda: "rsvp-filter"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/filter/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter, ['filter_type'], name, value)


                    class UdpIpv4Session(Entity):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.UdpIpv4Session, self).__init__()

                            self.yang_name = "udp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self._segment_path = lambda: "udp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.UdpIpv4Session, ['source_address', 'source_port'], name, value)


                    class P2MpIpv4Session(Entity):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.P2MpIpv4Session, self).__init__()

                            self.yang_name = "p2mp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                                ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                                ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self.p2mp_sub_group_origin = None
                            self.sub_group_id = None
                            self._segment_path = lambda: "p2mp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.Filter.RsvpFilter.P2MpIpv4Session, ['source_address', 'source_port', 'p2mp_sub_group_origin', 'sub_group_id'], name, value)


            class FlowSpec(Entity):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:  :py:class:`RsvpMgmtQosServiceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RxsbDetails.RxsbDetail.FlowSpec, self).__init__()

                    self.yang_name = "flow-spec"
                    self.yang_parent_name = "rxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_average_rate', YLeaf(YType.uint64, 'flow-average-rate')),
                        ('flow_max_burst', YLeaf(YType.uint64, 'flow-max-burst')),
                        ('flow_peak_rate', YLeaf(YType.uint64, 'flow-peak-rate')),
                        ('flow_min_unit', YLeaf(YType.uint32, 'flow-min-unit')),
                        ('flow_max_unit', YLeaf(YType.uint32, 'flow-max-unit')),
                        ('flow_requested_rate', YLeaf(YType.uint64, 'flow-requested-rate')),
                        ('flow_slack', YLeaf(YType.uint32, 'flow-slack')),
                        ('flow_qos', YLeaf(YType.enumeration, 'flow-qos')),
                    ])
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_peak_rate = None
                    self.flow_min_unit = None
                    self.flow_max_unit = None
                    self.flow_requested_rate = None
                    self.flow_slack = None
                    self.flow_qos = None
                    self._segment_path = lambda: "flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.FlowSpec, ['flow_average_rate', 'flow_max_burst', 'flow_peak_rate', 'flow_min_unit', 'flow_max_unit', 'flow_requested_rate', 'flow_slack', 'flow_qos'], name, value)


            class GenericFlowSpec(Entity):
                """
                Generic Flow Spec Information
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:  :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec.G709OtnFlowSpec>`
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:  :py:class:`RsvpMgmtFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec, self).__init__()

                    self.yang_name = "generic-flow-spec"
                    self.yang_parent_name = "rxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("g709otn-flow-spec", ("g709otn_flow_spec", Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec.G709OtnFlowSpec))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_spec_type', YLeaf(YType.enumeration, 'flow-spec-type')),
                    ])
                    self.flow_spec_type = None

                    self.g709otn_flow_spec = Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self
                    self._children_name_map["g709otn_flow_spec"] = "g709otn-flow-spec"
                    self._children_yang_names.add("g709otn-flow-spec")
                    self._segment_path = lambda: "generic-flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec, ['flow_spec_type'], name, value)


                class G709OtnFlowSpec(Entity):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec.G709OtnFlowSpec, self).__init__()

                        self.yang_name = "g709otn-flow-spec"
                        self.yang_parent_name = "generic-flow-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('flow_signal_type', YLeaf(YType.uint8, 'flow-signal-type')),
                            ('flow_nvc', YLeaf(YType.uint16, 'flow-nvc')),
                            ('flow_multiplier', YLeaf(YType.uint16, 'flow-multiplier')),
                            ('flow_bit_rate', YLeaf(YType.uint64, 'flow-bit-rate')),
                        ])
                        self.flow_signal_type = None
                        self.flow_nvc = None
                        self.flow_multiplier = None
                        self.flow_bit_rate = None
                        self._segment_path = lambda: "g709otn-flow-spec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/generic-flow-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.GenericFlowSpec.G709OtnFlowSpec, ['flow_signal_type', 'flow_nvc', 'flow_multiplier', 'flow_bit_rate'], name, value)


            class Hop(Entity):
                """
                Path Hop Info
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RxsbDetails.RxsbDetail.Hop, self).__init__()

                    self.yang_name = "hop"
                    self.yang_parent_name = "rxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                        ('neighbor_logical_interface_name', YLeaf(YType.str, 'neighbor-logical-interface-name')),
                    ])
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None
                    self._segment_path = lambda: "hop"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.Hop, ['neighbor_address', 'neighbor_logical_interface_name'], name, value)


            class RsvpHeader(Entity):
                """
                RSVP Header
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RxsbDetails.RxsbDetail.RsvpHeader, self).__init__()

                    self.yang_name = "rsvp-header"
                    self.yang_parent_name = "rxsb-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('rsvp_version', YLeaf(YType.uint8, 'rsvp-version')),
                        ('rsvp_header_flags', YLeaf(YType.uint8, 'rsvp-header-flags')),
                        ('rsvp_ttl', YLeaf(YType.uint8, 'rsvp-ttl')),
                        ('rsvp_message_type', YLeaf(YType.uint8, 'rsvp-message-type')),
                        ('ip_tos', YLeaf(YType.uint8, 'ip-tos')),
                        ('ip_ttl', YLeaf(YType.uint8, 'ip-ttl')),
                        ('ip_source_address', YLeaf(YType.str, 'ip-source-address')),
                    ])
                    self.rsvp_version = None
                    self.rsvp_header_flags = None
                    self.rsvp_ttl = None
                    self.rsvp_message_type = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.ip_source_address = None
                    self._segment_path = lambda: "rsvp-header"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RxsbDetails.RxsbDetail.RsvpHeader, ['rsvp_version', 'rsvp_header_flags', 'rsvp_ttl', 'rsvp_message_type', 'ip_tos', 'ip_ttl', 'ip_source_address'], name, value)


    class InterfaceNeighborBriefs(Entity):
        """
        Table of brief info about I/F neighbors
        
        .. attribute:: interface_neighbor_brief
        
        	Brief info for a single interface neighbor
        	**type**\: list of  		 :py:class:`InterfaceNeighborBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceNeighborBriefs.InterfaceNeighborBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.InterfaceNeighborBriefs, self).__init__()

            self.yang_name = "interface-neighbor-briefs"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("interface-neighbor-brief", ("interface_neighbor_brief", Rsvp.InterfaceNeighborBriefs.InterfaceNeighborBrief))])
            self._leafs = OrderedDict()

            self.interface_neighbor_brief = YList(self)
            self._segment_path = lambda: "interface-neighbor-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.InterfaceNeighborBriefs, [], name, value)


        class InterfaceNeighborBrief(Entity):
            """
            Brief info for a single interface neighbor
            
            .. attribute:: neighbor_address  (key)
            
            	Address of global neighbor
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_neighbor_list_compact
            
            	Compact list of I/F Neighbors
            	**type**\: list of  		 :py:class:`InterfaceNeighborListCompact <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceNeighborBriefs.InterfaceNeighborBrief.InterfaceNeighborListCompact>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.InterfaceNeighborBriefs.InterfaceNeighborBrief, self).__init__()

                self.yang_name = "interface-neighbor-brief"
                self.yang_parent_name = "interface-neighbor-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['neighbor_address']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("interface-neighbor-list-compact", ("interface_neighbor_list_compact", Rsvp.InterfaceNeighborBriefs.InterfaceNeighborBrief.InterfaceNeighborListCompact))])
                self._leafs = OrderedDict([
                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                    ('node_address', YLeaf(YType.str, 'node-address')),
                ])
                self.neighbor_address = None
                self.node_address = None

                self.interface_neighbor_list_compact = YList(self)
                self._segment_path = lambda: "interface-neighbor-brief" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-neighbor-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.InterfaceNeighborBriefs.InterfaceNeighborBrief, ['neighbor_address', 'node_address'], name, value)


            class InterfaceNeighborListCompact(Entity):
                """
                Compact list of I/F Neighbors
                
                .. attribute:: interface_neighbor_address
                
                	Interface Neighbor address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_interface_name
                
                	Neighbor's Interface handle
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.InterfaceNeighborBriefs.InterfaceNeighborBrief.InterfaceNeighborListCompact, self).__init__()

                    self.yang_name = "interface-neighbor-list-compact"
                    self.yang_parent_name = "interface-neighbor-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_neighbor_address', YLeaf(YType.str, 'interface-neighbor-address')),
                        ('neighbor_interface_name', YLeaf(YType.str, 'neighbor-interface-name')),
                    ])
                    self.interface_neighbor_address = None
                    self.neighbor_interface_name = None
                    self._segment_path = lambda: "interface-neighbor-list-compact"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.InterfaceNeighborBriefs.InterfaceNeighborBrief.InterfaceNeighborListCompact, ['interface_neighbor_address', 'neighbor_interface_name'], name, value)


    class ControllerSummaries(Entity):
        """
        Table of summary info about RSVP\-enabled
        controllers
        
        .. attribute:: controller_summary
        
        	Summary info about an RSVP\-enabled controller
        	**type**\: list of  		 :py:class:`ControllerSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerSummaries.ControllerSummary>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.ControllerSummaries, self).__init__()

            self.yang_name = "controller-summaries"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("controller-summary", ("controller_summary", Rsvp.ControllerSummaries.ControllerSummary))])
            self._leafs = OrderedDict()

            self.controller_summary = YList(self)
            self._segment_path = lambda: "controller-summaries"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.ControllerSummaries, [], name, value)


        class ControllerSummary(Entity):
            """
            Summary info about an RSVP\-enabled controller
            
            .. attribute:: controller_name  (key)
            
            	Controller Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:  :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\: str
            
            .. attribute:: paths_in
            
            	Number of locally created and incoming path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: paths_out
            
            	Number of outgoing path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: reservations_in
            
            	Number of locally created and incoming reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: reservations_out
            
            	Number of outgoing reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.ControllerSummaries.ControllerSummary, self).__init__()

                self.yang_name = "controller-summary"
                self.yang_parent_name = "controller-summaries"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['controller_name']
                self._child_container_classes = OrderedDict([("bandwidth-information", ("bandwidth_information", Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('controller_name', YLeaf(YType.str, 'controller-name')),
                    ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                    ('paths_in', YLeaf(YType.uint32, 'paths-in')),
                    ('paths_out', YLeaf(YType.uint32, 'paths-out')),
                    ('reservations_in', YLeaf(YType.uint32, 'reservations-in')),
                    ('reservations_out', YLeaf(YType.uint32, 'reservations-out')),
                ])
                self.controller_name = None
                self.interface_name_xr = None
                self.paths_in = None
                self.paths_out = None
                self.reservations_in = None
                self.reservations_out = None

                self.bandwidth_information = Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation()
                self.bandwidth_information.parent = self
                self._children_name_map["bandwidth_information"] = "bandwidth-information"
                self._children_yang_names.add("bandwidth-information")
                self._segment_path = lambda: "controller-summary" + "[controller-name='" + str(self.controller_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-summaries/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.ControllerSummaries.ControllerSummary, ['controller_name', 'interface_name_xr', 'paths_in', 'paths_out', 'reservations_in', 'reservations_out'], name, value)


            class BandwidthInformation(Entity):
                """
                Interface bandwidth information
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:  :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:  :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.StandardDsteInterface>`
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:  :py:class:`RsvpMgmtDsteModes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModes>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation, self).__init__()

                    self.yang_name = "bandwidth-information"
                    self.yang_parent_name = "controller-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("pre-standard-dste-interface", ("pre_standard_dste_interface", Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.PreStandardDsteInterface)), ("standard-dste-interface", ("standard_dste_interface", Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.StandardDsteInterface))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dste_mode', YLeaf(YType.enumeration, 'dste-mode')),
                    ])
                    self.dste_mode = None

                    self.pre_standard_dste_interface = Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self._children_name_map["pre_standard_dste_interface"] = "pre-standard-dste-interface"
                    self._children_yang_names.add("pre-standard-dste-interface")

                    self.standard_dste_interface = Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self
                    self._children_name_map["standard_dste_interface"] = "standard-dste-interface"
                    self._children_yang_names.add("standard-dste-interface")
                    self._segment_path = lambda: "bandwidth-information"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation, ['dste_mode'], name, value)


                class PreStandardDsteInterface(Entity):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.PreStandardDsteInterface, self).__init__()

                        self.yang_name = "pre-standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_subpool_bandwidth', YLeaf(YType.uint64, 'max-subpool-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_subpool_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-subpool-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_subpool_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self._segment_path = lambda: "pre-standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.PreStandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_subpool_bandwidth', 'is_max_bandwidth_absolute', 'is_max_subpool_bandwidth_absolute'], name, value)


                class StandardDsteInterface(Entity):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.StandardDsteInterface, self).__init__()

                        self.yang_name = "standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_pool0_bandwidth', YLeaf(YType.uint64, 'max-pool0-bandwidth')),
                            ('max_pool1_bandwidth', YLeaf(YType.uint64, 'max-pool1-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_bc0_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc0-bandwidth-absolute')),
                            ('is_max_bc1_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc1-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self._segment_path = lambda: "standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.ControllerSummaries.ControllerSummary.BandwidthInformation.StandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_pool0_bandwidth', 'max_pool1_bandwidth', 'is_max_bandwidth_absolute', 'is_max_bc0_bandwidth_absolute', 'is_max_bc1_bandwidth_absolute'], name, value)


    class AuthenticationBriefs(Entity):
        """
        Table for Authentication related information
        
        .. attribute:: authentication_brief
        
        	Brief Authentication information
        	**type**\: list of  		 :py:class:`AuthenticationBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationBriefs.AuthenticationBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.AuthenticationBriefs, self).__init__()

            self.yang_name = "authentication-briefs"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("authentication-brief", ("authentication_brief", Rsvp.AuthenticationBriefs.AuthenticationBrief))])
            self._leafs = OrderedDict()

            self.authentication_brief = YList(self)
            self._segment_path = lambda: "authentication-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.AuthenticationBriefs, [], name, value)


        class AuthenticationBrief(Entity):
            """
            Brief Authentication information
            
            .. attribute:: source_address  (key)
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address  (key)
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: mode_id  (key)
            
            	Mode (Tx or Rx)
            	**type**\:  :py:class:`RsvpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMode>`
            
            .. attribute:: interface_name  (key)
            
            	InterfaceName
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: neighbor_address
            
            	Neighbor address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: direction
            
            	Direction
            	**type**\:  :py:class:`RsvpMgmtAuthDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthDirection>`
            
            .. attribute:: key_type
            
            	Key type
            	**type**\:  :py:class:`RsvpMgmtAuthKi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthKi>`
            
            .. attribute:: key_source
            
            	Key source
            	**type**\: str
            
            .. attribute:: key_id
            
            	Key ID
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: key_id_valid
            
            	Key validity
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.AuthenticationBriefs.AuthenticationBrief, self).__init__()

                self.yang_name = "authentication-brief"
                self.yang_parent_name = "authentication-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['source_address','destination_address','mode_id','interface_name']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('mode_id', YLeaf(YType.enumeration, 'mode-id')),
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('source_address_xr', YLeaf(YType.str, 'source-address-xr')),
                    ('destination_address_xr', YLeaf(YType.str, 'destination-address-xr')),
                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                    ('direction', YLeaf(YType.enumeration, 'direction')),
                    ('key_type', YLeaf(YType.enumeration, 'key-type')),
                    ('key_source', YLeaf(YType.str, 'key-source')),
                    ('key_id', YLeaf(YType.uint64, 'key-id')),
                    ('key_id_valid', YLeaf(YType.uint32, 'key-id-valid')),
                ])
                self.source_address = None
                self.destination_address = None
                self.mode_id = None
                self.interface_name = None
                self.source_address_xr = None
                self.destination_address_xr = None
                self.neighbor_address = None
                self.direction = None
                self.key_type = None
                self.key_source = None
                self.key_id = None
                self.key_id_valid = None
                self._segment_path = lambda: "authentication-brief" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']" + "[mode-id='" + str(self.mode_id) + "']" + "[interface-name='" + str(self.interface_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/authentication-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.AuthenticationBriefs.AuthenticationBrief, ['source_address', 'destination_address', 'mode_id', 'interface_name', 'source_address_xr', 'destination_address_xr', 'neighbor_address', 'direction', 'key_type', 'key_source', 'key_id', 'key_id_valid'], name, value)


    class SessionBriefs(Entity):
        """
        Table of brief info about sessions
        
        .. attribute:: session_brief
        
        	Brief info about session
        	**type**\: list of  		 :py:class:`SessionBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs.SessionBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.SessionBriefs, self).__init__()

            self.yang_name = "session-briefs"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("session-brief", ("session_brief", Rsvp.SessionBriefs.SessionBrief))])
            self._leafs = OrderedDict()

            self.session_brief = YList(self)
            self._segment_path = lambda: "session-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.SessionBriefs, [], name, value)


        class SessionBrief(Entity):
            """
            Brief info about session
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs.SessionBrief.Session>`
            
            .. attribute:: ps_bs
            
            	Number of path state block states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: rs_bs
            
            	Number of reservation state block states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: requests
            
            	Number of request states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: detail_list_size
            
            	Number of elements in detail list
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.SessionBriefs.SessionBrief, self).__init__()

                self.yang_name = "session-brief"
                self.yang_parent_name = "session-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", Rsvp.SessionBriefs.SessionBrief.Session))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('ps_bs', YLeaf(YType.uint32, 'ps-bs')),
                    ('rs_bs', YLeaf(YType.uint32, 'rs-bs')),
                    ('requests', YLeaf(YType.uint32, 'requests')),
                    ('detail_list_size', YLeaf(YType.uint32, 'detail-list-size')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.vrf_name = None
                self.ps_bs = None
                self.rs_bs = None
                self.requests = None
                self.detail_list_size = None

                self.session = Rsvp.SessionBriefs.SessionBrief.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")
                self._segment_path = lambda: "session-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.SessionBriefs.SessionBrief, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'vrf_name', 'ps_bs', 'rs_bs', 'requests', 'detail_list_size'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.SessionBriefs.SessionBrief.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "session-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionBriefs.SessionBrief.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


    class PsbDetaileds(Entity):
        """
        Table of detailed info about path state blocks
        
        .. attribute:: psb_detailed
        
        	Detailed info for a single path state block
        	**type**\: list of  		 :py:class:`PsbDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.PsbDetaileds, self).__init__()

            self.yang_name = "psb-detaileds"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("psb-detailed", ("psb_detailed", Rsvp.PsbDetaileds.PsbDetailed))])
            self._leafs = OrderedDict()

            self.psb_detailed = YList(self)
            self._segment_path = lambda: "psb-detaileds"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.PsbDetaileds, [], name, value)


        class PsbDetailed(Entity):
            """
            Detailed info for a single path state block
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.S2LSubLsp>`
            
            .. attribute:: template
            
            	RSVP Template
            	**type**\:  :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Template>`
            
            .. attribute:: session_attribute
            
            	RSVP Session Attribute
            	**type**\:  :py:class:`SessionAttribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute>`
            
            .. attribute:: traffic_spec
            
            	RSVP Traffic Spec Info
            	**type**\:  :py:class:`TrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.TrafficSpec>`
            
            .. attribute:: generic_traffic_spec
            
            	RSVP Generic Traffic Spec Info
            	**type**\:  :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec>`
            
            .. attribute:: path_flags
            
            	Path Flags
            	**type**\:  :py:class:`PathFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.PathFlags>`
            
            .. attribute:: hop
            
            	Path Hop Info
            	**type**\:  :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Hop>`
            
            .. attribute:: policy_source_info
            
            	Policy Sources Info
            	**type**\:  :py:class:`PolicySourceInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.PolicySourceInfo>`
            
            .. attribute:: header
            
            	RSVP Header Info
            	**type**\:  :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Header>`
            
            .. attribute:: expiry_time
            
            	Expiry Time
            	**type**\:  :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.ExpiryTime>`
            
            .. attribute:: policy_flags
            
            	Policy Flags
            	**type**\:  :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.PolicyFlags>`
            
            .. attribute:: policy_query_flags
            
            	Policy Query Flags
            	**type**\:  :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.PolicyQueryFlags>`
            
            .. attribute:: label_info
            
            	Label Information
            	**type**\:  :py:class:`LabelInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo>`
            
            .. attribute:: class_type
            
            	DS\-TE Class\-Type
            	**type**\:  :py:class:`ClassType <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.ClassType>`
            
            .. attribute:: input_interface
            
            	Path Input Interface
            	**type**\: str
            
            .. attribute:: backup_tunnel_name
            
            	Path Backup Tunnel
            	**type**\: str
            
            .. attribute:: is_in_ero_valid
            
            	Incoming ERO validity
            	**type**\: bool
            
            .. attribute:: is_out_ero_valid
            
            	Outgoing ERO validity
            	**type**\: bool
            
            .. attribute:: pfc
            
            	Path Forwarding Contexts
            	**type**\: list of  		 :py:class:`Pfc <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Pfc>`
            
            .. attribute:: in_ero
            
            	Incoming Explicit Route Sub Objects
            	**type**\: list of  		 :py:class:`InEro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.InEro>`
            
            .. attribute:: out_ero
            
            	Outgoing Explicit Route Sub Objects
            	**type**\: list of  		 :py:class:`OutEro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.OutEro>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.PsbDetaileds.PsbDetailed, self).__init__()

                self.yang_name = "psb-detailed"
                self.yang_parent_name = "psb-detaileds"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", Rsvp.PsbDetaileds.PsbDetailed.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", Rsvp.PsbDetaileds.PsbDetailed.S2LSubLsp)), ("template", ("template", Rsvp.PsbDetaileds.PsbDetailed.Template)), ("session-attribute", ("session_attribute", Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute)), ("traffic-spec", ("traffic_spec", Rsvp.PsbDetaileds.PsbDetailed.TrafficSpec)), ("generic-traffic-spec", ("generic_traffic_spec", Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec)), ("path-flags", ("path_flags", Rsvp.PsbDetaileds.PsbDetailed.PathFlags)), ("hop", ("hop", Rsvp.PsbDetaileds.PsbDetailed.Hop)), ("policy-source-info", ("policy_source_info", Rsvp.PsbDetaileds.PsbDetailed.PolicySourceInfo)), ("header", ("header", Rsvp.PsbDetaileds.PsbDetailed.Header)), ("expiry-time", ("expiry_time", Rsvp.PsbDetaileds.PsbDetailed.ExpiryTime)), ("policy-flags", ("policy_flags", Rsvp.PsbDetaileds.PsbDetailed.PolicyFlags)), ("policy-query-flags", ("policy_query_flags", Rsvp.PsbDetaileds.PsbDetailed.PolicyQueryFlags)), ("label-info", ("label_info", Rsvp.PsbDetaileds.PsbDetailed.LabelInfo)), ("class-type", ("class_type", Rsvp.PsbDetaileds.PsbDetailed.ClassType))])
                self._child_list_classes = OrderedDict([("pfc", ("pfc", Rsvp.PsbDetaileds.PsbDetailed.Pfc)), ("in-ero", ("in_ero", Rsvp.PsbDetaileds.PsbDetailed.InEro)), ("out-ero", ("out_ero", Rsvp.PsbDetaileds.PsbDetailed.OutEro))])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('input_interface', YLeaf(YType.str, 'input-interface')),
                    ('backup_tunnel_name', YLeaf(YType.str, 'backup-tunnel-name')),
                    ('is_in_ero_valid', YLeaf(YType.boolean, 'is-in-ero-valid')),
                    ('is_out_ero_valid', YLeaf(YType.boolean, 'is-out-ero-valid')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.input_interface = None
                self.backup_tunnel_name = None
                self.is_in_ero_valid = None
                self.is_out_ero_valid = None

                self.session = Rsvp.PsbDetaileds.PsbDetailed.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = Rsvp.PsbDetaileds.PsbDetailed.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.template = Rsvp.PsbDetaileds.PsbDetailed.Template()
                self.template.parent = self
                self._children_name_map["template"] = "template"
                self._children_yang_names.add("template")

                self.session_attribute = Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute()
                self.session_attribute.parent = self
                self._children_name_map["session_attribute"] = "session-attribute"
                self._children_yang_names.add("session-attribute")

                self.traffic_spec = Rsvp.PsbDetaileds.PsbDetailed.TrafficSpec()
                self.traffic_spec.parent = self
                self._children_name_map["traffic_spec"] = "traffic-spec"
                self._children_yang_names.add("traffic-spec")

                self.generic_traffic_spec = Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec()
                self.generic_traffic_spec.parent = self
                self._children_name_map["generic_traffic_spec"] = "generic-traffic-spec"
                self._children_yang_names.add("generic-traffic-spec")

                self.path_flags = Rsvp.PsbDetaileds.PsbDetailed.PathFlags()
                self.path_flags.parent = self
                self._children_name_map["path_flags"] = "path-flags"
                self._children_yang_names.add("path-flags")

                self.hop = Rsvp.PsbDetaileds.PsbDetailed.Hop()
                self.hop.parent = self
                self._children_name_map["hop"] = "hop"
                self._children_yang_names.add("hop")

                self.policy_source_info = Rsvp.PsbDetaileds.PsbDetailed.PolicySourceInfo()
                self.policy_source_info.parent = self
                self._children_name_map["policy_source_info"] = "policy-source-info"
                self._children_yang_names.add("policy-source-info")

                self.header = Rsvp.PsbDetaileds.PsbDetailed.Header()
                self.header.parent = self
                self._children_name_map["header"] = "header"
                self._children_yang_names.add("header")

                self.expiry_time = Rsvp.PsbDetaileds.PsbDetailed.ExpiryTime()
                self.expiry_time.parent = self
                self._children_name_map["expiry_time"] = "expiry-time"
                self._children_yang_names.add("expiry-time")

                self.policy_flags = Rsvp.PsbDetaileds.PsbDetailed.PolicyFlags()
                self.policy_flags.parent = self
                self._children_name_map["policy_flags"] = "policy-flags"
                self._children_yang_names.add("policy-flags")

                self.policy_query_flags = Rsvp.PsbDetaileds.PsbDetailed.PolicyQueryFlags()
                self.policy_query_flags.parent = self
                self._children_name_map["policy_query_flags"] = "policy-query-flags"
                self._children_yang_names.add("policy-query-flags")

                self.label_info = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo()
                self.label_info.parent = self
                self._children_name_map["label_info"] = "label-info"
                self._children_yang_names.add("label-info")

                self.class_type = Rsvp.PsbDetaileds.PsbDetailed.ClassType()
                self.class_type.parent = self
                self._children_name_map["class_type"] = "class-type"
                self._children_yang_names.add("class-type")

                self.pfc = YList(self)
                self.in_ero = YList(self)
                self.out_ero = YList(self)
                self._segment_path = lambda: "psb-detailed"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'input_interface', 'backup_tunnel_name', 'is_in_ero_valid', 'is_out_ero_valid'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.S2LSubLsp, ['s2l_destination_address'], name, value)


            class Template(Entity):
                """
                RSVP Template
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:  :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.Template, self).__init__()

                    self.yang_name = "template"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-filter", ("rsvp_filter", Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_filter = Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter()
                    self.rsvp_filter.parent = self
                    self._children_name_map["rsvp_filter"] = "rsvp-filter"
                    self._children_yang_names.add("rsvp-filter")
                    self._segment_path = lambda: "template"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()


                class RsvpFilter(Entity):
                    """
                    RSVP Filter
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:  :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:  :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:  :py:class:`RsvpMgmtFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilter>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter, self).__init__()

                        self.yang_name = "rsvp-filter"
                        self.yang_parent_name = "template"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("udp-ipv4-session", ("udp_ipv4_session", Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session)), ("p2mp-ipv4-session", ("p2mp_ipv4_session", Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('filter_type', YLeaf(YType.enumeration, 'filter-type')),
                        ])
                        self.filter_type = None

                        self.udp_ipv4_session = Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self
                        self._children_name_map["udp_ipv4_session"] = "udp-ipv4-session"
                        self._children_yang_names.add("udp-ipv4-session")

                        self.p2mp_ipv4_session = Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self._children_name_map["p2mp_ipv4_session"] = "p2mp-ipv4-session"
                        self._children_yang_names.add("p2mp-ipv4-session")
                        self._segment_path = lambda: "rsvp-filter"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/template/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter, ['filter_type'], name, value)


                    class UdpIpv4Session(Entity):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session, self).__init__()

                            self.yang_name = "udp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self._segment_path = lambda: "udp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/template/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.UdpIpv4Session, ['source_address', 'source_port'], name, value)


                    class P2MpIpv4Session(Entity):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session, self).__init__()

                            self.yang_name = "p2mp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                                ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                                ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self.p2mp_sub_group_origin = None
                            self.sub_group_id = None
                            self._segment_path = lambda: "p2mp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/template/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.Template.RsvpFilter.P2MpIpv4Session, ['source_address', 'source_port', 'p2mp_sub_group_origin', 'sub_group_id'], name, value)


            class SessionAttribute(Entity):
                """
                RSVP Session Attribute
                
                .. attribute:: sess_attribute_flags
                
                	Session Attributes
                	**type**\:  :py:class:`SessAttributeFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags>`
                
                .. attribute:: setup_priority
                
                	Setup Priority
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: reservation_priority
                
                	Reservation Priority
                	**type**\: int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute, self).__init__()

                    self.yang_name = "session-attribute"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("sess-attribute-flags", ("sess_attribute_flags", Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('setup_priority', YLeaf(YType.uint8, 'setup-priority')),
                        ('reservation_priority', YLeaf(YType.uint8, 'reservation-priority')),
                    ])
                    self.setup_priority = None
                    self.reservation_priority = None

                    self.sess_attribute_flags = Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags()
                    self.sess_attribute_flags.parent = self
                    self._children_name_map["sess_attribute_flags"] = "sess-attribute-flags"
                    self._children_yang_names.add("sess-attribute-flags")
                    self._segment_path = lambda: "session-attribute"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute, ['setup_priority', 'reservation_priority'], name, value)


                class SessAttributeFlags(Entity):
                    """
                    Session Attributes
                    
                    .. attribute:: is_local_protect
                    
                    	Local Protection
                    	**type**\: bool
                    
                    .. attribute:: is_node_protect
                    
                    	Node Protection
                    	**type**\: bool
                    
                    .. attribute:: is_bandwidth_protect
                    
                    	Bandwidth Protection
                    	**type**\: bool
                    
                    .. attribute:: is_record_labels
                    
                    	Records Labels
                    	**type**\: bool
                    
                    .. attribute:: is_shared_explicit_requested
                    
                    	Shared Explicit Requested
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags, self).__init__()

                        self.yang_name = "sess-attribute-flags"
                        self.yang_parent_name = "session-attribute"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_local_protect', YLeaf(YType.boolean, 'is-local-protect')),
                            ('is_node_protect', YLeaf(YType.boolean, 'is-node-protect')),
                            ('is_bandwidth_protect', YLeaf(YType.boolean, 'is-bandwidth-protect')),
                            ('is_record_labels', YLeaf(YType.boolean, 'is-record-labels')),
                            ('is_shared_explicit_requested', YLeaf(YType.boolean, 'is-shared-explicit-requested')),
                        ])
                        self.is_local_protect = None
                        self.is_node_protect = None
                        self.is_bandwidth_protect = None
                        self.is_record_labels = None
                        self.is_shared_explicit_requested = None
                        self._segment_path = lambda: "sess-attribute-flags"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session-attribute/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.SessionAttribute.SessAttributeFlags, ['is_local_protect', 'is_node_protect', 'is_bandwidth_protect', 'is_record_labels', 'is_shared_explicit_requested'], name, value)


            class TrafficSpec(Entity):
                """
                RSVP Traffic Spec Info
                
                .. attribute:: traffic_average_rate
                
                	Traffic Average Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_max_burst
                
                	Traffic Maximum Burst
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: traffic_peak_rate
                
                	Traffic Peak Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_min_unit
                
                	Traffic Minimum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_max_unit
                
                	Traffic Maximum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.TrafficSpec, self).__init__()

                    self.yang_name = "traffic-spec"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                        ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                        ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                        ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                        ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                    ])
                    self.traffic_average_rate = None
                    self.traffic_max_burst = None
                    self.traffic_peak_rate = None
                    self.traffic_min_unit = None
                    self.traffic_max_unit = None
                    self._segment_path = lambda: "traffic-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.TrafficSpec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


            class GenericTrafficSpec(Entity):
                """
                RSVP Generic Traffic Spec Info
                
                .. attribute:: g709otn_tspec
                
                	G709 OTN Sender Tspec
                	**type**\:  :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec>`
                
                .. attribute:: intsrv_tspec
                
                	Integrated Services Sender Tspec
                	**type**\:  :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec>`
                
                .. attribute:: tspec_type
                
                	TspecType
                	**type**\:  :py:class:`RsvpMgmtTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec, self).__init__()

                    self.yang_name = "generic-traffic-spec"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("g709otn-tspec", ("g709otn_tspec", Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec)), ("intsrv-tspec", ("intsrv_tspec", Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('tspec_type', YLeaf(YType.enumeration, 'tspec-type')),
                    ])
                    self.tspec_type = None

                    self.g709otn_tspec = Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec()
                    self.g709otn_tspec.parent = self
                    self._children_name_map["g709otn_tspec"] = "g709otn-tspec"
                    self._children_yang_names.add("g709otn-tspec")

                    self.intsrv_tspec = Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec()
                    self.intsrv_tspec.parent = self
                    self._children_name_map["intsrv_tspec"] = "intsrv-tspec"
                    self._children_yang_names.add("intsrv-tspec")
                    self._segment_path = lambda: "generic-traffic-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec, ['tspec_type'], name, value)


                class G709OtnTspec(Entity):
                    """
                    G709 OTN Sender Tspec
                    
                    .. attribute:: traffic_signal_type
                    
                    	G709 OTN Traffic Signal Type (Refer G709 v3)
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: traffic_nvc
                    
                    	G709 OTN Traffic NVC
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_multiplier
                    
                    	G709 OTN Traffic Multiplier
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_bit_rate
                    
                    	G709 OTN Traffic Bit Rate
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec, self).__init__()

                        self.yang_name = "g709otn-tspec"
                        self.yang_parent_name = "generic-traffic-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('traffic_signal_type', YLeaf(YType.uint8, 'traffic-signal-type')),
                            ('traffic_nvc', YLeaf(YType.uint16, 'traffic-nvc')),
                            ('traffic_multiplier', YLeaf(YType.uint16, 'traffic-multiplier')),
                            ('traffic_bit_rate', YLeaf(YType.uint64, 'traffic-bit-rate')),
                        ])
                        self.traffic_signal_type = None
                        self.traffic_nvc = None
                        self.traffic_multiplier = None
                        self.traffic_bit_rate = None
                        self._segment_path = lambda: "g709otn-tspec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/generic-traffic-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.G709OtnTspec, ['traffic_signal_type', 'traffic_nvc', 'traffic_multiplier', 'traffic_bit_rate'], name, value)


                class IntsrvTspec(Entity):
                    """
                    Integrated Services Sender Tspec
                    
                    .. attribute:: traffic_average_rate
                    
                    	Traffic Average Rate in bytes per second
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_max_burst
                    
                    	Traffic Maximum Burst
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_peak_rate
                    
                    	Traffic Peak Rate in bytes per second
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_min_unit
                    
                    	Traffic Minimum Unit
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_max_unit
                    
                    	Traffic Maximum Unit
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec, self).__init__()

                        self.yang_name = "intsrv-tspec"
                        self.yang_parent_name = "generic-traffic-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                            ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                            ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                            ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                            ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                        ])
                        self.traffic_average_rate = None
                        self.traffic_max_burst = None
                        self.traffic_peak_rate = None
                        self.traffic_min_unit = None
                        self.traffic_max_unit = None
                        self._segment_path = lambda: "intsrv-tspec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/generic-traffic-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.GenericTrafficSpec.IntsrvTspec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


            class PathFlags(Entity):
                """
                Path Flags
                
                .. attribute:: is_non_rsvp_hop_upstream
                
                	Non\-RSVP Hop Upstream
                	**type**\: bool
                
                .. attribute:: is_local_sender
                
                	Local Sender
                	**type**\: bool
                
                .. attribute:: is_message_id_valid
                
                	MessageID Valid
                	**type**\: bool
                
                .. attribute:: is_local_repair
                
                	Rerouted
                	**type**\: bool
                
                .. attribute:: is_bidirectional
                
                	Bidirectional
                	**type**\: bool
                
                .. attribute:: is_lockout
                
                	Locked Out
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.PathFlags, self).__init__()

                    self.yang_name = "path-flags"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_non_rsvp_hop_upstream', YLeaf(YType.boolean, 'is-non-rsvp-hop-upstream')),
                        ('is_local_sender', YLeaf(YType.boolean, 'is-local-sender')),
                        ('is_message_id_valid', YLeaf(YType.boolean, 'is-message-id-valid')),
                        ('is_local_repair', YLeaf(YType.boolean, 'is-local-repair')),
                        ('is_bidirectional', YLeaf(YType.boolean, 'is-bidirectional')),
                        ('is_lockout', YLeaf(YType.boolean, 'is-lockout')),
                    ])
                    self.is_non_rsvp_hop_upstream = None
                    self.is_local_sender = None
                    self.is_message_id_valid = None
                    self.is_local_repair = None
                    self.is_bidirectional = None
                    self.is_lockout = None
                    self._segment_path = lambda: "path-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.PathFlags, ['is_non_rsvp_hop_upstream', 'is_local_sender', 'is_message_id_valid', 'is_local_repair', 'is_bidirectional', 'is_lockout'], name, value)


            class Hop(Entity):
                """
                Path Hop Info
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.Hop, self).__init__()

                    self.yang_name = "hop"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                        ('neighbor_logical_interface_name', YLeaf(YType.str, 'neighbor-logical-interface-name')),
                    ])
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None
                    self._segment_path = lambda: "hop"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.Hop, ['neighbor_address', 'neighbor_logical_interface_name'], name, value)


            class PolicySourceInfo(Entity):
                """
                Policy Sources Info
                
                .. attribute:: is_te_link
                
                	Policy Source is TE Link
                	**type**\: bool
                
                .. attribute:: is_local
                
                	Policy Source is Local
                	**type**\: bool
                
                .. attribute:: is_cops
                
                	Policy Source is COPS
                	**type**\: bool
                
                .. attribute:: is_default
                
                	Policy Source is Default
                	**type**\: bool
                
                .. attribute:: is_cable
                
                	Policy Source is Cable
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.PolicySourceInfo, self).__init__()

                    self.yang_name = "policy-source-info"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_te_link', YLeaf(YType.boolean, 'is-te-link')),
                        ('is_local', YLeaf(YType.boolean, 'is-local')),
                        ('is_cops', YLeaf(YType.boolean, 'is-cops')),
                        ('is_default', YLeaf(YType.boolean, 'is-default')),
                        ('is_cable', YLeaf(YType.boolean, 'is-cable')),
                    ])
                    self.is_te_link = None
                    self.is_local = None
                    self.is_cops = None
                    self.is_default = None
                    self.is_cable = None
                    self._segment_path = lambda: "policy-source-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.PolicySourceInfo, ['is_te_link', 'is_local', 'is_cops', 'is_default', 'is_cable'], name, value)


            class Header(Entity):
                """
                RSVP Header Info
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.Header, self).__init__()

                    self.yang_name = "header"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('rsvp_version', YLeaf(YType.uint8, 'rsvp-version')),
                        ('rsvp_header_flags', YLeaf(YType.uint8, 'rsvp-header-flags')),
                        ('rsvp_ttl', YLeaf(YType.uint8, 'rsvp-ttl')),
                        ('rsvp_message_type', YLeaf(YType.uint8, 'rsvp-message-type')),
                        ('ip_tos', YLeaf(YType.uint8, 'ip-tos')),
                        ('ip_ttl', YLeaf(YType.uint8, 'ip-ttl')),
                        ('ip_source_address', YLeaf(YType.str, 'ip-source-address')),
                    ])
                    self.rsvp_version = None
                    self.rsvp_header_flags = None
                    self.rsvp_ttl = None
                    self.rsvp_message_type = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.ip_source_address = None
                    self._segment_path = lambda: "header"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.Header, ['rsvp_version', 'rsvp_header_flags', 'rsvp_ttl', 'rsvp_message_type', 'ip_tos', 'ip_ttl', 'ip_source_address'], name, value)


            class ExpiryTime(Entity):
                """
                Expiry Time
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.ExpiryTime, self).__init__()

                    self.yang_name = "expiry-time"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "expiry-time"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.ExpiryTime, ['seconds', 'nanoseconds'], name, value)


            class PolicyFlags(Entity):
                """
                Policy Flags
                
                .. attribute:: is_accepted
                
                	Accepted
                	**type**\: bool
                
                .. attribute:: is_installed
                
                	Installed
                	**type**\: bool
                
                .. attribute:: is_forwarding
                
                	Forwarding
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.PolicyFlags, self).__init__()

                    self.yang_name = "policy-flags"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_accepted', YLeaf(YType.boolean, 'is-accepted')),
                        ('is_installed', YLeaf(YType.boolean, 'is-installed')),
                        ('is_forwarding', YLeaf(YType.boolean, 'is-forwarding')),
                    ])
                    self.is_accepted = None
                    self.is_installed = None
                    self.is_forwarding = None
                    self._segment_path = lambda: "policy-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.PolicyFlags, ['is_accepted', 'is_installed', 'is_forwarding'], name, value)


            class PolicyQueryFlags(Entity):
                """
                Policy Query Flags
                
                .. attribute:: is_needed
                
                	Needed
                	**type**\: bool
                
                .. attribute:: is_report_required
                
                	Report Required
                	**type**\: bool
                
                .. attribute:: is_resync
                
                	Resynchronization
                	**type**\: bool
                
                .. attribute:: is_bypass
                
                	Bypass
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.PolicyQueryFlags, self).__init__()

                    self.yang_name = "policy-query-flags"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_needed', YLeaf(YType.boolean, 'is-needed')),
                        ('is_report_required', YLeaf(YType.boolean, 'is-report-required')),
                        ('is_resync', YLeaf(YType.boolean, 'is-resync')),
                        ('is_bypass', YLeaf(YType.boolean, 'is-bypass')),
                    ])
                    self.is_needed = None
                    self.is_report_required = None
                    self.is_resync = None
                    self.is_bypass = None
                    self._segment_path = lambda: "policy-query-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.PolicyQueryFlags, ['is_needed', 'is_report_required', 'is_resync', 'is_bypass'], name, value)


            class LabelInfo(Entity):
                """
                Label Information
                
                .. attribute:: generic_local_downstream_label
                
                	Generic Local Downstream Label
                	**type**\:  :py:class:`GenericLocalDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel>`
                
                .. attribute:: generic_outgoing_downstream_label
                
                	Generic Outgoing Downstream Label
                	**type**\:  :py:class:`GenericOutgoingDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel>`
                
                .. attribute:: generic_merge_point_label
                
                	Generic MergePoint Label
                	**type**\:  :py:class:`GenericMergePointLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel>`
                
                .. attribute:: generic_outgoing_upstream_label
                
                	Generic Outgoing Upstream Label
                	**type**\:  :py:class:`GenericOutgoingUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel>`
                
                .. attribute:: generic_local_upstream_label
                
                	Generic Local Upstream Label
                	**type**\:  :py:class:`GenericLocalUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel>`
                
                .. attribute:: generic_recovery_label
                
                	Generic Recovery Label
                	**type**\:  :py:class:`GenericRecoveryLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel>`
                
                .. attribute:: is_valid
                
                	Is the label information valid
                	**type**\: bool
                
                .. attribute:: local_downstream_label
                
                	Local Downstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_downstream_label
                
                	Outgoing Downstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: merge_point_label
                
                	MergePoint Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_upstream_label
                
                	Outgoing Upstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_upstream_label
                
                	Local Upstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: recovery_label
                
                	Recovery Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_wrap_label
                
                	LSP Wrap Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo, self).__init__()

                    self.yang_name = "label-info"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("generic-local-downstream-label", ("generic_local_downstream_label", Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel)), ("generic-outgoing-downstream-label", ("generic_outgoing_downstream_label", Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel)), ("generic-merge-point-label", ("generic_merge_point_label", Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel)), ("generic-outgoing-upstream-label", ("generic_outgoing_upstream_label", Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel)), ("generic-local-upstream-label", ("generic_local_upstream_label", Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel)), ("generic-recovery-label", ("generic_recovery_label", Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_valid', YLeaf(YType.boolean, 'is-valid')),
                        ('local_downstream_label', YLeaf(YType.uint32, 'local-downstream-label')),
                        ('outgoing_downstream_label', YLeaf(YType.uint32, 'outgoing-downstream-label')),
                        ('merge_point_label', YLeaf(YType.uint32, 'merge-point-label')),
                        ('outgoing_upstream_label', YLeaf(YType.uint32, 'outgoing-upstream-label')),
                        ('local_upstream_label', YLeaf(YType.uint32, 'local-upstream-label')),
                        ('recovery_label', YLeaf(YType.uint32, 'recovery-label')),
                        ('lsp_wrap_label', YLeaf(YType.uint32, 'lsp-wrap-label')),
                    ])
                    self.is_valid = None
                    self.local_downstream_label = None
                    self.outgoing_downstream_label = None
                    self.merge_point_label = None
                    self.outgoing_upstream_label = None
                    self.local_upstream_label = None
                    self.recovery_label = None
                    self.lsp_wrap_label = None

                    self.generic_local_downstream_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel()
                    self.generic_local_downstream_label.parent = self
                    self._children_name_map["generic_local_downstream_label"] = "generic-local-downstream-label"
                    self._children_yang_names.add("generic-local-downstream-label")

                    self.generic_outgoing_downstream_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel()
                    self.generic_outgoing_downstream_label.parent = self
                    self._children_name_map["generic_outgoing_downstream_label"] = "generic-outgoing-downstream-label"
                    self._children_yang_names.add("generic-outgoing-downstream-label")

                    self.generic_merge_point_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel()
                    self.generic_merge_point_label.parent = self
                    self._children_name_map["generic_merge_point_label"] = "generic-merge-point-label"
                    self._children_yang_names.add("generic-merge-point-label")

                    self.generic_outgoing_upstream_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel()
                    self.generic_outgoing_upstream_label.parent = self
                    self._children_name_map["generic_outgoing_upstream_label"] = "generic-outgoing-upstream-label"
                    self._children_yang_names.add("generic-outgoing-upstream-label")

                    self.generic_local_upstream_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel()
                    self.generic_local_upstream_label.parent = self
                    self._children_name_map["generic_local_upstream_label"] = "generic-local-upstream-label"
                    self._children_yang_names.add("generic-local-upstream-label")

                    self.generic_recovery_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel()
                    self.generic_recovery_label.parent = self
                    self._children_name_map["generic_recovery_label"] = "generic-recovery-label"
                    self._children_yang_names.add("generic-recovery-label")
                    self._segment_path = lambda: "label-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo, ['is_valid', 'local_downstream_label', 'outgoing_downstream_label', 'merge_point_label', 'outgoing_upstream_label', 'local_upstream_label', 'recovery_label', 'lsp_wrap_label'], name, value)


                class GenericLocalDownstreamLabel(Entity):
                    """
                    Generic Local Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel, self).__init__()

                        self.yang_name = "generic-local-downstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-local-downstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-local-downstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-local-downstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericOutgoingDownstreamLabel(Entity):
                    """
                    Generic Outgoing Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel, self).__init__()

                        self.yang_name = "generic-outgoing-downstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-outgoing-downstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-outgoing-downstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-outgoing-downstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericMergePointLabel(Entity):
                    """
                    Generic MergePoint Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel, self).__init__()

                        self.yang_name = "generic-merge-point-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-merge-point-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-merge-point-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-merge-point-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel, ['value'], name, value)


                class GenericOutgoingUpstreamLabel(Entity):
                    """
                    Generic Outgoing Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel, self).__init__()

                        self.yang_name = "generic-outgoing-upstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-outgoing-upstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-outgoing-upstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-outgoing-upstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericLocalUpstreamLabel(Entity):
                    """
                    Generic Local Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel, self).__init__()

                        self.yang_name = "generic-local-upstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-local-upstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-local-upstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-local-upstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericRecoveryLabel(Entity):
                    """
                    Generic Recovery Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel, self).__init__()

                        self.yang_name = "generic-recovery-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-recovery-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-recovery-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-recovery-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel, ['value'], name, value)


            class ClassType(Entity):
                """
                DS\-TE Class\-Type
                
                .. attribute:: is_class_type_info_valid
                
                	Is the Class\-Type information valid
                	**type**\: bool
                
                .. attribute:: class_type
                
                	DS\-TE Class\-Type
                	**type**\: int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.ClassType, self).__init__()

                    self.yang_name = "class-type"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_class_type_info_valid', YLeaf(YType.boolean, 'is-class-type-info-valid')),
                        ('class_type', YLeaf(YType.uint8, 'class-type')),
                    ])
                    self.is_class_type_info_valid = None
                    self.class_type = None
                    self._segment_path = lambda: "class-type"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.ClassType, ['is_class_type_info_valid', 'class_type'], name, value)


            class Pfc(Entity):
                """
                Path Forwarding Contexts
                
                .. attribute:: policy_flags
                
                	Policy Flags
                	**type**\:  :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags>`
                
                .. attribute:: policy_query_flags
                
                	Policy Query Flags
                	**type**\:  :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags>`
                
                .. attribute:: output_interface
                
                	Output interface
                	**type**\: str
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.Pfc, self).__init__()

                    self.yang_name = "pfc"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("policy-flags", ("policy_flags", Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags)), ("policy-query-flags", ("policy_query_flags", Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('output_interface', YLeaf(YType.str, 'output-interface')),
                    ])
                    self.output_interface = None

                    self.policy_flags = Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags()
                    self.policy_flags.parent = self
                    self._children_name_map["policy_flags"] = "policy-flags"
                    self._children_yang_names.add("policy-flags")

                    self.policy_query_flags = Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags()
                    self.policy_query_flags.parent = self
                    self._children_name_map["policy_query_flags"] = "policy-query-flags"
                    self._children_yang_names.add("policy-query-flags")
                    self._segment_path = lambda: "pfc"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.Pfc, ['output_interface'], name, value)


                class PolicyFlags(Entity):
                    """
                    Policy Flags
                    
                    .. attribute:: is_accepted
                    
                    	Accepted
                    	**type**\: bool
                    
                    .. attribute:: is_installed
                    
                    	Installed
                    	**type**\: bool
                    
                    .. attribute:: is_forwarding
                    
                    	Forwarding
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags, self).__init__()

                        self.yang_name = "policy-flags"
                        self.yang_parent_name = "pfc"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_accepted', YLeaf(YType.boolean, 'is-accepted')),
                            ('is_installed', YLeaf(YType.boolean, 'is-installed')),
                            ('is_forwarding', YLeaf(YType.boolean, 'is-forwarding')),
                        ])
                        self.is_accepted = None
                        self.is_installed = None
                        self.is_forwarding = None
                        self._segment_path = lambda: "policy-flags"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/pfc/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyFlags, ['is_accepted', 'is_installed', 'is_forwarding'], name, value)


                class PolicyQueryFlags(Entity):
                    """
                    Policy Query Flags
                    
                    .. attribute:: is_needed
                    
                    	Needed
                    	**type**\: bool
                    
                    .. attribute:: is_report_required
                    
                    	Report Required
                    	**type**\: bool
                    
                    .. attribute:: is_resync
                    
                    	Resynchronization
                    	**type**\: bool
                    
                    .. attribute:: is_bypass
                    
                    	Bypass
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags, self).__init__()

                        self.yang_name = "policy-query-flags"
                        self.yang_parent_name = "pfc"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_needed', YLeaf(YType.boolean, 'is-needed')),
                            ('is_report_required', YLeaf(YType.boolean, 'is-report-required')),
                            ('is_resync', YLeaf(YType.boolean, 'is-resync')),
                            ('is_bypass', YLeaf(YType.boolean, 'is-bypass')),
                        ])
                        self.is_needed = None
                        self.is_report_required = None
                        self.is_resync = None
                        self.is_bypass = None
                        self._segment_path = lambda: "policy-query-flags"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/pfc/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.Pfc.PolicyQueryFlags, ['is_needed', 'is_report_required', 'is_resync', 'is_bypass'], name, value)


            class InEro(Entity):
                """
                Incoming Explicit Route Sub Objects
                
                .. attribute:: ipv4ero_sub_object
                
                	IPV4 ERO Sub Object
                	**type**\:  :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject>`
                
                .. attribute:: unnumbered_ero_sub_object
                
                	Unnumbered ERO Sub Object
                	**type**\:  :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject>`
                
                .. attribute:: ero_type
                
                	EROType
                	**type**\:  :py:class:`RsvpMgmtEroSubobj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobj>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.InEro, self).__init__()

                    self.yang_name = "in-ero"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("ipv4ero-sub-object", ("ipv4ero_sub_object", Rsvp.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject)), ("unnumbered-ero-sub-object", ("unnumbered_ero_sub_object", Rsvp.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('ero_type', YLeaf(YType.enumeration, 'ero-type')),
                    ])
                    self.ero_type = None

                    self.ipv4ero_sub_object = Rsvp.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject()
                    self.ipv4ero_sub_object.parent = self
                    self._children_name_map["ipv4ero_sub_object"] = "ipv4ero-sub-object"
                    self._children_yang_names.add("ipv4ero-sub-object")

                    self.unnumbered_ero_sub_object = Rsvp.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject()
                    self.unnumbered_ero_sub_object.parent = self
                    self._children_name_map["unnumbered_ero_sub_object"] = "unnumbered-ero-sub-object"
                    self._children_yang_names.add("unnumbered-ero-sub-object")
                    self._segment_path = lambda: "in-ero"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.InEro, ['ero_type'], name, value)


                class Ipv4EroSubObject(Entity):
                    """
                    IPV4 ERO Sub Object
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\: bool
                    
                    .. attribute:: ero_address
                    
                    	The ERO IPV4 Address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: prefix_length
                    
                    	ERO Prefix Length
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject, self).__init__()

                        self.yang_name = "ipv4ero-sub-object"
                        self.yang_parent_name = "in-ero"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                            ('ero_address', YLeaf(YType.str, 'ero-address')),
                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                        ])
                        self.is_strict_route = None
                        self.ero_address = None
                        self.prefix_length = None
                        self._segment_path = lambda: "ipv4ero-sub-object"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/in-ero/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.InEro.Ipv4EroSubObject, ['is_strict_route', 'ero_address', 'prefix_length'], name, value)


                class UnnumberedEroSubObject(Entity):
                    """
                    Unnumbered ERO Sub Object
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\: bool
                    
                    .. attribute:: ero_interface_id
                    
                    	The Interface ID in ERO
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ero_router_id
                    
                    	The Router ID in ERO
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: status
                    
                    	Status of ERO
                    	**type**\:  :py:class:`RsvpMgmtEroSubobjStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatus>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject, self).__init__()

                        self.yang_name = "unnumbered-ero-sub-object"
                        self.yang_parent_name = "in-ero"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                            ('ero_interface_id', YLeaf(YType.uint32, 'ero-interface-id')),
                            ('ero_router_id', YLeaf(YType.str, 'ero-router-id')),
                            ('status', YLeaf(YType.enumeration, 'status')),
                        ])
                        self.is_strict_route = None
                        self.ero_interface_id = None
                        self.ero_router_id = None
                        self.status = None
                        self._segment_path = lambda: "unnumbered-ero-sub-object"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/in-ero/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.InEro.UnnumberedEroSubObject, ['is_strict_route', 'ero_interface_id', 'ero_router_id', 'status'], name, value)


            class OutEro(Entity):
                """
                Outgoing Explicit Route Sub Objects
                
                .. attribute:: ipv4ero_sub_object
                
                	IPV4 ERO Sub Object
                	**type**\:  :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject>`
                
                .. attribute:: unnumbered_ero_sub_object
                
                	Unnumbered ERO Sub Object
                	**type**\:  :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject>`
                
                .. attribute:: ero_type
                
                	EROType
                	**type**\:  :py:class:`RsvpMgmtEroSubobj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobj>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbDetaileds.PsbDetailed.OutEro, self).__init__()

                    self.yang_name = "out-ero"
                    self.yang_parent_name = "psb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("ipv4ero-sub-object", ("ipv4ero_sub_object", Rsvp.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject)), ("unnumbered-ero-sub-object", ("unnumbered_ero_sub_object", Rsvp.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('ero_type', YLeaf(YType.enumeration, 'ero-type')),
                    ])
                    self.ero_type = None

                    self.ipv4ero_sub_object = Rsvp.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject()
                    self.ipv4ero_sub_object.parent = self
                    self._children_name_map["ipv4ero_sub_object"] = "ipv4ero-sub-object"
                    self._children_yang_names.add("ipv4ero-sub-object")

                    self.unnumbered_ero_sub_object = Rsvp.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject()
                    self.unnumbered_ero_sub_object.parent = self
                    self._children_name_map["unnumbered_ero_sub_object"] = "unnumbered-ero-sub-object"
                    self._children_yang_names.add("unnumbered-ero-sub-object")
                    self._segment_path = lambda: "out-ero"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.OutEro, ['ero_type'], name, value)


                class Ipv4EroSubObject(Entity):
                    """
                    IPV4 ERO Sub Object
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\: bool
                    
                    .. attribute:: ero_address
                    
                    	The ERO IPV4 Address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: prefix_length
                    
                    	ERO Prefix Length
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject, self).__init__()

                        self.yang_name = "ipv4ero-sub-object"
                        self.yang_parent_name = "out-ero"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                            ('ero_address', YLeaf(YType.str, 'ero-address')),
                            ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                        ])
                        self.is_strict_route = None
                        self.ero_address = None
                        self.prefix_length = None
                        self._segment_path = lambda: "ipv4ero-sub-object"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/out-ero/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.OutEro.Ipv4EroSubObject, ['is_strict_route', 'ero_address', 'prefix_length'], name, value)


                class UnnumberedEroSubObject(Entity):
                    """
                    Unnumbered ERO Sub Object
                    
                    .. attribute:: is_strict_route
                    
                    	ERO Entry Is Strict
                    	**type**\: bool
                    
                    .. attribute:: ero_interface_id
                    
                    	The Interface ID in ERO
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ero_router_id
                    
                    	The Router ID in ERO
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: status
                    
                    	Status of ERO
                    	**type**\:  :py:class:`RsvpMgmtEroSubobjStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatus>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject, self).__init__()

                        self.yang_name = "unnumbered-ero-sub-object"
                        self.yang_parent_name = "out-ero"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                            ('ero_interface_id', YLeaf(YType.uint32, 'ero-interface-id')),
                            ('ero_router_id', YLeaf(YType.str, 'ero-router-id')),
                            ('status', YLeaf(YType.enumeration, 'status')),
                        ])
                        self.is_strict_route = None
                        self.ero_interface_id = None
                        self.ero_router_id = None
                        self.status = None
                        self._segment_path = lambda: "unnumbered-ero-sub-object"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/out-ero/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbDetaileds.PsbDetailed.OutEro.UnnumberedEroSubObject, ['is_strict_route', 'ero_interface_id', 'ero_router_id', 'status'], name, value)


    class ControllerDetaileds(Entity):
        """
        Table of detailed info about RSVP\-enabled
        controllers
        
        .. attribute:: controller_detailed
        
        	Detailed info about an RSVP\-enabled controller
        	**type**\: list of  		 :py:class:`ControllerDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.ControllerDetaileds, self).__init__()

            self.yang_name = "controller-detaileds"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("controller-detailed", ("controller_detailed", Rsvp.ControllerDetaileds.ControllerDetailed))])
            self._leafs = OrderedDict()

            self.controller_detailed = YList(self)
            self._segment_path = lambda: "controller-detaileds"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.ControllerDetaileds, [], name, value)


        class ControllerDetailed(Entity):
            """
            Detailed info about an RSVP\-enabled controller
            
            .. attribute:: controller_name  (key)
            
            	Controller Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:  :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation>`
            
            .. attribute:: flags
            
            	Interface flags
            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed.Flags>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\: str
            
            .. attribute:: signalling_ip_tos
            
            	IP TOS (precedence/DSCP) to use in signalling messages
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: integrity_send_password
            
            	Integrity send password
            	**type**\: str
            
            	**length:** 0..40
            
            .. attribute:: integrity_receive_password
            
            	Integrity receive password
            	**type**\: str
            
            	**length:** 0..40
            
            .. attribute:: integrity_receive_password_optional
            
            	Integrity recv password optional
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: refresh_timer_state
            
            	Refresh timer state
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: summary_refresh_timer_state
            
            	Summary refresh timer state
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: refresh_interval
            
            	Refresh interval in msecs
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: millisecond
            
            .. attribute:: out_of_band_refresh_interval
            
            	Out\-of\-band Refresh interval in msecs
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: summary_refresh_max_size
            
            	Max size in bytes of a single SRefresh
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: bundle_message_max_size
            
            	Max size in bytes of a single Bundle message
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: expiry_timer_state
            
            	Expiry timer state
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: expiry_states
            
            	Number of states for expiry check
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: expiry_interval
            
            	Expiry interval in msecs
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: millisecond
            
            .. attribute:: expiry_drops_tolerated
            
            	Number of missed messages tolerated
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: out_of_band_expiry_drops_tolerated
            
            	Number of out\-of\-band missed messages tolerated
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ack_hold_time
            
            	ACK hold time in msec
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ack_max_size
            
            	Max size for ACK message
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: retransmit_time
            
            	Retransmit time in msec
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: pacing_interval
            
            	Pacing interval in msecs
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: pacing_message_rate
            
            	No. of messages per interval
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: pacing_timer_state
            
            	State of pacing timer
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: pacing_messages
            
            	Number of messages deferred for pacing
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: neighbor_array
            
            	Neighbor array
            	**type**\: list of  		 :py:class:`NeighborArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.ControllerDetaileds.ControllerDetailed, self).__init__()

                self.yang_name = "controller-detailed"
                self.yang_parent_name = "controller-detaileds"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['controller_name']
                self._child_container_classes = OrderedDict([("bandwidth-information", ("bandwidth_information", Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation)), ("flags", ("flags", Rsvp.ControllerDetaileds.ControllerDetailed.Flags))])
                self._child_list_classes = OrderedDict([("neighbor-array", ("neighbor_array", Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray))])
                self._leafs = OrderedDict([
                    ('controller_name', YLeaf(YType.str, 'controller-name')),
                    ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                    ('signalling_ip_tos', YLeaf(YType.uint8, 'signalling-ip-tos')),
                    ('integrity_send_password', YLeaf(YType.str, 'integrity-send-password')),
                    ('integrity_receive_password', YLeaf(YType.str, 'integrity-receive-password')),
                    ('integrity_receive_password_optional', YLeaf(YType.uint8, 'integrity-receive-password-optional')),
                    ('refresh_timer_state', YLeaf(YType.enumeration, 'refresh-timer-state')),
                    ('summary_refresh_timer_state', YLeaf(YType.enumeration, 'summary-refresh-timer-state')),
                    ('refresh_interval', YLeaf(YType.int32, 'refresh-interval')),
                    ('out_of_band_refresh_interval', YLeaf(YType.uint32, 'out-of-band-refresh-interval')),
                    ('summary_refresh_max_size', YLeaf(YType.uint32, 'summary-refresh-max-size')),
                    ('bundle_message_max_size', YLeaf(YType.uint32, 'bundle-message-max-size')),
                    ('expiry_timer_state', YLeaf(YType.enumeration, 'expiry-timer-state')),
                    ('expiry_states', YLeaf(YType.int32, 'expiry-states')),
                    ('expiry_interval', YLeaf(YType.int32, 'expiry-interval')),
                    ('expiry_drops_tolerated', YLeaf(YType.int32, 'expiry-drops-tolerated')),
                    ('out_of_band_expiry_drops_tolerated', YLeaf(YType.uint32, 'out-of-band-expiry-drops-tolerated')),
                    ('ack_hold_time', YLeaf(YType.uint32, 'ack-hold-time')),
                    ('ack_max_size', YLeaf(YType.uint32, 'ack-max-size')),
                    ('retransmit_time', YLeaf(YType.uint32, 'retransmit-time')),
                    ('pacing_interval', YLeaf(YType.uint32, 'pacing-interval')),
                    ('pacing_message_rate', YLeaf(YType.uint32, 'pacing-message-rate')),
                    ('pacing_timer_state', YLeaf(YType.enumeration, 'pacing-timer-state')),
                    ('pacing_messages', YLeaf(YType.int32, 'pacing-messages')),
                ])
                self.controller_name = None
                self.interface_name_xr = None
                self.signalling_ip_tos = None
                self.integrity_send_password = None
                self.integrity_receive_password = None
                self.integrity_receive_password_optional = None
                self.refresh_timer_state = None
                self.summary_refresh_timer_state = None
                self.refresh_interval = None
                self.out_of_band_refresh_interval = None
                self.summary_refresh_max_size = None
                self.bundle_message_max_size = None
                self.expiry_timer_state = None
                self.expiry_states = None
                self.expiry_interval = None
                self.expiry_drops_tolerated = None
                self.out_of_band_expiry_drops_tolerated = None
                self.ack_hold_time = None
                self.ack_max_size = None
                self.retransmit_time = None
                self.pacing_interval = None
                self.pacing_message_rate = None
                self.pacing_timer_state = None
                self.pacing_messages = None

                self.bandwidth_information = Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation()
                self.bandwidth_information.parent = self
                self._children_name_map["bandwidth_information"] = "bandwidth-information"
                self._children_yang_names.add("bandwidth-information")

                self.flags = Rsvp.ControllerDetaileds.ControllerDetailed.Flags()
                self.flags.parent = self
                self._children_name_map["flags"] = "flags"
                self._children_yang_names.add("flags")

                self.neighbor_array = YList(self)
                self._segment_path = lambda: "controller-detailed" + "[controller-name='" + str(self.controller_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-detaileds/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.ControllerDetaileds.ControllerDetailed, ['controller_name', 'interface_name_xr', 'signalling_ip_tos', 'integrity_send_password', 'integrity_receive_password', 'integrity_receive_password_optional', 'refresh_timer_state', 'summary_refresh_timer_state', 'refresh_interval', 'out_of_band_refresh_interval', 'summary_refresh_max_size', 'bundle_message_max_size', 'expiry_timer_state', 'expiry_states', 'expiry_interval', 'expiry_drops_tolerated', 'out_of_band_expiry_drops_tolerated', 'ack_hold_time', 'ack_max_size', 'retransmit_time', 'pacing_interval', 'pacing_message_rate', 'pacing_timer_state', 'pacing_messages'], name, value)


            class BandwidthInformation(Entity):
                """
                Interface bandwidth information
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:  :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:  :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.StandardDsteInterface>`
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:  :py:class:`RsvpMgmtDsteModes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModes>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation, self).__init__()

                    self.yang_name = "bandwidth-information"
                    self.yang_parent_name = "controller-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("pre-standard-dste-interface", ("pre_standard_dste_interface", Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.PreStandardDsteInterface)), ("standard-dste-interface", ("standard_dste_interface", Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.StandardDsteInterface))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dste_mode', YLeaf(YType.enumeration, 'dste-mode')),
                    ])
                    self.dste_mode = None

                    self.pre_standard_dste_interface = Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self._children_name_map["pre_standard_dste_interface"] = "pre-standard-dste-interface"
                    self._children_yang_names.add("pre-standard-dste-interface")

                    self.standard_dste_interface = Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self
                    self._children_name_map["standard_dste_interface"] = "standard-dste-interface"
                    self._children_yang_names.add("standard-dste-interface")
                    self._segment_path = lambda: "bandwidth-information"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation, ['dste_mode'], name, value)


                class PreStandardDsteInterface(Entity):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.PreStandardDsteInterface, self).__init__()

                        self.yang_name = "pre-standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_subpool_bandwidth', YLeaf(YType.uint64, 'max-subpool-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_subpool_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-subpool-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_subpool_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self._segment_path = lambda: "pre-standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.PreStandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_subpool_bandwidth', 'is_max_bandwidth_absolute', 'is_max_subpool_bandwidth_absolute'], name, value)


                class StandardDsteInterface(Entity):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.StandardDsteInterface, self).__init__()

                        self.yang_name = "standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_pool0_bandwidth', YLeaf(YType.uint64, 'max-pool0-bandwidth')),
                            ('max_pool1_bandwidth', YLeaf(YType.uint64, 'max-pool1-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_bc0_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc0-bandwidth-absolute')),
                            ('is_max_bc1_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc1-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self._segment_path = lambda: "standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.ControllerDetaileds.ControllerDetailed.BandwidthInformation.StandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_pool0_bandwidth', 'max_pool1_bandwidth', 'is_max_bandwidth_absolute', 'is_max_bc0_bandwidth_absolute', 'is_max_bc1_bandwidth_absolute'], name, value)


            class Flags(Entity):
                """
                Interface flags
                
                .. attribute:: is_mpls_enabled
                
                	MPLS enabled on interface
                	**type**\: bool
                
                .. attribute:: is_refresh_reduction_enabled
                
                	Refresh Reduction enabled
                	**type**\: bool
                
                .. attribute:: is_pacing_enabled
                
                	Message pacing enabled
                	**type**\: bool
                
                .. attribute:: is_refresh_enabled
                
                	Refresh enabled
                	**type**\: bool
                
                .. attribute:: is_s_refresh_enabled
                
                	Summary Refresh enabled
                	**type**\: bool
                
                .. attribute:: is_interface_down
                
                	Interface is DOWN
                	**type**\: bool
                
                .. attribute:: is_interface_created
                
                	Interface is created
                	**type**\: bool
                
                .. attribute:: is_rel_s_refresh_enabled
                
                	Use reliable xmt for SRefresh
                	**type**\: bool
                
                .. attribute:: is_backup_tunnel
                
                	This is backup tunnel
                	**type**\: bool
                
                .. attribute:: is_rsvp_configured
                
                	RSVP explicitly configured
                	**type**\: bool
                
                .. attribute:: is_non_default_vrf
                
                	Interface is defined in non\-Default VRF
                	**type**\: bool
                
                .. attribute:: is_message_bundling_enabled
                
                	Use bundling for outgoing RSVP messages
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.ControllerDetaileds.ControllerDetailed.Flags, self).__init__()

                    self.yang_name = "flags"
                    self.yang_parent_name = "controller-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_mpls_enabled', YLeaf(YType.boolean, 'is-mpls-enabled')),
                        ('is_refresh_reduction_enabled', YLeaf(YType.boolean, 'is-refresh-reduction-enabled')),
                        ('is_pacing_enabled', YLeaf(YType.boolean, 'is-pacing-enabled')),
                        ('is_refresh_enabled', YLeaf(YType.boolean, 'is-refresh-enabled')),
                        ('is_s_refresh_enabled', YLeaf(YType.boolean, 'is-s-refresh-enabled')),
                        ('is_interface_down', YLeaf(YType.boolean, 'is-interface-down')),
                        ('is_interface_created', YLeaf(YType.boolean, 'is-interface-created')),
                        ('is_rel_s_refresh_enabled', YLeaf(YType.boolean, 'is-rel-s-refresh-enabled')),
                        ('is_backup_tunnel', YLeaf(YType.boolean, 'is-backup-tunnel')),
                        ('is_rsvp_configured', YLeaf(YType.boolean, 'is-rsvp-configured')),
                        ('is_non_default_vrf', YLeaf(YType.boolean, 'is-non-default-vrf')),
                        ('is_message_bundling_enabled', YLeaf(YType.boolean, 'is-message-bundling-enabled')),
                    ])
                    self.is_mpls_enabled = None
                    self.is_refresh_reduction_enabled = None
                    self.is_pacing_enabled = None
                    self.is_refresh_enabled = None
                    self.is_s_refresh_enabled = None
                    self.is_interface_down = None
                    self.is_interface_created = None
                    self.is_rel_s_refresh_enabled = None
                    self.is_backup_tunnel = None
                    self.is_rsvp_configured = None
                    self.is_non_default_vrf = None
                    self.is_message_bundling_enabled = None
                    self._segment_path = lambda: "flags"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.ControllerDetaileds.ControllerDetailed.Flags, ['is_mpls_enabled', 'is_refresh_reduction_enabled', 'is_pacing_enabled', 'is_refresh_enabled', 'is_s_refresh_enabled', 'is_interface_down', 'is_interface_created', 'is_rel_s_refresh_enabled', 'is_backup_tunnel', 'is_rsvp_configured', 'is_non_default_vrf', 'is_message_bundling_enabled'], name, value)


            class NeighborArray(Entity):
                """
                Neighbor array
                
                .. attribute:: expiry_time
                
                	Expiry time
                	**type**\:  :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray.ExpiryTime>`
                
                .. attribute:: is_neighbor_refresh_reduction_capable
                
                	Is neighbor capable of Refresh Reduction
                	**type**\: bool
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: message_ids
                
                	Number of MessageIDs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_states
                
                	Number of outgoing states to the neighbour
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: neighbor_message_id
                
                	List of Neighbor MessageIDs
                	**type**\: list of  		 :py:class:`NeighborMessageId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray.NeighborMessageId>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray, self).__init__()

                    self.yang_name = "neighbor-array"
                    self.yang_parent_name = "controller-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("expiry-time", ("expiry_time", Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray.ExpiryTime))])
                    self._child_list_classes = OrderedDict([("neighbor-message-id", ("neighbor_message_id", Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray.NeighborMessageId))])
                    self._leafs = OrderedDict([
                        ('is_neighbor_refresh_reduction_capable', YLeaf(YType.boolean, 'is-neighbor-refresh-reduction-capable')),
                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                        ('message_ids', YLeaf(YType.uint32, 'message-ids')),
                        ('outgoing_states', YLeaf(YType.int32, 'outgoing-states')),
                    ])
                    self.is_neighbor_refresh_reduction_capable = None
                    self.neighbor_address = None
                    self.message_ids = None
                    self.outgoing_states = None

                    self.expiry_time = Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray.ExpiryTime()
                    self.expiry_time.parent = self
                    self._children_name_map["expiry_time"] = "expiry-time"
                    self._children_yang_names.add("expiry-time")

                    self.neighbor_message_id = YList(self)
                    self._segment_path = lambda: "neighbor-array"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray, ['is_neighbor_refresh_reduction_capable', 'neighbor_address', 'message_ids', 'outgoing_states'], name, value)


                class ExpiryTime(Entity):
                    """
                    Expiry time
                    
                    .. attribute:: seconds
                    
                    	Time Value in Seconds
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	Time Value in Nano\-seconds
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray.ExpiryTime, self).__init__()

                        self.yang_name = "expiry-time"
                        self.yang_parent_name = "neighbor-array"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.int32, 'seconds')),
                            ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "expiry-time"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray.ExpiryTime, ['seconds', 'nanoseconds'], name, value)


                class NeighborMessageId(Entity):
                    """
                    List of Neighbor MessageIDs
                    
                    .. attribute:: message_id
                    
                    	Message ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray.NeighborMessageId, self).__init__()

                        self.yang_name = "neighbor-message-id"
                        self.yang_parent_name = "neighbor-array"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('message_id', YLeaf(YType.uint32, 'message-id')),
                        ])
                        self.message_id = None
                        self._segment_path = lambda: "neighbor-message-id"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.ControllerDetaileds.ControllerDetailed.NeighborArray.NeighborMessageId, ['message_id'], name, value)


    class FrrSummary(Entity):
        """
        Fast Re\-Route Summary State Information
        
        .. attribute:: path_states
        
        	Path state counters
        	**type**\:  :py:class:`PathStates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.FrrSummary.PathStates>`
        
        .. attribute:: reservation_states
        
        	Rerservation state counters
        	**type**\:  :py:class:`ReservationStates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.FrrSummary.ReservationStates>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.FrrSummary, self).__init__()

            self.yang_name = "frr-summary"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("path-states", ("path_states", Rsvp.FrrSummary.PathStates)), ("reservation-states", ("reservation_states", Rsvp.FrrSummary.ReservationStates))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.path_states = Rsvp.FrrSummary.PathStates()
            self.path_states.parent = self
            self._children_name_map["path_states"] = "path-states"
            self._children_yang_names.add("path-states")

            self.reservation_states = Rsvp.FrrSummary.ReservationStates()
            self.reservation_states.parent = self
            self._children_name_map["reservation_states"] = "reservation-states"
            self._children_yang_names.add("reservation-states")
            self._segment_path = lambda: "frr-summary"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()


        class PathStates(Entity):
            """
            Path state counters
            
            .. attribute:: total
            
            	Total number of instances of this state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: active_instances
            
            	Number of active instances of this state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ready_instances
            
            	Number of ready instances of this state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: active_wait_instances
            
            	Number of instances of this state awaiting Path messages to be sent out or Resv messages to be received
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.FrrSummary.PathStates, self).__init__()

                self.yang_name = "path-states"
                self.yang_parent_name = "frr-summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('total', YLeaf(YType.uint32, 'total')),
                    ('active_instances', YLeaf(YType.uint32, 'active-instances')),
                    ('ready_instances', YLeaf(YType.uint32, 'ready-instances')),
                    ('active_wait_instances', YLeaf(YType.uint32, 'active-wait-instances')),
                ])
                self.total = None
                self.active_instances = None
                self.ready_instances = None
                self.active_wait_instances = None
                self._segment_path = lambda: "path-states"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frr-summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.FrrSummary.PathStates, ['total', 'active_instances', 'ready_instances', 'active_wait_instances'], name, value)


        class ReservationStates(Entity):
            """
            Rerservation state counters
            
            .. attribute:: total
            
            	Total number of instances of this state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: active_instances
            
            	Number of active instances of this state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ready_instances
            
            	Number of ready instances of this state
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: active_wait_instances
            
            	Number of instances of this state awaiting Path messages to be sent out or Resv messages to be received
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.FrrSummary.ReservationStates, self).__init__()

                self.yang_name = "reservation-states"
                self.yang_parent_name = "frr-summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('total', YLeaf(YType.uint32, 'total')),
                    ('active_instances', YLeaf(YType.uint32, 'active-instances')),
                    ('ready_instances', YLeaf(YType.uint32, 'ready-instances')),
                    ('active_wait_instances', YLeaf(YType.uint32, 'active-wait-instances')),
                ])
                self.total = None
                self.active_instances = None
                self.ready_instances = None
                self.active_wait_instances = None
                self._segment_path = lambda: "reservation-states"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frr-summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.FrrSummary.ReservationStates, ['total', 'active_instances', 'ready_instances', 'active_wait_instances'], name, value)


    class RsbDetaileds(Entity):
        """
        Table of detailed info about reservation state
        blocks
        
        .. attribute:: rsb_detailed
        
        	Detailed info for a single reservation state block
        	**type**\: list of  		 :py:class:`RsbDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.RsbDetaileds, self).__init__()

            self.yang_name = "rsb-detaileds"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("rsb-detailed", ("rsb_detailed", Rsvp.RsbDetaileds.RsbDetailed))])
            self._leafs = OrderedDict()

            self.rsb_detailed = YList(self)
            self._segment_path = lambda: "rsb-detaileds"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.RsbDetaileds, [], name, value)


        class RsbDetailed(Entity):
            """
            Detailed info for a single reservation state
            block
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:  :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Information
            	**type**\:  :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec>`
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.S2LSubLsp>`
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:  :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Style>`
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:  :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Filter>`
            
            .. attribute:: rsb_flags
            
            	Reservation State Block Flags
            	**type**\:  :py:class:`RsbFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.RsbFlags>`
            
            .. attribute:: hop
            
            	Hop Infomation
            	**type**\:  :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Hop>`
            
            .. attribute:: policy_sources
            
            	RSVP Policy Sources
            	**type**\:  :py:class:`PolicySources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.PolicySources>`
            
            .. attribute:: header
            
            	RSVP Header Information
            	**type**\:  :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Header>`
            
            .. attribute:: policy_flags
            
            	RSVP Policy Flags
            	**type**\:  :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.PolicyFlags>`
            
            .. attribute:: expiry_time
            
            	Expiry Time
            	**type**\:  :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.ExpiryTime>`
            
            .. attribute:: policy_query_flags
            
            	RSVP Query Flags
            	**type**\:  :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.PolicyQueryFlags>`
            
            .. attribute:: label_info
            
            	Label Information
            	**type**\:  :py:class:`LabelInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo>`
            
            .. attribute:: input_adjusted_interface
            
            	Input Adjusted Interface
            	**type**\: str
            
            .. attribute:: input_physical_interface
            
            	Input Physical Interface
            	**type**\: str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.RsbDetaileds.RsbDetailed, self).__init__()

                self.yang_name = "rsb-detailed"
                self.yang_parent_name = "rsb-detaileds"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("flow-spec", ("flow_spec", Rsvp.RsbDetaileds.RsbDetailed.FlowSpec)), ("generic-flow-spec", ("generic_flow_spec", Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec)), ("session", ("session", Rsvp.RsbDetaileds.RsbDetailed.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", Rsvp.RsbDetaileds.RsbDetailed.S2LSubLsp)), ("style", ("style", Rsvp.RsbDetaileds.RsbDetailed.Style)), ("filter", ("filter", Rsvp.RsbDetaileds.RsbDetailed.Filter)), ("rsb-flags", ("rsb_flags", Rsvp.RsbDetaileds.RsbDetailed.RsbFlags)), ("hop", ("hop", Rsvp.RsbDetaileds.RsbDetailed.Hop)), ("policy-sources", ("policy_sources", Rsvp.RsbDetaileds.RsbDetailed.PolicySources)), ("header", ("header", Rsvp.RsbDetaileds.RsbDetailed.Header)), ("policy-flags", ("policy_flags", Rsvp.RsbDetaileds.RsbDetailed.PolicyFlags)), ("expiry-time", ("expiry_time", Rsvp.RsbDetaileds.RsbDetailed.ExpiryTime)), ("policy-query-flags", ("policy_query_flags", Rsvp.RsbDetaileds.RsbDetailed.PolicyQueryFlags)), ("label-info", ("label_info", Rsvp.RsbDetaileds.RsbDetailed.LabelInfo))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('input_adjusted_interface', YLeaf(YType.str, 'input-adjusted-interface')),
                    ('input_physical_interface', YLeaf(YType.str, 'input-physical-interface')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.input_adjusted_interface = None
                self.input_physical_interface = None

                self.flow_spec = Rsvp.RsbDetaileds.RsbDetailed.FlowSpec()
                self.flow_spec.parent = self
                self._children_name_map["flow_spec"] = "flow-spec"
                self._children_yang_names.add("flow-spec")

                self.generic_flow_spec = Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self._children_name_map["generic_flow_spec"] = "generic-flow-spec"
                self._children_yang_names.add("generic-flow-spec")

                self.session = Rsvp.RsbDetaileds.RsbDetailed.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = Rsvp.RsbDetaileds.RsbDetailed.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.style = Rsvp.RsbDetaileds.RsbDetailed.Style()
                self.style.parent = self
                self._children_name_map["style"] = "style"
                self._children_yang_names.add("style")

                self.filter = Rsvp.RsbDetaileds.RsbDetailed.Filter()
                self.filter.parent = self
                self._children_name_map["filter"] = "filter"
                self._children_yang_names.add("filter")

                self.rsb_flags = Rsvp.RsbDetaileds.RsbDetailed.RsbFlags()
                self.rsb_flags.parent = self
                self._children_name_map["rsb_flags"] = "rsb-flags"
                self._children_yang_names.add("rsb-flags")

                self.hop = Rsvp.RsbDetaileds.RsbDetailed.Hop()
                self.hop.parent = self
                self._children_name_map["hop"] = "hop"
                self._children_yang_names.add("hop")

                self.policy_sources = Rsvp.RsbDetaileds.RsbDetailed.PolicySources()
                self.policy_sources.parent = self
                self._children_name_map["policy_sources"] = "policy-sources"
                self._children_yang_names.add("policy-sources")

                self.header = Rsvp.RsbDetaileds.RsbDetailed.Header()
                self.header.parent = self
                self._children_name_map["header"] = "header"
                self._children_yang_names.add("header")

                self.policy_flags = Rsvp.RsbDetaileds.RsbDetailed.PolicyFlags()
                self.policy_flags.parent = self
                self._children_name_map["policy_flags"] = "policy-flags"
                self._children_yang_names.add("policy-flags")

                self.expiry_time = Rsvp.RsbDetaileds.RsbDetailed.ExpiryTime()
                self.expiry_time.parent = self
                self._children_name_map["expiry_time"] = "expiry-time"
                self._children_yang_names.add("expiry-time")

                self.policy_query_flags = Rsvp.RsbDetaileds.RsbDetailed.PolicyQueryFlags()
                self.policy_query_flags.parent = self
                self._children_name_map["policy_query_flags"] = "policy-query-flags"
                self._children_yang_names.add("policy-query-flags")

                self.label_info = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo()
                self.label_info.parent = self
                self._children_name_map["label_info"] = "label-info"
                self._children_yang_names.add("label-info")
                self._segment_path = lambda: "rsb-detailed"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'input_adjusted_interface', 'input_physical_interface'], name, value)


            class FlowSpec(Entity):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:  :py:class:`RsvpMgmtQosServiceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbDetaileds.RsbDetailed.FlowSpec, self).__init__()

                    self.yang_name = "flow-spec"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_average_rate', YLeaf(YType.uint64, 'flow-average-rate')),
                        ('flow_max_burst', YLeaf(YType.uint64, 'flow-max-burst')),
                        ('flow_peak_rate', YLeaf(YType.uint64, 'flow-peak-rate')),
                        ('flow_min_unit', YLeaf(YType.uint32, 'flow-min-unit')),
                        ('flow_max_unit', YLeaf(YType.uint32, 'flow-max-unit')),
                        ('flow_requested_rate', YLeaf(YType.uint64, 'flow-requested-rate')),
                        ('flow_slack', YLeaf(YType.uint32, 'flow-slack')),
                        ('flow_qos', YLeaf(YType.enumeration, 'flow-qos')),
                    ])
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_peak_rate = None
                    self.flow_min_unit = None
                    self.flow_max_unit = None
                    self.flow_requested_rate = None
                    self.flow_slack = None
                    self.flow_qos = None
                    self._segment_path = lambda: "flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.FlowSpec, ['flow_average_rate', 'flow_max_burst', 'flow_peak_rate', 'flow_min_unit', 'flow_max_unit', 'flow_requested_rate', 'flow_slack', 'flow_qos'], name, value)


            class GenericFlowSpec(Entity):
                """
                Generic Flow Spec Information
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:  :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec>`
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:  :py:class:`RsvpMgmtFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec, self).__init__()

                    self.yang_name = "generic-flow-spec"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("g709otn-flow-spec", ("g709otn_flow_spec", Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_spec_type', YLeaf(YType.enumeration, 'flow-spec-type')),
                    ])
                    self.flow_spec_type = None

                    self.g709otn_flow_spec = Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self
                    self._children_name_map["g709otn_flow_spec"] = "g709otn-flow-spec"
                    self._children_yang_names.add("g709otn-flow-spec")
                    self._segment_path = lambda: "generic-flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec, ['flow_spec_type'], name, value)


                class G709OtnFlowSpec(Entity):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec, self).__init__()

                        self.yang_name = "g709otn-flow-spec"
                        self.yang_parent_name = "generic-flow-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('flow_signal_type', YLeaf(YType.uint8, 'flow-signal-type')),
                            ('flow_nvc', YLeaf(YType.uint16, 'flow-nvc')),
                            ('flow_multiplier', YLeaf(YType.uint16, 'flow-multiplier')),
                            ('flow_bit_rate', YLeaf(YType.uint64, 'flow-bit-rate')),
                        ])
                        self.flow_signal_type = None
                        self.flow_nvc = None
                        self.flow_multiplier = None
                        self.flow_bit_rate = None
                        self._segment_path = lambda: "g709otn-flow-spec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/generic-flow-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.GenericFlowSpec.G709OtnFlowSpec, ['flow_signal_type', 'flow_nvc', 'flow_multiplier', 'flow_bit_rate'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbDetaileds.RsbDetailed.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbDetaileds.RsbDetailed.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.S2LSubLsp, ['s2l_destination_address'], name, value)


            class Style(Entity):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:  :py:class:`RsvpMgmtReservationTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbDetaileds.RsbDetailed.Style, self).__init__()

                    self.yang_name = "style"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('reservation_type', YLeaf(YType.enumeration, 'reservation-type')),
                    ])
                    self.reservation_type = None
                    self._segment_path = lambda: "style"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.Style, ['reservation_type'], name, value)


            class Filter(Entity):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:  :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbDetaileds.RsbDetailed.Filter, self).__init__()

                    self.yang_name = "filter"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-filter", ("rsvp_filter", Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_filter = Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self
                    self._children_name_map["rsvp_filter"] = "rsvp-filter"
                    self._children_yang_names.add("rsvp-filter")
                    self._segment_path = lambda: "filter"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/%s" % self._segment_path()


                class RsvpFilter(Entity):
                    """
                    RSVP Filter
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:  :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:  :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:  :py:class:`RsvpMgmtFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilter>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter, self).__init__()

                        self.yang_name = "rsvp-filter"
                        self.yang_parent_name = "filter"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("udp-ipv4-session", ("udp_ipv4_session", Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session)), ("p2mp-ipv4-session", ("p2mp_ipv4_session", Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('filter_type', YLeaf(YType.enumeration, 'filter-type')),
                        ])
                        self.filter_type = None

                        self.udp_ipv4_session = Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self
                        self._children_name_map["udp_ipv4_session"] = "udp-ipv4-session"
                        self._children_yang_names.add("udp-ipv4-session")

                        self.p2mp_ipv4_session = Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self._children_name_map["p2mp_ipv4_session"] = "p2mp-ipv4-session"
                        self._children_yang_names.add("p2mp-ipv4-session")
                        self._segment_path = lambda: "rsvp-filter"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/filter/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter, ['filter_type'], name, value)


                    class UdpIpv4Session(Entity):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session, self).__init__()

                            self.yang_name = "udp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self._segment_path = lambda: "udp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.UdpIpv4Session, ['source_address', 'source_port'], name, value)


                    class P2MpIpv4Session(Entity):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session, self).__init__()

                            self.yang_name = "p2mp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                                ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                                ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self.p2mp_sub_group_origin = None
                            self.sub_group_id = None
                            self._segment_path = lambda: "p2mp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.Filter.RsvpFilter.P2MpIpv4Session, ['source_address', 'source_port', 'p2mp_sub_group_origin', 'sub_group_id'], name, value)


            class RsbFlags(Entity):
                """
                Reservation State Block Flags
                
                .. attribute:: is_local_receiver
                
                	Local Receiver
                	**type**\: bool
                
                .. attribute:: is_message_id_valid
                
                	MessageID Valid
                	**type**\: bool
                
                .. attribute:: is_local_repair
                
                	Rerouted
                	**type**\: bool
                
                .. attribute:: is_merge_point
                
                	Is node a Merge Point
                	**type**\: bool
                
                .. attribute:: is_lockout
                
                	Locked Out
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbDetaileds.RsbDetailed.RsbFlags, self).__init__()

                    self.yang_name = "rsb-flags"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_local_receiver', YLeaf(YType.boolean, 'is-local-receiver')),
                        ('is_message_id_valid', YLeaf(YType.boolean, 'is-message-id-valid')),
                        ('is_local_repair', YLeaf(YType.boolean, 'is-local-repair')),
                        ('is_merge_point', YLeaf(YType.boolean, 'is-merge-point')),
                        ('is_lockout', YLeaf(YType.boolean, 'is-lockout')),
                    ])
                    self.is_local_receiver = None
                    self.is_message_id_valid = None
                    self.is_local_repair = None
                    self.is_merge_point = None
                    self.is_lockout = None
                    self._segment_path = lambda: "rsb-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.RsbFlags, ['is_local_receiver', 'is_message_id_valid', 'is_local_repair', 'is_merge_point', 'is_lockout'], name, value)


            class Hop(Entity):
                """
                Hop Infomation
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbDetaileds.RsbDetailed.Hop, self).__init__()

                    self.yang_name = "hop"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                        ('neighbor_logical_interface_name', YLeaf(YType.str, 'neighbor-logical-interface-name')),
                    ])
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None
                    self._segment_path = lambda: "hop"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.Hop, ['neighbor_address', 'neighbor_logical_interface_name'], name, value)


            class PolicySources(Entity):
                """
                RSVP Policy Sources
                
                .. attribute:: is_te_link
                
                	Policy Source is TE Link
                	**type**\: bool
                
                .. attribute:: is_local
                
                	Policy Source is Local
                	**type**\: bool
                
                .. attribute:: is_cops
                
                	Policy Source is COPS
                	**type**\: bool
                
                .. attribute:: is_default
                
                	Policy Source is Default
                	**type**\: bool
                
                .. attribute:: is_cable
                
                	Policy Source is Cable
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbDetaileds.RsbDetailed.PolicySources, self).__init__()

                    self.yang_name = "policy-sources"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_te_link', YLeaf(YType.boolean, 'is-te-link')),
                        ('is_local', YLeaf(YType.boolean, 'is-local')),
                        ('is_cops', YLeaf(YType.boolean, 'is-cops')),
                        ('is_default', YLeaf(YType.boolean, 'is-default')),
                        ('is_cable', YLeaf(YType.boolean, 'is-cable')),
                    ])
                    self.is_te_link = None
                    self.is_local = None
                    self.is_cops = None
                    self.is_default = None
                    self.is_cable = None
                    self._segment_path = lambda: "policy-sources"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.PolicySources, ['is_te_link', 'is_local', 'is_cops', 'is_default', 'is_cable'], name, value)


            class Header(Entity):
                """
                RSVP Header Information
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbDetaileds.RsbDetailed.Header, self).__init__()

                    self.yang_name = "header"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('rsvp_version', YLeaf(YType.uint8, 'rsvp-version')),
                        ('rsvp_header_flags', YLeaf(YType.uint8, 'rsvp-header-flags')),
                        ('rsvp_ttl', YLeaf(YType.uint8, 'rsvp-ttl')),
                        ('rsvp_message_type', YLeaf(YType.uint8, 'rsvp-message-type')),
                        ('ip_tos', YLeaf(YType.uint8, 'ip-tos')),
                        ('ip_ttl', YLeaf(YType.uint8, 'ip-ttl')),
                        ('ip_source_address', YLeaf(YType.str, 'ip-source-address')),
                    ])
                    self.rsvp_version = None
                    self.rsvp_header_flags = None
                    self.rsvp_ttl = None
                    self.rsvp_message_type = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.ip_source_address = None
                    self._segment_path = lambda: "header"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.Header, ['rsvp_version', 'rsvp_header_flags', 'rsvp_ttl', 'rsvp_message_type', 'ip_tos', 'ip_ttl', 'ip_source_address'], name, value)


            class PolicyFlags(Entity):
                """
                RSVP Policy Flags
                
                .. attribute:: is_accepted
                
                	Accepted
                	**type**\: bool
                
                .. attribute:: is_installed
                
                	Installed
                	**type**\: bool
                
                .. attribute:: is_forwarding
                
                	Forwarding
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbDetaileds.RsbDetailed.PolicyFlags, self).__init__()

                    self.yang_name = "policy-flags"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_accepted', YLeaf(YType.boolean, 'is-accepted')),
                        ('is_installed', YLeaf(YType.boolean, 'is-installed')),
                        ('is_forwarding', YLeaf(YType.boolean, 'is-forwarding')),
                    ])
                    self.is_accepted = None
                    self.is_installed = None
                    self.is_forwarding = None
                    self._segment_path = lambda: "policy-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.PolicyFlags, ['is_accepted', 'is_installed', 'is_forwarding'], name, value)


            class ExpiryTime(Entity):
                """
                Expiry Time
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbDetaileds.RsbDetailed.ExpiryTime, self).__init__()

                    self.yang_name = "expiry-time"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "expiry-time"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.ExpiryTime, ['seconds', 'nanoseconds'], name, value)


            class PolicyQueryFlags(Entity):
                """
                RSVP Query Flags
                
                .. attribute:: is_needed
                
                	Needed
                	**type**\: bool
                
                .. attribute:: is_report_required
                
                	Report Required
                	**type**\: bool
                
                .. attribute:: is_resync
                
                	Resynchronization
                	**type**\: bool
                
                .. attribute:: is_bypass
                
                	Bypass
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbDetaileds.RsbDetailed.PolicyQueryFlags, self).__init__()

                    self.yang_name = "policy-query-flags"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_needed', YLeaf(YType.boolean, 'is-needed')),
                        ('is_report_required', YLeaf(YType.boolean, 'is-report-required')),
                        ('is_resync', YLeaf(YType.boolean, 'is-resync')),
                        ('is_bypass', YLeaf(YType.boolean, 'is-bypass')),
                    ])
                    self.is_needed = None
                    self.is_report_required = None
                    self.is_resync = None
                    self.is_bypass = None
                    self._segment_path = lambda: "policy-query-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.PolicyQueryFlags, ['is_needed', 'is_report_required', 'is_resync', 'is_bypass'], name, value)


            class LabelInfo(Entity):
                """
                Label Information
                
                .. attribute:: generic_local_downstream_label
                
                	Generic Local Downstream Label
                	**type**\:  :py:class:`GenericLocalDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel>`
                
                .. attribute:: generic_outgoing_downstream_label
                
                	Generic Outgoing Downstream Label
                	**type**\:  :py:class:`GenericOutgoingDownstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel>`
                
                .. attribute:: generic_merge_point_label
                
                	Generic MergePoint Label
                	**type**\:  :py:class:`GenericMergePointLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel>`
                
                .. attribute:: generic_outgoing_upstream_label
                
                	Generic Outgoing Upstream Label
                	**type**\:  :py:class:`GenericOutgoingUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel>`
                
                .. attribute:: generic_local_upstream_label
                
                	Generic Local Upstream Label
                	**type**\:  :py:class:`GenericLocalUpstreamLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel>`
                
                .. attribute:: generic_recovery_label
                
                	Generic Recovery Label
                	**type**\:  :py:class:`GenericRecoveryLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel>`
                
                .. attribute:: is_valid
                
                	Is the label information valid
                	**type**\: bool
                
                .. attribute:: local_downstream_label
                
                	Local Downstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_downstream_label
                
                	Outgoing Downstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: merge_point_label
                
                	MergePoint Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_upstream_label
                
                	Outgoing Upstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: local_upstream_label
                
                	Local Upstream Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: recovery_label
                
                	Recovery Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lsp_wrap_label
                
                	LSP Wrap Label
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo, self).__init__()

                    self.yang_name = "label-info"
                    self.yang_parent_name = "rsb-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("generic-local-downstream-label", ("generic_local_downstream_label", Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel)), ("generic-outgoing-downstream-label", ("generic_outgoing_downstream_label", Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel)), ("generic-merge-point-label", ("generic_merge_point_label", Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel)), ("generic-outgoing-upstream-label", ("generic_outgoing_upstream_label", Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel)), ("generic-local-upstream-label", ("generic_local_upstream_label", Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel)), ("generic-recovery-label", ("generic_recovery_label", Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_valid', YLeaf(YType.boolean, 'is-valid')),
                        ('local_downstream_label', YLeaf(YType.uint32, 'local-downstream-label')),
                        ('outgoing_downstream_label', YLeaf(YType.uint32, 'outgoing-downstream-label')),
                        ('merge_point_label', YLeaf(YType.uint32, 'merge-point-label')),
                        ('outgoing_upstream_label', YLeaf(YType.uint32, 'outgoing-upstream-label')),
                        ('local_upstream_label', YLeaf(YType.uint32, 'local-upstream-label')),
                        ('recovery_label', YLeaf(YType.uint32, 'recovery-label')),
                        ('lsp_wrap_label', YLeaf(YType.uint32, 'lsp-wrap-label')),
                    ])
                    self.is_valid = None
                    self.local_downstream_label = None
                    self.outgoing_downstream_label = None
                    self.merge_point_label = None
                    self.outgoing_upstream_label = None
                    self.local_upstream_label = None
                    self.recovery_label = None
                    self.lsp_wrap_label = None

                    self.generic_local_downstream_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel()
                    self.generic_local_downstream_label.parent = self
                    self._children_name_map["generic_local_downstream_label"] = "generic-local-downstream-label"
                    self._children_yang_names.add("generic-local-downstream-label")

                    self.generic_outgoing_downstream_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel()
                    self.generic_outgoing_downstream_label.parent = self
                    self._children_name_map["generic_outgoing_downstream_label"] = "generic-outgoing-downstream-label"
                    self._children_yang_names.add("generic-outgoing-downstream-label")

                    self.generic_merge_point_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel()
                    self.generic_merge_point_label.parent = self
                    self._children_name_map["generic_merge_point_label"] = "generic-merge-point-label"
                    self._children_yang_names.add("generic-merge-point-label")

                    self.generic_outgoing_upstream_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel()
                    self.generic_outgoing_upstream_label.parent = self
                    self._children_name_map["generic_outgoing_upstream_label"] = "generic-outgoing-upstream-label"
                    self._children_yang_names.add("generic-outgoing-upstream-label")

                    self.generic_local_upstream_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel()
                    self.generic_local_upstream_label.parent = self
                    self._children_name_map["generic_local_upstream_label"] = "generic-local-upstream-label"
                    self._children_yang_names.add("generic-local-upstream-label")

                    self.generic_recovery_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel()
                    self.generic_recovery_label.parent = self
                    self._children_name_map["generic_recovery_label"] = "generic-recovery-label"
                    self._children_yang_names.add("generic-recovery-label")
                    self._segment_path = lambda: "label-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo, ['is_valid', 'local_downstream_label', 'outgoing_downstream_label', 'merge_point_label', 'outgoing_upstream_label', 'local_upstream_label', 'recovery_label', 'lsp_wrap_label'], name, value)


                class GenericLocalDownstreamLabel(Entity):
                    """
                    Generic Local Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel, self).__init__()

                        self.yang_name = "generic-local-downstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-local-downstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-local-downstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-local-downstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalDownstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericOutgoingDownstreamLabel(Entity):
                    """
                    Generic Outgoing Downstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel, self).__init__()

                        self.yang_name = "generic-outgoing-downstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-outgoing-downstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-outgoing-downstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-downstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingDownstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericMergePointLabel(Entity):
                    """
                    Generic MergePoint Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel, self).__init__()

                        self.yang_name = "generic-merge-point-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-merge-point-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-merge-point-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-merge-point-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericMergePointLabel.GeneralizedLabel, ['value'], name, value)


                class GenericOutgoingUpstreamLabel(Entity):
                    """
                    Generic Outgoing Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel, self).__init__()

                        self.yang_name = "generic-outgoing-upstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-outgoing-upstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-outgoing-upstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-upstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericOutgoingUpstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericLocalUpstreamLabel(Entity):
                    """
                    Generic Local Upstream Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel, self).__init__()

                        self.yang_name = "generic-local-upstream-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-local-upstream-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-local-upstream-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-local-upstream-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericLocalUpstreamLabel.GeneralizedLabel, ['value'], name, value)


                class GenericRecoveryLabel(Entity):
                    """
                    Generic Recovery Label
                    
                    .. attribute:: generalized_label
                    
                    	Generalized Label
                    	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel>`
                    
                    .. attribute:: generic_label_type
                    
                    	GenericLabelType
                    	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel, self).__init__()

                        self.yang_name = "generic-recovery-label"
                        self.yang_parent_name = "label-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                        ])
                        self.generic_label_type = None

                        self.generalized_label = Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel()
                        self.generalized_label.parent = self
                        self._children_name_map["generalized_label"] = "generalized-label"
                        self._children_yang_names.add("generalized-label")
                        self._segment_path = lambda: "generic-recovery-label"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel, ['generic_label_type'], name, value)


                    class GeneralizedLabel(Entity):
                        """
                        Generalized Label
                        
                        .. attribute:: value
                        
                        	Generalized Label Value
                        	**type**\: list of int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel, self).__init__()

                            self.yang_name = "generalized-label"
                            self.yang_parent_name = "generic-recovery-label"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('value', YLeafList(YType.uint32, 'value')),
                            ])
                            self.value = []
                            self._segment_path = lambda: "generalized-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-recovery-label/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbDetaileds.RsbDetailed.LabelInfo.GenericRecoveryLabel.GeneralizedLabel, ['value'], name, value)


    class InterfaceSummaries(Entity):
        """
        Table of summary info about RSVP\-enabled
        interfaces
        
        .. attribute:: interface_summary
        
        	Summary info about an RSVP\-enabled interface
        	**type**\: list of  		 :py:class:`InterfaceSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceSummaries.InterfaceSummary>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.InterfaceSummaries, self).__init__()

            self.yang_name = "interface-summaries"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("interface-summary", ("interface_summary", Rsvp.InterfaceSummaries.InterfaceSummary))])
            self._leafs = OrderedDict()

            self.interface_summary = YList(self)
            self._segment_path = lambda: "interface-summaries"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.InterfaceSummaries, [], name, value)


        class InterfaceSummary(Entity):
            """
            Summary info about an RSVP\-enabled interface
            
            .. attribute:: interface_name  (key)
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:  :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\: str
            
            .. attribute:: paths_in
            
            	Number of locally created and incoming path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: paths_out
            
            	Number of outgoing path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: reservations_in
            
            	Number of locally created and incoming reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: reservations_out
            
            	Number of outgoing reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.InterfaceSummaries.InterfaceSummary, self).__init__()

                self.yang_name = "interface-summary"
                self.yang_parent_name = "interface-summaries"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['interface_name']
                self._child_container_classes = OrderedDict([("bandwidth-information", ("bandwidth_information", Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                    ('paths_in', YLeaf(YType.uint32, 'paths-in')),
                    ('paths_out', YLeaf(YType.uint32, 'paths-out')),
                    ('reservations_in', YLeaf(YType.uint32, 'reservations-in')),
                    ('reservations_out', YLeaf(YType.uint32, 'reservations-out')),
                ])
                self.interface_name = None
                self.interface_name_xr = None
                self.paths_in = None
                self.paths_out = None
                self.reservations_in = None
                self.reservations_out = None

                self.bandwidth_information = Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation()
                self.bandwidth_information.parent = self
                self._children_name_map["bandwidth_information"] = "bandwidth-information"
                self._children_yang_names.add("bandwidth-information")
                self._segment_path = lambda: "interface-summary" + "[interface-name='" + str(self.interface_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-summaries/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.InterfaceSummaries.InterfaceSummary, ['interface_name', 'interface_name_xr', 'paths_in', 'paths_out', 'reservations_in', 'reservations_out'], name, value)


            class BandwidthInformation(Entity):
                """
                Interface bandwidth information
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:  :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:  :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface>`
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:  :py:class:`RsvpMgmtDsteModes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModes>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation, self).__init__()

                    self.yang_name = "bandwidth-information"
                    self.yang_parent_name = "interface-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("pre-standard-dste-interface", ("pre_standard_dste_interface", Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface)), ("standard-dste-interface", ("standard_dste_interface", Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dste_mode', YLeaf(YType.enumeration, 'dste-mode')),
                    ])
                    self.dste_mode = None

                    self.pre_standard_dste_interface = Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self._children_name_map["pre_standard_dste_interface"] = "pre-standard-dste-interface"
                    self._children_yang_names.add("pre-standard-dste-interface")

                    self.standard_dste_interface = Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self
                    self._children_name_map["standard_dste_interface"] = "standard-dste-interface"
                    self._children_yang_names.add("standard-dste-interface")
                    self._segment_path = lambda: "bandwidth-information"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation, ['dste_mode'], name, value)


                class PreStandardDsteInterface(Entity):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface, self).__init__()

                        self.yang_name = "pre-standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_subpool_bandwidth', YLeaf(YType.uint64, 'max-subpool-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_subpool_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-subpool-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_subpool_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self._segment_path = lambda: "pre-standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.PreStandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_subpool_bandwidth', 'is_max_bandwidth_absolute', 'is_max_subpool_bandwidth_absolute'], name, value)


                class StandardDsteInterface(Entity):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface, self).__init__()

                        self.yang_name = "standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_pool0_bandwidth', YLeaf(YType.uint64, 'max-pool0-bandwidth')),
                            ('max_pool1_bandwidth', YLeaf(YType.uint64, 'max-pool1-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_bc0_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc0-bandwidth-absolute')),
                            ('is_max_bc1_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc1-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self._segment_path = lambda: "standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.InterfaceSummaries.InterfaceSummary.BandwidthInformation.StandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_pool0_bandwidth', 'max_pool1_bandwidth', 'is_max_bandwidth_absolute', 'is_max_bc0_bandwidth_absolute', 'is_max_bc1_bandwidth_absolute'], name, value)


    class HelloInstanceBriefs(Entity):
        """
        Table of brief info about hello instances
        
        .. attribute:: hello_instance_brief
        
        	Brief info for a single hello instance
        	**type**\: list of  		 :py:class:`HelloInstanceBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInstanceBriefs.HelloInstanceBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.HelloInstanceBriefs, self).__init__()

            self.yang_name = "hello-instance-briefs"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("hello-instance-brief", ("hello_instance_brief", Rsvp.HelloInstanceBriefs.HelloInstanceBrief))])
            self._leafs = OrderedDict()

            self.hello_instance_brief = YList(self)
            self._segment_path = lambda: "hello-instance-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.HelloInstanceBriefs, [], name, value)


        class HelloInstanceBrief(Entity):
            """
            Brief info for a single hello instance
            
            .. attribute:: source_address  (key)
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address  (key)
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor Hello state
            	**type**\:  :py:class:`RsvpMgmtHelloState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloState>`
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:  :py:class:`RsvpMgmtHelloInstance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstance>`
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: lost_communication_total
            
            	Total number of times communication got lost
            	**type**\: int
            
            	**range:** 0..65535
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.HelloInstanceBriefs.HelloInstanceBrief, self).__init__()

                self.yang_name = "hello-instance-brief"
                self.yang_parent_name = "hello-instance-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['source_address','destination_address']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('source_address_xr', YLeaf(YType.str, 'source-address-xr')),
                    ('destination_address_xr', YLeaf(YType.str, 'destination-address-xr')),
                    ('neighbor_hello_state', YLeaf(YType.enumeration, 'neighbor-hello-state')),
                    ('instance_type', YLeaf(YType.enumeration, 'instance-type')),
                    ('hello_interface', YLeaf(YType.str, 'hello-interface')),
                    ('lost_communication_total', YLeaf(YType.uint16, 'lost-communication-total')),
                ])
                self.source_address = None
                self.destination_address = None
                self.source_address_xr = None
                self.destination_address_xr = None
                self.neighbor_hello_state = None
                self.instance_type = None
                self.hello_interface = None
                self.lost_communication_total = None
                self._segment_path = lambda: "hello-instance-brief" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-instance-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.HelloInstanceBriefs.HelloInstanceBrief, ['source_address', 'destination_address', 'source_address_xr', 'destination_address_xr', 'neighbor_hello_state', 'instance_type', 'hello_interface', 'lost_communication_total'], name, value)


    class AuthenticationDetails(Entity):
        """
        Table for detailed authentication related
        information
        
        .. attribute:: authentication_detail
        
        	Brief Authentication information
        	**type**\: list of  		 :py:class:`AuthenticationDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails.AuthenticationDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.AuthenticationDetails, self).__init__()

            self.yang_name = "authentication-details"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("authentication-detail", ("authentication_detail", Rsvp.AuthenticationDetails.AuthenticationDetail))])
            self._leafs = OrderedDict()

            self.authentication_detail = YList(self)
            self._segment_path = lambda: "authentication-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.AuthenticationDetails, [], name, value)


        class AuthenticationDetail(Entity):
            """
            Brief Authentication information
            
            .. attribute:: source_address  (key)
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address  (key)
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: mode_id  (key)
            
            	Mode (Tx or Rx)
            	**type**\:  :py:class:`RsvpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMode>`
            
            .. attribute:: interface_name  (key)
            
            	InterfaceName
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: auth_compact
            
            	Basic authentication data
            	**type**\:  :py:class:`AuthCompact <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails.AuthenticationDetail.AuthCompact>`
            
            .. attribute:: direction_info
            
            	direction info
            	**type**\:  :py:class:`DirectionInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo>`
            
            .. attribute:: key_status
            
            	Key status
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: key_digest_info
            
            	Direction
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: lifetime
            
            	Lifetime (seconds)
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: lifetime_left
            
            	Remaining lifetime (seconds)
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: challenge_status
            
            	Challenge status
            	**type**\:  :py:class:`RsvpMgmtAuthChallengeStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthChallengeStatus>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.AuthenticationDetails.AuthenticationDetail, self).__init__()

                self.yang_name = "authentication-detail"
                self.yang_parent_name = "authentication-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['source_address','destination_address','mode_id','interface_name']
                self._child_container_classes = OrderedDict([("auth-compact", ("auth_compact", Rsvp.AuthenticationDetails.AuthenticationDetail.AuthCompact)), ("direction-info", ("direction_info", Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('mode_id', YLeaf(YType.enumeration, 'mode-id')),
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('key_status', YLeaf(YType.uint32, 'key-status')),
                    ('key_digest_info', YLeaf(YType.uint32, 'key-digest-info')),
                    ('lifetime', YLeaf(YType.uint32, 'lifetime')),
                    ('lifetime_left', YLeaf(YType.uint32, 'lifetime-left')),
                    ('challenge_status', YLeaf(YType.enumeration, 'challenge-status')),
                ])
                self.source_address = None
                self.destination_address = None
                self.mode_id = None
                self.interface_name = None
                self.key_status = None
                self.key_digest_info = None
                self.lifetime = None
                self.lifetime_left = None
                self.challenge_status = None

                self.auth_compact = Rsvp.AuthenticationDetails.AuthenticationDetail.AuthCompact()
                self.auth_compact.parent = self
                self._children_name_map["auth_compact"] = "auth-compact"
                self._children_yang_names.add("auth-compact")

                self.direction_info = Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo()
                self.direction_info.parent = self
                self._children_name_map["direction_info"] = "direction-info"
                self._children_yang_names.add("direction-info")
                self._segment_path = lambda: "authentication-detail" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']" + "[mode-id='" + str(self.mode_id) + "']" + "[interface-name='" + str(self.interface_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/authentication-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.AuthenticationDetails.AuthenticationDetail, ['source_address', 'destination_address', 'mode_id', 'interface_name', 'key_status', 'key_digest_info', 'lifetime', 'lifetime_left', 'challenge_status'], name, value)


            class AuthCompact(Entity):
                """
                Basic authentication data
                
                .. attribute:: source_address_xr
                
                	Source address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: destination_address_xr
                
                	Destination address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_address
                
                	Neighbor address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: direction
                
                	Direction
                	**type**\:  :py:class:`RsvpMgmtAuthDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthDirection>`
                
                .. attribute:: key_type
                
                	Key type
                	**type**\:  :py:class:`RsvpMgmtAuthKi <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthKi>`
                
                .. attribute:: key_source
                
                	Key source
                	**type**\: str
                
                .. attribute:: key_id
                
                	Key ID
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: key_id_valid
                
                	Key validity
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.AuthenticationDetails.AuthenticationDetail.AuthCompact, self).__init__()

                    self.yang_name = "auth-compact"
                    self.yang_parent_name = "authentication-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('source_address_xr', YLeaf(YType.str, 'source-address-xr')),
                        ('destination_address_xr', YLeaf(YType.str, 'destination-address-xr')),
                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                        ('direction', YLeaf(YType.enumeration, 'direction')),
                        ('key_type', YLeaf(YType.enumeration, 'key-type')),
                        ('key_source', YLeaf(YType.str, 'key-source')),
                        ('key_id', YLeaf(YType.uint64, 'key-id')),
                        ('key_id_valid', YLeaf(YType.uint32, 'key-id-valid')),
                    ])
                    self.source_address_xr = None
                    self.destination_address_xr = None
                    self.neighbor_address = None
                    self.direction = None
                    self.key_type = None
                    self.key_source = None
                    self.key_id = None
                    self.key_id_valid = None
                    self._segment_path = lambda: "auth-compact"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.AuthenticationDetails.AuthenticationDetail.AuthCompact, ['source_address_xr', 'destination_address_xr', 'neighbor_address', 'direction', 'key_type', 'key_source', 'key_id', 'key_id_valid'], name, value)


            class DirectionInfo(Entity):
                """
                direction info
                
                .. attribute:: send_info
                
                	send info
                	**type**\:  :py:class:`SendInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo>`
                
                .. attribute:: receive_info
                
                	receive info
                	**type**\:  :py:class:`ReceiveInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo>`
                
                .. attribute:: auth_direction
                
                	AuthDirection
                	**type**\:  :py:class:`RsvpMgmtAuthDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAuthDirection>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo, self).__init__()

                    self.yang_name = "direction-info"
                    self.yang_parent_name = "authentication-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("send-info", ("send_info", Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo)), ("receive-info", ("receive_info", Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('auth_direction', YLeaf(YType.enumeration, 'auth-direction')),
                    ])
                    self.auth_direction = None

                    self.send_info = Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo()
                    self.send_info.parent = self
                    self._children_name_map["send_info"] = "send-info"
                    self._children_yang_names.add("send-info")

                    self.receive_info = Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo()
                    self.receive_info.parent = self
                    self._children_name_map["receive_info"] = "receive-info"
                    self._children_yang_names.add("receive-info")
                    self._segment_path = lambda: "direction-info"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo, ['auth_direction'], name, value)


                class SendInfo(Entity):
                    """
                    send info
                    
                    .. attribute:: counters
                    
                    	Counters
                    	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters>`
                    
                    .. attribute:: sequence
                    
                    	Sequence number
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo, self).__init__()

                        self.yang_name = "send-info"
                        self.yang_parent_name = "direction-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("counters", ("counters", Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('sequence', YLeaf(YType.uint64, 'sequence')),
                        ])
                        self.sequence = None

                        self.counters = Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters()
                        self.counters.parent = self
                        self._children_name_map["counters"] = "counters"
                        self._children_yang_names.add("counters")
                        self._segment_path = lambda: "send-info"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo, ['sequence'], name, value)


                    class Counters(Entity):
                        """
                        Counters
                        
                        .. attribute:: authentication_sent
                        
                        	Messages sent
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_failures
                        
                        	Failures
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_send_challenges_received
                        
                        	Challenges received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_challenge_responses_sent
                        
                        	Challenge responses sent
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters, self).__init__()

                            self.yang_name = "counters"
                            self.yang_parent_name = "send-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('authentication_sent', YLeaf(YType.uint32, 'authentication-sent')),
                                ('authentication_failures', YLeaf(YType.uint32, 'authentication-failures')),
                                ('authentication_send_challenges_received', YLeaf(YType.uint32, 'authentication-send-challenges-received')),
                                ('authentication_challenge_responses_sent', YLeaf(YType.uint32, 'authentication-challenge-responses-sent')),
                            ])
                            self.authentication_sent = None
                            self.authentication_failures = None
                            self.authentication_send_challenges_received = None
                            self.authentication_challenge_responses_sent = None
                            self._segment_path = lambda: "counters"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.SendInfo.Counters, ['authentication_sent', 'authentication_failures', 'authentication_send_challenges_received', 'authentication_challenge_responses_sent'], name, value)


                class ReceiveInfo(Entity):
                    """
                    receive info
                    
                    .. attribute:: counters
                    
                    	Counters
                    	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters>`
                    
                    .. attribute:: sequence
                    
                    	Sequence number
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: sequence_window_size
                    
                    	Sequence window size
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: sequence_window_count
                    
                    	Sequence window count
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: sequence_window
                    
                    	Sequence window
                    	**type**\: list of int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo, self).__init__()

                        self.yang_name = "receive-info"
                        self.yang_parent_name = "direction-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("counters", ("counters", Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('sequence', YLeaf(YType.uint64, 'sequence')),
                            ('sequence_window_size', YLeaf(YType.uint32, 'sequence-window-size')),
                            ('sequence_window_count', YLeaf(YType.uint32, 'sequence-window-count')),
                            ('sequence_window', YLeafList(YType.uint64, 'sequence-window')),
                        ])
                        self.sequence = None
                        self.sequence_window_size = None
                        self.sequence_window_count = None
                        self.sequence_window = []

                        self.counters = Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters()
                        self.counters.parent = self
                        self._children_name_map["counters"] = "counters"
                        self._children_yang_names.add("counters")
                        self._segment_path = lambda: "receive-info"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo, ['sequence', 'sequence_window_size', 'sequence_window_count', 'sequence_window'], name, value)


                    class Counters(Entity):
                        """
                        Counters
                        
                        .. attribute:: authentication_received_valid_messages
                        
                        	Valid messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenges_sent
                        
                        	Challenges sent
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenge_response
                        
                        	Challenge responses received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenges_resent
                        
                        	Challenges resent
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenge_timeouts
                        
                        	Challenge timeouts
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_during_challenge
                        
                        	Authentication received during challenge
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_incomplete
                        
                        	Authentication received incomplete
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_no_integrity
                        
                        	Authentication received with no integrity
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_bad_digest
                        
                        	Authentication received with bad digest
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_wrong_digest_type
                        
                        	Authentication received with wrong digest type
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_sequence_number_duplicate
                        
                        	Authentication received with duplicate sequence number
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_sequence_number_outof_range
                        
                        	Authentication received with sequence number out of range
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_wrong_challenges_response
                        
                        	Incorect challenge responses received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_challenges_response_duplicate
                        
                        	Duplicate challenge responses received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_response_late
                        
                        	Challenge responses received late
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication_received_bad_message_format
                        
                        	Authentication received with bad mesage format
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters, self).__init__()

                            self.yang_name = "counters"
                            self.yang_parent_name = "receive-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('authentication_received_valid_messages', YLeaf(YType.uint32, 'authentication-received-valid-messages')),
                                ('authentication_received_challenges_sent', YLeaf(YType.uint32, 'authentication-received-challenges-sent')),
                                ('authentication_received_challenge_response', YLeaf(YType.uint32, 'authentication-received-challenge-response')),
                                ('authentication_received_challenges_resent', YLeaf(YType.uint32, 'authentication-received-challenges-resent')),
                                ('authentication_received_challenge_timeouts', YLeaf(YType.uint32, 'authentication-received-challenge-timeouts')),
                                ('authentication_received_during_challenge', YLeaf(YType.uint32, 'authentication-received-during-challenge')),
                                ('authentication_received_incomplete', YLeaf(YType.uint32, 'authentication-received-incomplete')),
                                ('authentication_received_no_integrity', YLeaf(YType.uint32, 'authentication-received-no-integrity')),
                                ('authentication_received_bad_digest', YLeaf(YType.uint32, 'authentication-received-bad-digest')),
                                ('authentication_received_wrong_digest_type', YLeaf(YType.uint32, 'authentication-received-wrong-digest-type')),
                                ('authentication_received_sequence_number_duplicate', YLeaf(YType.uint32, 'authentication-received-sequence-number-duplicate')),
                                ('authentication_received_sequence_number_outof_range', YLeaf(YType.uint32, 'authentication-received-sequence-number-outof-range')),
                                ('authentication_received_wrong_challenges_response', YLeaf(YType.uint32, 'authentication-received-wrong-challenges-response')),
                                ('authentication_received_challenges_response_duplicate', YLeaf(YType.uint32, 'authentication-received-challenges-response-duplicate')),
                                ('authentication_received_response_late', YLeaf(YType.uint32, 'authentication-received-response-late')),
                                ('authentication_received_bad_message_format', YLeaf(YType.uint32, 'authentication-received-bad-message-format')),
                            ])
                            self.authentication_received_valid_messages = None
                            self.authentication_received_challenges_sent = None
                            self.authentication_received_challenge_response = None
                            self.authentication_received_challenges_resent = None
                            self.authentication_received_challenge_timeouts = None
                            self.authentication_received_during_challenge = None
                            self.authentication_received_incomplete = None
                            self.authentication_received_no_integrity = None
                            self.authentication_received_bad_digest = None
                            self.authentication_received_wrong_digest_type = None
                            self.authentication_received_sequence_number_duplicate = None
                            self.authentication_received_sequence_number_outof_range = None
                            self.authentication_received_wrong_challenges_response = None
                            self.authentication_received_challenges_response_duplicate = None
                            self.authentication_received_response_late = None
                            self.authentication_received_bad_message_format = None
                            self._segment_path = lambda: "counters"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.AuthenticationDetails.AuthenticationDetail.DirectionInfo.ReceiveInfo.Counters, ['authentication_received_valid_messages', 'authentication_received_challenges_sent', 'authentication_received_challenge_response', 'authentication_received_challenges_resent', 'authentication_received_challenge_timeouts', 'authentication_received_during_challenge', 'authentication_received_incomplete', 'authentication_received_no_integrity', 'authentication_received_bad_digest', 'authentication_received_wrong_digest_type', 'authentication_received_sequence_number_duplicate', 'authentication_received_sequence_number_outof_range', 'authentication_received_wrong_challenges_response', 'authentication_received_challenges_response_duplicate', 'authentication_received_response_late', 'authentication_received_bad_message_format'], name, value)


    class RsbBriefs(Entity):
        """
        Table of brief info about reservation state
        blocks
        
        .. attribute:: rsb_brief
        
        	Brief info for a single reservation state block
        	**type**\: list of  		 :py:class:`RsbBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.RsbBriefs, self).__init__()

            self.yang_name = "rsb-briefs"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("rsb-brief", ("rsb_brief", Rsvp.RsbBriefs.RsbBrief))])
            self._leafs = OrderedDict()

            self.rsb_brief = YList(self)
            self._segment_path = lambda: "rsb-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.RsbBriefs, [], name, value)


        class RsbBrief(Entity):
            """
            Brief info for a single reservation state block
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.S2LSubLsp>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:  :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Info
            	**type**\:  :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec>`
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:  :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Style>`
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:  :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Filter>`
            
            .. attribute:: input_interface
            
            	Reservation Input Interface
            	**type**\: str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.RsbBriefs.RsbBrief, self).__init__()

                self.yang_name = "rsb-brief"
                self.yang_parent_name = "rsb-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", Rsvp.RsbBriefs.RsbBrief.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", Rsvp.RsbBriefs.RsbBrief.S2LSubLsp)), ("flow-spec", ("flow_spec", Rsvp.RsbBriefs.RsbBrief.FlowSpec)), ("generic-flow-spec", ("generic_flow_spec", Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec)), ("style", ("style", Rsvp.RsbBriefs.RsbBrief.Style)), ("filter", ("filter", Rsvp.RsbBriefs.RsbBrief.Filter))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('input_interface', YLeaf(YType.str, 'input-interface')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.input_interface = None

                self.session = Rsvp.RsbBriefs.RsbBrief.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = Rsvp.RsbBriefs.RsbBrief.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.flow_spec = Rsvp.RsbBriefs.RsbBrief.FlowSpec()
                self.flow_spec.parent = self
                self._children_name_map["flow_spec"] = "flow-spec"
                self._children_yang_names.add("flow-spec")

                self.generic_flow_spec = Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self._children_name_map["generic_flow_spec"] = "generic-flow-spec"
                self._children_yang_names.add("generic-flow-spec")

                self.style = Rsvp.RsbBriefs.RsbBrief.Style()
                self.style.parent = self
                self._children_name_map["style"] = "style"
                self._children_yang_names.add("style")

                self.filter = Rsvp.RsbBriefs.RsbBrief.Filter()
                self.filter.parent = self
                self._children_name_map["filter"] = "filter"
                self._children_yang_names.add("filter")
                self._segment_path = lambda: "rsb-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.RsbBriefs.RsbBrief, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'input_interface'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbBriefs.RsbBrief.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "rsb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbBriefs.RsbBrief.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbBriefs.RsbBrief.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "rsb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbBriefs.RsbBrief.S2LSubLsp, ['s2l_destination_address'], name, value)


            class FlowSpec(Entity):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:  :py:class:`RsvpMgmtQosServiceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbBriefs.RsbBrief.FlowSpec, self).__init__()

                    self.yang_name = "flow-spec"
                    self.yang_parent_name = "rsb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_average_rate', YLeaf(YType.uint64, 'flow-average-rate')),
                        ('flow_max_burst', YLeaf(YType.uint64, 'flow-max-burst')),
                        ('flow_peak_rate', YLeaf(YType.uint64, 'flow-peak-rate')),
                        ('flow_min_unit', YLeaf(YType.uint32, 'flow-min-unit')),
                        ('flow_max_unit', YLeaf(YType.uint32, 'flow-max-unit')),
                        ('flow_requested_rate', YLeaf(YType.uint64, 'flow-requested-rate')),
                        ('flow_slack', YLeaf(YType.uint32, 'flow-slack')),
                        ('flow_qos', YLeaf(YType.enumeration, 'flow-qos')),
                    ])
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_peak_rate = None
                    self.flow_min_unit = None
                    self.flow_max_unit = None
                    self.flow_requested_rate = None
                    self.flow_slack = None
                    self.flow_qos = None
                    self._segment_path = lambda: "flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbBriefs.RsbBrief.FlowSpec, ['flow_average_rate', 'flow_max_burst', 'flow_peak_rate', 'flow_min_unit', 'flow_max_unit', 'flow_requested_rate', 'flow_slack', 'flow_qos'], name, value)


            class GenericFlowSpec(Entity):
                """
                Generic Flow Spec Info
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:  :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec>`
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:  :py:class:`RsvpMgmtFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec, self).__init__()

                    self.yang_name = "generic-flow-spec"
                    self.yang_parent_name = "rsb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("g709otn-flow-spec", ("g709otn_flow_spec", Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_spec_type', YLeaf(YType.enumeration, 'flow-spec-type')),
                    ])
                    self.flow_spec_type = None

                    self.g709otn_flow_spec = Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self
                    self._children_name_map["g709otn_flow_spec"] = "g709otn-flow-spec"
                    self._children_yang_names.add("g709otn-flow-spec")
                    self._segment_path = lambda: "generic-flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec, ['flow_spec_type'], name, value)


                class G709OtnFlowSpec(Entity):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec, self).__init__()

                        self.yang_name = "g709otn-flow-spec"
                        self.yang_parent_name = "generic-flow-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('flow_signal_type', YLeaf(YType.uint8, 'flow-signal-type')),
                            ('flow_nvc', YLeaf(YType.uint16, 'flow-nvc')),
                            ('flow_multiplier', YLeaf(YType.uint16, 'flow-multiplier')),
                            ('flow_bit_rate', YLeaf(YType.uint64, 'flow-bit-rate')),
                        ])
                        self.flow_signal_type = None
                        self.flow_nvc = None
                        self.flow_multiplier = None
                        self.flow_bit_rate = None
                        self._segment_path = lambda: "g709otn-flow-spec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/generic-flow-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RsbBriefs.RsbBrief.GenericFlowSpec.G709OtnFlowSpec, ['flow_signal_type', 'flow_nvc', 'flow_multiplier', 'flow_bit_rate'], name, value)


            class Style(Entity):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:  :py:class:`RsvpMgmtReservationTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbBriefs.RsbBrief.Style, self).__init__()

                    self.yang_name = "style"
                    self.yang_parent_name = "rsb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('reservation_type', YLeaf(YType.enumeration, 'reservation-type')),
                    ])
                    self.reservation_type = None
                    self._segment_path = lambda: "style"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RsbBriefs.RsbBrief.Style, ['reservation_type'], name, value)


            class Filter(Entity):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:  :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RsbBriefs.RsbBrief.Filter, self).__init__()

                    self.yang_name = "filter"
                    self.yang_parent_name = "rsb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-filter", ("rsvp_filter", Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_filter = Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self
                    self._children_name_map["rsvp_filter"] = "rsvp-filter"
                    self._children_yang_names.add("rsvp-filter")
                    self._segment_path = lambda: "filter"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/%s" % self._segment_path()


                class RsvpFilter(Entity):
                    """
                    RSVP Filter
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:  :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:  :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:  :py:class:`RsvpMgmtFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilter>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter, self).__init__()

                        self.yang_name = "rsvp-filter"
                        self.yang_parent_name = "filter"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("udp-ipv4-session", ("udp_ipv4_session", Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session)), ("p2mp-ipv4-session", ("p2mp_ipv4_session", Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('filter_type', YLeaf(YType.enumeration, 'filter-type')),
                        ])
                        self.filter_type = None

                        self.udp_ipv4_session = Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self
                        self._children_name_map["udp_ipv4_session"] = "udp-ipv4-session"
                        self._children_yang_names.add("udp-ipv4-session")

                        self.p2mp_ipv4_session = Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self._children_name_map["p2mp_ipv4_session"] = "p2mp-ipv4-session"
                        self._children_yang_names.add("p2mp-ipv4-session")
                        self._segment_path = lambda: "rsvp-filter"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/filter/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter, ['filter_type'], name, value)


                    class UdpIpv4Session(Entity):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session, self).__init__()

                            self.yang_name = "udp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self._segment_path = lambda: "udp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.UdpIpv4Session, ['source_address', 'source_port'], name, value)


                    class P2MpIpv4Session(Entity):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session, self).__init__()

                            self.yang_name = "p2mp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                                ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                                ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self.p2mp_sub_group_origin = None
                            self.sub_group_id = None
                            self._segment_path = lambda: "p2mp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RsbBriefs.RsbBrief.Filter.RsvpFilter.P2MpIpv4Session, ['source_address', 'source_port', 'p2mp_sub_group_origin', 'sub_group_id'], name, value)


    class OpenConfig(Entity):
        """
        OpenConfig info
        
        .. attribute:: global_counters
        
        	Platform wide RSVP statistics and counters
        	**type**\:  :py:class:`GlobalCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.OpenConfig.GlobalCounters>`
        
        .. attribute:: interface_counters
        
        	Table of info about RSVP\-enabled interface counters for OpenConfig
        	**type**\:  :py:class:`InterfaceCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.OpenConfig.InterfaceCounters>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.OpenConfig, self).__init__()

            self.yang_name = "open-config"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("global-counters", ("global_counters", Rsvp.OpenConfig.GlobalCounters)), ("interface-counters", ("interface_counters", Rsvp.OpenConfig.InterfaceCounters))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.global_counters = Rsvp.OpenConfig.GlobalCounters()
            self.global_counters.parent = self
            self._children_name_map["global_counters"] = "global-counters"
            self._children_yang_names.add("global-counters")

            self.interface_counters = Rsvp.OpenConfig.InterfaceCounters()
            self.interface_counters.parent = self
            self._children_name_map["interface_counters"] = "interface-counters"
            self._children_yang_names.add("interface-counters")
            self._segment_path = lambda: "open-config"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()


        class GlobalCounters(Entity):
            """
            Platform wide RSVP statistics and counters
            
            .. attribute:: path_timeouts
            
            	Global count of Path Timeouts
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: reservation_timeouts
            
            	Global count of reservation timeouts
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: rate_limited_messages
            
            	Global count of rate limited messages
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_path_messages
            
            	Global count of path messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_path_error_messages
            
            	Global count of path error messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_path_tear_messages
            
            	Global count of path tear messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_reservation_messages
            
            	Global count of reservation messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_reservation_error_messages
            
            	Global count of reservation error messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_reservation_tear_messages
            
            	Global count of reservation tear messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_hello_messages
            
            	Global count of hello messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_srefresh_messages
            
            	Global count of srefresh messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: in_ack_messages
            
            	Global count of ack messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_path_messages
            
            	Global count of path messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_path_error_messages
            
            	Global count of path error messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_path_tear_messages
            
            	Global count of path tear messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_reservation_messages
            
            	Global count of reservation messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_reservation_error_messages
            
            	Global count of reservation error messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_reservation_tear_messages
            
            	Global count of reservation tear messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_hello_messages
            
            	Global count of hello messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_srefresh_messages
            
            	Global count of srefresh messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: out_ack_messages
            
            	Global count of ack messages send
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.OpenConfig.GlobalCounters, self).__init__()

                self.yang_name = "global-counters"
                self.yang_parent_name = "open-config"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('path_timeouts', YLeaf(YType.uint64, 'path-timeouts')),
                    ('reservation_timeouts', YLeaf(YType.uint64, 'reservation-timeouts')),
                    ('rate_limited_messages', YLeaf(YType.uint64, 'rate-limited-messages')),
                    ('in_path_messages', YLeaf(YType.uint64, 'in-path-messages')),
                    ('in_path_error_messages', YLeaf(YType.uint64, 'in-path-error-messages')),
                    ('in_path_tear_messages', YLeaf(YType.uint64, 'in-path-tear-messages')),
                    ('in_reservation_messages', YLeaf(YType.uint64, 'in-reservation-messages')),
                    ('in_reservation_error_messages', YLeaf(YType.uint64, 'in-reservation-error-messages')),
                    ('in_reservation_tear_messages', YLeaf(YType.uint64, 'in-reservation-tear-messages')),
                    ('in_hello_messages', YLeaf(YType.uint64, 'in-hello-messages')),
                    ('in_srefresh_messages', YLeaf(YType.uint64, 'in-srefresh-messages')),
                    ('in_ack_messages', YLeaf(YType.uint64, 'in-ack-messages')),
                    ('out_path_messages', YLeaf(YType.uint64, 'out-path-messages')),
                    ('out_path_error_messages', YLeaf(YType.uint64, 'out-path-error-messages')),
                    ('out_path_tear_messages', YLeaf(YType.uint64, 'out-path-tear-messages')),
                    ('out_reservation_messages', YLeaf(YType.uint64, 'out-reservation-messages')),
                    ('out_reservation_error_messages', YLeaf(YType.uint64, 'out-reservation-error-messages')),
                    ('out_reservation_tear_messages', YLeaf(YType.uint64, 'out-reservation-tear-messages')),
                    ('out_hello_messages', YLeaf(YType.uint64, 'out-hello-messages')),
                    ('out_srefresh_messages', YLeaf(YType.uint64, 'out-srefresh-messages')),
                    ('out_ack_messages', YLeaf(YType.uint64, 'out-ack-messages')),
                ])
                self.path_timeouts = None
                self.reservation_timeouts = None
                self.rate_limited_messages = None
                self.in_path_messages = None
                self.in_path_error_messages = None
                self.in_path_tear_messages = None
                self.in_reservation_messages = None
                self.in_reservation_error_messages = None
                self.in_reservation_tear_messages = None
                self.in_hello_messages = None
                self.in_srefresh_messages = None
                self.in_ack_messages = None
                self.out_path_messages = None
                self.out_path_error_messages = None
                self.out_path_tear_messages = None
                self.out_reservation_messages = None
                self.out_reservation_error_messages = None
                self.out_reservation_tear_messages = None
                self.out_hello_messages = None
                self.out_srefresh_messages = None
                self.out_ack_messages = None
                self._segment_path = lambda: "global-counters"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/open-config/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.OpenConfig.GlobalCounters, ['path_timeouts', 'reservation_timeouts', 'rate_limited_messages', 'in_path_messages', 'in_path_error_messages', 'in_path_tear_messages', 'in_reservation_messages', 'in_reservation_error_messages', 'in_reservation_tear_messages', 'in_hello_messages', 'in_srefresh_messages', 'in_ack_messages', 'out_path_messages', 'out_path_error_messages', 'out_path_tear_messages', 'out_reservation_messages', 'out_reservation_error_messages', 'out_reservation_tear_messages', 'out_hello_messages', 'out_srefresh_messages', 'out_ack_messages'], name, value)


        class InterfaceCounters(Entity):
            """
            Table of info about RSVP\-enabled interface
            counters for OpenConfig
            
            .. attribute:: interface_counter
            
            	Info about an RSVP\-enabled interface counters
            	**type**\: list of  		 :py:class:`InterfaceCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.OpenConfig.InterfaceCounters.InterfaceCounter>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.OpenConfig.InterfaceCounters, self).__init__()

                self.yang_name = "interface-counters"
                self.yang_parent_name = "open-config"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("interface-counter", ("interface_counter", Rsvp.OpenConfig.InterfaceCounters.InterfaceCounter))])
                self._leafs = OrderedDict()

                self.interface_counter = YList(self)
                self._segment_path = lambda: "interface-counters"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/open-config/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.OpenConfig.InterfaceCounters, [], name, value)


            class InterfaceCounter(Entity):
                """
                Info about an RSVP\-enabled interface counters
                
                .. attribute:: interface_name  (key)
                
                	Interface name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: interface_name_xr
                
                	Interface name
                	**type**\: str
                
                .. attribute:: in_path_messages
                
                	Per interface count of path messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_path_error_messages
                
                	Per interface count of path error messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_path_tear_messages
                
                	Per interface count of path tear messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_reservation_messages
                
                	Per interface count of reservation messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_reservation_error_messages
                
                	Per interface count of reservation error messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_reservation_tear_messages
                
                	Per interface count of reservation tear messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_hello_messages
                
                	Per interface count of hello messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_srefresh_messages
                
                	Per interface count of srefresh messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: in_ack_messages
                
                	Per interface count of ack messages received
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_path_messages
                
                	Per interface count of path messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_path_error_messages
                
                	Per interface count of path error messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_path_tear_messages
                
                	Per interface count of path tear messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_reservation_messages
                
                	Per interface count of reservation messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_reservation_error_messages
                
                	Per interface count of reservation error messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_reservation_tear_messages
                
                	Per interface count of reservation tear messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_hello_messages
                
                	Per interface count of hello messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_srefresh_messages
                
                	Per interface count of srefresh messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: out_ack_messages
                
                	Per interface count of ack messages send
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.OpenConfig.InterfaceCounters.InterfaceCounter, self).__init__()

                    self.yang_name = "interface-counter"
                    self.yang_parent_name = "interface-counters"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                        ('in_path_messages', YLeaf(YType.uint64, 'in-path-messages')),
                        ('in_path_error_messages', YLeaf(YType.uint64, 'in-path-error-messages')),
                        ('in_path_tear_messages', YLeaf(YType.uint64, 'in-path-tear-messages')),
                        ('in_reservation_messages', YLeaf(YType.uint64, 'in-reservation-messages')),
                        ('in_reservation_error_messages', YLeaf(YType.uint64, 'in-reservation-error-messages')),
                        ('in_reservation_tear_messages', YLeaf(YType.uint64, 'in-reservation-tear-messages')),
                        ('in_hello_messages', YLeaf(YType.uint64, 'in-hello-messages')),
                        ('in_srefresh_messages', YLeaf(YType.uint64, 'in-srefresh-messages')),
                        ('in_ack_messages', YLeaf(YType.uint64, 'in-ack-messages')),
                        ('out_path_messages', YLeaf(YType.uint64, 'out-path-messages')),
                        ('out_path_error_messages', YLeaf(YType.uint64, 'out-path-error-messages')),
                        ('out_path_tear_messages', YLeaf(YType.uint64, 'out-path-tear-messages')),
                        ('out_reservation_messages', YLeaf(YType.uint64, 'out-reservation-messages')),
                        ('out_reservation_error_messages', YLeaf(YType.uint64, 'out-reservation-error-messages')),
                        ('out_reservation_tear_messages', YLeaf(YType.uint64, 'out-reservation-tear-messages')),
                        ('out_hello_messages', YLeaf(YType.uint64, 'out-hello-messages')),
                        ('out_srefresh_messages', YLeaf(YType.uint64, 'out-srefresh-messages')),
                        ('out_ack_messages', YLeaf(YType.uint64, 'out-ack-messages')),
                    ])
                    self.interface_name = None
                    self.interface_name_xr = None
                    self.in_path_messages = None
                    self.in_path_error_messages = None
                    self.in_path_tear_messages = None
                    self.in_reservation_messages = None
                    self.in_reservation_error_messages = None
                    self.in_reservation_tear_messages = None
                    self.in_hello_messages = None
                    self.in_srefresh_messages = None
                    self.in_ack_messages = None
                    self.out_path_messages = None
                    self.out_path_error_messages = None
                    self.out_path_tear_messages = None
                    self.out_reservation_messages = None
                    self.out_reservation_error_messages = None
                    self.out_reservation_tear_messages = None
                    self.out_hello_messages = None
                    self.out_srefresh_messages = None
                    self.out_ack_messages = None
                    self._segment_path = lambda: "interface-counter" + "[interface-name='" + str(self.interface_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/open-config/interface-counters/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.OpenConfig.InterfaceCounters.InterfaceCounter, ['interface_name', 'interface_name_xr', 'in_path_messages', 'in_path_error_messages', 'in_path_tear_messages', 'in_reservation_messages', 'in_reservation_error_messages', 'in_reservation_tear_messages', 'in_hello_messages', 'in_srefresh_messages', 'in_ack_messages', 'out_path_messages', 'out_path_error_messages', 'out_path_tear_messages', 'out_reservation_messages', 'out_reservation_error_messages', 'out_reservation_tear_messages', 'out_hello_messages', 'out_srefresh_messages', 'out_ack_messages'], name, value)


    class Counters(Entity):
        """
        Counters
        
        .. attribute:: interface_messages
        
        	Table of message counters
        	**type**\:  :py:class:`InterfaceMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceMessages>`
        
        .. attribute:: message_summary
        
        	Summary information for all RSVP message counters
        	**type**\:  :py:class:`MessageSummary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.MessageSummary>`
        
        .. attribute:: prefix_filtering
        
        	Prefix filtering counters
        	**type**\:  :py:class:`PrefixFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering>`
        
        .. attribute:: out_of_resource
        
        	Out of resource counters
        	**type**\:  :py:class:`OutOfResource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.OutOfResource>`
        
        .. attribute:: interface_events
        
        	Event counters
        	**type**\:  :py:class:`InterfaceEvents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceEvents>`
        
        .. attribute:: nsr
        
        	Summary information for all RSVP NSR counters
        	**type**\:  :py:class:`Nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.Nsr>`
        
        .. attribute:: issu
        
        	Summary information for all RSVP ISSU counters
        	**type**\:  :py:class:`Issu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.Issu>`
        
        .. attribute:: database
        
        	Summary information for all RSVP database counters
        	**type**\:  :py:class:`Database <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.Database>`
        
        .. attribute:: event_syncs
        
        	Table containing event sync counters
        	**type**\:  :py:class:`EventSyncs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.EventSyncs>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.Counters, self).__init__()

            self.yang_name = "counters"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("interface-messages", ("interface_messages", Rsvp.Counters.InterfaceMessages)), ("message-summary", ("message_summary", Rsvp.Counters.MessageSummary)), ("prefix-filtering", ("prefix_filtering", Rsvp.Counters.PrefixFiltering)), ("out-of-resource", ("out_of_resource", Rsvp.Counters.OutOfResource)), ("interface-events", ("interface_events", Rsvp.Counters.InterfaceEvents)), ("nsr", ("nsr", Rsvp.Counters.Nsr)), ("issu", ("issu", Rsvp.Counters.Issu)), ("database", ("database", Rsvp.Counters.Database)), ("event-syncs", ("event_syncs", Rsvp.Counters.EventSyncs))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.interface_messages = Rsvp.Counters.InterfaceMessages()
            self.interface_messages.parent = self
            self._children_name_map["interface_messages"] = "interface-messages"
            self._children_yang_names.add("interface-messages")

            self.message_summary = Rsvp.Counters.MessageSummary()
            self.message_summary.parent = self
            self._children_name_map["message_summary"] = "message-summary"
            self._children_yang_names.add("message-summary")

            self.prefix_filtering = Rsvp.Counters.PrefixFiltering()
            self.prefix_filtering.parent = self
            self._children_name_map["prefix_filtering"] = "prefix-filtering"
            self._children_yang_names.add("prefix-filtering")

            self.out_of_resource = Rsvp.Counters.OutOfResource()
            self.out_of_resource.parent = self
            self._children_name_map["out_of_resource"] = "out-of-resource"
            self._children_yang_names.add("out-of-resource")

            self.interface_events = Rsvp.Counters.InterfaceEvents()
            self.interface_events.parent = self
            self._children_name_map["interface_events"] = "interface-events"
            self._children_yang_names.add("interface-events")

            self.nsr = Rsvp.Counters.Nsr()
            self.nsr.parent = self
            self._children_name_map["nsr"] = "nsr"
            self._children_yang_names.add("nsr")

            self.issu = Rsvp.Counters.Issu()
            self.issu.parent = self
            self._children_name_map["issu"] = "issu"
            self._children_yang_names.add("issu")

            self.database = Rsvp.Counters.Database()
            self.database.parent = self
            self._children_name_map["database"] = "database"
            self._children_yang_names.add("database")

            self.event_syncs = Rsvp.Counters.EventSyncs()
            self.event_syncs.parent = self
            self._children_name_map["event_syncs"] = "event-syncs"
            self._children_yang_names.add("event-syncs")
            self._segment_path = lambda: "counters"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()


        class InterfaceMessages(Entity):
            """
            Table of message counters
            
            .. attribute:: interface_message
            
            	Interface message counters
            	**type**\: list of  		 :py:class:`InterfaceMessage <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceMessages.InterfaceMessage>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Counters.InterfaceMessages, self).__init__()

                self.yang_name = "interface-messages"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("interface-message", ("interface_message", Rsvp.Counters.InterfaceMessages.InterfaceMessage))])
                self._leafs = OrderedDict()

                self.interface_message = YList(self)
                self._segment_path = lambda: "interface-messages"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.Counters.InterfaceMessages, [], name, value)


            class InterfaceMessage(Entity):
                """
                Interface message counters
                
                .. attribute:: interface_name  (key)
                
                	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: received_messages
                
                	Count of messages received
                	**type**\:  :py:class:`ReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages>`
                
                .. attribute:: transmitted_messages
                
                	Count of messages transmitted
                	**type**\:  :py:class:`TransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages>`
                
                .. attribute:: bundle_received_messages
                
                	Count of Bundle messages received
                	**type**\:  :py:class:`BundleReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages>`
                
                .. attribute:: bundle_transmitted_messages
                
                	Count of Bundle messages transmitted
                	**type**\:  :py:class:`BundleTransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages>`
                
                .. attribute:: retransmitted_messages
                
                	Count of messages retransmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: out_of_order_messages
                
                	Count of Out of Order messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: rate_limited_messages
                
                	Count of Rate Limited messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Counters.InterfaceMessages.InterfaceMessage, self).__init__()

                    self.yang_name = "interface-message"
                    self.yang_parent_name = "interface-messages"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([("received-messages", ("received_messages", Rsvp.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages)), ("transmitted-messages", ("transmitted_messages", Rsvp.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages)), ("bundle-received-messages", ("bundle_received_messages", Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages)), ("bundle-transmitted-messages", ("bundle_transmitted_messages", Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('retransmitted_messages', YLeaf(YType.uint32, 'retransmitted-messages')),
                        ('out_of_order_messages', YLeaf(YType.uint32, 'out-of-order-messages')),
                        ('rate_limited_messages', YLeaf(YType.uint32, 'rate-limited-messages')),
                    ])
                    self.interface_name = None
                    self.retransmitted_messages = None
                    self.out_of_order_messages = None
                    self.rate_limited_messages = None

                    self.received_messages = Rsvp.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages()
                    self.received_messages.parent = self
                    self._children_name_map["received_messages"] = "received-messages"
                    self._children_yang_names.add("received-messages")

                    self.transmitted_messages = Rsvp.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages()
                    self.transmitted_messages.parent = self
                    self._children_name_map["transmitted_messages"] = "transmitted-messages"
                    self._children_yang_names.add("transmitted-messages")

                    self.bundle_received_messages = Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages()
                    self.bundle_received_messages.parent = self
                    self._children_name_map["bundle_received_messages"] = "bundle-received-messages"
                    self._children_yang_names.add("bundle-received-messages")

                    self.bundle_transmitted_messages = Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages()
                    self.bundle_transmitted_messages.parent = self
                    self._children_name_map["bundle_transmitted_messages"] = "bundle-transmitted-messages"
                    self._children_yang_names.add("bundle-transmitted-messages")
                    self._segment_path = lambda: "interface-message" + "[interface-name='" + str(self.interface_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/interface-messages/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Counters.InterfaceMessages.InterfaceMessage, ['interface_name', 'retransmitted_messages', 'out_of_order_messages', 'rate_limited_messages'], name, value)


                class ReceivedMessages(Entity):
                    """
                    Count of messages received
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages, self).__init__()

                        self.yang_name = "received-messages"
                        self.yang_parent_name = "interface-message"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('path', YLeaf(YType.uint32, 'path')),
                            ('reservation', YLeaf(YType.uint32, 'reservation')),
                            ('path_error', YLeaf(YType.uint32, 'path-error')),
                            ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                            ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                            ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                            ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                            ('bundle', YLeaf(YType.uint32, 'bundle')),
                            ('ack', YLeaf(YType.uint32, 'ack')),
                            ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                            ('hello', YLeaf(YType.uint32, 'hello')),
                            ('challenge', YLeaf(YType.uint32, 'challenge')),
                            ('response', YLeaf(YType.uint32, 'response')),
                        ])
                        self.path = None
                        self.reservation = None
                        self.path_error = None
                        self.reservation_error = None
                        self.path_tear = None
                        self.reservation_tear = None
                        self.reservation_confirm = None
                        self.bundle = None
                        self.ack = None
                        self.srefresh = None
                        self.hello = None
                        self.challenge = None
                        self.response = None
                        self._segment_path = lambda: "received-messages"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.Counters.InterfaceMessages.InterfaceMessage.ReceivedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


                class TransmittedMessages(Entity):
                    """
                    Count of messages transmitted
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages, self).__init__()

                        self.yang_name = "transmitted-messages"
                        self.yang_parent_name = "interface-message"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('path', YLeaf(YType.uint32, 'path')),
                            ('reservation', YLeaf(YType.uint32, 'reservation')),
                            ('path_error', YLeaf(YType.uint32, 'path-error')),
                            ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                            ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                            ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                            ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                            ('bundle', YLeaf(YType.uint32, 'bundle')),
                            ('ack', YLeaf(YType.uint32, 'ack')),
                            ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                            ('hello', YLeaf(YType.uint32, 'hello')),
                            ('challenge', YLeaf(YType.uint32, 'challenge')),
                            ('response', YLeaf(YType.uint32, 'response')),
                        ])
                        self.path = None
                        self.reservation = None
                        self.path_error = None
                        self.reservation_error = None
                        self.path_tear = None
                        self.reservation_tear = None
                        self.reservation_confirm = None
                        self.bundle = None
                        self.ack = None
                        self.srefresh = None
                        self.hello = None
                        self.challenge = None
                        self.response = None
                        self._segment_path = lambda: "transmitted-messages"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.Counters.InterfaceMessages.InterfaceMessage.TransmittedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


                class BundleReceivedMessages(Entity):
                    """
                    Count of Bundle messages received
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages, self).__init__()

                        self.yang_name = "bundle-received-messages"
                        self.yang_parent_name = "interface-message"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('path', YLeaf(YType.uint32, 'path')),
                            ('reservation', YLeaf(YType.uint32, 'reservation')),
                            ('path_error', YLeaf(YType.uint32, 'path-error')),
                            ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                            ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                            ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                            ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                            ('bundle', YLeaf(YType.uint32, 'bundle')),
                            ('ack', YLeaf(YType.uint32, 'ack')),
                            ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                            ('hello', YLeaf(YType.uint32, 'hello')),
                            ('challenge', YLeaf(YType.uint32, 'challenge')),
                            ('response', YLeaf(YType.uint32, 'response')),
                        ])
                        self.path = None
                        self.reservation = None
                        self.path_error = None
                        self.reservation_error = None
                        self.path_tear = None
                        self.reservation_tear = None
                        self.reservation_confirm = None
                        self.bundle = None
                        self.ack = None
                        self.srefresh = None
                        self.hello = None
                        self.challenge = None
                        self.response = None
                        self._segment_path = lambda: "bundle-received-messages"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleReceivedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


                class BundleTransmittedMessages(Entity):
                    """
                    Count of Bundle messages transmitted
                    
                    .. attribute:: path
                    
                    	Count of Path messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation
                    
                    	Count of Reservation messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_error
                    
                    	Count of PathError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_error
                    
                    	Count of ReservationError messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: path_tear
                    
                    	Count of PathTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_tear
                    
                    	Count of ReservationTear messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: reservation_confirm
                    
                    	Count of ReservationConfirm messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bundle
                    
                    	Count of Bundle messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: ack
                    
                    	Count of ACK messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: srefresh
                    
                    	Count of Srefresh messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: hello
                    
                    	Count of Hello messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: challenge
                    
                    	Count of Integrity Challenge messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: response
                    
                    	Count of Integrity Response messages
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages, self).__init__()

                        self.yang_name = "bundle-transmitted-messages"
                        self.yang_parent_name = "interface-message"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('path', YLeaf(YType.uint32, 'path')),
                            ('reservation', YLeaf(YType.uint32, 'reservation')),
                            ('path_error', YLeaf(YType.uint32, 'path-error')),
                            ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                            ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                            ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                            ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                            ('bundle', YLeaf(YType.uint32, 'bundle')),
                            ('ack', YLeaf(YType.uint32, 'ack')),
                            ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                            ('hello', YLeaf(YType.uint32, 'hello')),
                            ('challenge', YLeaf(YType.uint32, 'challenge')),
                            ('response', YLeaf(YType.uint32, 'response')),
                        ])
                        self.path = None
                        self.reservation = None
                        self.path_error = None
                        self.reservation_error = None
                        self.path_tear = None
                        self.reservation_tear = None
                        self.reservation_confirm = None
                        self.bundle = None
                        self.ack = None
                        self.srefresh = None
                        self.hello = None
                        self.challenge = None
                        self.response = None
                        self._segment_path = lambda: "bundle-transmitted-messages"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.Counters.InterfaceMessages.InterfaceMessage.BundleTransmittedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


        class MessageSummary(Entity):
            """
            Summary information for all RSVP message
            counters
            
            .. attribute:: received_messages
            
            	Count of messages received
            	**type**\:  :py:class:`ReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.MessageSummary.ReceivedMessages>`
            
            .. attribute:: transmitted_messages
            
            	Count of messages transmitted
            	**type**\:  :py:class:`TransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.MessageSummary.TransmittedMessages>`
            
            .. attribute:: bundle_received_messages
            
            	Count of Bundle messages received
            	**type**\:  :py:class:`BundleReceivedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.MessageSummary.BundleReceivedMessages>`
            
            .. attribute:: bundle_transmitted_messages
            
            	Count of Bundle messages transmitted
            	**type**\:  :py:class:`BundleTransmittedMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.MessageSummary.BundleTransmittedMessages>`
            
            .. attribute:: retransmitted_messages
            
            	Count of messages retransmitted
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: out_of_order_messages
            
            	Count of Out of Order messages
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: rate_limited_messages
            
            	Count of Rate Limited messages
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Counters.MessageSummary, self).__init__()

                self.yang_name = "message-summary"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("received-messages", ("received_messages", Rsvp.Counters.MessageSummary.ReceivedMessages)), ("transmitted-messages", ("transmitted_messages", Rsvp.Counters.MessageSummary.TransmittedMessages)), ("bundle-received-messages", ("bundle_received_messages", Rsvp.Counters.MessageSummary.BundleReceivedMessages)), ("bundle-transmitted-messages", ("bundle_transmitted_messages", Rsvp.Counters.MessageSummary.BundleTransmittedMessages))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('retransmitted_messages', YLeaf(YType.uint32, 'retransmitted-messages')),
                    ('out_of_order_messages', YLeaf(YType.uint32, 'out-of-order-messages')),
                    ('rate_limited_messages', YLeaf(YType.uint32, 'rate-limited-messages')),
                ])
                self.retransmitted_messages = None
                self.out_of_order_messages = None
                self.rate_limited_messages = None

                self.received_messages = Rsvp.Counters.MessageSummary.ReceivedMessages()
                self.received_messages.parent = self
                self._children_name_map["received_messages"] = "received-messages"
                self._children_yang_names.add("received-messages")

                self.transmitted_messages = Rsvp.Counters.MessageSummary.TransmittedMessages()
                self.transmitted_messages.parent = self
                self._children_name_map["transmitted_messages"] = "transmitted-messages"
                self._children_yang_names.add("transmitted-messages")

                self.bundle_received_messages = Rsvp.Counters.MessageSummary.BundleReceivedMessages()
                self.bundle_received_messages.parent = self
                self._children_name_map["bundle_received_messages"] = "bundle-received-messages"
                self._children_yang_names.add("bundle-received-messages")

                self.bundle_transmitted_messages = Rsvp.Counters.MessageSummary.BundleTransmittedMessages()
                self.bundle_transmitted_messages.parent = self
                self._children_name_map["bundle_transmitted_messages"] = "bundle-transmitted-messages"
                self._children_yang_names.add("bundle-transmitted-messages")
                self._segment_path = lambda: "message-summary"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.Counters.MessageSummary, ['retransmitted_messages', 'out_of_order_messages', 'rate_limited_messages'], name, value)


            class ReceivedMessages(Entity):
                """
                Count of messages received
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Counters.MessageSummary.ReceivedMessages, self).__init__()

                    self.yang_name = "received-messages"
                    self.yang_parent_name = "message-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('path', YLeaf(YType.uint32, 'path')),
                        ('reservation', YLeaf(YType.uint32, 'reservation')),
                        ('path_error', YLeaf(YType.uint32, 'path-error')),
                        ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                        ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                        ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                        ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                        ('bundle', YLeaf(YType.uint32, 'bundle')),
                        ('ack', YLeaf(YType.uint32, 'ack')),
                        ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                        ('hello', YLeaf(YType.uint32, 'hello')),
                        ('challenge', YLeaf(YType.uint32, 'challenge')),
                        ('response', YLeaf(YType.uint32, 'response')),
                    ])
                    self.path = None
                    self.reservation = None
                    self.path_error = None
                    self.reservation_error = None
                    self.path_tear = None
                    self.reservation_tear = None
                    self.reservation_confirm = None
                    self.bundle = None
                    self.ack = None
                    self.srefresh = None
                    self.hello = None
                    self.challenge = None
                    self.response = None
                    self._segment_path = lambda: "received-messages"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/message-summary/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Counters.MessageSummary.ReceivedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


            class TransmittedMessages(Entity):
                """
                Count of messages transmitted
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Counters.MessageSummary.TransmittedMessages, self).__init__()

                    self.yang_name = "transmitted-messages"
                    self.yang_parent_name = "message-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('path', YLeaf(YType.uint32, 'path')),
                        ('reservation', YLeaf(YType.uint32, 'reservation')),
                        ('path_error', YLeaf(YType.uint32, 'path-error')),
                        ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                        ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                        ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                        ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                        ('bundle', YLeaf(YType.uint32, 'bundle')),
                        ('ack', YLeaf(YType.uint32, 'ack')),
                        ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                        ('hello', YLeaf(YType.uint32, 'hello')),
                        ('challenge', YLeaf(YType.uint32, 'challenge')),
                        ('response', YLeaf(YType.uint32, 'response')),
                    ])
                    self.path = None
                    self.reservation = None
                    self.path_error = None
                    self.reservation_error = None
                    self.path_tear = None
                    self.reservation_tear = None
                    self.reservation_confirm = None
                    self.bundle = None
                    self.ack = None
                    self.srefresh = None
                    self.hello = None
                    self.challenge = None
                    self.response = None
                    self._segment_path = lambda: "transmitted-messages"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/message-summary/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Counters.MessageSummary.TransmittedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


            class BundleReceivedMessages(Entity):
                """
                Count of Bundle messages received
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Counters.MessageSummary.BundleReceivedMessages, self).__init__()

                    self.yang_name = "bundle-received-messages"
                    self.yang_parent_name = "message-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('path', YLeaf(YType.uint32, 'path')),
                        ('reservation', YLeaf(YType.uint32, 'reservation')),
                        ('path_error', YLeaf(YType.uint32, 'path-error')),
                        ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                        ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                        ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                        ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                        ('bundle', YLeaf(YType.uint32, 'bundle')),
                        ('ack', YLeaf(YType.uint32, 'ack')),
                        ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                        ('hello', YLeaf(YType.uint32, 'hello')),
                        ('challenge', YLeaf(YType.uint32, 'challenge')),
                        ('response', YLeaf(YType.uint32, 'response')),
                    ])
                    self.path = None
                    self.reservation = None
                    self.path_error = None
                    self.reservation_error = None
                    self.path_tear = None
                    self.reservation_tear = None
                    self.reservation_confirm = None
                    self.bundle = None
                    self.ack = None
                    self.srefresh = None
                    self.hello = None
                    self.challenge = None
                    self.response = None
                    self._segment_path = lambda: "bundle-received-messages"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/message-summary/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Counters.MessageSummary.BundleReceivedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


            class BundleTransmittedMessages(Entity):
                """
                Count of Bundle messages transmitted
                
                .. attribute:: path
                
                	Count of Path messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation
                
                	Count of Reservation messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_error
                
                	Count of PathError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_error
                
                	Count of ReservationError messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: path_tear
                
                	Count of PathTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_tear
                
                	Count of ReservationTear messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: reservation_confirm
                
                	Count of ReservationConfirm messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: bundle
                
                	Count of Bundle messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: ack
                
                	Count of ACK messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: srefresh
                
                	Count of Srefresh messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: hello
                
                	Count of Hello messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: challenge
                
                	Count of Integrity Challenge messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: response
                
                	Count of Integrity Response messages
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Counters.MessageSummary.BundleTransmittedMessages, self).__init__()

                    self.yang_name = "bundle-transmitted-messages"
                    self.yang_parent_name = "message-summary"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('path', YLeaf(YType.uint32, 'path')),
                        ('reservation', YLeaf(YType.uint32, 'reservation')),
                        ('path_error', YLeaf(YType.uint32, 'path-error')),
                        ('reservation_error', YLeaf(YType.uint32, 'reservation-error')),
                        ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                        ('reservation_tear', YLeaf(YType.uint32, 'reservation-tear')),
                        ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                        ('bundle', YLeaf(YType.uint32, 'bundle')),
                        ('ack', YLeaf(YType.uint32, 'ack')),
                        ('srefresh', YLeaf(YType.uint32, 'srefresh')),
                        ('hello', YLeaf(YType.uint32, 'hello')),
                        ('challenge', YLeaf(YType.uint32, 'challenge')),
                        ('response', YLeaf(YType.uint32, 'response')),
                    ])
                    self.path = None
                    self.reservation = None
                    self.path_error = None
                    self.reservation_error = None
                    self.path_tear = None
                    self.reservation_tear = None
                    self.reservation_confirm = None
                    self.bundle = None
                    self.ack = None
                    self.srefresh = None
                    self.hello = None
                    self.challenge = None
                    self.response = None
                    self._segment_path = lambda: "bundle-transmitted-messages"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/message-summary/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Counters.MessageSummary.BundleTransmittedMessages, ['path', 'reservation', 'path_error', 'reservation_error', 'path_tear', 'reservation_tear', 'reservation_confirm', 'bundle', 'ack', 'srefresh', 'hello', 'challenge', 'response'], name, value)


        class PrefixFiltering(Entity):
            """
            Prefix filtering counters
            
            .. attribute:: accesses
            
            	AccessList specific prefix filtering counters
            	**type**\:  :py:class:`Accesses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Accesses>`
            
            .. attribute:: interfaces
            
            	Interface specific prefix filtering counters
            	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Counters.PrefixFiltering, self).__init__()

                self.yang_name = "prefix-filtering"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("accesses", ("accesses", Rsvp.Counters.PrefixFiltering.Accesses)), ("interfaces", ("interfaces", Rsvp.Counters.PrefixFiltering.Interfaces))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict()

                self.accesses = Rsvp.Counters.PrefixFiltering.Accesses()
                self.accesses.parent = self
                self._children_name_map["accesses"] = "accesses"
                self._children_yang_names.add("accesses")

                self.interfaces = Rsvp.Counters.PrefixFiltering.Interfaces()
                self.interfaces.parent = self
                self._children_name_map["interfaces"] = "interfaces"
                self._children_yang_names.add("interfaces")
                self._segment_path = lambda: "prefix-filtering"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/%s" % self._segment_path()


            class Accesses(Entity):
                """
                AccessList specific prefix filtering counters
                
                .. attribute:: access
                
                	Prefix filtering counters for a specific AccessList
                	**type**\: list of  		 :py:class:`Access <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Accesses.Access>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Counters.PrefixFiltering.Accesses, self).__init__()

                    self.yang_name = "accesses"
                    self.yang_parent_name = "prefix-filtering"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("access", ("access", Rsvp.Counters.PrefixFiltering.Accesses.Access))])
                    self._leafs = OrderedDict()

                    self.access = YList(self)
                    self._segment_path = lambda: "accesses"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Counters.PrefixFiltering.Accesses, [], name, value)


                class Access(Entity):
                    """
                    Prefix filtering counters for a specific
                    AccessList
                    
                    .. attribute:: access_list_name  (key)
                    
                    	AccessList Name
                    	**type**\: str
                    
                    	**length:** 1..65
                    
                    .. attribute:: forwarded
                    
                    	Count of messages which got forwarded
                    	**type**\:  :py:class:`Forwarded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Accesses.Access.Forwarded>`
                    
                    .. attribute:: locally_destined
                    
                    	Count of locally destined messages
                    	**type**\:  :py:class:`LocallyDestined <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Accesses.Access.LocallyDestined>`
                    
                    .. attribute:: dropped
                    
                    	Count of messages dropped
                    	**type**\:  :py:class:`Dropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Accesses.Access.Dropped>`
                    
                    .. attribute:: total
                    
                    	Count of total messages
                    	**type**\:  :py:class:`Total <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Accesses.Access.Total>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.Counters.PrefixFiltering.Accesses.Access, self).__init__()

                        self.yang_name = "access"
                        self.yang_parent_name = "accesses"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['access_list_name']
                        self._child_container_classes = OrderedDict([("forwarded", ("forwarded", Rsvp.Counters.PrefixFiltering.Accesses.Access.Forwarded)), ("locally-destined", ("locally_destined", Rsvp.Counters.PrefixFiltering.Accesses.Access.LocallyDestined)), ("dropped", ("dropped", Rsvp.Counters.PrefixFiltering.Accesses.Access.Dropped)), ("total", ("total", Rsvp.Counters.PrefixFiltering.Accesses.Access.Total))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('access_list_name', YLeaf(YType.str, 'access-list-name')),
                        ])
                        self.access_list_name = None

                        self.forwarded = Rsvp.Counters.PrefixFiltering.Accesses.Access.Forwarded()
                        self.forwarded.parent = self
                        self._children_name_map["forwarded"] = "forwarded"
                        self._children_yang_names.add("forwarded")

                        self.locally_destined = Rsvp.Counters.PrefixFiltering.Accesses.Access.LocallyDestined()
                        self.locally_destined.parent = self
                        self._children_name_map["locally_destined"] = "locally-destined"
                        self._children_yang_names.add("locally-destined")

                        self.dropped = Rsvp.Counters.PrefixFiltering.Accesses.Access.Dropped()
                        self.dropped.parent = self
                        self._children_name_map["dropped"] = "dropped"
                        self._children_yang_names.add("dropped")

                        self.total = Rsvp.Counters.PrefixFiltering.Accesses.Access.Total()
                        self.total.parent = self
                        self._children_name_map["total"] = "total"
                        self._children_yang_names.add("total")
                        self._segment_path = lambda: "access" + "[access-list-name='" + str(self.access_list_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/accesses/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.Counters.PrefixFiltering.Accesses.Access, ['access_list_name'], name, value)


                    class Forwarded(Entity):
                        """
                        Count of messages which got forwarded
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Counters.PrefixFiltering.Accesses.Access.Forwarded, self).__init__()

                            self.yang_name = "forwarded"
                            self.yang_parent_name = "access"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "forwarded"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Counters.PrefixFiltering.Accesses.Access.Forwarded, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class LocallyDestined(Entity):
                        """
                        Count of locally destined messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Counters.PrefixFiltering.Accesses.Access.LocallyDestined, self).__init__()

                            self.yang_name = "locally-destined"
                            self.yang_parent_name = "access"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "locally-destined"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Counters.PrefixFiltering.Accesses.Access.LocallyDestined, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class Dropped(Entity):
                        """
                        Count of messages dropped
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Counters.PrefixFiltering.Accesses.Access.Dropped, self).__init__()

                            self.yang_name = "dropped"
                            self.yang_parent_name = "access"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "dropped"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Counters.PrefixFiltering.Accesses.Access.Dropped, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class Total(Entity):
                        """
                        Count of total messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Counters.PrefixFiltering.Accesses.Access.Total, self).__init__()

                            self.yang_name = "total"
                            self.yang_parent_name = "access"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "total"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Counters.PrefixFiltering.Accesses.Access.Total, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


            class Interfaces(Entity):
                """
                Interface specific prefix filtering counters
                
                .. attribute:: summary
                
                	Summary of prefix filtering counts for all interfaces
                	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Summary>`
                
                .. attribute:: interfaces
                
                	Table of interface specific prefix filtering counters
                	**type**\:  :py:class:`Interfaces_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Counters.PrefixFiltering.Interfaces, self).__init__()

                    self.yang_name = "interfaces"
                    self.yang_parent_name = "prefix-filtering"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("summary", ("summary", Rsvp.Counters.PrefixFiltering.Interfaces.Summary)), ("interfaces", ("interfaces", Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.summary = Rsvp.Counters.PrefixFiltering.Interfaces.Summary()
                    self.summary.parent = self
                    self._children_name_map["summary"] = "summary"
                    self._children_yang_names.add("summary")

                    self.interfaces = Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_()
                    self.interfaces.parent = self
                    self._children_name_map["interfaces"] = "interfaces"
                    self._children_yang_names.add("interfaces")
                    self._segment_path = lambda: "interfaces"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/%s" % self._segment_path()


                class Summary(Entity):
                    """
                    Summary of prefix filtering counts for all
                    interfaces
                    
                    .. attribute:: forwarded
                    
                    	Count of messages which got forwarded
                    	**type**\:  :py:class:`Forwarded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Forwarded>`
                    
                    .. attribute:: locally_destined
                    
                    	Count of locally destined messages
                    	**type**\:  :py:class:`LocallyDestined <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined>`
                    
                    .. attribute:: dropped
                    
                    	Count of messages dropped
                    	**type**\:  :py:class:`Dropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Dropped>`
                    
                    .. attribute:: default_action_dropped
                    
                    	Count of messages which got dropped due to default ACL action
                    	**type**\:  :py:class:`DefaultActionDropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped>`
                    
                    .. attribute:: default_action_processed
                    
                    	Count of messages which were processed due to default ACL action
                    	**type**\:  :py:class:`DefaultActionProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed>`
                    
                    .. attribute:: total
                    
                    	Count of total messages
                    	**type**\:  :py:class:`Total <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Total>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.Counters.PrefixFiltering.Interfaces.Summary, self).__init__()

                        self.yang_name = "summary"
                        self.yang_parent_name = "interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("forwarded", ("forwarded", Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Forwarded)), ("locally-destined", ("locally_destined", Rsvp.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined)), ("dropped", ("dropped", Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Dropped)), ("default-action-dropped", ("default_action_dropped", Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped)), ("default-action-processed", ("default_action_processed", Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed)), ("total", ("total", Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Total))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.forwarded = Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Forwarded()
                        self.forwarded.parent = self
                        self._children_name_map["forwarded"] = "forwarded"
                        self._children_yang_names.add("forwarded")

                        self.locally_destined = Rsvp.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined()
                        self.locally_destined.parent = self
                        self._children_name_map["locally_destined"] = "locally-destined"
                        self._children_yang_names.add("locally-destined")

                        self.dropped = Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Dropped()
                        self.dropped.parent = self
                        self._children_name_map["dropped"] = "dropped"
                        self._children_yang_names.add("dropped")

                        self.default_action_dropped = Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped()
                        self.default_action_dropped.parent = self
                        self._children_name_map["default_action_dropped"] = "default-action-dropped"
                        self._children_yang_names.add("default-action-dropped")

                        self.default_action_processed = Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed()
                        self.default_action_processed.parent = self
                        self._children_name_map["default_action_processed"] = "default-action-processed"
                        self._children_yang_names.add("default-action-processed")

                        self.total = Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Total()
                        self.total.parent = self
                        self._children_name_map["total"] = "total"
                        self._children_yang_names.add("total")
                        self._segment_path = lambda: "summary"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/%s" % self._segment_path()


                    class Forwarded(Entity):
                        """
                        Count of messages which got forwarded
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Forwarded, self).__init__()

                            self.yang_name = "forwarded"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "forwarded"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Forwarded, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class LocallyDestined(Entity):
                        """
                        Count of locally destined messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined, self).__init__()

                            self.yang_name = "locally-destined"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "locally-destined"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Counters.PrefixFiltering.Interfaces.Summary.LocallyDestined, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class Dropped(Entity):
                        """
                        Count of messages dropped
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Dropped, self).__init__()

                            self.yang_name = "dropped"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "dropped"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Dropped, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class DefaultActionDropped(Entity):
                        """
                        Count of messages which got dropped due to
                        default ACL action
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped, self).__init__()

                            self.yang_name = "default-action-dropped"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "default-action-dropped"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionDropped, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class DefaultActionProcessed(Entity):
                        """
                        Count of messages which were processed due to
                        default ACL action
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed, self).__init__()

                            self.yang_name = "default-action-processed"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "default-action-processed"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Counters.PrefixFiltering.Interfaces.Summary.DefaultActionProcessed, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                    class Total(Entity):
                        """
                        Count of total messages
                        
                        .. attribute:: path
                        
                        	Count of Path messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: path_tear
                        
                        	Count of PathTear messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: reservation_confirm
                        
                        	Count of ReservationConfirm messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: total
                        
                        	Total count of messages
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Total, self).__init__()

                            self.yang_name = "total"
                            self.yang_parent_name = "summary"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('path', YLeaf(YType.uint32, 'path')),
                                ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                ('total', YLeaf(YType.uint32, 'total')),
                            ])
                            self.path = None
                            self.path_tear = None
                            self.reservation_confirm = None
                            self.total = None
                            self._segment_path = lambda: "total"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Counters.PrefixFiltering.Interfaces.Summary.Total, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                class Interfaces_(Entity):
                    """
                    Table of interface specific prefix filtering
                    counters
                    
                    .. attribute:: interface
                    
                    	Prefix filtering counters for a specific interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_, self).__init__()

                        self.yang_name = "interfaces"
                        self.yang_parent_name = "interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("interface", ("interface", Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface))])
                        self._leafs = OrderedDict()

                        self.interface = YList(self)
                        self._segment_path = lambda: "interfaces"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_, [], name, value)


                    class Interface(Entity):
                        """
                        Prefix filtering counters for a specific
                        interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                        	**type**\: str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: forwarded
                        
                        	Count of messages which got forwarded
                        	**type**\:  :py:class:`Forwarded <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded>`
                        
                        .. attribute:: locally_destined
                        
                        	Count of locally destined messages
                        	**type**\:  :py:class:`LocallyDestined <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined>`
                        
                        .. attribute:: dropped
                        
                        	Count of messages dropped
                        	**type**\:  :py:class:`Dropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped>`
                        
                        .. attribute:: default_action_dropped
                        
                        	Count of messages which got dropped due to default ACL action
                        	**type**\:  :py:class:`DefaultActionDropped <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped>`
                        
                        .. attribute:: default_action_processed
                        
                        	Count of messages which were processed due to default ACL action
                        	**type**\:  :py:class:`DefaultActionProcessed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed>`
                        
                        .. attribute:: total
                        
                        	Count of total messages
                        	**type**\:  :py:class:`Total <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['interface_name']
                            self._child_container_classes = OrderedDict([("forwarded", ("forwarded", Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded)), ("locally-destined", ("locally_destined", Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined)), ("dropped", ("dropped", Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped)), ("default-action-dropped", ("default_action_dropped", Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped)), ("default-action-processed", ("default_action_processed", Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed)), ("total", ("total", Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ])
                            self.interface_name = None

                            self.forwarded = Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded()
                            self.forwarded.parent = self
                            self._children_name_map["forwarded"] = "forwarded"
                            self._children_yang_names.add("forwarded")

                            self.locally_destined = Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined()
                            self.locally_destined.parent = self
                            self._children_name_map["locally_destined"] = "locally-destined"
                            self._children_yang_names.add("locally-destined")

                            self.dropped = Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped()
                            self.dropped.parent = self
                            self._children_name_map["dropped"] = "dropped"
                            self._children_yang_names.add("dropped")

                            self.default_action_dropped = Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped()
                            self.default_action_dropped.parent = self
                            self._children_name_map["default_action_dropped"] = "default-action-dropped"
                            self._children_yang_names.add("default-action-dropped")

                            self.default_action_processed = Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed()
                            self.default_action_processed.parent = self
                            self._children_name_map["default_action_processed"] = "default-action-processed"
                            self._children_yang_names.add("default-action-processed")

                            self.total = Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total()
                            self.total.parent = self
                            self._children_name_map["total"] = "total"
                            self._children_yang_names.add("total")
                            self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/interfaces/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface, ['interface_name'], name, value)


                        class Forwarded(Entity):
                            """
                            Count of messages which got forwarded
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded, self).__init__()

                                self.yang_name = "forwarded"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path', YLeaf(YType.uint32, 'path')),
                                    ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                    ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                    ('total', YLeaf(YType.uint32, 'total')),
                                ])
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None
                                self._segment_path = lambda: "forwarded"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Forwarded, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                        class LocallyDestined(Entity):
                            """
                            Count of locally destined messages
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined, self).__init__()

                                self.yang_name = "locally-destined"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path', YLeaf(YType.uint32, 'path')),
                                    ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                    ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                    ('total', YLeaf(YType.uint32, 'total')),
                                ])
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None
                                self._segment_path = lambda: "locally-destined"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.LocallyDestined, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                        class Dropped(Entity):
                            """
                            Count of messages dropped
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped, self).__init__()

                                self.yang_name = "dropped"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path', YLeaf(YType.uint32, 'path')),
                                    ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                    ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                    ('total', YLeaf(YType.uint32, 'total')),
                                ])
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None
                                self._segment_path = lambda: "dropped"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Dropped, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                        class DefaultActionDropped(Entity):
                            """
                            Count of messages which got dropped due to
                            default ACL action
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped, self).__init__()

                                self.yang_name = "default-action-dropped"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path', YLeaf(YType.uint32, 'path')),
                                    ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                    ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                    ('total', YLeaf(YType.uint32, 'total')),
                                ])
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None
                                self._segment_path = lambda: "default-action-dropped"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionDropped, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                        class DefaultActionProcessed(Entity):
                            """
                            Count of messages which were processed due to
                            default ACL action
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed, self).__init__()

                                self.yang_name = "default-action-processed"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path', YLeaf(YType.uint32, 'path')),
                                    ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                    ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                    ('total', YLeaf(YType.uint32, 'total')),
                                ])
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None
                                self._segment_path = lambda: "default-action-processed"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.DefaultActionProcessed, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


                        class Total(Entity):
                            """
                            Count of total messages
                            
                            .. attribute:: path
                            
                            	Count of Path messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: path_tear
                            
                            	Count of PathTear messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reservation_confirm
                            
                            	Count of ReservationConfirm messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total
                            
                            	Total count of messages
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total, self).__init__()

                                self.yang_name = "total"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('path', YLeaf(YType.uint32, 'path')),
                                    ('path_tear', YLeaf(YType.uint32, 'path-tear')),
                                    ('reservation_confirm', YLeaf(YType.uint32, 'reservation-confirm')),
                                    ('total', YLeaf(YType.uint32, 'total')),
                                ])
                                self.path = None
                                self.path_tear = None
                                self.reservation_confirm = None
                                self.total = None
                                self._segment_path = lambda: "total"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.Counters.PrefixFiltering.Interfaces.Interfaces_.Interface.Total, ['path', 'path_tear', 'reservation_confirm', 'total'], name, value)


        class OutOfResource(Entity):
            """
            Out of resource counters
            
            .. attribute:: interfaces
            
            	Interface specific out of resource counters
            	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.OutOfResource.Interfaces>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Counters.OutOfResource, self).__init__()

                self.yang_name = "out-of-resource"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("interfaces", ("interfaces", Rsvp.Counters.OutOfResource.Interfaces))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict()

                self.interfaces = Rsvp.Counters.OutOfResource.Interfaces()
                self.interfaces.parent = self
                self._children_name_map["interfaces"] = "interfaces"
                self._children_yang_names.add("interfaces")
                self._segment_path = lambda: "out-of-resource"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/%s" % self._segment_path()


            class Interfaces(Entity):
                """
                Interface specific out of resource counters
                
                .. attribute:: summary
                
                	Summary of out of resource counts for all interfaces
                	**type**\:  :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.OutOfResource.Interfaces.Summary>`
                
                .. attribute:: interfaces
                
                	Table of interface specific out of resource counters
                	**type**\:  :py:class:`Interfaces_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.OutOfResource.Interfaces.Interfaces_>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Counters.OutOfResource.Interfaces, self).__init__()

                    self.yang_name = "interfaces"
                    self.yang_parent_name = "out-of-resource"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("summary", ("summary", Rsvp.Counters.OutOfResource.Interfaces.Summary)), ("interfaces", ("interfaces", Rsvp.Counters.OutOfResource.Interfaces.Interfaces_))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.summary = Rsvp.Counters.OutOfResource.Interfaces.Summary()
                    self.summary.parent = self
                    self._children_name_map["summary"] = "summary"
                    self._children_yang_names.add("summary")

                    self.interfaces = Rsvp.Counters.OutOfResource.Interfaces.Interfaces_()
                    self.interfaces.parent = self
                    self._children_name_map["interfaces"] = "interfaces"
                    self._children_yang_names.add("interfaces")
                    self._segment_path = lambda: "interfaces"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/out-of-resource/%s" % self._segment_path()


                class Summary(Entity):
                    """
                    Summary of out of resource counts for all
                    interfaces
                    
                    .. attribute:: dropped_path_messages
                    
                    	Count of Path messages dropped due to an out of resource condition
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.Counters.OutOfResource.Interfaces.Summary, self).__init__()

                        self.yang_name = "summary"
                        self.yang_parent_name = "interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('dropped_path_messages', YLeaf(YType.uint32, 'dropped-path-messages')),
                        ])
                        self.dropped_path_messages = None
                        self._segment_path = lambda: "summary"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/out-of-resource/interfaces/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.Counters.OutOfResource.Interfaces.Summary, ['dropped_path_messages'], name, value)


                class Interfaces_(Entity):
                    """
                    Table of interface specific out of resource
                    counters
                    
                    .. attribute:: interface
                    
                    	Out of resource counters for a specific interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.OutOfResource.Interfaces.Interfaces_.Interface>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.Counters.OutOfResource.Interfaces.Interfaces_, self).__init__()

                        self.yang_name = "interfaces"
                        self.yang_parent_name = "interfaces"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("interface", ("interface", Rsvp.Counters.OutOfResource.Interfaces.Interfaces_.Interface))])
                        self._leafs = OrderedDict()

                        self.interface = YList(self)
                        self._segment_path = lambda: "interfaces"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/out-of-resource/interfaces/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.Counters.OutOfResource.Interfaces.Interfaces_, [], name, value)


                    class Interface(Entity):
                        """
                        Out of resource counters for a specific
                        interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                        	**type**\: str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: dropped_path_messages
                        
                        	Count of Path messages dropped due to an out of resource condition
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Counters.OutOfResource.Interfaces.Interfaces_.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['interface_name']
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                                ('dropped_path_messages', YLeaf(YType.uint32, 'dropped-path-messages')),
                            ])
                            self.interface_name = None
                            self.dropped_path_messages = None
                            self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/out-of-resource/interfaces/interfaces/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Counters.OutOfResource.Interfaces.Interfaces_.Interface, ['interface_name', 'dropped_path_messages'], name, value)


        class InterfaceEvents(Entity):
            """
            Event counters
            
            .. attribute:: interface_event
            
            	Event counters for an interface
            	**type**\: list of  		 :py:class:`InterfaceEvent <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.InterfaceEvents.InterfaceEvent>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Counters.InterfaceEvents, self).__init__()

                self.yang_name = "interface-events"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("interface-event", ("interface_event", Rsvp.Counters.InterfaceEvents.InterfaceEvent))])
                self._leafs = OrderedDict()

                self.interface_event = YList(self)
                self._segment_path = lambda: "interface-events"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.Counters.InterfaceEvents, [], name, value)


            class InterfaceEvent(Entity):
                """
                Event counters for an interface
                
                .. attribute:: interface_name  (key)
                
                	Interface Name. 'None' is used internally where the true interface is unknown (e.g. for routed packets)
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: expired_paths
                
                	Counter for Expired Path states
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: expired_reservations
                
                	Counter for Expired Reservation states
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: nac_ks
                
                	Counter for NACKs received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Counters.InterfaceEvents.InterfaceEvent, self).__init__()

                    self.yang_name = "interface-event"
                    self.yang_parent_name = "interface-events"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('expired_paths', YLeaf(YType.uint32, 'expired-paths')),
                        ('expired_reservations', YLeaf(YType.uint32, 'expired-reservations')),
                        ('nac_ks', YLeaf(YType.uint32, 'nac-ks')),
                    ])
                    self.interface_name = None
                    self.expired_paths = None
                    self.expired_reservations = None
                    self.nac_ks = None
                    self._segment_path = lambda: "interface-event" + "[interface-name='" + str(self.interface_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/interface-events/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Counters.InterfaceEvents.InterfaceEvent, ['interface_name', 'expired_paths', 'expired_reservations', 'nac_ks'], name, value)


        class Nsr(Entity):
            """
            Summary information for all RSVP NSR counters
            
            .. attribute:: last_cleared_timestamp
            
            	The timestamp, in seconds, when these statistics are cleared              since 00\:00\:00 UTC, January 1, 1970
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: rsvp_process_role
            
            	Process role
            	**type**\:  :py:class:`RsvpProcRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRole>`
            
            .. attribute:: last_idt_states
            
            	Last IDT number of states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_states
            
            	Total number of states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_deletions
            
            	Total number of deletions
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_nacks
            
            	Total number of NACKs
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: total_id_ts
            
            	Total number of IDTs
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Counters.Nsr, self).__init__()

                self.yang_name = "nsr"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('last_cleared_timestamp', YLeaf(YType.uint32, 'last-cleared-timestamp')),
                    ('rsvp_process_role', YLeaf(YType.enumeration, 'rsvp-process-role')),
                    ('last_idt_states', YLeaf(YType.uint32, 'last-idt-states')),
                    ('total_states', YLeaf(YType.uint32, 'total-states')),
                    ('total_deletions', YLeaf(YType.uint32, 'total-deletions')),
                    ('total_nacks', YLeaf(YType.uint64, 'total-nacks')),
                    ('total_id_ts', YLeaf(YType.uint32, 'total-id-ts')),
                ])
                self.last_cleared_timestamp = None
                self.rsvp_process_role = None
                self.last_idt_states = None
                self.total_states = None
                self.total_deletions = None
                self.total_nacks = None
                self.total_id_ts = None
                self._segment_path = lambda: "nsr"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.Counters.Nsr, ['last_cleared_timestamp', 'rsvp_process_role', 'last_idt_states', 'total_states', 'total_deletions', 'total_nacks', 'total_id_ts'], name, value)


        class Issu(Entity):
            """
            Summary information for all RSVP ISSU counters
            
            .. attribute:: last_cleared_timestamp
            
            	The timestamp, in seconds, when these statistics are cleared              since 00\:00\:00 UTC, January 1, 1970
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: second
            
            .. attribute:: rsvp_process_role
            
            	Process role
            	**type**\:  :py:class:`RsvpProcRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRole>`
            
            .. attribute:: last_idt_states
            
            	Last IDT number of states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_states
            
            	Total number of states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_deletions
            
            	Total number of deletions
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: total_nacks
            
            	Total number of NACKs
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: total_id_ts
            
            	Total number of IDTs
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Counters.Issu, self).__init__()

                self.yang_name = "issu"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('last_cleared_timestamp', YLeaf(YType.uint32, 'last-cleared-timestamp')),
                    ('rsvp_process_role', YLeaf(YType.enumeration, 'rsvp-process-role')),
                    ('last_idt_states', YLeaf(YType.uint32, 'last-idt-states')),
                    ('total_states', YLeaf(YType.uint32, 'total-states')),
                    ('total_deletions', YLeaf(YType.uint32, 'total-deletions')),
                    ('total_nacks', YLeaf(YType.uint64, 'total-nacks')),
                    ('total_id_ts', YLeaf(YType.uint32, 'total-id-ts')),
                ])
                self.last_cleared_timestamp = None
                self.rsvp_process_role = None
                self.last_idt_states = None
                self.total_states = None
                self.total_deletions = None
                self.total_nacks = None
                self.total_id_ts = None
                self._segment_path = lambda: "issu"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.Counters.Issu, ['last_cleared_timestamp', 'rsvp_process_role', 'last_idt_states', 'total_states', 'total_deletions', 'total_nacks', 'total_id_ts'], name, value)


        class Database(Entity):
            """
            Summary information for all RSVP database
            counters
            
            .. attribute:: sessions
            
            	Number of sessions
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: incoming_paths
            
            	Number of locally created and incoming path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_paths
            
            	Number of outgoing path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: incoming_reservations
            
            	Number of locally created and incoming reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_reservations
            
            	Number of outgoing reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: interfaces
            
            	Number of Interfaces
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Counters.Database, self).__init__()

                self.yang_name = "database"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('sessions', YLeaf(YType.uint32, 'sessions')),
                    ('incoming_paths', YLeaf(YType.uint32, 'incoming-paths')),
                    ('outgoing_paths', YLeaf(YType.uint32, 'outgoing-paths')),
                    ('incoming_reservations', YLeaf(YType.uint32, 'incoming-reservations')),
                    ('outgoing_reservations', YLeaf(YType.uint32, 'outgoing-reservations')),
                    ('interfaces', YLeaf(YType.uint32, 'interfaces')),
                ])
                self.sessions = None
                self.incoming_paths = None
                self.outgoing_paths = None
                self.incoming_reservations = None
                self.outgoing_reservations = None
                self.interfaces = None
                self._segment_path = lambda: "database"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.Counters.Database, ['sessions', 'incoming_paths', 'outgoing_paths', 'incoming_reservations', 'outgoing_reservations', 'interfaces'], name, value)


        class EventSyncs(Entity):
            """
            Table containing event sync counters
            
            .. attribute:: event_sync
            
            	Event sync counters
            	**type**\: list of  		 :py:class:`EventSync <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Counters.EventSyncs.EventSync>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Counters.EventSyncs, self).__init__()

                self.yang_name = "event-syncs"
                self.yang_parent_name = "counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("event-sync", ("event_sync", Rsvp.Counters.EventSyncs.EventSync))])
                self._leafs = OrderedDict()

                self.event_sync = YList(self)
                self._segment_path = lambda: "event-syncs"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.Counters.EventSyncs, [], name, value)


            class EventSync(Entity):
                """
                Event sync counters
                
                .. attribute:: interface_name  (key)
                
                	Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: expired_paths
                
                	Counter for Expired Path states
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: expired_reservations
                
                	Counter for Expired Reservation states
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: nac_ks
                
                	Counter for NACKs received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Counters.EventSyncs.EventSync, self).__init__()

                    self.yang_name = "event-sync"
                    self.yang_parent_name = "event-syncs"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['interface_name']
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                        ('expired_paths', YLeaf(YType.uint32, 'expired-paths')),
                        ('expired_reservations', YLeaf(YType.uint32, 'expired-reservations')),
                        ('nac_ks', YLeaf(YType.uint32, 'nac-ks')),
                    ])
                    self.interface_name = None
                    self.expired_paths = None
                    self.expired_reservations = None
                    self.nac_ks = None
                    self._segment_path = lambda: "event-sync" + "[interface-name='" + str(self.interface_name) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/event-syncs/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Counters.EventSyncs.EventSync, ['interface_name', 'expired_paths', 'expired_reservations', 'nac_ks'], name, value)


    class InterfaceDetaileds(Entity):
        """
        Table of detailed info about RSVP\-enabled
        interfaces
        
        .. attribute:: interface_detailed
        
        	Detailed info about an RSVP\-enabled interface
        	**type**\: list of  		 :py:class:`InterfaceDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.InterfaceDetaileds, self).__init__()

            self.yang_name = "interface-detaileds"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("interface-detailed", ("interface_detailed", Rsvp.InterfaceDetaileds.InterfaceDetailed))])
            self._leafs = OrderedDict()

            self.interface_detailed = YList(self)
            self._segment_path = lambda: "interface-detaileds"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.InterfaceDetaileds, [], name, value)


        class InterfaceDetailed(Entity):
            """
            Detailed info about an RSVP\-enabled interface
            
            .. attribute:: interface_name  (key)
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:  :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation>`
            
            .. attribute:: flags
            
            	Interface flags
            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed.Flags>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\: str
            
            .. attribute:: signalling_ip_tos
            
            	IP TOS (precedence/DSCP) to use in signalling messages
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: integrity_send_password
            
            	Integrity send password
            	**type**\: str
            
            	**length:** 0..40
            
            .. attribute:: integrity_receive_password
            
            	Integrity receive password
            	**type**\: str
            
            	**length:** 0..40
            
            .. attribute:: integrity_receive_password_optional
            
            	Integrity recv password optional
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: refresh_timer_state
            
            	Refresh timer state
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: summary_refresh_timer_state
            
            	Summary refresh timer state
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: refresh_interval
            
            	Refresh interval in msecs
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: millisecond
            
            .. attribute:: out_of_band_refresh_interval
            
            	Out\-of\-band Refresh interval in msecs
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: summary_refresh_max_size
            
            	Max size in bytes of a single SRefresh
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: bundle_message_max_size
            
            	Max size in bytes of a single Bundle message
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: expiry_timer_state
            
            	Expiry timer state
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: expiry_states
            
            	Number of states for expiry check
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: expiry_interval
            
            	Expiry interval in msecs
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: millisecond
            
            .. attribute:: expiry_drops_tolerated
            
            	Number of missed messages tolerated
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: out_of_band_expiry_drops_tolerated
            
            	Number of out\-of\-band missed messages tolerated
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ack_hold_time
            
            	ACK hold time in msec
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: ack_max_size
            
            	Max size for ACK message
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: retransmit_time
            
            	Retransmit time in msec
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: pacing_interval
            
            	Pacing interval in msecs
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: pacing_message_rate
            
            	No. of messages per interval
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: pacing_timer_state
            
            	State of pacing timer
            	**type**\:  :py:class:`RsvpTimerState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpTimerState>`
            
            .. attribute:: pacing_messages
            
            	Number of messages deferred for pacing
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: neighbor_array
            
            	Neighbor array
            	**type**\: list of  		 :py:class:`NeighborArray <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.InterfaceDetaileds.InterfaceDetailed, self).__init__()

                self.yang_name = "interface-detailed"
                self.yang_parent_name = "interface-detaileds"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['interface_name']
                self._child_container_classes = OrderedDict([("bandwidth-information", ("bandwidth_information", Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation)), ("flags", ("flags", Rsvp.InterfaceDetaileds.InterfaceDetailed.Flags))])
                self._child_list_classes = OrderedDict([("neighbor-array", ("neighbor_array", Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray))])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                    ('signalling_ip_tos', YLeaf(YType.uint8, 'signalling-ip-tos')),
                    ('integrity_send_password', YLeaf(YType.str, 'integrity-send-password')),
                    ('integrity_receive_password', YLeaf(YType.str, 'integrity-receive-password')),
                    ('integrity_receive_password_optional', YLeaf(YType.uint8, 'integrity-receive-password-optional')),
                    ('refresh_timer_state', YLeaf(YType.enumeration, 'refresh-timer-state')),
                    ('summary_refresh_timer_state', YLeaf(YType.enumeration, 'summary-refresh-timer-state')),
                    ('refresh_interval', YLeaf(YType.int32, 'refresh-interval')),
                    ('out_of_band_refresh_interval', YLeaf(YType.uint32, 'out-of-band-refresh-interval')),
                    ('summary_refresh_max_size', YLeaf(YType.uint32, 'summary-refresh-max-size')),
                    ('bundle_message_max_size', YLeaf(YType.uint32, 'bundle-message-max-size')),
                    ('expiry_timer_state', YLeaf(YType.enumeration, 'expiry-timer-state')),
                    ('expiry_states', YLeaf(YType.int32, 'expiry-states')),
                    ('expiry_interval', YLeaf(YType.int32, 'expiry-interval')),
                    ('expiry_drops_tolerated', YLeaf(YType.int32, 'expiry-drops-tolerated')),
                    ('out_of_band_expiry_drops_tolerated', YLeaf(YType.uint32, 'out-of-band-expiry-drops-tolerated')),
                    ('ack_hold_time', YLeaf(YType.uint32, 'ack-hold-time')),
                    ('ack_max_size', YLeaf(YType.uint32, 'ack-max-size')),
                    ('retransmit_time', YLeaf(YType.uint32, 'retransmit-time')),
                    ('pacing_interval', YLeaf(YType.uint32, 'pacing-interval')),
                    ('pacing_message_rate', YLeaf(YType.uint32, 'pacing-message-rate')),
                    ('pacing_timer_state', YLeaf(YType.enumeration, 'pacing-timer-state')),
                    ('pacing_messages', YLeaf(YType.int32, 'pacing-messages')),
                ])
                self.interface_name = None
                self.interface_name_xr = None
                self.signalling_ip_tos = None
                self.integrity_send_password = None
                self.integrity_receive_password = None
                self.integrity_receive_password_optional = None
                self.refresh_timer_state = None
                self.summary_refresh_timer_state = None
                self.refresh_interval = None
                self.out_of_band_refresh_interval = None
                self.summary_refresh_max_size = None
                self.bundle_message_max_size = None
                self.expiry_timer_state = None
                self.expiry_states = None
                self.expiry_interval = None
                self.expiry_drops_tolerated = None
                self.out_of_band_expiry_drops_tolerated = None
                self.ack_hold_time = None
                self.ack_max_size = None
                self.retransmit_time = None
                self.pacing_interval = None
                self.pacing_message_rate = None
                self.pacing_timer_state = None
                self.pacing_messages = None

                self.bandwidth_information = Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation()
                self.bandwidth_information.parent = self
                self._children_name_map["bandwidth_information"] = "bandwidth-information"
                self._children_yang_names.add("bandwidth-information")

                self.flags = Rsvp.InterfaceDetaileds.InterfaceDetailed.Flags()
                self.flags.parent = self
                self._children_name_map["flags"] = "flags"
                self._children_yang_names.add("flags")

                self.neighbor_array = YList(self)
                self._segment_path = lambda: "interface-detailed" + "[interface-name='" + str(self.interface_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-detaileds/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.InterfaceDetaileds.InterfaceDetailed, ['interface_name', 'interface_name_xr', 'signalling_ip_tos', 'integrity_send_password', 'integrity_receive_password', 'integrity_receive_password_optional', 'refresh_timer_state', 'summary_refresh_timer_state', 'refresh_interval', 'out_of_band_refresh_interval', 'summary_refresh_max_size', 'bundle_message_max_size', 'expiry_timer_state', 'expiry_states', 'expiry_interval', 'expiry_drops_tolerated', 'out_of_band_expiry_drops_tolerated', 'ack_hold_time', 'ack_max_size', 'retransmit_time', 'pacing_interval', 'pacing_message_rate', 'pacing_timer_state', 'pacing_messages'], name, value)


            class BandwidthInformation(Entity):
                """
                Interface bandwidth information
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:  :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:  :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface>`
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:  :py:class:`RsvpMgmtDsteModes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModes>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation, self).__init__()

                    self.yang_name = "bandwidth-information"
                    self.yang_parent_name = "interface-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("pre-standard-dste-interface", ("pre_standard_dste_interface", Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface)), ("standard-dste-interface", ("standard_dste_interface", Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dste_mode', YLeaf(YType.enumeration, 'dste-mode')),
                    ])
                    self.dste_mode = None

                    self.pre_standard_dste_interface = Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self._children_name_map["pre_standard_dste_interface"] = "pre-standard-dste-interface"
                    self._children_yang_names.add("pre-standard-dste-interface")

                    self.standard_dste_interface = Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self
                    self._children_name_map["standard_dste_interface"] = "standard-dste-interface"
                    self._children_yang_names.add("standard-dste-interface")
                    self._segment_path = lambda: "bandwidth-information"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation, ['dste_mode'], name, value)


                class PreStandardDsteInterface(Entity):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface, self).__init__()

                        self.yang_name = "pre-standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_subpool_bandwidth', YLeaf(YType.uint64, 'max-subpool-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_subpool_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-subpool-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_subpool_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self._segment_path = lambda: "pre-standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.PreStandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_subpool_bandwidth', 'is_max_bandwidth_absolute', 'is_max_subpool_bandwidth_absolute'], name, value)


                class StandardDsteInterface(Entity):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface, self).__init__()

                        self.yang_name = "standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_pool0_bandwidth', YLeaf(YType.uint64, 'max-pool0-bandwidth')),
                            ('max_pool1_bandwidth', YLeaf(YType.uint64, 'max-pool1-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_bc0_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc0-bandwidth-absolute')),
                            ('is_max_bc1_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc1-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self._segment_path = lambda: "standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.InterfaceDetaileds.InterfaceDetailed.BandwidthInformation.StandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_pool0_bandwidth', 'max_pool1_bandwidth', 'is_max_bandwidth_absolute', 'is_max_bc0_bandwidth_absolute', 'is_max_bc1_bandwidth_absolute'], name, value)


            class Flags(Entity):
                """
                Interface flags
                
                .. attribute:: is_mpls_enabled
                
                	MPLS enabled on interface
                	**type**\: bool
                
                .. attribute:: is_refresh_reduction_enabled
                
                	Refresh Reduction enabled
                	**type**\: bool
                
                .. attribute:: is_pacing_enabled
                
                	Message pacing enabled
                	**type**\: bool
                
                .. attribute:: is_refresh_enabled
                
                	Refresh enabled
                	**type**\: bool
                
                .. attribute:: is_s_refresh_enabled
                
                	Summary Refresh enabled
                	**type**\: bool
                
                .. attribute:: is_interface_down
                
                	Interface is DOWN
                	**type**\: bool
                
                .. attribute:: is_interface_created
                
                	Interface is created
                	**type**\: bool
                
                .. attribute:: is_rel_s_refresh_enabled
                
                	Use reliable xmt for SRefresh
                	**type**\: bool
                
                .. attribute:: is_backup_tunnel
                
                	This is backup tunnel
                	**type**\: bool
                
                .. attribute:: is_rsvp_configured
                
                	RSVP explicitly configured
                	**type**\: bool
                
                .. attribute:: is_non_default_vrf
                
                	Interface is defined in non\-Default VRF
                	**type**\: bool
                
                .. attribute:: is_message_bundling_enabled
                
                	Use bundling for outgoing RSVP messages
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.InterfaceDetaileds.InterfaceDetailed.Flags, self).__init__()

                    self.yang_name = "flags"
                    self.yang_parent_name = "interface-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_mpls_enabled', YLeaf(YType.boolean, 'is-mpls-enabled')),
                        ('is_refresh_reduction_enabled', YLeaf(YType.boolean, 'is-refresh-reduction-enabled')),
                        ('is_pacing_enabled', YLeaf(YType.boolean, 'is-pacing-enabled')),
                        ('is_refresh_enabled', YLeaf(YType.boolean, 'is-refresh-enabled')),
                        ('is_s_refresh_enabled', YLeaf(YType.boolean, 'is-s-refresh-enabled')),
                        ('is_interface_down', YLeaf(YType.boolean, 'is-interface-down')),
                        ('is_interface_created', YLeaf(YType.boolean, 'is-interface-created')),
                        ('is_rel_s_refresh_enabled', YLeaf(YType.boolean, 'is-rel-s-refresh-enabled')),
                        ('is_backup_tunnel', YLeaf(YType.boolean, 'is-backup-tunnel')),
                        ('is_rsvp_configured', YLeaf(YType.boolean, 'is-rsvp-configured')),
                        ('is_non_default_vrf', YLeaf(YType.boolean, 'is-non-default-vrf')),
                        ('is_message_bundling_enabled', YLeaf(YType.boolean, 'is-message-bundling-enabled')),
                    ])
                    self.is_mpls_enabled = None
                    self.is_refresh_reduction_enabled = None
                    self.is_pacing_enabled = None
                    self.is_refresh_enabled = None
                    self.is_s_refresh_enabled = None
                    self.is_interface_down = None
                    self.is_interface_created = None
                    self.is_rel_s_refresh_enabled = None
                    self.is_backup_tunnel = None
                    self.is_rsvp_configured = None
                    self.is_non_default_vrf = None
                    self.is_message_bundling_enabled = None
                    self._segment_path = lambda: "flags"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.InterfaceDetaileds.InterfaceDetailed.Flags, ['is_mpls_enabled', 'is_refresh_reduction_enabled', 'is_pacing_enabled', 'is_refresh_enabled', 'is_s_refresh_enabled', 'is_interface_down', 'is_interface_created', 'is_rel_s_refresh_enabled', 'is_backup_tunnel', 'is_rsvp_configured', 'is_non_default_vrf', 'is_message_bundling_enabled'], name, value)


            class NeighborArray(Entity):
                """
                Neighbor array
                
                .. attribute:: expiry_time
                
                	Expiry time
                	**type**\:  :py:class:`ExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime>`
                
                .. attribute:: is_neighbor_refresh_reduction_capable
                
                	Is neighbor capable of Refresh Reduction
                	**type**\: bool
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: message_ids
                
                	Number of MessageIDs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: outgoing_states
                
                	Number of outgoing states to the neighbour
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: neighbor_message_id
                
                	List of Neighbor MessageIDs
                	**type**\: list of  		 :py:class:`NeighborMessageId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray.NeighborMessageId>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray, self).__init__()

                    self.yang_name = "neighbor-array"
                    self.yang_parent_name = "interface-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("expiry-time", ("expiry_time", Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime))])
                    self._child_list_classes = OrderedDict([("neighbor-message-id", ("neighbor_message_id", Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray.NeighborMessageId))])
                    self._leafs = OrderedDict([
                        ('is_neighbor_refresh_reduction_capable', YLeaf(YType.boolean, 'is-neighbor-refresh-reduction-capable')),
                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                        ('message_ids', YLeaf(YType.uint32, 'message-ids')),
                        ('outgoing_states', YLeaf(YType.int32, 'outgoing-states')),
                    ])
                    self.is_neighbor_refresh_reduction_capable = None
                    self.neighbor_address = None
                    self.message_ids = None
                    self.outgoing_states = None

                    self.expiry_time = Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime()
                    self.expiry_time.parent = self
                    self._children_name_map["expiry_time"] = "expiry-time"
                    self._children_yang_names.add("expiry-time")

                    self.neighbor_message_id = YList(self)
                    self._segment_path = lambda: "neighbor-array"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray, ['is_neighbor_refresh_reduction_capable', 'neighbor_address', 'message_ids', 'outgoing_states'], name, value)


                class ExpiryTime(Entity):
                    """
                    Expiry time
                    
                    .. attribute:: seconds
                    
                    	Time Value in Seconds
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**units**\: second
                    
                    .. attribute:: nanoseconds
                    
                    	Time Value in Nano\-seconds
                    	**type**\: int
                    
                    	**range:** \-2147483648..2147483647
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime, self).__init__()

                        self.yang_name = "expiry-time"
                        self.yang_parent_name = "neighbor-array"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('seconds', YLeaf(YType.int32, 'seconds')),
                            ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                        ])
                        self.seconds = None
                        self.nanoseconds = None
                        self._segment_path = lambda: "expiry-time"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray.ExpiryTime, ['seconds', 'nanoseconds'], name, value)


                class NeighborMessageId(Entity):
                    """
                    List of Neighbor MessageIDs
                    
                    .. attribute:: message_id
                    
                    	Message ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray.NeighborMessageId, self).__init__()

                        self.yang_name = "neighbor-message-id"
                        self.yang_parent_name = "neighbor-array"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('message_id', YLeaf(YType.uint32, 'message-id')),
                        ])
                        self.message_id = None
                        self._segment_path = lambda: "neighbor-message-id"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.InterfaceDetaileds.InterfaceDetailed.NeighborArray.NeighborMessageId, ['message_id'], name, value)


    class ControllerBriefs(Entity):
        """
        Table of brief info about RSVP\-enabled
        controller
        
        .. attribute:: controller_brief
        
        	Brief info about an RSVP\-enabled controller
        	**type**\: list of  		 :py:class:`ControllerBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerBriefs.ControllerBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.ControllerBriefs, self).__init__()

            self.yang_name = "controller-briefs"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("controller-brief", ("controller_brief", Rsvp.ControllerBriefs.ControllerBrief))])
            self._leafs = OrderedDict()

            self.controller_brief = YList(self)
            self._segment_path = lambda: "controller-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.ControllerBriefs, [], name, value)


        class ControllerBrief(Entity):
            """
            Brief info about an RSVP\-enabled controller
            
            .. attribute:: controller_name  (key)
            
            	Controller Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:  :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\: str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.ControllerBriefs.ControllerBrief, self).__init__()

                self.yang_name = "controller-brief"
                self.yang_parent_name = "controller-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['controller_name']
                self._child_container_classes = OrderedDict([("bandwidth-information", ("bandwidth_information", Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('controller_name', YLeaf(YType.str, 'controller-name')),
                    ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                ])
                self.controller_name = None
                self.interface_name_xr = None

                self.bandwidth_information = Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation()
                self.bandwidth_information.parent = self
                self._children_name_map["bandwidth_information"] = "bandwidth-information"
                self._children_yang_names.add("bandwidth-information")
                self._segment_path = lambda: "controller-brief" + "[controller-name='" + str(self.controller_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.ControllerBriefs.ControllerBrief, ['controller_name', 'interface_name_xr'], name, value)


            class BandwidthInformation(Entity):
                """
                Interface bandwidth information
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:  :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:  :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.StandardDsteInterface>`
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:  :py:class:`RsvpMgmtDsteModes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModes>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation, self).__init__()

                    self.yang_name = "bandwidth-information"
                    self.yang_parent_name = "controller-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("pre-standard-dste-interface", ("pre_standard_dste_interface", Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.PreStandardDsteInterface)), ("standard-dste-interface", ("standard_dste_interface", Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.StandardDsteInterface))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dste_mode', YLeaf(YType.enumeration, 'dste-mode')),
                    ])
                    self.dste_mode = None

                    self.pre_standard_dste_interface = Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self._children_name_map["pre_standard_dste_interface"] = "pre-standard-dste-interface"
                    self._children_yang_names.add("pre-standard-dste-interface")

                    self.standard_dste_interface = Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self
                    self._children_name_map["standard_dste_interface"] = "standard-dste-interface"
                    self._children_yang_names.add("standard-dste-interface")
                    self._segment_path = lambda: "bandwidth-information"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation, ['dste_mode'], name, value)


                class PreStandardDsteInterface(Entity):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.PreStandardDsteInterface, self).__init__()

                        self.yang_name = "pre-standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_subpool_bandwidth', YLeaf(YType.uint64, 'max-subpool-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_subpool_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-subpool-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_subpool_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self._segment_path = lambda: "pre-standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.PreStandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_subpool_bandwidth', 'is_max_bandwidth_absolute', 'is_max_subpool_bandwidth_absolute'], name, value)


                class StandardDsteInterface(Entity):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.StandardDsteInterface, self).__init__()

                        self.yang_name = "standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_pool0_bandwidth', YLeaf(YType.uint64, 'max-pool0-bandwidth')),
                            ('max_pool1_bandwidth', YLeaf(YType.uint64, 'max-pool1-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_bc0_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc0-bandwidth-absolute')),
                            ('is_max_bc1_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc1-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self._segment_path = lambda: "standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.ControllerBriefs.ControllerBrief.BandwidthInformation.StandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_pool0_bandwidth', 'max_pool1_bandwidth', 'is_max_bandwidth_absolute', 'is_max_bc0_bandwidth_absolute', 'is_max_bc1_bandwidth_absolute'], name, value)


    class GracefulRestart(Entity):
        """
        Info about graceful\-restart
        
        .. attribute:: recovery_time_left
        
        	How much recovery timer remains
        	**type**\:  :py:class:`RecoveryTimeLeft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GracefulRestart.RecoveryTimeLeft>`
        
        .. attribute:: recovery_timer_exp_time
        
        	Time at which recovery timer will expire
        	**type**\:  :py:class:`RecoveryTimerExpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GracefulRestart.RecoveryTimerExpTime>`
        
        .. attribute:: is_gr_enabled
        
        	Whether GR is enabled
        	**type**\: bool
        
        .. attribute:: global_neighbors
        
        	Global neighbor count
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: restart_time
        
        	Restart time (milliseconds)
        	**type**\: int
        
        	**range:** 0..4294967295
        
        	**units**\: millisecond
        
        .. attribute:: recovery_time
        
        	Recovery time (milliseconds)
        	**type**\: int
        
        	**range:** 0..4294967295
        
        	**units**\: millisecond
        
        .. attribute:: is_recovery_timer_running
        
        	Whether recovery timer is running
        	**type**\: bool
        
        .. attribute:: hello_interval
        
        	Interval at which hello messages are sent
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: missed_hellos
        
        	Max number of hellos missed before hellos declared down
        	**type**\: int
        
        	**range:** 0..255
        
        .. attribute:: pending_states
        
        	Total number of pending states
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: local_node_address
        
        	Local node address
        	**type**\: list of  		 :py:class:`LocalNodeAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GracefulRestart.LocalNodeAddress>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.GracefulRestart, self).__init__()

            self.yang_name = "graceful-restart"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("recovery-time-left", ("recovery_time_left", Rsvp.GracefulRestart.RecoveryTimeLeft)), ("recovery-timer-exp-time", ("recovery_timer_exp_time", Rsvp.GracefulRestart.RecoveryTimerExpTime))])
            self._child_list_classes = OrderedDict([("local-node-address", ("local_node_address", Rsvp.GracefulRestart.LocalNodeAddress))])
            self._leafs = OrderedDict([
                ('is_gr_enabled', YLeaf(YType.boolean, 'is-gr-enabled')),
                ('global_neighbors', YLeaf(YType.uint32, 'global-neighbors')),
                ('restart_time', YLeaf(YType.uint32, 'restart-time')),
                ('recovery_time', YLeaf(YType.uint32, 'recovery-time')),
                ('is_recovery_timer_running', YLeaf(YType.boolean, 'is-recovery-timer-running')),
                ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                ('missed_hellos', YLeaf(YType.uint8, 'missed-hellos')),
                ('pending_states', YLeaf(YType.uint32, 'pending-states')),
            ])
            self.is_gr_enabled = None
            self.global_neighbors = None
            self.restart_time = None
            self.recovery_time = None
            self.is_recovery_timer_running = None
            self.hello_interval = None
            self.missed_hellos = None
            self.pending_states = None

            self.recovery_time_left = Rsvp.GracefulRestart.RecoveryTimeLeft()
            self.recovery_time_left.parent = self
            self._children_name_map["recovery_time_left"] = "recovery-time-left"
            self._children_yang_names.add("recovery-time-left")

            self.recovery_timer_exp_time = Rsvp.GracefulRestart.RecoveryTimerExpTime()
            self.recovery_timer_exp_time.parent = self
            self._children_name_map["recovery_timer_exp_time"] = "recovery-timer-exp-time"
            self._children_yang_names.add("recovery-timer-exp-time")

            self.local_node_address = YList(self)
            self._segment_path = lambda: "graceful-restart"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.GracefulRestart, ['is_gr_enabled', 'global_neighbors', 'restart_time', 'recovery_time', 'is_recovery_timer_running', 'hello_interval', 'missed_hellos', 'pending_states'], name, value)


        class RecoveryTimeLeft(Entity):
            """
            How much recovery timer remains
            
            .. attribute:: seconds
            
            	Time Value in Seconds
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: second
            
            .. attribute:: nanoseconds
            
            	Time Value in Nano\-seconds
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: nanosecond
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.GracefulRestart.RecoveryTimeLeft, self).__init__()

                self.yang_name = "recovery-time-left"
                self.yang_parent_name = "graceful-restart"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('seconds', YLeaf(YType.int32, 'seconds')),
                    ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                ])
                self.seconds = None
                self.nanoseconds = None
                self._segment_path = lambda: "recovery-time-left"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/graceful-restart/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.GracefulRestart.RecoveryTimeLeft, ['seconds', 'nanoseconds'], name, value)


        class RecoveryTimerExpTime(Entity):
            """
            Time at which recovery timer will expire
            
            .. attribute:: seconds
            
            	Time Value in Seconds
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: second
            
            .. attribute:: nanoseconds
            
            	Time Value in Nano\-seconds
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            	**units**\: nanosecond
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.GracefulRestart.RecoveryTimerExpTime, self).__init__()

                self.yang_name = "recovery-timer-exp-time"
                self.yang_parent_name = "graceful-restart"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('seconds', YLeaf(YType.int32, 'seconds')),
                    ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                ])
                self.seconds = None
                self.nanoseconds = None
                self._segment_path = lambda: "recovery-timer-exp-time"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/graceful-restart/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.GracefulRestart.RecoveryTimerExpTime, ['seconds', 'nanoseconds'], name, value)


        class LocalNodeAddress(Entity):
            """
            Local node address
            
            .. attribute:: local_node_ip_address
            
            	Local node address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: application_type
            
            	GR local node\-id app type
            	**type**\:  :py:class:`RsvpMgmtGrApp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGrApp>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.GracefulRestart.LocalNodeAddress, self).__init__()

                self.yang_name = "local-node-address"
                self.yang_parent_name = "graceful-restart"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('local_node_ip_address', YLeaf(YType.str, 'local-node-ip-address')),
                    ('application_type', YLeaf(YType.enumeration, 'application-type')),
                ])
                self.local_node_ip_address = None
                self.application_type = None
                self._segment_path = lambda: "local-node-address"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/graceful-restart/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.GracefulRestart.LocalNodeAddress, ['local_node_ip_address', 'application_type'], name, value)


    class HelloInterfaceInstanceBriefs(Entity):
        """
        Table of brief info about i/f\-based hello
        instances
        
        .. attribute:: hello_interface_instance_brief
        
        	Brief info for a single interface\-based hello instance
        	**type**\: list of  		 :py:class:`HelloInterfaceInstanceBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.HelloInterfaceInstanceBriefs, self).__init__()

            self.yang_name = "hello-interface-instance-briefs"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("hello-interface-instance-brief", ("hello_interface_instance_brief", Rsvp.HelloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief))])
            self._leafs = OrderedDict()

            self.hello_interface_instance_brief = YList(self)
            self._segment_path = lambda: "hello-interface-instance-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.HelloInterfaceInstanceBriefs, [], name, value)


        class HelloInterfaceInstanceBrief(Entity):
            """
            Brief info for a single interface\-based hello
            instance
            
            .. attribute:: source_address  (key)
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address  (key)
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:  :py:class:`RsvpMgmtHelloInstance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstance>`
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.HelloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief, self).__init__()

                self.yang_name = "hello-interface-instance-brief"
                self.yang_parent_name = "hello-interface-instance-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['source_address','destination_address']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('source_address_xr', YLeaf(YType.str, 'source-address-xr')),
                    ('destination_address_xr', YLeaf(YType.str, 'destination-address-xr')),
                    ('instance_type', YLeaf(YType.enumeration, 'instance-type')),
                    ('hello_interface', YLeaf(YType.str, 'hello-interface')),
                ])
                self.source_address = None
                self.destination_address = None
                self.source_address_xr = None
                self.destination_address_xr = None
                self.instance_type = None
                self.hello_interface = None
                self._segment_path = lambda: "hello-interface-instance-brief" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-interface-instance-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.HelloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief, ['source_address', 'destination_address', 'source_address_xr', 'destination_address_xr', 'instance_type', 'hello_interface'], name, value)


    class HelloInterfaceInstanceDetails(Entity):
        """
        Table of detailed info about i/f\-based hello
        instances
        
        .. attribute:: hello_interface_instance_detail
        
        	Detailed info for a single interface\-based hello instance
        	**type**\: list of  		 :py:class:`HelloInterfaceInstanceDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.HelloInterfaceInstanceDetails, self).__init__()

            self.yang_name = "hello-interface-instance-details"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("hello-interface-instance-detail", ("hello_interface_instance_detail", Rsvp.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail))])
            self._leafs = OrderedDict()

            self.hello_interface_instance_detail = YList(self)
            self._segment_path = lambda: "hello-interface-instance-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.HelloInterfaceInstanceDetails, [], name, value)


        class HelloInterfaceInstanceDetail(Entity):
            """
            Detailed info for a single interface\-based
            hello instance
            
            .. attribute:: source_address  (key)
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address  (key)
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: last_message_sent_time
            
            	Last Ack/msg sent time
            	**type**\:  :py:class:`LastMessageSentTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime>`
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: hello_global_neighbor_id
            
            	Global Neighbor ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:  :py:class:`RsvpMgmtHelloInstance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstance>`
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: source_instance
            
            	Source Instance
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: destination_instance
            
            	Destination Instance
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: hello_messages_sent
            
            	Number of hello messages sent
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: hello_messages_received
            
            	Number of hello messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail, self).__init__()

                self.yang_name = "hello-interface-instance-detail"
                self.yang_parent_name = "hello-interface-instance-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['source_address','destination_address']
                self._child_container_classes = OrderedDict([("last-message-sent-time", ("last_message_sent_time", Rsvp.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('source_address_xr', YLeaf(YType.str, 'source-address-xr')),
                    ('destination_address_xr', YLeaf(YType.str, 'destination-address-xr')),
                    ('hello_global_neighbor_id', YLeaf(YType.str, 'hello-global-neighbor-id')),
                    ('instance_type', YLeaf(YType.enumeration, 'instance-type')),
                    ('hello_interface', YLeaf(YType.str, 'hello-interface')),
                    ('source_instance', YLeaf(YType.uint32, 'source-instance')),
                    ('destination_instance', YLeaf(YType.uint32, 'destination-instance')),
                    ('hello_messages_sent', YLeaf(YType.uint64, 'hello-messages-sent')),
                    ('hello_messages_received', YLeaf(YType.uint64, 'hello-messages-received')),
                ])
                self.source_address = None
                self.destination_address = None
                self.source_address_xr = None
                self.destination_address_xr = None
                self.hello_global_neighbor_id = None
                self.instance_type = None
                self.hello_interface = None
                self.source_instance = None
                self.destination_instance = None
                self.hello_messages_sent = None
                self.hello_messages_received = None

                self.last_message_sent_time = Rsvp.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime()
                self.last_message_sent_time.parent = self
                self._children_name_map["last_message_sent_time"] = "last-message-sent-time"
                self._children_yang_names.add("last-message-sent-time")
                self._segment_path = lambda: "hello-interface-instance-detail" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-interface-instance-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail, ['source_address', 'destination_address', 'source_address_xr', 'destination_address_xr', 'hello_global_neighbor_id', 'instance_type', 'hello_interface', 'source_instance', 'destination_instance', 'hello_messages_sent', 'hello_messages_received'], name, value)


            class LastMessageSentTime(Entity):
                """
                Last Ack/msg sent time
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime, self).__init__()

                    self.yang_name = "last-message-sent-time"
                    self.yang_parent_name = "hello-interface-instance-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "last-message-sent-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.HelloInterfaceInstanceDetails.HelloInterfaceInstanceDetail.LastMessageSentTime, ['seconds', 'nanoseconds'], name, value)


    class InterfaceNeighborDetails(Entity):
        """
        Table of detailed info about I/F neighbors
        
        .. attribute:: interface_neighbor_detail
        
        	Detailed info for a single interface neighbor
        	**type**\: list of  		 :py:class:`InterfaceNeighborDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceNeighborDetails.InterfaceNeighborDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.InterfaceNeighborDetails, self).__init__()

            self.yang_name = "interface-neighbor-details"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("interface-neighbor-detail", ("interface_neighbor_detail", Rsvp.InterfaceNeighborDetails.InterfaceNeighborDetail))])
            self._leafs = OrderedDict()

            self.interface_neighbor_detail = YList(self)
            self._segment_path = lambda: "interface-neighbor-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.InterfaceNeighborDetails, [], name, value)


        class InterfaceNeighborDetail(Entity):
            """
            Detailed info for a single interface neighbor
            
            .. attribute:: neighbor_address  (key)
            
            	Address of global neighbor
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_neighbor_list_detail
            
            	Detail list of I/F Neighbors
            	**type**\: list of  		 :py:class:`InterfaceNeighborListDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceNeighborDetails.InterfaceNeighborDetail.InterfaceNeighborListDetail>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.InterfaceNeighborDetails.InterfaceNeighborDetail, self).__init__()

                self.yang_name = "interface-neighbor-detail"
                self.yang_parent_name = "interface-neighbor-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['neighbor_address']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("interface-neighbor-list-detail", ("interface_neighbor_list_detail", Rsvp.InterfaceNeighborDetails.InterfaceNeighborDetail.InterfaceNeighborListDetail))])
                self._leafs = OrderedDict([
                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                    ('node_address', YLeaf(YType.str, 'node-address')),
                ])
                self.neighbor_address = None
                self.node_address = None

                self.interface_neighbor_list_detail = YList(self)
                self._segment_path = lambda: "interface-neighbor-detail" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-neighbor-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.InterfaceNeighborDetails.InterfaceNeighborDetail, ['neighbor_address', 'node_address'], name, value)


            class InterfaceNeighborListDetail(Entity):
                """
                Detail list of I/F Neighbors
                
                .. attribute:: interface_neighbor_address
                
                	Interface Neighbor address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_interface_name
                
                	Neighbor's Interface handle
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: is_rr_enabled
                
                	Is Neighbor's RR enable
                	**type**\: bool
                
                .. attribute:: neighbor_epoch
                
                	Neighbor's epoch value
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: out_of_order_messages
                
                	Number of out of order msgs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: retransmitted_messages
                
                	Number of retransmitted msgs
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.InterfaceNeighborDetails.InterfaceNeighborDetail.InterfaceNeighborListDetail, self).__init__()

                    self.yang_name = "interface-neighbor-list-detail"
                    self.yang_parent_name = "interface-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_neighbor_address', YLeaf(YType.str, 'interface-neighbor-address')),
                        ('neighbor_interface_name', YLeaf(YType.str, 'neighbor-interface-name')),
                        ('is_rr_enabled', YLeaf(YType.boolean, 'is-rr-enabled')),
                        ('neighbor_epoch', YLeaf(YType.uint32, 'neighbor-epoch')),
                        ('out_of_order_messages', YLeaf(YType.uint32, 'out-of-order-messages')),
                        ('retransmitted_messages', YLeaf(YType.uint32, 'retransmitted-messages')),
                    ])
                    self.interface_neighbor_address = None
                    self.neighbor_interface_name = None
                    self.is_rr_enabled = None
                    self.neighbor_epoch = None
                    self.out_of_order_messages = None
                    self.retransmitted_messages = None
                    self._segment_path = lambda: "interface-neighbor-list-detail"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.InterfaceNeighborDetails.InterfaceNeighborDetail.InterfaceNeighborListDetail, ['interface_neighbor_address', 'neighbor_interface_name', 'is_rr_enabled', 'neighbor_epoch', 'out_of_order_messages', 'retransmitted_messages'], name, value)


    class Nsr(Entity):
        """
        RSVP NSR information
        
        .. attribute:: status
        
        	RSVP NSR status information
        	**type**\:  :py:class:`Status <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Nsr.Status>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.Nsr, self).__init__()

            self.yang_name = "nsr"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("status", ("status", Rsvp.Nsr.Status))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.status = Rsvp.Nsr.Status()
            self.status.parent = self
            self._children_name_map["status"] = "status"
            self._children_yang_names.add("status")
            self._segment_path = lambda: "nsr"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()


        class Status(Entity):
            """
            RSVP NSR status information
            
            .. attribute:: idt_status
            
            	IDT status
            	**type**\:  :py:class:`IdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Nsr.Status.IdtStatus>`
            
            .. attribute:: previous_idt_status
            
            	Previous IDT status
            	**type**\:  :py:class:`PreviousIdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Nsr.Status.PreviousIdtStatus>`
            
            .. attribute:: role
            
            	Process role
            	**type**\:  :py:class:`RsvpProcRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRole>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Nsr.Status, self).__init__()

                self.yang_name = "status"
                self.yang_parent_name = "nsr"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("idt-status", ("idt_status", Rsvp.Nsr.Status.IdtStatus)), ("previous-idt-status", ("previous_idt_status", Rsvp.Nsr.Status.PreviousIdtStatus))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('role', YLeaf(YType.enumeration, 'role')),
                ])
                self.role = None

                self.idt_status = Rsvp.Nsr.Status.IdtStatus()
                self.idt_status.parent = self
                self._children_name_map["idt_status"] = "idt-status"
                self._children_yang_names.add("idt-status")

                self.previous_idt_status = Rsvp.Nsr.Status.PreviousIdtStatus()
                self.previous_idt_status.parent = self
                self._children_name_map["previous_idt_status"] = "previous-idt-status"
                self._children_yang_names.add("previous-idt-status")
                self._segment_path = lambda: "status"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/nsr/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.Nsr.Status, ['role'], name, value)


            class IdtStatus(Entity):
                """
                IDT status
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:  :py:class:`RsvpSyncStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatus>`
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:  :py:class:`RsvpProcNsrNotReadyReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReason>`
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Nsr.Status.IdtStatus, self).__init__()

                    self.yang_name = "idt-status"
                    self.yang_parent_name = "status"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sync_status', YLeaf(YType.enumeration, 'sync-status')),
                        ('not_ready_reason', YLeaf(YType.enumeration, 'not-ready-reason')),
                        ('idt_start_time', YLeaf(YType.uint32, 'idt-start-time')),
                        ('idt_end_time', YLeaf(YType.uint32, 'idt-end-time')),
                        ('declare_time', YLeaf(YType.uint32, 'declare-time')),
                        ('withdraw_time', YLeaf(YType.uint32, 'withdraw-time')),
                    ])
                    self.sync_status = None
                    self.not_ready_reason = None
                    self.idt_start_time = None
                    self.idt_end_time = None
                    self.declare_time = None
                    self.withdraw_time = None
                    self._segment_path = lambda: "idt-status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/nsr/status/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Nsr.Status.IdtStatus, ['sync_status', 'not_ready_reason', 'idt_start_time', 'idt_end_time', 'declare_time', 'withdraw_time'], name, value)


            class PreviousIdtStatus(Entity):
                """
                Previous IDT status
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:  :py:class:`RsvpSyncStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatus>`
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:  :py:class:`RsvpProcNsrNotReadyReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReason>`
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Nsr.Status.PreviousIdtStatus, self).__init__()

                    self.yang_name = "previous-idt-status"
                    self.yang_parent_name = "status"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sync_status', YLeaf(YType.enumeration, 'sync-status')),
                        ('not_ready_reason', YLeaf(YType.enumeration, 'not-ready-reason')),
                        ('idt_start_time', YLeaf(YType.uint32, 'idt-start-time')),
                        ('idt_end_time', YLeaf(YType.uint32, 'idt-end-time')),
                        ('declare_time', YLeaf(YType.uint32, 'declare-time')),
                        ('withdraw_time', YLeaf(YType.uint32, 'withdraw-time')),
                    ])
                    self.sync_status = None
                    self.not_ready_reason = None
                    self.idt_start_time = None
                    self.idt_end_time = None
                    self.declare_time = None
                    self.withdraw_time = None
                    self._segment_path = lambda: "previous-idt-status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/nsr/status/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Nsr.Status.PreviousIdtStatus, ['sync_status', 'not_ready_reason', 'idt_start_time', 'idt_end_time', 'declare_time', 'withdraw_time'], name, value)


    class Summary(Entity):
        """
        RSVP summary information
        
        .. attribute:: issu_status
        
        	Issu status
        	**type**\:  :py:class:`IssuStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary.IssuStatus>`
        
        .. attribute:: nsr_status
        
        	NSR status
        	**type**\:  :py:class:`NsrStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary.NsrStatus>`
        
        .. attribute:: database_counters
        
        	All database counters
        	**type**\:  :py:class:`DatabaseCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary.DatabaseCounters>`
        
        .. attribute:: interfaces
        
        	Total interfaces
        	**type**\: int
        
        	**range:** 0..4294967295
        
        .. attribute:: ls_ps
        
        	Total LSPs
        	**type**\: int
        
        	**range:** 0..4294967295
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.Summary, self).__init__()

            self.yang_name = "summary"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("issu-status", ("issu_status", Rsvp.Summary.IssuStatus)), ("nsr-status", ("nsr_status", Rsvp.Summary.NsrStatus)), ("database-counters", ("database_counters", Rsvp.Summary.DatabaseCounters))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('interfaces', YLeaf(YType.uint32, 'interfaces')),
                ('ls_ps', YLeaf(YType.uint32, 'ls-ps')),
            ])
            self.interfaces = None
            self.ls_ps = None

            self.issu_status = Rsvp.Summary.IssuStatus()
            self.issu_status.parent = self
            self._children_name_map["issu_status"] = "issu-status"
            self._children_yang_names.add("issu-status")

            self.nsr_status = Rsvp.Summary.NsrStatus()
            self.nsr_status.parent = self
            self._children_name_map["nsr_status"] = "nsr-status"
            self._children_yang_names.add("nsr-status")

            self.database_counters = Rsvp.Summary.DatabaseCounters()
            self.database_counters.parent = self
            self._children_name_map["database_counters"] = "database-counters"
            self._children_yang_names.add("database-counters")
            self._segment_path = lambda: "summary"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.Summary, ['interfaces', 'ls_ps'], name, value)


        class IssuStatus(Entity):
            """
            Issu status
            
            .. attribute:: idt_status
            
            	IDT status
            	**type**\:  :py:class:`IdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary.IssuStatus.IdtStatus>`
            
            .. attribute:: previous_idt_status
            
            	Previous IDT status
            	**type**\:  :py:class:`PreviousIdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary.IssuStatus.PreviousIdtStatus>`
            
            .. attribute:: role
            
            	Process role
            	**type**\:  :py:class:`RsvpProcRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRole>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Summary.IssuStatus, self).__init__()

                self.yang_name = "issu-status"
                self.yang_parent_name = "summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("idt-status", ("idt_status", Rsvp.Summary.IssuStatus.IdtStatus)), ("previous-idt-status", ("previous_idt_status", Rsvp.Summary.IssuStatus.PreviousIdtStatus))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('role', YLeaf(YType.enumeration, 'role')),
                ])
                self.role = None

                self.idt_status = Rsvp.Summary.IssuStatus.IdtStatus()
                self.idt_status.parent = self
                self._children_name_map["idt_status"] = "idt-status"
                self._children_yang_names.add("idt-status")

                self.previous_idt_status = Rsvp.Summary.IssuStatus.PreviousIdtStatus()
                self.previous_idt_status.parent = self
                self._children_name_map["previous_idt_status"] = "previous-idt-status"
                self._children_yang_names.add("previous-idt-status")
                self._segment_path = lambda: "issu-status"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.Summary.IssuStatus, ['role'], name, value)


            class IdtStatus(Entity):
                """
                IDT status
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:  :py:class:`RsvpSyncStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatus>`
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:  :py:class:`RsvpProcNsrNotReadyReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReason>`
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Summary.IssuStatus.IdtStatus, self).__init__()

                    self.yang_name = "idt-status"
                    self.yang_parent_name = "issu-status"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sync_status', YLeaf(YType.enumeration, 'sync-status')),
                        ('not_ready_reason', YLeaf(YType.enumeration, 'not-ready-reason')),
                        ('idt_start_time', YLeaf(YType.uint32, 'idt-start-time')),
                        ('idt_end_time', YLeaf(YType.uint32, 'idt-end-time')),
                        ('declare_time', YLeaf(YType.uint32, 'declare-time')),
                        ('withdraw_time', YLeaf(YType.uint32, 'withdraw-time')),
                    ])
                    self.sync_status = None
                    self.not_ready_reason = None
                    self.idt_start_time = None
                    self.idt_end_time = None
                    self.declare_time = None
                    self.withdraw_time = None
                    self._segment_path = lambda: "idt-status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/issu-status/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Summary.IssuStatus.IdtStatus, ['sync_status', 'not_ready_reason', 'idt_start_time', 'idt_end_time', 'declare_time', 'withdraw_time'], name, value)


            class PreviousIdtStatus(Entity):
                """
                Previous IDT status
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:  :py:class:`RsvpSyncStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatus>`
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:  :py:class:`RsvpProcNsrNotReadyReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReason>`
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Summary.IssuStatus.PreviousIdtStatus, self).__init__()

                    self.yang_name = "previous-idt-status"
                    self.yang_parent_name = "issu-status"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sync_status', YLeaf(YType.enumeration, 'sync-status')),
                        ('not_ready_reason', YLeaf(YType.enumeration, 'not-ready-reason')),
                        ('idt_start_time', YLeaf(YType.uint32, 'idt-start-time')),
                        ('idt_end_time', YLeaf(YType.uint32, 'idt-end-time')),
                        ('declare_time', YLeaf(YType.uint32, 'declare-time')),
                        ('withdraw_time', YLeaf(YType.uint32, 'withdraw-time')),
                    ])
                    self.sync_status = None
                    self.not_ready_reason = None
                    self.idt_start_time = None
                    self.idt_end_time = None
                    self.declare_time = None
                    self.withdraw_time = None
                    self._segment_path = lambda: "previous-idt-status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/issu-status/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Summary.IssuStatus.PreviousIdtStatus, ['sync_status', 'not_ready_reason', 'idt_start_time', 'idt_end_time', 'declare_time', 'withdraw_time'], name, value)


        class NsrStatus(Entity):
            """
            NSR status
            
            .. attribute:: idt_status
            
            	IDT status
            	**type**\:  :py:class:`IdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary.NsrStatus.IdtStatus>`
            
            .. attribute:: previous_idt_status
            
            	Previous IDT status
            	**type**\:  :py:class:`PreviousIdtStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Summary.NsrStatus.PreviousIdtStatus>`
            
            .. attribute:: role
            
            	Process role
            	**type**\:  :py:class:`RsvpProcRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcRole>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Summary.NsrStatus, self).__init__()

                self.yang_name = "nsr-status"
                self.yang_parent_name = "summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("idt-status", ("idt_status", Rsvp.Summary.NsrStatus.IdtStatus)), ("previous-idt-status", ("previous_idt_status", Rsvp.Summary.NsrStatus.PreviousIdtStatus))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('role', YLeaf(YType.enumeration, 'role')),
                ])
                self.role = None

                self.idt_status = Rsvp.Summary.NsrStatus.IdtStatus()
                self.idt_status.parent = self
                self._children_name_map["idt_status"] = "idt-status"
                self._children_yang_names.add("idt-status")

                self.previous_idt_status = Rsvp.Summary.NsrStatus.PreviousIdtStatus()
                self.previous_idt_status.parent = self
                self._children_name_map["previous_idt_status"] = "previous-idt-status"
                self._children_yang_names.add("previous-idt-status")
                self._segment_path = lambda: "nsr-status"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.Summary.NsrStatus, ['role'], name, value)


            class IdtStatus(Entity):
                """
                IDT status
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:  :py:class:`RsvpSyncStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatus>`
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:  :py:class:`RsvpProcNsrNotReadyReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReason>`
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Summary.NsrStatus.IdtStatus, self).__init__()

                    self.yang_name = "idt-status"
                    self.yang_parent_name = "nsr-status"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sync_status', YLeaf(YType.enumeration, 'sync-status')),
                        ('not_ready_reason', YLeaf(YType.enumeration, 'not-ready-reason')),
                        ('idt_start_time', YLeaf(YType.uint32, 'idt-start-time')),
                        ('idt_end_time', YLeaf(YType.uint32, 'idt-end-time')),
                        ('declare_time', YLeaf(YType.uint32, 'declare-time')),
                        ('withdraw_time', YLeaf(YType.uint32, 'withdraw-time')),
                    ])
                    self.sync_status = None
                    self.not_ready_reason = None
                    self.idt_start_time = None
                    self.idt_end_time = None
                    self.declare_time = None
                    self.withdraw_time = None
                    self._segment_path = lambda: "idt-status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/nsr-status/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Summary.NsrStatus.IdtStatus, ['sync_status', 'not_ready_reason', 'idt_start_time', 'idt_end_time', 'declare_time', 'withdraw_time'], name, value)


            class PreviousIdtStatus(Entity):
                """
                Previous IDT status
                
                .. attribute:: sync_status
                
                	Sync status
                	**type**\:  :py:class:`RsvpSyncStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSyncStatus>`
                
                .. attribute:: not_ready_reason
                
                	Not ready reason
                	**type**\:  :py:class:`RsvpProcNsrNotReadyReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpProcNsrNotReadyReason>`
                
                .. attribute:: idt_start_time
                
                	IDT start timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: idt_end_time
                
                	IDT end timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: declare_time
                
                	Declare ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                .. attribute:: withdraw_time
                
                	Withdraw ready timestamp in seconds
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: second
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Summary.NsrStatus.PreviousIdtStatus, self).__init__()

                    self.yang_name = "previous-idt-status"
                    self.yang_parent_name = "nsr-status"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('sync_status', YLeaf(YType.enumeration, 'sync-status')),
                        ('not_ready_reason', YLeaf(YType.enumeration, 'not-ready-reason')),
                        ('idt_start_time', YLeaf(YType.uint32, 'idt-start-time')),
                        ('idt_end_time', YLeaf(YType.uint32, 'idt-end-time')),
                        ('declare_time', YLeaf(YType.uint32, 'declare-time')),
                        ('withdraw_time', YLeaf(YType.uint32, 'withdraw-time')),
                    ])
                    self.sync_status = None
                    self.not_ready_reason = None
                    self.idt_start_time = None
                    self.idt_end_time = None
                    self.declare_time = None
                    self.withdraw_time = None
                    self._segment_path = lambda: "previous-idt-status"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/nsr-status/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Summary.NsrStatus.PreviousIdtStatus, ['sync_status', 'not_ready_reason', 'idt_start_time', 'idt_end_time', 'declare_time', 'withdraw_time'], name, value)


        class DatabaseCounters(Entity):
            """
            All database counters
            
            .. attribute:: sessions
            
            	Number of sessions
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: incoming_paths
            
            	Number of locally created and incoming path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_paths
            
            	Number of outgoing path states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: incoming_reservations
            
            	Number of locally created and incoming reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: outgoing_reservations
            
            	Number of outgoing reservation states
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: interfaces
            
            	Number of Interfaces
            	**type**\: int
            
            	**range:** 0..4294967295
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Summary.DatabaseCounters, self).__init__()

                self.yang_name = "database-counters"
                self.yang_parent_name = "summary"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('sessions', YLeaf(YType.uint32, 'sessions')),
                    ('incoming_paths', YLeaf(YType.uint32, 'incoming-paths')),
                    ('outgoing_paths', YLeaf(YType.uint32, 'outgoing-paths')),
                    ('incoming_reservations', YLeaf(YType.uint32, 'incoming-reservations')),
                    ('outgoing_reservations', YLeaf(YType.uint32, 'outgoing-reservations')),
                    ('interfaces', YLeaf(YType.uint32, 'interfaces')),
                ])
                self.sessions = None
                self.incoming_paths = None
                self.outgoing_paths = None
                self.incoming_reservations = None
                self.outgoing_reservations = None
                self.interfaces = None
                self._segment_path = lambda: "database-counters"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.Summary.DatabaseCounters, ['sessions', 'incoming_paths', 'outgoing_paths', 'incoming_reservations', 'outgoing_reservations', 'interfaces'], name, value)


    class Frrs(Entity):
        """
        Table of detailed info about Fast Re\-route
        states
        
        .. attribute:: frr
        
        	Detailed info for a single Fast Re\-route state
        	**type**\: list of  		 :py:class:`Frr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.Frrs, self).__init__()

            self.yang_name = "frrs"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("frr", ("frr", Rsvp.Frrs.Frr))])
            self._leafs = OrderedDict()

            self.frr = YList(self)
            self._segment_path = lambda: "frrs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.Frrs, [], name, value)


        class Frr(Entity):
            """
            Detailed info for a single Fast Re\-route state
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr.S2LSubLsp>`
            
            .. attribute:: path_status
            
            	RSVP FRR Path States
            	**type**\:  :py:class:`RsvpMgmtFrrStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFrrStateEnum>`
            
            .. attribute:: reservation_status
            
            	RSVP FRR Reservation States
            	**type**\:  :py:class:`RsvpMgmtFrrStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFrrStateEnum>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.Frrs.Frr, self).__init__()

                self.yang_name = "frr"
                self.yang_parent_name = "frrs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", Rsvp.Frrs.Frr.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", Rsvp.Frrs.Frr.S2LSubLsp))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('path_status', YLeaf(YType.enumeration, 'path-status')),
                    ('reservation_status', YLeaf(YType.enumeration, 'reservation-status')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.path_status = None
                self.reservation_status = None

                self.session = Rsvp.Frrs.Frr.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = Rsvp.Frrs.Frr.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")
                self._segment_path = lambda: "frr"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.Frrs.Frr, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'path_status', 'reservation_status'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Frrs.Frr.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "frr"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", Rsvp.Frrs.Frr.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = Rsvp.Frrs.Frr.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.Frrs.Frr.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.Frrs.Frr.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.Frrs.Frr.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.Frrs.Frr.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "frr"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.Frrs.Frr.S2LSubLsp, ['s2l_destination_address'], name, value)


    class RequestBriefs(Entity):
        """
        Table of brief info about requests
        
        .. attribute:: request_brief
        
        	Brief info for a request
        	**type**\: list of  		 :py:class:`RequestBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.RequestBriefs, self).__init__()

            self.yang_name = "request-briefs"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("request-brief", ("request_brief", Rsvp.RequestBriefs.RequestBrief))])
            self._leafs = OrderedDict()

            self.request_brief = YList(self)
            self._segment_path = lambda: "request-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.RequestBriefs, [], name, value)


        class RequestBrief(Entity):
            """
            Brief info for a request
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.S2LSubLsp>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:  :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Information
            	**type**\:  :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec>`
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:  :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Filter>`
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:  :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Style>`
            
            .. attribute:: output_interface
            
            	Output Interface
            	**type**\: str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.RequestBriefs.RequestBrief, self).__init__()

                self.yang_name = "request-brief"
                self.yang_parent_name = "request-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", Rsvp.RequestBriefs.RequestBrief.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", Rsvp.RequestBriefs.RequestBrief.S2LSubLsp)), ("flow-spec", ("flow_spec", Rsvp.RequestBriefs.RequestBrief.FlowSpec)), ("generic-flow-spec", ("generic_flow_spec", Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec)), ("filter", ("filter", Rsvp.RequestBriefs.RequestBrief.Filter)), ("style", ("style", Rsvp.RequestBriefs.RequestBrief.Style))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('output_interface', YLeaf(YType.str, 'output-interface')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.output_interface = None

                self.session = Rsvp.RequestBriefs.RequestBrief.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = Rsvp.RequestBriefs.RequestBrief.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.flow_spec = Rsvp.RequestBriefs.RequestBrief.FlowSpec()
                self.flow_spec.parent = self
                self._children_name_map["flow_spec"] = "flow-spec"
                self._children_yang_names.add("flow-spec")

                self.generic_flow_spec = Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self._children_name_map["generic_flow_spec"] = "generic-flow-spec"
                self._children_yang_names.add("generic-flow-spec")

                self.filter = Rsvp.RequestBriefs.RequestBrief.Filter()
                self.filter.parent = self
                self._children_name_map["filter"] = "filter"
                self._children_yang_names.add("filter")

                self.style = Rsvp.RequestBriefs.RequestBrief.Style()
                self.style.parent = self
                self._children_name_map["style"] = "style"
                self._children_yang_names.add("style")
                self._segment_path = lambda: "request-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.RequestBriefs.RequestBrief, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'output_interface'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestBriefs.RequestBrief.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "request-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RequestBriefs.RequestBrief.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestBriefs.RequestBrief.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "request-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestBriefs.RequestBrief.S2LSubLsp, ['s2l_destination_address'], name, value)


            class FlowSpec(Entity):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:  :py:class:`RsvpMgmtQosServiceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestBriefs.RequestBrief.FlowSpec, self).__init__()

                    self.yang_name = "flow-spec"
                    self.yang_parent_name = "request-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_average_rate', YLeaf(YType.uint64, 'flow-average-rate')),
                        ('flow_max_burst', YLeaf(YType.uint64, 'flow-max-burst')),
                        ('flow_peak_rate', YLeaf(YType.uint64, 'flow-peak-rate')),
                        ('flow_min_unit', YLeaf(YType.uint32, 'flow-min-unit')),
                        ('flow_max_unit', YLeaf(YType.uint32, 'flow-max-unit')),
                        ('flow_requested_rate', YLeaf(YType.uint64, 'flow-requested-rate')),
                        ('flow_slack', YLeaf(YType.uint32, 'flow-slack')),
                        ('flow_qos', YLeaf(YType.enumeration, 'flow-qos')),
                    ])
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_peak_rate = None
                    self.flow_min_unit = None
                    self.flow_max_unit = None
                    self.flow_requested_rate = None
                    self.flow_slack = None
                    self.flow_qos = None
                    self._segment_path = lambda: "flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestBriefs.RequestBrief.FlowSpec, ['flow_average_rate', 'flow_max_burst', 'flow_peak_rate', 'flow_min_unit', 'flow_max_unit', 'flow_requested_rate', 'flow_slack', 'flow_qos'], name, value)


            class GenericFlowSpec(Entity):
                """
                Generic Flow Spec Information
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:  :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec>`
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:  :py:class:`RsvpMgmtFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec, self).__init__()

                    self.yang_name = "generic-flow-spec"
                    self.yang_parent_name = "request-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("g709otn-flow-spec", ("g709otn_flow_spec", Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_spec_type', YLeaf(YType.enumeration, 'flow-spec-type')),
                    ])
                    self.flow_spec_type = None

                    self.g709otn_flow_spec = Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self
                    self._children_name_map["g709otn_flow_spec"] = "g709otn-flow-spec"
                    self._children_yang_names.add("g709otn-flow-spec")
                    self._segment_path = lambda: "generic-flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec, ['flow_spec_type'], name, value)


                class G709OtnFlowSpec(Entity):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec, self).__init__()

                        self.yang_name = "g709otn-flow-spec"
                        self.yang_parent_name = "generic-flow-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('flow_signal_type', YLeaf(YType.uint8, 'flow-signal-type')),
                            ('flow_nvc', YLeaf(YType.uint16, 'flow-nvc')),
                            ('flow_multiplier', YLeaf(YType.uint16, 'flow-multiplier')),
                            ('flow_bit_rate', YLeaf(YType.uint64, 'flow-bit-rate')),
                        ])
                        self.flow_signal_type = None
                        self.flow_nvc = None
                        self.flow_multiplier = None
                        self.flow_bit_rate = None
                        self._segment_path = lambda: "g709otn-flow-spec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/generic-flow-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RequestBriefs.RequestBrief.GenericFlowSpec.G709OtnFlowSpec, ['flow_signal_type', 'flow_nvc', 'flow_multiplier', 'flow_bit_rate'], name, value)


            class Filter(Entity):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:  :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestBriefs.RequestBrief.Filter, self).__init__()

                    self.yang_name = "filter"
                    self.yang_parent_name = "request-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-filter", ("rsvp_filter", Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_filter = Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self
                    self._children_name_map["rsvp_filter"] = "rsvp-filter"
                    self._children_yang_names.add("rsvp-filter")
                    self._segment_path = lambda: "filter"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/%s" % self._segment_path()


                class RsvpFilter(Entity):
                    """
                    RSVP Filter
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:  :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:  :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:  :py:class:`RsvpMgmtFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilter>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter, self).__init__()

                        self.yang_name = "rsvp-filter"
                        self.yang_parent_name = "filter"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("udp-ipv4-session", ("udp_ipv4_session", Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session)), ("p2mp-ipv4-session", ("p2mp_ipv4_session", Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('filter_type', YLeaf(YType.enumeration, 'filter-type')),
                        ])
                        self.filter_type = None

                        self.udp_ipv4_session = Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self
                        self._children_name_map["udp_ipv4_session"] = "udp-ipv4-session"
                        self._children_yang_names.add("udp-ipv4-session")

                        self.p2mp_ipv4_session = Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self._children_name_map["p2mp_ipv4_session"] = "p2mp-ipv4-session"
                        self._children_yang_names.add("p2mp-ipv4-session")
                        self._segment_path = lambda: "rsvp-filter"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/filter/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter, ['filter_type'], name, value)


                    class UdpIpv4Session(Entity):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session, self).__init__()

                            self.yang_name = "udp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self._segment_path = lambda: "udp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.UdpIpv4Session, ['source_address', 'source_port'], name, value)


                    class P2MpIpv4Session(Entity):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session, self).__init__()

                            self.yang_name = "p2mp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                                ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                                ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self.p2mp_sub_group_origin = None
                            self.sub_group_id = None
                            self._segment_path = lambda: "p2mp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RequestBriefs.RequestBrief.Filter.RsvpFilter.P2MpIpv4Session, ['source_address', 'source_port', 'p2mp_sub_group_origin', 'sub_group_id'], name, value)


            class Style(Entity):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:  :py:class:`RsvpMgmtReservationTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestBriefs.RequestBrief.Style, self).__init__()

                    self.yang_name = "style"
                    self.yang_parent_name = "request-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('reservation_type', YLeaf(YType.enumeration, 'reservation-type')),
                    ])
                    self.reservation_type = None
                    self._segment_path = lambda: "style"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestBriefs.RequestBrief.Style, ['reservation_type'], name, value)


    class RequestDetails(Entity):
        """
        Table of detail info about requests
        
        .. attribute:: request_detail
        
        	Detail info for a request
        	**type**\: list of  		 :py:class:`RequestDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.RequestDetails, self).__init__()

            self.yang_name = "request-details"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("request-detail", ("request_detail", Rsvp.RequestDetails.RequestDetail))])
            self._leafs = OrderedDict()

            self.request_detail = YList(self)
            self._segment_path = lambda: "request-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.RequestDetails, [], name, value)


        class RequestDetail(Entity):
            """
            Detail info for a request
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.S2LSubLsp>`
            
            .. attribute:: flow_spec
            
            	Flow Spec Information
            	**type**\:  :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.FlowSpec>`
            
            .. attribute:: generic_flow_spec
            
            	Generic Flow Spec Information
            	**type**\:  :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.GenericFlowSpec>`
            
            .. attribute:: filter
            
            	RSVP Filter
            	**type**\:  :py:class:`Filter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Filter>`
            
            .. attribute:: style
            
            	RSVP Style
            	**type**\:  :py:class:`Style <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Style>`
            
            .. attribute:: req_flags
            
            	Request flags
            	**type**\:  :py:class:`ReqFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.ReqFlags>`
            
            .. attribute:: hop
            
            	Hop Infomation
            	**type**\:  :py:class:`Hop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Hop>`
            
            .. attribute:: header
            
            	RSVP Header Information
            	**type**\:  :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Header>`
            
            .. attribute:: policy_sources
            
            	RSVP Policy Sources
            	**type**\:  :py:class:`PolicySources <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.PolicySources>`
            
            .. attribute:: policy_flags
            
            	RSVP Policy Flags
            	**type**\:  :py:class:`PolicyFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.PolicyFlags>`
            
            .. attribute:: policy_query_flags
            
            	RSVP Query Flags
            	**type**\:  :py:class:`PolicyQueryFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.PolicyQueryFlags>`
            
            .. attribute:: output_interface
            
            	output Interface
            	**type**\: str
            
            .. attribute:: psb_key
            
            	List of RSB keys
            	**type**\: list of  		 :py:class:`PsbKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.PsbKey>`
            
            .. attribute:: rsb_key
            
            	List of RSB keys
            	**type**\: list of  		 :py:class:`RsbKey <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.RsbKey>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.RequestDetails.RequestDetail, self).__init__()

                self.yang_name = "request-detail"
                self.yang_parent_name = "request-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", Rsvp.RequestDetails.RequestDetail.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", Rsvp.RequestDetails.RequestDetail.S2LSubLsp)), ("flow-spec", ("flow_spec", Rsvp.RequestDetails.RequestDetail.FlowSpec)), ("generic-flow-spec", ("generic_flow_spec", Rsvp.RequestDetails.RequestDetail.GenericFlowSpec)), ("filter", ("filter", Rsvp.RequestDetails.RequestDetail.Filter)), ("style", ("style", Rsvp.RequestDetails.RequestDetail.Style)), ("req-flags", ("req_flags", Rsvp.RequestDetails.RequestDetail.ReqFlags)), ("hop", ("hop", Rsvp.RequestDetails.RequestDetail.Hop)), ("header", ("header", Rsvp.RequestDetails.RequestDetail.Header)), ("policy-sources", ("policy_sources", Rsvp.RequestDetails.RequestDetail.PolicySources)), ("policy-flags", ("policy_flags", Rsvp.RequestDetails.RequestDetail.PolicyFlags)), ("policy-query-flags", ("policy_query_flags", Rsvp.RequestDetails.RequestDetail.PolicyQueryFlags))])
                self._child_list_classes = OrderedDict([("psb-key", ("psb_key", Rsvp.RequestDetails.RequestDetail.PsbKey)), ("rsb-key", ("rsb_key", Rsvp.RequestDetails.RequestDetail.RsbKey))])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('output_interface', YLeaf(YType.str, 'output-interface')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.output_interface = None

                self.session = Rsvp.RequestDetails.RequestDetail.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = Rsvp.RequestDetails.RequestDetail.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.flow_spec = Rsvp.RequestDetails.RequestDetail.FlowSpec()
                self.flow_spec.parent = self
                self._children_name_map["flow_spec"] = "flow-spec"
                self._children_yang_names.add("flow-spec")

                self.generic_flow_spec = Rsvp.RequestDetails.RequestDetail.GenericFlowSpec()
                self.generic_flow_spec.parent = self
                self._children_name_map["generic_flow_spec"] = "generic-flow-spec"
                self._children_yang_names.add("generic-flow-spec")

                self.filter = Rsvp.RequestDetails.RequestDetail.Filter()
                self.filter.parent = self
                self._children_name_map["filter"] = "filter"
                self._children_yang_names.add("filter")

                self.style = Rsvp.RequestDetails.RequestDetail.Style()
                self.style.parent = self
                self._children_name_map["style"] = "style"
                self._children_yang_names.add("style")

                self.req_flags = Rsvp.RequestDetails.RequestDetail.ReqFlags()
                self.req_flags.parent = self
                self._children_name_map["req_flags"] = "req-flags"
                self._children_yang_names.add("req-flags")

                self.hop = Rsvp.RequestDetails.RequestDetail.Hop()
                self.hop.parent = self
                self._children_name_map["hop"] = "hop"
                self._children_yang_names.add("hop")

                self.header = Rsvp.RequestDetails.RequestDetail.Header()
                self.header.parent = self
                self._children_name_map["header"] = "header"
                self._children_yang_names.add("header")

                self.policy_sources = Rsvp.RequestDetails.RequestDetail.PolicySources()
                self.policy_sources.parent = self
                self._children_name_map["policy_sources"] = "policy-sources"
                self._children_yang_names.add("policy-sources")

                self.policy_flags = Rsvp.RequestDetails.RequestDetail.PolicyFlags()
                self.policy_flags.parent = self
                self._children_name_map["policy_flags"] = "policy-flags"
                self._children_yang_names.add("policy-flags")

                self.policy_query_flags = Rsvp.RequestDetails.RequestDetail.PolicyQueryFlags()
                self.policy_query_flags.parent = self
                self._children_name_map["policy_query_flags"] = "policy-query-flags"
                self._children_yang_names.add("policy-query-flags")

                self.psb_key = YList(self)
                self.rsb_key = YList(self)
                self._segment_path = lambda: "request-detail"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.RequestDetails.RequestDetail, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'output_interface'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestDetails.RequestDetail.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", Rsvp.RequestDetails.RequestDetail.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = Rsvp.RequestDetails.RequestDetail.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RequestDetails.RequestDetail.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RequestDetails.RequestDetail.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RequestDetails.RequestDetail.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestDetails.RequestDetail.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestDetails.RequestDetail.S2LSubLsp, ['s2l_destination_address'], name, value)


            class FlowSpec(Entity):
                """
                Flow Spec Information
                
                .. attribute:: flow_average_rate
                
                	The Flow Average Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_max_burst
                
                	The Flow Maximum Burst
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: flow_peak_rate
                
                	The Flow Peak Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_min_unit
                
                	The Flow Minimum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_max_unit
                
                	The Flow Maximum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_requested_rate
                
                	The Flow Requested Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: flow_slack
                
                	The Flow Slack
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: flow_qos
                
                	The Flow Quality of Service
                	**type**\:  :py:class:`RsvpMgmtQosServiceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestDetails.RequestDetail.FlowSpec, self).__init__()

                    self.yang_name = "flow-spec"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_average_rate', YLeaf(YType.uint64, 'flow-average-rate')),
                        ('flow_max_burst', YLeaf(YType.uint64, 'flow-max-burst')),
                        ('flow_peak_rate', YLeaf(YType.uint64, 'flow-peak-rate')),
                        ('flow_min_unit', YLeaf(YType.uint32, 'flow-min-unit')),
                        ('flow_max_unit', YLeaf(YType.uint32, 'flow-max-unit')),
                        ('flow_requested_rate', YLeaf(YType.uint64, 'flow-requested-rate')),
                        ('flow_slack', YLeaf(YType.uint32, 'flow-slack')),
                        ('flow_qos', YLeaf(YType.enumeration, 'flow-qos')),
                    ])
                    self.flow_average_rate = None
                    self.flow_max_burst = None
                    self.flow_peak_rate = None
                    self.flow_min_unit = None
                    self.flow_max_unit = None
                    self.flow_requested_rate = None
                    self.flow_slack = None
                    self.flow_qos = None
                    self._segment_path = lambda: "flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestDetails.RequestDetail.FlowSpec, ['flow_average_rate', 'flow_max_burst', 'flow_peak_rate', 'flow_min_unit', 'flow_max_unit', 'flow_requested_rate', 'flow_slack', 'flow_qos'], name, value)


            class GenericFlowSpec(Entity):
                """
                Generic Flow Spec Information
                
                .. attribute:: g709otn_flow_spec
                
                	G709 OTN FlowSpec
                	**type**\:  :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec>`
                
                .. attribute:: flow_spec_type
                
                	FlowSpecType
                	**type**\:  :py:class:`RsvpMgmtFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestDetails.RequestDetail.GenericFlowSpec, self).__init__()

                    self.yang_name = "generic-flow-spec"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("g709otn-flow-spec", ("g709otn_flow_spec", Rsvp.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('flow_spec_type', YLeaf(YType.enumeration, 'flow-spec-type')),
                    ])
                    self.flow_spec_type = None

                    self.g709otn_flow_spec = Rsvp.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec()
                    self.g709otn_flow_spec.parent = self
                    self._children_name_map["g709otn_flow_spec"] = "g709otn-flow-spec"
                    self._children_yang_names.add("g709otn-flow-spec")
                    self._segment_path = lambda: "generic-flow-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestDetails.RequestDetail.GenericFlowSpec, ['flow_spec_type'], name, value)


                class G709OtnFlowSpec(Entity):
                    """
                    G709 OTN FlowSpec
                    
                    .. attribute:: flow_signal_type
                    
                    	G709 OTN Flow Signal Type (Refer G709 v3)
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: flow_nvc
                    
                    	G709 OTN Flow NVC
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_multiplier
                    
                    	G709 OTN Flow Multiplier
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_bit_rate
                    
                    	G709 OTN Flow Bit Rate
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec, self).__init__()

                        self.yang_name = "g709otn-flow-spec"
                        self.yang_parent_name = "generic-flow-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('flow_signal_type', YLeaf(YType.uint8, 'flow-signal-type')),
                            ('flow_nvc', YLeaf(YType.uint16, 'flow-nvc')),
                            ('flow_multiplier', YLeaf(YType.uint16, 'flow-multiplier')),
                            ('flow_bit_rate', YLeaf(YType.uint64, 'flow-bit-rate')),
                        ])
                        self.flow_signal_type = None
                        self.flow_nvc = None
                        self.flow_multiplier = None
                        self.flow_bit_rate = None
                        self._segment_path = lambda: "g709otn-flow-spec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/generic-flow-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RequestDetails.RequestDetail.GenericFlowSpec.G709OtnFlowSpec, ['flow_signal_type', 'flow_nvc', 'flow_multiplier', 'flow_bit_rate'], name, value)


            class Filter(Entity):
                """
                RSVP Filter
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:  :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestDetails.RequestDetail.Filter, self).__init__()

                    self.yang_name = "filter"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-filter", ("rsvp_filter", Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_filter = Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter()
                    self.rsvp_filter.parent = self
                    self._children_name_map["rsvp_filter"] = "rsvp-filter"
                    self._children_yang_names.add("rsvp-filter")
                    self._segment_path = lambda: "filter"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/%s" % self._segment_path()


                class RsvpFilter(Entity):
                    """
                    RSVP Filter
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:  :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:  :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:  :py:class:`RsvpMgmtFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilter>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter, self).__init__()

                        self.yang_name = "rsvp-filter"
                        self.yang_parent_name = "filter"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("udp-ipv4-session", ("udp_ipv4_session", Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session)), ("p2mp-ipv4-session", ("p2mp_ipv4_session", Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('filter_type', YLeaf(YType.enumeration, 'filter-type')),
                        ])
                        self.filter_type = None

                        self.udp_ipv4_session = Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self
                        self._children_name_map["udp_ipv4_session"] = "udp-ipv4-session"
                        self._children_yang_names.add("udp-ipv4-session")

                        self.p2mp_ipv4_session = Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self._children_name_map["p2mp_ipv4_session"] = "p2mp-ipv4-session"
                        self._children_yang_names.add("p2mp-ipv4-session")
                        self._segment_path = lambda: "rsvp-filter"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/filter/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter, ['filter_type'], name, value)


                    class UdpIpv4Session(Entity):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session, self).__init__()

                            self.yang_name = "udp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self._segment_path = lambda: "udp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.UdpIpv4Session, ['source_address', 'source_port'], name, value)


                    class P2MpIpv4Session(Entity):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session, self).__init__()

                            self.yang_name = "p2mp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                                ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                                ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self.p2mp_sub_group_origin = None
                            self.sub_group_id = None
                            self._segment_path = lambda: "p2mp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/filter/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.RequestDetails.RequestDetail.Filter.RsvpFilter.P2MpIpv4Session, ['source_address', 'source_port', 'p2mp_sub_group_origin', 'sub_group_id'], name, value)


            class Style(Entity):
                """
                RSVP Style
                
                .. attribute:: reservation_type
                
                	The Reservation Type\: WF, SE or FF
                	**type**\:  :py:class:`RsvpMgmtReservationTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtReservationTypeEnum>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestDetails.RequestDetail.Style, self).__init__()

                    self.yang_name = "style"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('reservation_type', YLeaf(YType.enumeration, 'reservation-type')),
                    ])
                    self.reservation_type = None
                    self._segment_path = lambda: "style"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestDetails.RequestDetail.Style, ['reservation_type'], name, value)


            class ReqFlags(Entity):
                """
                Request flags
                
                .. attribute:: is_local_receiver
                
                	Local Receiver
                	**type**\: bool
                
                .. attribute:: is_refreshing
                
                	Is neighbor refreshing
                	**type**\: bool
                
                .. attribute:: is_send_confirm
                
                	Send Confirm message
                	**type**\: bool
                
                .. attribute:: is_ack_outstanding
                
                	Is ACK message outstanding
                	**type**\: bool
                
                .. attribute:: is_message_id_allocated
                
                	Is MessageID allocated
                	**type**\: bool
                
                .. attribute:: is_nack_received
                
                	A NACK message was received
                	**type**\: bool
                
                .. attribute:: is_retransmit
                
                	Retransmit the message
                	**type**\: bool
                
                .. attribute:: is_paced
                
                	Message is paced
                	**type**\: bool
                
                .. attribute:: is_label_request_in_path
                
                	The Path message contains Label Request
                	**type**\: bool
                
                .. attribute:: is_rro_in_path
                
                	The Path message contains RRO
                	**type**\: bool
                
                .. attribute:: is_record_label_in_path
                
                	Path has Session\-Attr object with Record Labels set
                	**type**\: bool
                
                .. attribute:: is_merge_point
                
                	Is node a Merge Point
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestDetails.RequestDetail.ReqFlags, self).__init__()

                    self.yang_name = "req-flags"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_local_receiver', YLeaf(YType.boolean, 'is-local-receiver')),
                        ('is_refreshing', YLeaf(YType.boolean, 'is-refreshing')),
                        ('is_send_confirm', YLeaf(YType.boolean, 'is-send-confirm')),
                        ('is_ack_outstanding', YLeaf(YType.boolean, 'is-ack-outstanding')),
                        ('is_message_id_allocated', YLeaf(YType.boolean, 'is-message-id-allocated')),
                        ('is_nack_received', YLeaf(YType.boolean, 'is-nack-received')),
                        ('is_retransmit', YLeaf(YType.boolean, 'is-retransmit')),
                        ('is_paced', YLeaf(YType.boolean, 'is-paced')),
                        ('is_label_request_in_path', YLeaf(YType.boolean, 'is-label-request-in-path')),
                        ('is_rro_in_path', YLeaf(YType.boolean, 'is-rro-in-path')),
                        ('is_record_label_in_path', YLeaf(YType.boolean, 'is-record-label-in-path')),
                        ('is_merge_point', YLeaf(YType.boolean, 'is-merge-point')),
                    ])
                    self.is_local_receiver = None
                    self.is_refreshing = None
                    self.is_send_confirm = None
                    self.is_ack_outstanding = None
                    self.is_message_id_allocated = None
                    self.is_nack_received = None
                    self.is_retransmit = None
                    self.is_paced = None
                    self.is_label_request_in_path = None
                    self.is_rro_in_path = None
                    self.is_record_label_in_path = None
                    self.is_merge_point = None
                    self._segment_path = lambda: "req-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestDetails.RequestDetail.ReqFlags, ['is_local_receiver', 'is_refreshing', 'is_send_confirm', 'is_ack_outstanding', 'is_message_id_allocated', 'is_nack_received', 'is_retransmit', 'is_paced', 'is_label_request_in_path', 'is_rro_in_path', 'is_record_label_in_path', 'is_merge_point'], name, value)


            class Hop(Entity):
                """
                Hop Infomation
                
                .. attribute:: neighbor_address
                
                	IP address of the neighbor
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: neighbor_logical_interface_name
                
                	Neighbor Logical Interface Name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestDetails.RequestDetail.Hop, self).__init__()

                    self.yang_name = "hop"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                        ('neighbor_logical_interface_name', YLeaf(YType.str, 'neighbor-logical-interface-name')),
                    ])
                    self.neighbor_address = None
                    self.neighbor_logical_interface_name = None
                    self._segment_path = lambda: "hop"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestDetails.RequestDetail.Hop, ['neighbor_address', 'neighbor_logical_interface_name'], name, value)


            class Header(Entity):
                """
                RSVP Header Information
                
                .. attribute:: rsvp_version
                
                	RSVP Version
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_header_flags
                
                	RSVP Header Flags (defined in RFC2205 Section 3 .1.1)
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_ttl
                
                	RSVP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: rsvp_message_type
                
                	RSVP Message Type
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_tos
                
                	IP Type of Service
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_ttl
                
                	IP TTL
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: ip_source_address
                
                	IP Source Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestDetails.RequestDetail.Header, self).__init__()

                    self.yang_name = "header"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('rsvp_version', YLeaf(YType.uint8, 'rsvp-version')),
                        ('rsvp_header_flags', YLeaf(YType.uint8, 'rsvp-header-flags')),
                        ('rsvp_ttl', YLeaf(YType.uint8, 'rsvp-ttl')),
                        ('rsvp_message_type', YLeaf(YType.uint8, 'rsvp-message-type')),
                        ('ip_tos', YLeaf(YType.uint8, 'ip-tos')),
                        ('ip_ttl', YLeaf(YType.uint8, 'ip-ttl')),
                        ('ip_source_address', YLeaf(YType.str, 'ip-source-address')),
                    ])
                    self.rsvp_version = None
                    self.rsvp_header_flags = None
                    self.rsvp_ttl = None
                    self.rsvp_message_type = None
                    self.ip_tos = None
                    self.ip_ttl = None
                    self.ip_source_address = None
                    self._segment_path = lambda: "header"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestDetails.RequestDetail.Header, ['rsvp_version', 'rsvp_header_flags', 'rsvp_ttl', 'rsvp_message_type', 'ip_tos', 'ip_ttl', 'ip_source_address'], name, value)


            class PolicySources(Entity):
                """
                RSVP Policy Sources
                
                .. attribute:: is_te_link
                
                	Policy Source is TE Link
                	**type**\: bool
                
                .. attribute:: is_local
                
                	Policy Source is Local
                	**type**\: bool
                
                .. attribute:: is_cops
                
                	Policy Source is COPS
                	**type**\: bool
                
                .. attribute:: is_default
                
                	Policy Source is Default
                	**type**\: bool
                
                .. attribute:: is_cable
                
                	Policy Source is Cable
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestDetails.RequestDetail.PolicySources, self).__init__()

                    self.yang_name = "policy-sources"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_te_link', YLeaf(YType.boolean, 'is-te-link')),
                        ('is_local', YLeaf(YType.boolean, 'is-local')),
                        ('is_cops', YLeaf(YType.boolean, 'is-cops')),
                        ('is_default', YLeaf(YType.boolean, 'is-default')),
                        ('is_cable', YLeaf(YType.boolean, 'is-cable')),
                    ])
                    self.is_te_link = None
                    self.is_local = None
                    self.is_cops = None
                    self.is_default = None
                    self.is_cable = None
                    self._segment_path = lambda: "policy-sources"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestDetails.RequestDetail.PolicySources, ['is_te_link', 'is_local', 'is_cops', 'is_default', 'is_cable'], name, value)


            class PolicyFlags(Entity):
                """
                RSVP Policy Flags
                
                .. attribute:: is_accepted
                
                	Accepted
                	**type**\: bool
                
                .. attribute:: is_installed
                
                	Installed
                	**type**\: bool
                
                .. attribute:: is_forwarding
                
                	Forwarding
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestDetails.RequestDetail.PolicyFlags, self).__init__()

                    self.yang_name = "policy-flags"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_accepted', YLeaf(YType.boolean, 'is-accepted')),
                        ('is_installed', YLeaf(YType.boolean, 'is-installed')),
                        ('is_forwarding', YLeaf(YType.boolean, 'is-forwarding')),
                    ])
                    self.is_accepted = None
                    self.is_installed = None
                    self.is_forwarding = None
                    self._segment_path = lambda: "policy-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestDetails.RequestDetail.PolicyFlags, ['is_accepted', 'is_installed', 'is_forwarding'], name, value)


            class PolicyQueryFlags(Entity):
                """
                RSVP Query Flags
                
                .. attribute:: is_needed
                
                	Needed
                	**type**\: bool
                
                .. attribute:: is_report_required
                
                	Report Required
                	**type**\: bool
                
                .. attribute:: is_resync
                
                	Resynchronization
                	**type**\: bool
                
                .. attribute:: is_bypass
                
                	Bypass
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestDetails.RequestDetail.PolicyQueryFlags, self).__init__()

                    self.yang_name = "policy-query-flags"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_needed', YLeaf(YType.boolean, 'is-needed')),
                        ('is_report_required', YLeaf(YType.boolean, 'is-report-required')),
                        ('is_resync', YLeaf(YType.boolean, 'is-resync')),
                        ('is_bypass', YLeaf(YType.boolean, 'is-bypass')),
                    ])
                    self.is_needed = None
                    self.is_report_required = None
                    self.is_resync = None
                    self.is_bypass = None
                    self._segment_path = lambda: "policy-query-flags"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestDetails.RequestDetail.PolicyQueryFlags, ['is_needed', 'is_report_required', 'is_resync', 'is_bypass'], name, value)


            class PsbKey(Entity):
                """
                List of RSB keys
                
                .. attribute:: p2mp_id
                
                	Point\-to\-multipoint ID
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: destination_address
                
                	Destination address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: destination_port_or_tunnel_id
                
                	Destination Port or Tunnel ID. For the LSP and OUNI session types this represents the Tunnel ID whereas for the UDP session type this represents the Destination Port
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: protocol
                
                	Protocol. UDP session type this represents the Protocol (UDP not supported at present)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: extended_tunnel_id
                
                	Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this represents the Extended Tunnel ID
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: session_type
                
                	Session Type (e.g. LSP, OUNI or UDP)
                	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                
                .. attribute:: source_address
                
                	Source Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: source_port_or_lsp_id
                
                	Source Port or LSP\_ID. For the LSP and OUNI session types this represents the LSP\_ID whereas for the UDP session type this represents the SourcePort
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: p2mp_sub_group_origin
                
                	Point to Multipoint SubGroup Origin
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: sub_group_id
                
                	Point to Multipoint Subgroup ID
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: vrfid
                
                	Signalling VRF ID
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestDetails.RequestDetail.PsbKey, self).__init__()

                    self.yang_name = "psb-key"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                        ('destination_address', YLeaf(YType.str, 'destination-address')),
                        ('destination_port_or_tunnel_id', YLeaf(YType.uint32, 'destination-port-or-tunnel-id')),
                        ('protocol', YLeaf(YType.uint32, 'protocol')),
                        ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                        ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ('source_address', YLeaf(YType.str, 'source-address')),
                        ('source_port_or_lsp_id', YLeaf(YType.uint32, 'source-port-or-lsp-id')),
                        ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                        ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                        ('vrfid', YLeaf(YType.uint32, 'vrfid')),
                    ])
                    self.p2mp_id = None
                    self.destination_address = None
                    self.destination_port_or_tunnel_id = None
                    self.protocol = None
                    self.extended_tunnel_id = None
                    self.session_type = None
                    self.source_address = None
                    self.source_port_or_lsp_id = None
                    self.p2mp_sub_group_origin = None
                    self.sub_group_id = None
                    self.vrfid = None
                    self._segment_path = lambda: "psb-key"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestDetails.RequestDetail.PsbKey, ['p2mp_id', 'destination_address', 'destination_port_or_tunnel_id', 'protocol', 'extended_tunnel_id', 'session_type', 'source_address', 'source_port_or_lsp_id', 'p2mp_sub_group_origin', 'sub_group_id', 'vrfid'], name, value)


            class RsbKey(Entity):
                """
                List of RSB keys
                
                .. attribute:: p2mp_id
                
                	Point\-to\-multipoint ID
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: destination_address
                
                	Destination address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: destination_port_or_tunnel_id
                
                	Destination Port or Tunnel ID. For the LSP and OUNI session types this represents the Tunnel ID whereas for the UDP session type this represents the Destination Port
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: protocol
                
                	Protocol. UDP session type this represents the Protocol (UDP not supported at present)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: extended_tunnel_id
                
                	Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this represents the Extended Tunnel ID
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: session_type
                
                	Session Type (e.g. LSP, OUNI or UDP)
                	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                
                .. attribute:: source_address
                
                	Source Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: source_port_or_lsp_id
                
                	Source Port or LSP\_ID. For the LSP and OUNI session types this represents the LSP\_ID whereas for the UDP session type this represents the SourcePort
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: p2mp_sub_group_origin
                
                	Point to Multipoint SubGroup Origin
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: sub_group_id
                
                	Point to Multipoint Subgroup ID
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: vrfid
                
                	Signalling VRF ID
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.RequestDetails.RequestDetail.RsbKey, self).__init__()

                    self.yang_name = "rsb-key"
                    self.yang_parent_name = "request-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                        ('destination_address', YLeaf(YType.str, 'destination-address')),
                        ('destination_port_or_tunnel_id', YLeaf(YType.uint32, 'destination-port-or-tunnel-id')),
                        ('protocol', YLeaf(YType.uint32, 'protocol')),
                        ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                        ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ('source_address', YLeaf(YType.str, 'source-address')),
                        ('source_port_or_lsp_id', YLeaf(YType.uint32, 'source-port-or-lsp-id')),
                        ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                        ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                        ('vrfid', YLeaf(YType.uint32, 'vrfid')),
                    ])
                    self.p2mp_id = None
                    self.destination_address = None
                    self.destination_port_or_tunnel_id = None
                    self.protocol = None
                    self.extended_tunnel_id = None
                    self.session_type = None
                    self.source_address = None
                    self.source_port_or_lsp_id = None
                    self.p2mp_sub_group_origin = None
                    self.sub_group_id = None
                    self.vrfid = None
                    self._segment_path = lambda: "rsb-key"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.RequestDetails.RequestDetail.RsbKey, ['p2mp_id', 'destination_address', 'destination_port_or_tunnel_id', 'protocol', 'extended_tunnel_id', 'session_type', 'source_address', 'source_port_or_lsp_id', 'p2mp_sub_group_origin', 'sub_group_id', 'vrfid'], name, value)


    class InterfaceBriefs(Entity):
        """
        Table of brief info about RSVP\-enabled
        interfaces
        
        .. attribute:: interface_brief
        
        	Brief info about an RSVP\-enabled interface
        	**type**\: list of  		 :py:class:`InterfaceBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceBriefs.InterfaceBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.InterfaceBriefs, self).__init__()

            self.yang_name = "interface-briefs"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("interface-brief", ("interface_brief", Rsvp.InterfaceBriefs.InterfaceBrief))])
            self._leafs = OrderedDict()

            self.interface_brief = YList(self)
            self._segment_path = lambda: "interface-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.InterfaceBriefs, [], name, value)


        class InterfaceBrief(Entity):
            """
            Brief info about an RSVP\-enabled interface
            
            .. attribute:: interface_name  (key)
            
            	Interface Name
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: bandwidth_information
            
            	Interface bandwidth information
            	**type**\:  :py:class:`BandwidthInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation>`
            
            .. attribute:: interface_name_xr
            
            	Interface Name
            	**type**\: str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.InterfaceBriefs.InterfaceBrief, self).__init__()

                self.yang_name = "interface-brief"
                self.yang_parent_name = "interface-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['interface_name']
                self._child_container_classes = OrderedDict([("bandwidth-information", ("bandwidth_information", Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                    ('interface_name_xr', YLeaf(YType.str, 'interface-name-xr')),
                ])
                self.interface_name = None
                self.interface_name_xr = None

                self.bandwidth_information = Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation()
                self.bandwidth_information.parent = self
                self._children_name_map["bandwidth_information"] = "bandwidth-information"
                self._children_yang_names.add("bandwidth-information")
                self._segment_path = lambda: "interface-brief" + "[interface-name='" + str(self.interface_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.InterfaceBriefs.InterfaceBrief, ['interface_name', 'interface_name_xr'], name, value)


            class BandwidthInformation(Entity):
                """
                Interface bandwidth information
                
                .. attribute:: pre_standard_dste_interface
                
                	Prestandard DSTE interface information
                	**type**\:  :py:class:`PreStandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface>`
                
                .. attribute:: standard_dste_interface
                
                	Standard DSTE interface information
                	**type**\:  :py:class:`StandardDsteInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface>`
                
                .. attribute:: dste_mode
                
                	DSTEMode
                	**type**\:  :py:class:`RsvpMgmtDsteModes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtDsteModes>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation, self).__init__()

                    self.yang_name = "bandwidth-information"
                    self.yang_parent_name = "interface-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("pre-standard-dste-interface", ("pre_standard_dste_interface", Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface)), ("standard-dste-interface", ("standard_dste_interface", Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('dste_mode', YLeaf(YType.enumeration, 'dste-mode')),
                    ])
                    self.dste_mode = None

                    self.pre_standard_dste_interface = Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface()
                    self.pre_standard_dste_interface.parent = self
                    self._children_name_map["pre_standard_dste_interface"] = "pre-standard-dste-interface"
                    self._children_yang_names.add("pre-standard-dste-interface")

                    self.standard_dste_interface = Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface()
                    self.standard_dste_interface.parent = self
                    self._children_name_map["standard_dste_interface"] = "standard-dste-interface"
                    self._children_yang_names.add("standard-dste-interface")
                    self._segment_path = lambda: "bandwidth-information"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation, ['dste_mode'], name, value)


                class PreStandardDsteInterface(Entity):
                    """
                    Prestandard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_subpool_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in subpool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_subpool_bandwidth_absolute
                    
                    	True if the Max sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface, self).__init__()

                        self.yang_name = "pre-standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_subpool_bandwidth', YLeaf(YType.uint64, 'max-subpool-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_subpool_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-subpool-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_subpool_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_subpool_bandwidth_absolute = None
                        self._segment_path = lambda: "pre-standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.PreStandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_subpool_bandwidth', 'is_max_bandwidth_absolute', 'is_max_subpool_bandwidth_absolute'], name, value)


                class StandardDsteInterface(Entity):
                    """
                    Standard DSTE interface information
                    
                    .. attribute:: allocated_bit_rate
                    
                    	Bandwidth (bits per second) now allocated
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_flow_bandwidth
                    
                    	Max bandwidth (bits per second) allowed per flow
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_bandwidth
                    
                    	Max bandwidth (bits per second) allowed
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool0_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC0 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: max_pool1_bandwidth
                    
                    	Max bandwidth (bits per second) allowed in BC1 pool
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: bit/s
                    
                    .. attribute:: is_max_bandwidth_absolute
                    
                    	True if the Max B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc0_bandwidth_absolute
                    
                    	True if the Max BC0 B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    .. attribute:: is_max_bc1_bandwidth_absolute
                    
                    	True if the Max BC1 sub\-pool B/W is an absolute value and false if its a percentage
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface, self).__init__()

                        self.yang_name = "standard-dste-interface"
                        self.yang_parent_name = "bandwidth-information"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('allocated_bit_rate', YLeaf(YType.uint64, 'allocated-bit-rate')),
                            ('max_flow_bandwidth', YLeaf(YType.uint64, 'max-flow-bandwidth')),
                            ('max_bandwidth', YLeaf(YType.uint64, 'max-bandwidth')),
                            ('max_pool0_bandwidth', YLeaf(YType.uint64, 'max-pool0-bandwidth')),
                            ('max_pool1_bandwidth', YLeaf(YType.uint64, 'max-pool1-bandwidth')),
                            ('is_max_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bandwidth-absolute')),
                            ('is_max_bc0_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc0-bandwidth-absolute')),
                            ('is_max_bc1_bandwidth_absolute', YLeaf(YType.boolean, 'is-max-bc1-bandwidth-absolute')),
                        ])
                        self.allocated_bit_rate = None
                        self.max_flow_bandwidth = None
                        self.max_bandwidth = None
                        self.max_pool0_bandwidth = None
                        self.max_pool1_bandwidth = None
                        self.is_max_bandwidth_absolute = None
                        self.is_max_bc0_bandwidth_absolute = None
                        self.is_max_bc1_bandwidth_absolute = None
                        self._segment_path = lambda: "standard-dste-interface"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.InterfaceBriefs.InterfaceBrief.BandwidthInformation.StandardDsteInterface, ['allocated_bit_rate', 'max_flow_bandwidth', 'max_bandwidth', 'max_pool0_bandwidth', 'max_pool1_bandwidth', 'is_max_bandwidth_absolute', 'is_max_bc0_bandwidth_absolute', 'is_max_bc1_bandwidth_absolute'], name, value)


    class SessionDetaileds(Entity):
        """
        Table of detailed info about sessions
        
        .. attribute:: session_detailed
        
        	Detailed info about session
        	**type**\: list of  		 :py:class:`SessionDetailed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.SessionDetaileds, self).__init__()

            self.yang_name = "session-detaileds"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("session-detailed", ("session_detailed", Rsvp.SessionDetaileds.SessionDetailed))])
            self._leafs = OrderedDict()

            self.session_detailed = YList(self)
            self._segment_path = lambda: "session-detaileds"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.SessionDetaileds, [], name, value)


        class SessionDetailed(Entity):
            """
            Detailed info about session
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: compact
            
            	Compact session data
            	**type**\:  :py:class:`Compact <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.Compact>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.S2LSubLsp>`
            
            .. attribute:: psb_rsb_info
            
            	Path and Reservation Info
            	**type**\: list of  		 :py:class:`PsbRsbInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.SessionDetaileds.SessionDetailed, self).__init__()

                self.yang_name = "session-detailed"
                self.yang_parent_name = "session-detaileds"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("compact", ("compact", Rsvp.SessionDetaileds.SessionDetailed.Compact)), ("s2l-sub-lsp", ("s2l_sub_lsp", Rsvp.SessionDetaileds.SessionDetailed.S2LSubLsp))])
                self._child_list_classes = OrderedDict([("psb-rsb-info", ("psb_rsb_info", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo))])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.vrf_name = None

                self.compact = Rsvp.SessionDetaileds.SessionDetailed.Compact()
                self.compact.parent = self
                self._children_name_map["compact"] = "compact"
                self._children_yang_names.add("compact")

                self.s2l_sub_lsp = Rsvp.SessionDetaileds.SessionDetailed.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.psb_rsb_info = YList(self)
                self._segment_path = lambda: "session-detailed"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'vrf_name'], name, value)


            class Compact(Entity):
                """
                Compact session data
                
                .. attribute:: session
                
                	RSVP Session Information
                	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.Compact.Session>`
                
                .. attribute:: ps_bs
                
                	Number of path state block states
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: rs_bs
                
                	Number of reservation state block states
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: requests
                
                	Number of request states
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: detail_list_size
                
                	Number of elements in detail list
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.SessionDetaileds.SessionDetailed.Compact, self).__init__()

                    self.yang_name = "compact"
                    self.yang_parent_name = "session-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("session", ("session", Rsvp.SessionDetaileds.SessionDetailed.Compact.Session))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('ps_bs', YLeaf(YType.uint32, 'ps-bs')),
                        ('rs_bs', YLeaf(YType.uint32, 'rs-bs')),
                        ('requests', YLeaf(YType.uint32, 'requests')),
                        ('detail_list_size', YLeaf(YType.uint32, 'detail-list-size')),
                    ])
                    self.ps_bs = None
                    self.rs_bs = None
                    self.requests = None
                    self.detail_list_size = None

                    self.session = Rsvp.SessionDetaileds.SessionDetailed.Compact.Session()
                    self.session.parent = self
                    self._children_name_map["session"] = "session"
                    self._children_yang_names.add("session")
                    self._segment_path = lambda: "compact"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.Compact, ['ps_bs', 'rs_bs', 'requests', 'detail_list_size'], name, value)


                class Session(Entity):
                    """
                    RSVP Session Information
                    
                    .. attribute:: rsvp_session
                    
                    	RSVP Session
                    	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.SessionDetaileds.SessionDetailed.Compact.Session, self).__init__()

                        self.yang_name = "session"
                        self.yang_parent_name = "compact"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.rsvp_session = Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession()
                        self.rsvp_session.parent = self
                        self._children_name_map["rsvp_session"] = "rsvp-session"
                        self._children_yang_names.add("rsvp-session")
                        self._segment_path = lambda: "session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/%s" % self._segment_path()


                    class RsvpSession(Entity):
                        """
                        RSVP Session
                        
                        .. attribute:: ipv4
                        
                        	UDP IPv4 session
                        	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4>`
                        
                        .. attribute:: ipv4_lsp_session
                        
                        	IPv4 LSP session
                        	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession>`
                        
                        .. attribute:: ipv4_uni_session
                        
                        	IPv4 UNI session
                        	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession>`
                        
                        .. attribute:: ipv4_p2mp_lsp_session
                        
                        	IPv4 P2MP LSP session
                        	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession>`
                        
                        .. attribute:: session_type
                        
                        	SessionType
                        	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession, self).__init__()

                            self.yang_name = "rsvp-session"
                            self.yang_parent_name = "session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('session_type', YLeaf(YType.enumeration, 'session-type')),
                            ])
                            self.session_type = None

                            self.ipv4 = Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4()
                            self.ipv4.parent = self
                            self._children_name_map["ipv4"] = "ipv4"
                            self._children_yang_names.add("ipv4")

                            self.ipv4_lsp_session = Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession()
                            self.ipv4_lsp_session.parent = self
                            self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                            self._children_yang_names.add("ipv4-lsp-session")

                            self.ipv4_uni_session = Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession()
                            self.ipv4_uni_session.parent = self
                            self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                            self._children_yang_names.add("ipv4-uni-session")

                            self.ipv4_p2mp_lsp_session = Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession()
                            self.ipv4_p2mp_lsp_session.parent = self
                            self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                            self._children_yang_names.add("ipv4-p2mp-lsp-session")
                            self._segment_path = lambda: "rsvp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession, ['session_type'], name, value)


                        class Ipv4(Entity):
                            """
                            UDP IPv4 session
                            
                            .. attribute:: destination_address
                            
                            	Destination address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: protocol
                            
                            	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: destination_port
                            
                            	The Session Destination Port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4, self).__init__()

                                self.yang_name = "ipv4"
                                self.yang_parent_name = "rsvp-session"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                                    ('protocol', YLeaf(YType.uint8, 'protocol')),
                                    ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                                ])
                                self.destination_address = None
                                self.protocol = None
                                self.destination_port = None
                                self._segment_path = lambda: "ipv4"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/rsvp-session/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                        class Ipv4LspSession(Entity):
                            """
                            IPv4 LSP session
                            
                            .. attribute:: destination_address
                            
                            	Destination address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: tunnel_id
                            
                            	The Session Tunnel ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: extended_tunnel_id
                            
                            	The Session Extended Tunnel ID
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession, self).__init__()

                                self.yang_name = "ipv4-lsp-session"
                                self.yang_parent_name = "rsvp-session"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                                    ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                                ])
                                self.destination_address = None
                                self.tunnel_id = None
                                self.extended_tunnel_id = None
                                self._segment_path = lambda: "ipv4-lsp-session"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/rsvp-session/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                        class Ipv4UniSession(Entity):
                            """
                            IPv4 UNI session
                            
                            .. attribute:: destination_address
                            
                            	Destination address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: tunnel_id
                            
                            	The Session Tunnel ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: extended_address
                            
                            	The Session Extended Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession, self).__init__()

                                self.yang_name = "ipv4-uni-session"
                                self.yang_parent_name = "rsvp-session"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                                    ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                    ('extended_address', YLeaf(YType.str, 'extended-address')),
                                ])
                                self.destination_address = None
                                self.tunnel_id = None
                                self.extended_address = None
                                self._segment_path = lambda: "ipv4-uni-session"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/rsvp-session/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                        class Ipv4P2MpLspSession(Entity):
                            """
                            IPv4 P2MP LSP session
                            
                            .. attribute:: p2mp_id
                            
                            	The Point to Multipoint ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tunnel_id
                            
                            	The Session Tunnel ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: extended_tunnel_id
                            
                            	The Session Extended Tunnel ID
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                                self.yang_name = "ipv4-p2mp-lsp-session"
                                self.yang_parent_name = "rsvp-session"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                    ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                                ])
                                self.p2mp_id = None
                                self.tunnel_id = None
                                self.extended_tunnel_id = None
                                self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/rsvp-session/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.Compact.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.SessionDetaileds.SessionDetailed.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "session-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.S2LSubLsp, ['s2l_destination_address'], name, value)


            class PsbRsbInfo(Entity):
                """
                Path and Reservation Info
                
                .. attribute:: psb_info
                
                	Path Info
                	**type**\: list of  		 :py:class:`PsbInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo>`
                
                .. attribute:: rsb_info
                
                	Reservation Info
                	**type**\: list of  		 :py:class:`RsbInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo, self).__init__()

                    self.yang_name = "psb-rsb-info"
                    self.yang_parent_name = "session-detailed"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("psb-info", ("psb_info", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo)), ("rsb-info", ("rsb_info", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo))])
                    self._leafs = OrderedDict()

                    self.psb_info = YList(self)
                    self.rsb_info = YList(self)
                    self._segment_path = lambda: "psb-rsb-info"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo, [], name, value)


                class PsbInfo(Entity):
                    """
                    Path Info
                    
                    .. attribute:: generic_in_label
                    
                    	Generic Label for inbound traffic
                    	**type**\:  :py:class:`GenericInLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel>`
                    
                    .. attribute:: traffic_spec
                    
                    	Traffic Spec object
                    	**type**\:  :py:class:`TrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec>`
                    
                    .. attribute:: generic_traffic_spec
                    
                    	Generic Traffic Spec object
                    	**type**\:  :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec>`
                    
                    .. attribute:: association
                    
                    	Association object
                    	**type**\:  :py:class:`Association <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association>`
                    
                    .. attribute:: protection
                    
                    	Protection object
                    	**type**\:  :py:class:`Protection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection>`
                    
                    .. attribute:: reverse_lsp
                    
                    	Reverse LSP object
                    	**type**\:  :py:class:`ReverseLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp>`
                    
                    .. attribute:: is_valid
                    
                    	Entry validity
                    	**type**\: bool
                    
                    .. attribute:: destination_address
                    
                    	Destination address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: lsp_id
                    
                    	LSP ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: p2mp_sub_group_origin
                    
                    	Point to Multipoint SubGroup Origin
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: sub_group_id
                    
                    	Point to Multipoint Subgroup ID
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: in_interface
                    
                    	Interface on which inbound message was received
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: in_label
                    
                    	Label for inbound traffic
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: lsp_wrap_label
                    
                    	LSP Wrap Label
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: is_bad_address
                    
                    	Address validity
                    	**type**\: bool
                    
                    .. attribute:: incoming_interface_address
                    
                    	IP address of Path's incoming interface
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: is_ero_valid
                    
                    	ERO validity
                    	**type**\: bool
                    
                    .. attribute:: is_rro_valid
                    
                    	RRO validity
                    	**type**\: bool
                    
                    .. attribute:: is_traffic_spec_valid
                    
                    	Traffic Spec validity
                    	**type**\: bool
                    
                    .. attribute:: tunnel_name
                    
                    	Tunnel name
                    	**type**\: str
                    
                    .. attribute:: ero
                    
                    	Explicit Route Sub Objects
                    	**type**\: list of  		 :py:class:`Ero <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero>`
                    
                    .. attribute:: rro
                    
                    	Record Route Sub Objects
                    	**type**\: list of  		 :py:class:`Rro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo, self).__init__()

                        self.yang_name = "psb-info"
                        self.yang_parent_name = "psb-rsb-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generic-in-label", ("generic_in_label", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel)), ("traffic-spec", ("traffic_spec", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec)), ("generic-traffic-spec", ("generic_traffic_spec", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec)), ("association", ("association", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association)), ("protection", ("protection", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection)), ("reverse-lsp", ("reverse_lsp", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp))])
                        self._child_list_classes = OrderedDict([("ero", ("ero", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero)), ("rro", ("rro", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro))])
                        self._leafs = OrderedDict([
                            ('is_valid', YLeaf(YType.boolean, 'is-valid')),
                            ('destination_address', YLeaf(YType.str, 'destination-address')),
                            ('lsp_id', YLeaf(YType.uint32, 'lsp-id')),
                            ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                            ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ('in_interface', YLeaf(YType.str, 'in-interface')),
                            ('in_label', YLeaf(YType.uint32, 'in-label')),
                            ('lsp_wrap_label', YLeaf(YType.uint32, 'lsp-wrap-label')),
                            ('is_bad_address', YLeaf(YType.boolean, 'is-bad-address')),
                            ('incoming_interface_address', YLeaf(YType.str, 'incoming-interface-address')),
                            ('is_ero_valid', YLeaf(YType.boolean, 'is-ero-valid')),
                            ('is_rro_valid', YLeaf(YType.boolean, 'is-rro-valid')),
                            ('is_traffic_spec_valid', YLeaf(YType.boolean, 'is-traffic-spec-valid')),
                            ('tunnel_name', YLeaf(YType.str, 'tunnel-name')),
                        ])
                        self.is_valid = None
                        self.destination_address = None
                        self.lsp_id = None
                        self.p2mp_sub_group_origin = None
                        self.sub_group_id = None
                        self.in_interface = None
                        self.in_label = None
                        self.lsp_wrap_label = None
                        self.is_bad_address = None
                        self.incoming_interface_address = None
                        self.is_ero_valid = None
                        self.is_rro_valid = None
                        self.is_traffic_spec_valid = None
                        self.tunnel_name = None

                        self.generic_in_label = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel()
                        self.generic_in_label.parent = self
                        self._children_name_map["generic_in_label"] = "generic-in-label"
                        self._children_yang_names.add("generic-in-label")

                        self.traffic_spec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec()
                        self.traffic_spec.parent = self
                        self._children_name_map["traffic_spec"] = "traffic-spec"
                        self._children_yang_names.add("traffic-spec")

                        self.generic_traffic_spec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec()
                        self.generic_traffic_spec.parent = self
                        self._children_name_map["generic_traffic_spec"] = "generic-traffic-spec"
                        self._children_yang_names.add("generic-traffic-spec")

                        self.association = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association()
                        self.association.parent = self
                        self._children_name_map["association"] = "association"
                        self._children_yang_names.add("association")

                        self.protection = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection()
                        self.protection.parent = self
                        self._children_name_map["protection"] = "protection"
                        self._children_yang_names.add("protection")

                        self.reverse_lsp = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp()
                        self.reverse_lsp.parent = self
                        self._children_name_map["reverse_lsp"] = "reverse-lsp"
                        self._children_yang_names.add("reverse-lsp")

                        self.ero = YList(self)
                        self.rro = YList(self)
                        self._segment_path = lambda: "psb-info"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo, ['is_valid', 'destination_address', 'lsp_id', 'p2mp_sub_group_origin', 'sub_group_id', 'in_interface', 'in_label', 'lsp_wrap_label', 'is_bad_address', 'incoming_interface_address', 'is_ero_valid', 'is_rro_valid', 'is_traffic_spec_valid', 'tunnel_name'], name, value)


                    class GenericInLabel(Entity):
                        """
                        Generic Label for inbound traffic
                        
                        .. attribute:: generalized_label
                        
                        	Generalized Label
                        	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel>`
                        
                        .. attribute:: generic_label_type
                        
                        	GenericLabelType
                        	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel, self).__init__()

                            self.yang_name = "generic-in-label"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                            ])
                            self.generic_label_type = None

                            self.generalized_label = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel()
                            self.generalized_label.parent = self
                            self._children_name_map["generalized_label"] = "generalized-label"
                            self._children_yang_names.add("generalized-label")
                            self._segment_path = lambda: "generic-in-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel, ['generic_label_type'], name, value)


                        class GeneralizedLabel(Entity):
                            """
                            Generalized Label
                            
                            .. attribute:: value
                            
                            	Generalized Label Value
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel, self).__init__()

                                self.yang_name = "generalized-label"
                                self.yang_parent_name = "generic-in-label"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('value', YLeafList(YType.uint32, 'value')),
                                ])
                                self.value = []
                                self._segment_path = lambda: "generalized-label"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-in-label/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericInLabel.GeneralizedLabel, ['value'], name, value)


                    class TrafficSpec(Entity):
                        """
                        Traffic Spec object
                        
                        .. attribute:: traffic_average_rate
                        
                        	Traffic Average Rate in bytes per second
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: traffic_max_burst
                        
                        	Traffic Maximum Burst
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: traffic_peak_rate
                        
                        	Traffic Peak Rate in bytes per second
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: traffic_min_unit
                        
                        	Traffic Minimum Unit
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: traffic_max_unit
                        
                        	Traffic Maximum Unit
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec, self).__init__()

                            self.yang_name = "traffic-spec"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                                ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                                ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                                ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                                ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                            ])
                            self.traffic_average_rate = None
                            self.traffic_max_burst = None
                            self.traffic_peak_rate = None
                            self.traffic_min_unit = None
                            self.traffic_max_unit = None
                            self._segment_path = lambda: "traffic-spec"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.TrafficSpec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


                    class GenericTrafficSpec(Entity):
                        """
                        Generic Traffic Spec object
                        
                        .. attribute:: g709otn_tspec
                        
                        	G709 OTN Sender Tspec
                        	**type**\:  :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec>`
                        
                        .. attribute:: intsrv_tspec
                        
                        	Integrated Services Sender Tspec
                        	**type**\:  :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec>`
                        
                        .. attribute:: tspec_type
                        
                        	TspecType
                        	**type**\:  :py:class:`RsvpMgmtTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspec>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec, self).__init__()

                            self.yang_name = "generic-traffic-spec"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("g709otn-tspec", ("g709otn_tspec", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec)), ("intsrv-tspec", ("intsrv_tspec", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('tspec_type', YLeaf(YType.enumeration, 'tspec-type')),
                            ])
                            self.tspec_type = None

                            self.g709otn_tspec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec()
                            self.g709otn_tspec.parent = self
                            self._children_name_map["g709otn_tspec"] = "g709otn-tspec"
                            self._children_yang_names.add("g709otn-tspec")

                            self.intsrv_tspec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec()
                            self.intsrv_tspec.parent = self
                            self._children_name_map["intsrv_tspec"] = "intsrv-tspec"
                            self._children_yang_names.add("intsrv-tspec")
                            self._segment_path = lambda: "generic-traffic-spec"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec, ['tspec_type'], name, value)


                        class G709OtnTspec(Entity):
                            """
                            G709 OTN Sender Tspec
                            
                            .. attribute:: traffic_signal_type
                            
                            	G709 OTN Traffic Signal Type (Refer G709 v3)
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: traffic_nvc
                            
                            	G709 OTN Traffic NVC
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: traffic_multiplier
                            
                            	G709 OTN Traffic Multiplier
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: traffic_bit_rate
                            
                            	G709 OTN Traffic Bit Rate
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec, self).__init__()

                                self.yang_name = "g709otn-tspec"
                                self.yang_parent_name = "generic-traffic-spec"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('traffic_signal_type', YLeaf(YType.uint8, 'traffic-signal-type')),
                                    ('traffic_nvc', YLeaf(YType.uint16, 'traffic-nvc')),
                                    ('traffic_multiplier', YLeaf(YType.uint16, 'traffic-multiplier')),
                                    ('traffic_bit_rate', YLeaf(YType.uint64, 'traffic-bit-rate')),
                                ])
                                self.traffic_signal_type = None
                                self.traffic_nvc = None
                                self.traffic_multiplier = None
                                self.traffic_bit_rate = None
                                self._segment_path = lambda: "g709otn-tspec"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-traffic-spec/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.G709OtnTspec, ['traffic_signal_type', 'traffic_nvc', 'traffic_multiplier', 'traffic_bit_rate'], name, value)


                        class IntsrvTspec(Entity):
                            """
                            Integrated Services Sender Tspec
                            
                            .. attribute:: traffic_average_rate
                            
                            	Traffic Average Rate in bytes per second
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: byte/s
                            
                            .. attribute:: traffic_max_burst
                            
                            	Traffic Maximum Burst
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: traffic_peak_rate
                            
                            	Traffic Peak Rate in bytes per second
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: byte/s
                            
                            .. attribute:: traffic_min_unit
                            
                            	Traffic Minimum Unit
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: traffic_max_unit
                            
                            	Traffic Maximum Unit
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec, self).__init__()

                                self.yang_name = "intsrv-tspec"
                                self.yang_parent_name = "generic-traffic-spec"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                                    ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                                    ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                                    ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                                    ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                                ])
                                self.traffic_average_rate = None
                                self.traffic_max_burst = None
                                self.traffic_peak_rate = None
                                self.traffic_min_unit = None
                                self.traffic_max_unit = None
                                self._segment_path = lambda: "intsrv-tspec"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-traffic-spec/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.GenericTrafficSpec.IntsrvTspec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


                    class Association(Entity):
                        """
                        Association object
                        
                        .. attribute:: ipv4
                        
                        	IPV4 ASSOCIATION Object
                        	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4>`
                        
                        .. attribute:: ipv6
                        
                        	IPV6 ASSOCIATION Object
                        	**type**\:  :py:class:`Ipv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6>`
                        
                        .. attribute:: extended_ipv4
                        
                        	EXTENDED IPV4 ASSOCIATION Object
                        	**type**\:  :py:class:`ExtendedIpv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4>`
                        
                        .. attribute:: extended_ipv6
                        
                        	EXTENDED IPV6 ASSOCIATION Object
                        	**type**\:  :py:class:`ExtendedIpv6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6>`
                        
                        .. attribute:: association_type
                        
                        	AssociationType
                        	**type**\:  :py:class:`RsvpMgmtAssociation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtAssociation>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association, self).__init__()

                            self.yang_name = "association"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4)), ("ipv6", ("ipv6", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6)), ("extended-ipv4", ("extended_ipv4", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4)), ("extended-ipv6", ("extended_ipv6", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('association_type', YLeaf(YType.enumeration, 'association-type')),
                            ])
                            self.association_type = None

                            self.ipv4 = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4()
                            self.ipv4.parent = self
                            self._children_name_map["ipv4"] = "ipv4"
                            self._children_yang_names.add("ipv4")

                            self.ipv6 = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6()
                            self.ipv6.parent = self
                            self._children_name_map["ipv6"] = "ipv6"
                            self._children_yang_names.add("ipv6")

                            self.extended_ipv4 = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4()
                            self.extended_ipv4.parent = self
                            self._children_name_map["extended_ipv4"] = "extended-ipv4"
                            self._children_yang_names.add("extended-ipv4")

                            self.extended_ipv6 = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6()
                            self.extended_ipv6.parent = self
                            self._children_name_map["extended_ipv6"] = "extended-ipv6"
                            self._children_yang_names.add("extended-ipv6")
                            self._segment_path = lambda: "association"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association, ['association_type'], name, value)


                        class Ipv4(Entity):
                            """
                            IPV4 ASSOCIATION Object
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV4 Source Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4, self).__init__()

                                self.yang_name = "ipv4"
                                self.yang_parent_name = "association"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('type', YLeaf(YType.uint16, 'type')),
                                    ('id', YLeaf(YType.uint16, 'id')),
                                    ('source', YLeaf(YType.str, 'source')),
                                ])
                                self.type = None
                                self.id = None
                                self.source = None
                                self._segment_path = lambda: "ipv4"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv4, ['type', 'id', 'source'], name, value)


                        class Ipv6(Entity):
                            """
                            IPV6 ASSOCIATION Object
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV6 Source Address
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6, self).__init__()

                                self.yang_name = "ipv6"
                                self.yang_parent_name = "association"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('type', YLeaf(YType.uint16, 'type')),
                                    ('id', YLeaf(YType.uint16, 'id')),
                                    ('source', YLeaf(YType.str, 'source')),
                                ])
                                self.type = None
                                self.id = None
                                self.source = None
                                self._segment_path = lambda: "ipv6"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.Ipv6, ['type', 'id', 'source'], name, value)


                        class ExtendedIpv4(Entity):
                            """
                            EXTENDED IPV4 ASSOCIATION Object
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV4 Source Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: global_source
                            
                            	Global Association Source
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: extended_id
                            
                            	Extended Association ID
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4, self).__init__()

                                self.yang_name = "extended-ipv4"
                                self.yang_parent_name = "association"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('type', YLeaf(YType.uint16, 'type')),
                                    ('id', YLeaf(YType.uint16, 'id')),
                                    ('source', YLeaf(YType.str, 'source')),
                                    ('global_source', YLeaf(YType.uint32, 'global-source')),
                                    ('extended_id', YLeafList(YType.uint32, 'extended-id')),
                                ])
                                self.type = None
                                self.id = None
                                self.source = None
                                self.global_source = None
                                self.extended_id = []
                                self._segment_path = lambda: "extended-ipv4"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv4, ['type', 'id', 'source', 'global_source', 'extended_id'], name, value)


                        class ExtendedIpv6(Entity):
                            """
                            EXTENDED IPV6 ASSOCIATION Object
                            
                            .. attribute:: type
                            
                            	Association Type (RFC 4872)
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: id
                            
                            	Association ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: source
                            
                            	Association IPV6 Source Address
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: global_source
                            
                            	Global Association Source
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: extended_id
                            
                            	Extended Association ID
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6, self).__init__()

                                self.yang_name = "extended-ipv6"
                                self.yang_parent_name = "association"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('type', YLeaf(YType.uint16, 'type')),
                                    ('id', YLeaf(YType.uint16, 'id')),
                                    ('source', YLeaf(YType.str, 'source')),
                                    ('global_source', YLeaf(YType.uint32, 'global-source')),
                                    ('extended_id', YLeafList(YType.uint32, 'extended-id')),
                                ])
                                self.type = None
                                self.id = None
                                self.source = None
                                self.global_source = None
                                self.extended_id = []
                                self._segment_path = lambda: "extended-ipv6"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Association.ExtendedIpv6, ['type', 'id', 'source', 'global_source', 'extended_id'], name, value)


                    class Protection(Entity):
                        """
                        Protection object
                        
                        .. attribute:: lsp_flags
                        
                        	PROTECTION Object LSP Flags
                        	**type**\:  :py:class:`LspFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags>`
                        
                        .. attribute:: link_flags
                        
                        	PROTECTION Object Link Flags
                        	**type**\:  :py:class:`LinkFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags>`
                        
                        .. attribute:: s
                        
                        	Secondary Bit
                        	**type**\: bool
                        
                        .. attribute:: p
                        
                        	Protecting Bit
                        	**type**\: bool
                        
                        .. attribute:: n
                        
                        	Notification Bit
                        	**type**\: bool
                        
                        .. attribute:: o
                        
                        	Operational Bit
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection, self).__init__()

                            self.yang_name = "protection"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("lsp-flags", ("lsp_flags", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags)), ("link-flags", ("link_flags", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('s', YLeaf(YType.boolean, 's')),
                                ('p', YLeaf(YType.boolean, 'p')),
                                ('n', YLeaf(YType.boolean, 'n')),
                                ('o', YLeaf(YType.boolean, 'o')),
                            ])
                            self.s = None
                            self.p = None
                            self.n = None
                            self.o = None

                            self.lsp_flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags()
                            self.lsp_flags.parent = self
                            self._children_name_map["lsp_flags"] = "lsp-flags"
                            self._children_yang_names.add("lsp-flags")

                            self.link_flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags()
                            self.link_flags.parent = self
                            self._children_name_map["link_flags"] = "link-flags"
                            self._children_yang_names.add("link-flags")
                            self._segment_path = lambda: "protection"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection, ['s', 'p', 'n', 'o'], name, value)


                        class LspFlags(Entity):
                            """
                            PROTECTION Object LSP Flags
                            
                            .. attribute:: rerouting
                            
                            	Full Rerouting
                            	**type**\: bool
                            
                            .. attribute:: rerouting_no_et
                            
                            	Rerouting Without Extra\-Traffic
                            	**type**\: bool
                            
                            .. attribute:: one_to_n_protection_et
                            
                            	1\:N Protection with Extra\-Traffic
                            	**type**\: bool
                            
                            .. attribute:: one_plus_one_uni
                            
                            	1+1 Unidirectional Protection
                            	**type**\: bool
                            
                            .. attribute:: one_plus_one_bi
                            
                            	1+1 Bidirectional Protection
                            	**type**\: bool
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags, self).__init__()

                                self.yang_name = "lsp-flags"
                                self.yang_parent_name = "protection"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rerouting', YLeaf(YType.boolean, 'rerouting')),
                                    ('rerouting_no_et', YLeaf(YType.boolean, 'rerouting-no-et')),
                                    ('one_to_n_protection_et', YLeaf(YType.boolean, 'one-to-n-protection-et')),
                                    ('one_plus_one_uni', YLeaf(YType.boolean, 'one-plus-one-uni')),
                                    ('one_plus_one_bi', YLeaf(YType.boolean, 'one-plus-one-bi')),
                                ])
                                self.rerouting = None
                                self.rerouting_no_et = None
                                self.one_to_n_protection_et = None
                                self.one_plus_one_uni = None
                                self.one_plus_one_bi = None
                                self._segment_path = lambda: "lsp-flags"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/protection/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LspFlags, ['rerouting', 'rerouting_no_et', 'one_to_n_protection_et', 'one_plus_one_uni', 'one_plus_one_bi'], name, value)


                        class LinkFlags(Entity):
                            """
                            PROTECTION Object Link Flags
                            
                            .. attribute:: enhanced
                            
                            	Indicates Enhanced Protection Scheme
                            	**type**\: bool
                            
                            .. attribute:: ded1_plus1
                            
                            	Dedicated 1+1 Protection
                            	**type**\: bool
                            
                            .. attribute:: ded1_to1
                            
                            	Dedicated 1\:1 Protection
                            	**type**\: bool
                            
                            .. attribute:: shared
                            
                            	Shared Link Layer Protection
                            	**type**\: bool
                            
                            .. attribute:: unprotected
                            
                            	LSP should not use any Link Layer Protection
                            	**type**\: bool
                            
                            .. attribute:: extra_traffic
                            
                            	LSP should use Links that are protecting other (primary) traffic
                            	**type**\: bool
                            
                            .. attribute:: reserved_bit1
                            
                            	Reserved Bit 1
                            	**type**\: bool
                            
                            .. attribute:: reserved_bit2
                            
                            	Reserved Bit 2
                            	**type**\: bool
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags, self).__init__()

                                self.yang_name = "link-flags"
                                self.yang_parent_name = "protection"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('enhanced', YLeaf(YType.boolean, 'enhanced')),
                                    ('ded1_plus1', YLeaf(YType.boolean, 'ded1-plus1')),
                                    ('ded1_to1', YLeaf(YType.boolean, 'ded1-to1')),
                                    ('shared', YLeaf(YType.boolean, 'shared')),
                                    ('unprotected', YLeaf(YType.boolean, 'unprotected')),
                                    ('extra_traffic', YLeaf(YType.boolean, 'extra-traffic')),
                                    ('reserved_bit1', YLeaf(YType.boolean, 'reserved-bit1')),
                                    ('reserved_bit2', YLeaf(YType.boolean, 'reserved-bit2')),
                                ])
                                self.enhanced = None
                                self.ded1_plus1 = None
                                self.ded1_to1 = None
                                self.shared = None
                                self.unprotected = None
                                self.extra_traffic = None
                                self.reserved_bit1 = None
                                self.reserved_bit2 = None
                                self._segment_path = lambda: "link-flags"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/protection/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Protection.LinkFlags, ['enhanced', 'ded1_plus1', 'ded1_to1', 'shared', 'unprotected', 'extra_traffic', 'reserved_bit1', 'reserved_bit2'], name, value)


                    class ReverseLsp(Entity):
                        """
                        Reverse LSP object
                        
                        .. attribute:: generic_traffic_spec
                        
                        	Generic Traffic Spec object
                        	**type**\:  :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec>`
                        
                        .. attribute:: ero
                        
                        	Explicit Route Sub Objects
                        	**type**\: list of  		 :py:class:`Ero <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero>`
                        
                        .. attribute:: unsup_sub_object
                        
                        	Unsupported REVERSE\_LSP Sub Objects
                        	**type**\: list of  		 :py:class:`UnsupSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.UnsupSubObject>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp, self).__init__()

                            self.yang_name = "reverse-lsp"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("generic-traffic-spec", ("generic_traffic_spec", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec))])
                            self._child_list_classes = OrderedDict([("ero", ("ero", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero)), ("unsup-sub-object", ("unsup_sub_object", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.UnsupSubObject))])
                            self._leafs = OrderedDict()

                            self.generic_traffic_spec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec()
                            self.generic_traffic_spec.parent = self
                            self._children_name_map["generic_traffic_spec"] = "generic-traffic-spec"
                            self._children_yang_names.add("generic-traffic-spec")

                            self.ero = YList(self)
                            self.unsup_sub_object = YList(self)
                            self._segment_path = lambda: "reverse-lsp"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp, [], name, value)


                        class GenericTrafficSpec(Entity):
                            """
                            Generic Traffic Spec object
                            
                            .. attribute:: g709otn_tspec
                            
                            	G709 OTN Sender Tspec
                            	**type**\:  :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec>`
                            
                            .. attribute:: intsrv_tspec
                            
                            	Integrated Services Sender Tspec
                            	**type**\:  :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec>`
                            
                            .. attribute:: tspec_type
                            
                            	TspecType
                            	**type**\:  :py:class:`RsvpMgmtTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspec>`
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec, self).__init__()

                                self.yang_name = "generic-traffic-spec"
                                self.yang_parent_name = "reverse-lsp"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("g709otn-tspec", ("g709otn_tspec", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec)), ("intsrv-tspec", ("intsrv_tspec", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tspec_type', YLeaf(YType.enumeration, 'tspec-type')),
                                ])
                                self.tspec_type = None

                                self.g709otn_tspec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec()
                                self.g709otn_tspec.parent = self
                                self._children_name_map["g709otn_tspec"] = "g709otn-tspec"
                                self._children_yang_names.add("g709otn-tspec")

                                self.intsrv_tspec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec()
                                self.intsrv_tspec.parent = self
                                self._children_name_map["intsrv_tspec"] = "intsrv-tspec"
                                self._children_yang_names.add("intsrv-tspec")
                                self._segment_path = lambda: "generic-traffic-spec"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec, ['tspec_type'], name, value)


                            class G709OtnTspec(Entity):
                                """
                                G709 OTN Sender Tspec
                                
                                .. attribute:: traffic_signal_type
                                
                                	G709 OTN Traffic Signal Type (Refer G709 v3)
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: traffic_nvc
                                
                                	G709 OTN Traffic NVC
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_multiplier
                                
                                	G709 OTN Traffic Multiplier
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: traffic_bit_rate
                                
                                	G709 OTN Traffic Bit Rate
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec, self).__init__()

                                    self.yang_name = "g709otn-tspec"
                                    self.yang_parent_name = "generic-traffic-spec"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('traffic_signal_type', YLeaf(YType.uint8, 'traffic-signal-type')),
                                        ('traffic_nvc', YLeaf(YType.uint16, 'traffic-nvc')),
                                        ('traffic_multiplier', YLeaf(YType.uint16, 'traffic-multiplier')),
                                        ('traffic_bit_rate', YLeaf(YType.uint64, 'traffic-bit-rate')),
                                    ])
                                    self.traffic_signal_type = None
                                    self.traffic_nvc = None
                                    self.traffic_multiplier = None
                                    self.traffic_bit_rate = None
                                    self._segment_path = lambda: "g709otn-tspec"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/generic-traffic-spec/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.G709OtnTspec, ['traffic_signal_type', 'traffic_nvc', 'traffic_multiplier', 'traffic_bit_rate'], name, value)


                            class IntsrvTspec(Entity):
                                """
                                Integrated Services Sender Tspec
                                
                                .. attribute:: traffic_average_rate
                                
                                	Traffic Average Rate in bytes per second
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: byte/s
                                
                                .. attribute:: traffic_max_burst
                                
                                	Traffic Maximum Burst
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: traffic_peak_rate
                                
                                	Traffic Peak Rate in bytes per second
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: byte/s
                                
                                .. attribute:: traffic_min_unit
                                
                                	Traffic Minimum Unit
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: traffic_max_unit
                                
                                	Traffic Maximum Unit
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec, self).__init__()

                                    self.yang_name = "intsrv-tspec"
                                    self.yang_parent_name = "generic-traffic-spec"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                                        ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                                        ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                                        ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                                        ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                                    ])
                                    self.traffic_average_rate = None
                                    self.traffic_max_burst = None
                                    self.traffic_peak_rate = None
                                    self.traffic_min_unit = None
                                    self.traffic_max_unit = None
                                    self._segment_path = lambda: "intsrv-tspec"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/generic-traffic-spec/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.GenericTrafficSpec.IntsrvTspec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


                        class Ero(Entity):
                            """
                            Explicit Route Sub Objects
                            
                            .. attribute:: ipv4ero_sub_object
                            
                            	IPV4 ERO Sub Object
                            	**type**\:  :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject>`
                            
                            .. attribute:: unnumbered_ero_sub_object
                            
                            	Unnumbered ERO Sub Object
                            	**type**\:  :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject>`
                            
                            .. attribute:: ero_type
                            
                            	EROType
                            	**type**\:  :py:class:`RsvpMgmtEroSubobj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobj>`
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero, self).__init__()

                                self.yang_name = "ero"
                                self.yang_parent_name = "reverse-lsp"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("ipv4ero-sub-object", ("ipv4ero_sub_object", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject)), ("unnumbered-ero-sub-object", ("unnumbered_ero_sub_object", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('ero_type', YLeaf(YType.enumeration, 'ero-type')),
                                ])
                                self.ero_type = None

                                self.ipv4ero_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject()
                                self.ipv4ero_sub_object.parent = self
                                self._children_name_map["ipv4ero_sub_object"] = "ipv4ero-sub-object"
                                self._children_yang_names.add("ipv4ero-sub-object")

                                self.unnumbered_ero_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject()
                                self.unnumbered_ero_sub_object.parent = self
                                self._children_name_map["unnumbered_ero_sub_object"] = "unnumbered-ero-sub-object"
                                self._children_yang_names.add("unnumbered-ero-sub-object")
                                self._segment_path = lambda: "ero"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero, ['ero_type'], name, value)


                            class Ipv4EroSubObject(Entity):
                                """
                                IPV4 ERO Sub Object
                                
                                .. attribute:: is_strict_route
                                
                                	ERO Entry Is Strict
                                	**type**\: bool
                                
                                .. attribute:: ero_address
                                
                                	The ERO IPV4 Address
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length
                                
                                	ERO Prefix Length
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject, self).__init__()

                                    self.yang_name = "ipv4ero-sub-object"
                                    self.yang_parent_name = "ero"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                                        ('ero_address', YLeaf(YType.str, 'ero-address')),
                                        ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                    ])
                                    self.is_strict_route = None
                                    self.ero_address = None
                                    self.prefix_length = None
                                    self._segment_path = lambda: "ipv4ero-sub-object"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/ero/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.Ipv4EroSubObject, ['is_strict_route', 'ero_address', 'prefix_length'], name, value)


                            class UnnumberedEroSubObject(Entity):
                                """
                                Unnumbered ERO Sub Object
                                
                                .. attribute:: is_strict_route
                                
                                	ERO Entry Is Strict
                                	**type**\: bool
                                
                                .. attribute:: ero_interface_id
                                
                                	The Interface ID in ERO
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: ero_router_id
                                
                                	The Router ID in ERO
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: status
                                
                                	Status of ERO
                                	**type**\:  :py:class:`RsvpMgmtEroSubobjStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatus>`
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject, self).__init__()

                                    self.yang_name = "unnumbered-ero-sub-object"
                                    self.yang_parent_name = "ero"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                                        ('ero_interface_id', YLeaf(YType.uint32, 'ero-interface-id')),
                                        ('ero_router_id', YLeaf(YType.str, 'ero-router-id')),
                                        ('status', YLeaf(YType.enumeration, 'status')),
                                    ])
                                    self.is_strict_route = None
                                    self.ero_interface_id = None
                                    self.ero_router_id = None
                                    self.status = None
                                    self._segment_path = lambda: "unnumbered-ero-sub-object"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/ero/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.Ero.UnnumberedEroSubObject, ['is_strict_route', 'ero_interface_id', 'ero_router_id', 'status'], name, value)


                        class UnsupSubObject(Entity):
                            """
                            Unsupported REVERSE\_LSP Sub Objects
                            
                            .. attribute:: rsvp_mgmt_rev_lsp_unsupported_subobj
                            
                            	rsvp mgmt rev lsp unsupported subobj
                            	**type**\: list of int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.UnsupSubObject, self).__init__()

                                self.yang_name = "unsup-sub-object"
                                self.yang_parent_name = "reverse-lsp"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rsvp_mgmt_rev_lsp_unsupported_subobj', YLeafList(YType.uint8, 'rsvp-mgmt-rev-lsp-unsupported-subobj')),
                                ])
                                self.rsvp_mgmt_rev_lsp_unsupported_subobj = []
                                self._segment_path = lambda: "unsup-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.ReverseLsp.UnsupSubObject, ['rsvp_mgmt_rev_lsp_unsupported_subobj'], name, value)


                    class Ero(Entity):
                        """
                        Explicit Route Sub Objects
                        
                        .. attribute:: ipv4ero_sub_object
                        
                        	IPV4 ERO Sub Object
                        	**type**\:  :py:class:`Ipv4EroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject>`
                        
                        .. attribute:: unnumbered_ero_sub_object
                        
                        	Unnumbered ERO Sub Object
                        	**type**\:  :py:class:`UnnumberedEroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject>`
                        
                        .. attribute:: ero_type
                        
                        	EROType
                        	**type**\:  :py:class:`RsvpMgmtEroSubobj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobj>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero, self).__init__()

                            self.yang_name = "ero"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ipv4ero-sub-object", ("ipv4ero_sub_object", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject)), ("unnumbered-ero-sub-object", ("unnumbered_ero_sub_object", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('ero_type', YLeaf(YType.enumeration, 'ero-type')),
                            ])
                            self.ero_type = None

                            self.ipv4ero_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject()
                            self.ipv4ero_sub_object.parent = self
                            self._children_name_map["ipv4ero_sub_object"] = "ipv4ero-sub-object"
                            self._children_yang_names.add("ipv4ero-sub-object")

                            self.unnumbered_ero_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject()
                            self.unnumbered_ero_sub_object.parent = self
                            self._children_name_map["unnumbered_ero_sub_object"] = "unnumbered-ero-sub-object"
                            self._children_yang_names.add("unnumbered-ero-sub-object")
                            self._segment_path = lambda: "ero"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero, ['ero_type'], name, value)


                        class Ipv4EroSubObject(Entity):
                            """
                            IPV4 ERO Sub Object
                            
                            .. attribute:: is_strict_route
                            
                            	ERO Entry Is Strict
                            	**type**\: bool
                            
                            .. attribute:: ero_address
                            
                            	The ERO IPV4 Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	ERO Prefix Length
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject, self).__init__()

                                self.yang_name = "ipv4ero-sub-object"
                                self.yang_parent_name = "ero"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                                    ('ero_address', YLeaf(YType.str, 'ero-address')),
                                    ('prefix_length', YLeaf(YType.uint8, 'prefix-length')),
                                ])
                                self.is_strict_route = None
                                self.ero_address = None
                                self.prefix_length = None
                                self._segment_path = lambda: "ipv4ero-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/ero/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.Ipv4EroSubObject, ['is_strict_route', 'ero_address', 'prefix_length'], name, value)


                        class UnnumberedEroSubObject(Entity):
                            """
                            Unnumbered ERO Sub Object
                            
                            .. attribute:: is_strict_route
                            
                            	ERO Entry Is Strict
                            	**type**\: bool
                            
                            .. attribute:: ero_interface_id
                            
                            	The Interface ID in ERO
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ero_router_id
                            
                            	The Router ID in ERO
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: status
                            
                            	Status of ERO
                            	**type**\:  :py:class:`RsvpMgmtEroSubobjStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtEroSubobjStatus>`
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject, self).__init__()

                                self.yang_name = "unnumbered-ero-sub-object"
                                self.yang_parent_name = "ero"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('is_strict_route', YLeaf(YType.boolean, 'is-strict-route')),
                                    ('ero_interface_id', YLeaf(YType.uint32, 'ero-interface-id')),
                                    ('ero_router_id', YLeaf(YType.str, 'ero-router-id')),
                                    ('status', YLeaf(YType.enumeration, 'status')),
                                ])
                                self.is_strict_route = None
                                self.ero_interface_id = None
                                self.ero_router_id = None
                                self.status = None
                                self._segment_path = lambda: "unnumbered-ero-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/ero/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Ero.UnnumberedEroSubObject, ['is_strict_route', 'ero_interface_id', 'ero_router_id', 'status'], name, value)


                    class Rro(Entity):
                        """
                        Record Route Sub Objects
                        
                        .. attribute:: ipv4rro_sub_object
                        
                        	IPV4 RRO Sub Object
                        	**type**\:  :py:class:`Ipv4RroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject>`
                        
                        .. attribute:: label_rro_sub_object
                        
                        	Label RRO Sub Object
                        	**type**\:  :py:class:`LabelRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject>`
                        
                        .. attribute:: unnumbered_rro_sub_object
                        
                        	Unnumbered RRO Sub Object
                        	**type**\:  :py:class:`UnnumberedRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject>`
                        
                        .. attribute:: srlg_rro_sub_object
                        
                        	SRLG RRO Sub Object
                        	**type**\:  :py:class:`SrlgRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject>`
                        
                        .. attribute:: rro_type
                        
                        	RROType
                        	**type**\:  :py:class:`RsvpMgmtRroSubobj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRroSubobj>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro, self).__init__()

                            self.yang_name = "rro"
                            self.yang_parent_name = "psb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ipv4rro-sub-object", ("ipv4rro_sub_object", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject)), ("label-rro-sub-object", ("label_rro_sub_object", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject)), ("unnumbered-rro-sub-object", ("unnumbered_rro_sub_object", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject)), ("srlg-rro-sub-object", ("srlg_rro_sub_object", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('rro_type', YLeaf(YType.enumeration, 'rro-type')),
                            ])
                            self.rro_type = None

                            self.ipv4rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject()
                            self.ipv4rro_sub_object.parent = self
                            self._children_name_map["ipv4rro_sub_object"] = "ipv4rro-sub-object"
                            self._children_yang_names.add("ipv4rro-sub-object")

                            self.label_rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject()
                            self.label_rro_sub_object.parent = self
                            self._children_name_map["label_rro_sub_object"] = "label-rro-sub-object"
                            self._children_yang_names.add("label-rro-sub-object")

                            self.unnumbered_rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject()
                            self.unnumbered_rro_sub_object.parent = self
                            self._children_name_map["unnumbered_rro_sub_object"] = "unnumbered-rro-sub-object"
                            self._children_yang_names.add("unnumbered-rro-sub-object")

                            self.srlg_rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject()
                            self.srlg_rro_sub_object.parent = self
                            self._children_name_map["srlg_rro_sub_object"] = "srlg-rro-sub-object"
                            self._children_yang_names.add("srlg-rro-sub-object")
                            self._segment_path = lambda: "rro"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro, ['rro_type'], name, value)


                        class Ipv4RroSubObject(Entity):
                            """
                            IPV4 RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO IPV4 Subobject Flags
                            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags>`
                            
                            .. attribute:: rro_address
                            
                            	The RRO IPV4 Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject, self).__init__()

                                self.yang_name = "ipv4rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("flags", ("flags", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rro_address', YLeaf(YType.str, 'rro-address')),
                                ])
                                self.rro_address = None

                                self.flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags()
                                self.flags.parent = self
                                self._children_name_map["flags"] = "flags"
                                self._children_yang_names.add("flags")
                                self._segment_path = lambda: "ipv4rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject, ['rro_address'], name, value)


                            class Flags(Entity):
                                """
                                The RRO IPV4 Subobject Flags
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\: bool
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags, self).__init__()

                                    self.yang_name = "flags"
                                    self.yang_parent_name = "ipv4rro-sub-object"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_protection_available', YLeaf(YType.boolean, 'is-protection-available')),
                                        ('is_protection_in_use', YLeaf(YType.boolean, 'is-protection-in-use')),
                                        ('is_bandwidth_protected', YLeaf(YType.boolean, 'is-bandwidth-protected')),
                                        ('is_node_protection_available', YLeaf(YType.boolean, 'is-node-protection-available')),
                                        ('is_node_id', YLeaf(YType.boolean, 'is-node-id')),
                                    ])
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_protection_available = None
                                    self.is_node_id = None
                                    self._segment_path = lambda: "flags"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/ipv4rro-sub-object/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.Ipv4RroSubObject.Flags, ['is_protection_available', 'is_protection_in_use', 'is_bandwidth_protected', 'is_node_protection_available', 'is_node_id'], name, value)


                        class LabelRroSubObject(Entity):
                            """
                            Label RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Label Flags
                            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags>`
                            
                            .. attribute:: label
                            
                            	The RRO Subobject Label Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: is_label_variable_length
                            
                            	Is the RRO Subobject Label Variable Length
                            	**type**\: bool
                            
                            .. attribute:: variable_length_label
                            
                            	The RRO Subobject Variable Length Label
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject, self).__init__()

                                self.yang_name = "label-rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("flags", ("flags", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label', YLeaf(YType.uint32, 'label')),
                                    ('is_label_variable_length', YLeaf(YType.boolean, 'is-label-variable-length')),
                                    ('variable_length_label', YLeafList(YType.uint32, 'variable-length-label')),
                                ])
                                self.label = None
                                self.is_label_variable_length = None
                                self.variable_length_label = []

                                self.flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags()
                                self.flags.parent = self
                                self._children_name_map["flags"] = "flags"
                                self._children_yang_names.add("flags")
                                self._segment_path = lambda: "label-rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject, ['label', 'is_label_variable_length', 'variable_length_label'], name, value)


                            class Flags(Entity):
                                """
                                The RRO Subobject Label Flags
                                
                                .. attribute:: is_global_label
                                
                                	Label is Global across all interfaces
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags, self).__init__()

                                    self.yang_name = "flags"
                                    self.yang_parent_name = "label-rro-sub-object"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_global_label', YLeaf(YType.boolean, 'is-global-label')),
                                    ])
                                    self.is_global_label = None
                                    self._segment_path = lambda: "flags"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/label-rro-sub-object/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.LabelRroSubObject.Flags, ['is_global_label'], name, value)


                        class UnnumberedRroSubObject(Entity):
                            """
                            Unnumbered RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Unnumbered Flags
                            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags>`
                            
                            .. attribute:: interface_address
                            
                            	The RRO Interface Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: interface_id
                            
                            	The RRO Interface ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject, self).__init__()

                                self.yang_name = "unnumbered-rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("flags", ("flags", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('interface_address', YLeaf(YType.str, 'interface-address')),
                                    ('interface_id', YLeaf(YType.uint32, 'interface-id')),
                                ])
                                self.interface_address = None
                                self.interface_id = None

                                self.flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags()
                                self.flags.parent = self
                                self._children_name_map["flags"] = "flags"
                                self._children_yang_names.add("flags")
                                self._segment_path = lambda: "unnumbered-rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject, ['interface_address', 'interface_id'], name, value)


                            class Flags(Entity):
                                """
                                The RRO Subobject Unnumbered Flags
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\: bool
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags, self).__init__()

                                    self.yang_name = "flags"
                                    self.yang_parent_name = "unnumbered-rro-sub-object"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_protection_available', YLeaf(YType.boolean, 'is-protection-available')),
                                        ('is_protection_in_use', YLeaf(YType.boolean, 'is-protection-in-use')),
                                        ('is_bandwidth_protected', YLeaf(YType.boolean, 'is-bandwidth-protected')),
                                        ('is_node_protection_available', YLeaf(YType.boolean, 'is-node-protection-available')),
                                        ('is_node_id', YLeaf(YType.boolean, 'is-node-id')),
                                    ])
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_protection_available = None
                                    self.is_node_id = None
                                    self._segment_path = lambda: "flags"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/unnumbered-rro-sub-object/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.UnnumberedRroSubObject.Flags, ['is_protection_available', 'is_protection_in_use', 'is_bandwidth_protected', 'is_node_protection_available', 'is_node_id'], name, value)


                        class SrlgRroSubObject(Entity):
                            """
                            SRLG RRO Sub Object
                            
                            .. attribute:: srl_gs
                            
                            	The RRO Subobject SRLGs
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject, self).__init__()

                                self.yang_name = "srlg-rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('srl_gs', YLeafList(YType.uint32, 'srl-gs')),
                                ])
                                self.srl_gs = []
                                self._segment_path = lambda: "srlg-rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.PsbInfo.Rro.SrlgRroSubObject, ['srl_gs'], name, value)


                class RsbInfo(Entity):
                    """
                    Reservation Info
                    
                    .. attribute:: generic_out_label
                    
                    	Generic Label for outbound traffic
                    	**type**\:  :py:class:`GenericOutLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel>`
                    
                    .. attribute:: flow_spec
                    
                    	Flow spec object
                    	**type**\:  :py:class:`FlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec>`
                    
                    .. attribute:: generic_flow_spec
                    
                    	Generic Flow Spec object
                    	**type**\:  :py:class:`GenericFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec>`
                    
                    .. attribute:: is_valid
                    
                    	Entry validity
                    	**type**\: bool
                    
                    .. attribute:: destination_address
                    
                    	Destination address
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: out_interface
                    
                    	Interface on which outbound message was sent
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: out_label
                    
                    	Label for outbound traffic
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: backup_interface
                    
                    	Backup tunnel interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: backup_label
                    
                    	Backup label
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: is_rro_valid
                    
                    	RRO validity
                    	**type**\: bool
                    
                    .. attribute:: is_flow_spec_valid
                    
                    	FlowSpec validity
                    	**type**\: bool
                    
                    .. attribute:: rro
                    
                    	Record route object
                    	**type**\: list of  		 :py:class:`Rro <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo, self).__init__()

                        self.yang_name = "rsb-info"
                        self.yang_parent_name = "psb-rsb-info"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("generic-out-label", ("generic_out_label", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel)), ("flow-spec", ("flow_spec", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec)), ("generic-flow-spec", ("generic_flow_spec", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec))])
                        self._child_list_classes = OrderedDict([("rro", ("rro", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro))])
                        self._leafs = OrderedDict([
                            ('is_valid', YLeaf(YType.boolean, 'is-valid')),
                            ('destination_address', YLeaf(YType.str, 'destination-address')),
                            ('out_interface', YLeaf(YType.str, 'out-interface')),
                            ('out_label', YLeaf(YType.uint32, 'out-label')),
                            ('backup_interface', YLeaf(YType.str, 'backup-interface')),
                            ('backup_label', YLeaf(YType.uint32, 'backup-label')),
                            ('is_rro_valid', YLeaf(YType.boolean, 'is-rro-valid')),
                            ('is_flow_spec_valid', YLeaf(YType.boolean, 'is-flow-spec-valid')),
                        ])
                        self.is_valid = None
                        self.destination_address = None
                        self.out_interface = None
                        self.out_label = None
                        self.backup_interface = None
                        self.backup_label = None
                        self.is_rro_valid = None
                        self.is_flow_spec_valid = None

                        self.generic_out_label = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel()
                        self.generic_out_label.parent = self
                        self._children_name_map["generic_out_label"] = "generic-out-label"
                        self._children_yang_names.add("generic-out-label")

                        self.flow_spec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec()
                        self.flow_spec.parent = self
                        self._children_name_map["flow_spec"] = "flow-spec"
                        self._children_yang_names.add("flow-spec")

                        self.generic_flow_spec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec()
                        self.generic_flow_spec.parent = self
                        self._children_name_map["generic_flow_spec"] = "generic-flow-spec"
                        self._children_yang_names.add("generic-flow-spec")

                        self.rro = YList(self)
                        self._segment_path = lambda: "rsb-info"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo, ['is_valid', 'destination_address', 'out_interface', 'out_label', 'backup_interface', 'backup_label', 'is_rro_valid', 'is_flow_spec_valid'], name, value)


                    class GenericOutLabel(Entity):
                        """
                        Generic Label for outbound traffic
                        
                        .. attribute:: generalized_label
                        
                        	Generalized Label
                        	**type**\:  :py:class:`GeneralizedLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel>`
                        
                        .. attribute:: generic_label_type
                        
                        	GenericLabelType
                        	**type**\:  :py:class:`RsvpMgmtGenericLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtGenericLabel>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel, self).__init__()

                            self.yang_name = "generic-out-label"
                            self.yang_parent_name = "rsb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("generalized-label", ("generalized_label", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('generic_label_type', YLeaf(YType.enumeration, 'generic-label-type')),
                            ])
                            self.generic_label_type = None

                            self.generalized_label = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel()
                            self.generalized_label.parent = self
                            self._children_name_map["generalized_label"] = "generalized-label"
                            self._children_yang_names.add("generalized-label")
                            self._segment_path = lambda: "generic-out-label"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel, ['generic_label_type'], name, value)


                        class GeneralizedLabel(Entity):
                            """
                            Generalized Label
                            
                            .. attribute:: value
                            
                            	Generalized Label Value
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel, self).__init__()

                                self.yang_name = "generalized-label"
                                self.yang_parent_name = "generic-out-label"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('value', YLeafList(YType.uint32, 'value')),
                                ])
                                self.value = []
                                self._segment_path = lambda: "generalized-label"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/generic-out-label/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericOutLabel.GeneralizedLabel, ['value'], name, value)


                    class FlowSpec(Entity):
                        """
                        Flow spec object
                        
                        .. attribute:: flow_average_rate
                        
                        	The Flow Average Rate in bytes per second
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: flow_max_burst
                        
                        	The Flow Maximum Burst
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: flow_peak_rate
                        
                        	The Flow Peak Rate in bytes per second
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: flow_min_unit
                        
                        	The Flow Minimum Unit
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: flow_max_unit
                        
                        	The Flow Maximum Unit
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: flow_requested_rate
                        
                        	The Flow Requested Rate in bytes per second
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: byte/s
                        
                        .. attribute:: flow_slack
                        
                        	The Flow Slack
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: flow_qos
                        
                        	The Flow Quality of Service
                        	**type**\:  :py:class:`RsvpMgmtQosServiceEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtQosServiceEnum>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec, self).__init__()

                            self.yang_name = "flow-spec"
                            self.yang_parent_name = "rsb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('flow_average_rate', YLeaf(YType.uint64, 'flow-average-rate')),
                                ('flow_max_burst', YLeaf(YType.uint64, 'flow-max-burst')),
                                ('flow_peak_rate', YLeaf(YType.uint64, 'flow-peak-rate')),
                                ('flow_min_unit', YLeaf(YType.uint32, 'flow-min-unit')),
                                ('flow_max_unit', YLeaf(YType.uint32, 'flow-max-unit')),
                                ('flow_requested_rate', YLeaf(YType.uint64, 'flow-requested-rate')),
                                ('flow_slack', YLeaf(YType.uint32, 'flow-slack')),
                                ('flow_qos', YLeaf(YType.enumeration, 'flow-qos')),
                            ])
                            self.flow_average_rate = None
                            self.flow_max_burst = None
                            self.flow_peak_rate = None
                            self.flow_min_unit = None
                            self.flow_max_unit = None
                            self.flow_requested_rate = None
                            self.flow_slack = None
                            self.flow_qos = None
                            self._segment_path = lambda: "flow-spec"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.FlowSpec, ['flow_average_rate', 'flow_max_burst', 'flow_peak_rate', 'flow_min_unit', 'flow_max_unit', 'flow_requested_rate', 'flow_slack', 'flow_qos'], name, value)


                    class GenericFlowSpec(Entity):
                        """
                        Generic Flow Spec object
                        
                        .. attribute:: g709otn_flow_spec
                        
                        	G709 OTN FlowSpec
                        	**type**\:  :py:class:`G709OtnFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec>`
                        
                        .. attribute:: flow_spec_type
                        
                        	FlowSpecType
                        	**type**\:  :py:class:`RsvpMgmtFlowSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFlowSpec>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec, self).__init__()

                            self.yang_name = "generic-flow-spec"
                            self.yang_parent_name = "rsb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("g709otn-flow-spec", ("g709otn_flow_spec", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('flow_spec_type', YLeaf(YType.enumeration, 'flow-spec-type')),
                            ])
                            self.flow_spec_type = None

                            self.g709otn_flow_spec = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec()
                            self.g709otn_flow_spec.parent = self
                            self._children_name_map["g709otn_flow_spec"] = "g709otn-flow-spec"
                            self._children_yang_names.add("g709otn-flow-spec")
                            self._segment_path = lambda: "generic-flow-spec"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec, ['flow_spec_type'], name, value)


                        class G709OtnFlowSpec(Entity):
                            """
                            G709 OTN FlowSpec
                            
                            .. attribute:: flow_signal_type
                            
                            	G709 OTN Flow Signal Type (Refer G709 v3)
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: flow_nvc
                            
                            	G709 OTN Flow NVC
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: flow_multiplier
                            
                            	G709 OTN Flow Multiplier
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: flow_bit_rate
                            
                            	G709 OTN Flow Bit Rate
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec, self).__init__()

                                self.yang_name = "g709otn-flow-spec"
                                self.yang_parent_name = "generic-flow-spec"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('flow_signal_type', YLeaf(YType.uint8, 'flow-signal-type')),
                                    ('flow_nvc', YLeaf(YType.uint16, 'flow-nvc')),
                                    ('flow_multiplier', YLeaf(YType.uint16, 'flow-multiplier')),
                                    ('flow_bit_rate', YLeaf(YType.uint64, 'flow-bit-rate')),
                                ])
                                self.flow_signal_type = None
                                self.flow_nvc = None
                                self.flow_multiplier = None
                                self.flow_bit_rate = None
                                self._segment_path = lambda: "g709otn-flow-spec"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/generic-flow-spec/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.GenericFlowSpec.G709OtnFlowSpec, ['flow_signal_type', 'flow_nvc', 'flow_multiplier', 'flow_bit_rate'], name, value)


                    class Rro(Entity):
                        """
                        Record route object
                        
                        .. attribute:: ipv4rro_sub_object
                        
                        	IPV4 RRO Sub Object
                        	**type**\:  :py:class:`Ipv4RroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject>`
                        
                        .. attribute:: label_rro_sub_object
                        
                        	Label RRO Sub Object
                        	**type**\:  :py:class:`LabelRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject>`
                        
                        .. attribute:: unnumbered_rro_sub_object
                        
                        	Unnumbered RRO Sub Object
                        	**type**\:  :py:class:`UnnumberedRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject>`
                        
                        .. attribute:: srlg_rro_sub_object
                        
                        	SRLG RRO Sub Object
                        	**type**\:  :py:class:`SrlgRroSubObject <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject>`
                        
                        .. attribute:: rro_type
                        
                        	RROType
                        	**type**\:  :py:class:`RsvpMgmtRroSubobj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRroSubobj>`
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro, self).__init__()

                            self.yang_name = "rro"
                            self.yang_parent_name = "rsb-info"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ipv4rro-sub-object", ("ipv4rro_sub_object", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject)), ("label-rro-sub-object", ("label_rro_sub_object", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject)), ("unnumbered-rro-sub-object", ("unnumbered_rro_sub_object", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject)), ("srlg-rro-sub-object", ("srlg_rro_sub_object", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('rro_type', YLeaf(YType.enumeration, 'rro-type')),
                            ])
                            self.rro_type = None

                            self.ipv4rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject()
                            self.ipv4rro_sub_object.parent = self
                            self._children_name_map["ipv4rro_sub_object"] = "ipv4rro-sub-object"
                            self._children_yang_names.add("ipv4rro-sub-object")

                            self.label_rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject()
                            self.label_rro_sub_object.parent = self
                            self._children_name_map["label_rro_sub_object"] = "label-rro-sub-object"
                            self._children_yang_names.add("label-rro-sub-object")

                            self.unnumbered_rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject()
                            self.unnumbered_rro_sub_object.parent = self
                            self._children_name_map["unnumbered_rro_sub_object"] = "unnumbered-rro-sub-object"
                            self._children_yang_names.add("unnumbered-rro-sub-object")

                            self.srlg_rro_sub_object = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject()
                            self.srlg_rro_sub_object.parent = self
                            self._children_name_map["srlg_rro_sub_object"] = "srlg-rro-sub-object"
                            self._children_yang_names.add("srlg-rro-sub-object")
                            self._segment_path = lambda: "rro"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro, ['rro_type'], name, value)


                        class Ipv4RroSubObject(Entity):
                            """
                            IPV4 RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO IPV4 Subobject Flags
                            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags>`
                            
                            .. attribute:: rro_address
                            
                            	The RRO IPV4 Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject, self).__init__()

                                self.yang_name = "ipv4rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("flags", ("flags", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rro_address', YLeaf(YType.str, 'rro-address')),
                                ])
                                self.rro_address = None

                                self.flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags()
                                self.flags.parent = self
                                self._children_name_map["flags"] = "flags"
                                self._children_yang_names.add("flags")
                                self._segment_path = lambda: "ipv4rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject, ['rro_address'], name, value)


                            class Flags(Entity):
                                """
                                The RRO IPV4 Subobject Flags
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\: bool
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags, self).__init__()

                                    self.yang_name = "flags"
                                    self.yang_parent_name = "ipv4rro-sub-object"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_protection_available', YLeaf(YType.boolean, 'is-protection-available')),
                                        ('is_protection_in_use', YLeaf(YType.boolean, 'is-protection-in-use')),
                                        ('is_bandwidth_protected', YLeaf(YType.boolean, 'is-bandwidth-protected')),
                                        ('is_node_protection_available', YLeaf(YType.boolean, 'is-node-protection-available')),
                                        ('is_node_id', YLeaf(YType.boolean, 'is-node-id')),
                                    ])
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_protection_available = None
                                    self.is_node_id = None
                                    self._segment_path = lambda: "flags"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/ipv4rro-sub-object/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.Ipv4RroSubObject.Flags, ['is_protection_available', 'is_protection_in_use', 'is_bandwidth_protected', 'is_node_protection_available', 'is_node_id'], name, value)


                        class LabelRroSubObject(Entity):
                            """
                            Label RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Label Flags
                            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags>`
                            
                            .. attribute:: label
                            
                            	The RRO Subobject Label Value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: is_label_variable_length
                            
                            	Is the RRO Subobject Label Variable Length
                            	**type**\: bool
                            
                            .. attribute:: variable_length_label
                            
                            	The RRO Subobject Variable Length Label
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject, self).__init__()

                                self.yang_name = "label-rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("flags", ("flags", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('label', YLeaf(YType.uint32, 'label')),
                                    ('is_label_variable_length', YLeaf(YType.boolean, 'is-label-variable-length')),
                                    ('variable_length_label', YLeafList(YType.uint32, 'variable-length-label')),
                                ])
                                self.label = None
                                self.is_label_variable_length = None
                                self.variable_length_label = []

                                self.flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags()
                                self.flags.parent = self
                                self._children_name_map["flags"] = "flags"
                                self._children_yang_names.add("flags")
                                self._segment_path = lambda: "label-rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject, ['label', 'is_label_variable_length', 'variable_length_label'], name, value)


                            class Flags(Entity):
                                """
                                The RRO Subobject Label Flags
                                
                                .. attribute:: is_global_label
                                
                                	Label is Global across all interfaces
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags, self).__init__()

                                    self.yang_name = "flags"
                                    self.yang_parent_name = "label-rro-sub-object"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_global_label', YLeaf(YType.boolean, 'is-global-label')),
                                    ])
                                    self.is_global_label = None
                                    self._segment_path = lambda: "flags"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/label-rro-sub-object/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.LabelRroSubObject.Flags, ['is_global_label'], name, value)


                        class UnnumberedRroSubObject(Entity):
                            """
                            Unnumbered RRO Sub Object
                            
                            .. attribute:: flags
                            
                            	The RRO Subobject Unnumbered Flags
                            	**type**\:  :py:class:`Flags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags>`
                            
                            .. attribute:: interface_address
                            
                            	The RRO Interface Address
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: interface_id
                            
                            	The RRO Interface ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject, self).__init__()

                                self.yang_name = "unnumbered-rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("flags", ("flags", Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('interface_address', YLeaf(YType.str, 'interface-address')),
                                    ('interface_id', YLeaf(YType.uint32, 'interface-id')),
                                ])
                                self.interface_address = None
                                self.interface_id = None

                                self.flags = Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags()
                                self.flags.parent = self
                                self._children_name_map["flags"] = "flags"
                                self._children_yang_names.add("flags")
                                self._segment_path = lambda: "unnumbered-rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject, ['interface_address', 'interface_id'], name, value)


                            class Flags(Entity):
                                """
                                The RRO Subobject Unnumbered Flags
                                
                                .. attribute:: is_protection_available
                                
                                	Local Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_protection_in_use
                                
                                	Local Protection In Use
                                	**type**\: bool
                                
                                .. attribute:: is_bandwidth_protected
                                
                                	Bandwidth Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_protection_available
                                
                                	Node Protection Available
                                	**type**\: bool
                                
                                .. attribute:: is_node_id
                                
                                	Node ID In Use
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ip-rsvp-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags, self).__init__()

                                    self.yang_name = "flags"
                                    self.yang_parent_name = "unnumbered-rro-sub-object"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('is_protection_available', YLeaf(YType.boolean, 'is-protection-available')),
                                        ('is_protection_in_use', YLeaf(YType.boolean, 'is-protection-in-use')),
                                        ('is_bandwidth_protected', YLeaf(YType.boolean, 'is-bandwidth-protected')),
                                        ('is_node_protection_available', YLeaf(YType.boolean, 'is-node-protection-available')),
                                        ('is_node_id', YLeaf(YType.boolean, 'is-node-id')),
                                    ])
                                    self.is_protection_available = None
                                    self.is_protection_in_use = None
                                    self.is_bandwidth_protected = None
                                    self.is_node_protection_available = None
                                    self.is_node_id = None
                                    self._segment_path = lambda: "flags"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/unnumbered-rro-sub-object/%s" % self._segment_path()

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.UnnumberedRroSubObject.Flags, ['is_protection_available', 'is_protection_in_use', 'is_bandwidth_protected', 'is_node_protection_available', 'is_node_id'], name, value)


                        class SrlgRroSubObject(Entity):
                            """
                            SRLG RRO Sub Object
                            
                            .. attribute:: srl_gs
                            
                            	The RRO Subobject SRLGs
                            	**type**\: list of int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ip-rsvp-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject, self).__init__()

                                self.yang_name = "srlg-rro-sub-object"
                                self.yang_parent_name = "rro"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('srl_gs', YLeafList(YType.uint32, 'srl-gs')),
                                ])
                                self.srl_gs = []
                                self._segment_path = lambda: "srlg-rro-sub-object"
                                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(Rsvp.SessionDetaileds.SessionDetailed.PsbRsbInfo.RsbInfo.Rro.SrlgRroSubObject, ['srl_gs'], name, value)


    class HelloInstanceDetails(Entity):
        """
        Table of detailed info about hello instances
        
        .. attribute:: hello_instance_detail
        
        	Detailed info for a single hello instance
        	**type**\: list of  		 :py:class:`HelloInstanceDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInstanceDetails.HelloInstanceDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.HelloInstanceDetails, self).__init__()

            self.yang_name = "hello-instance-details"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("hello-instance-detail", ("hello_instance_detail", Rsvp.HelloInstanceDetails.HelloInstanceDetail))])
            self._leafs = OrderedDict()

            self.hello_instance_detail = YList(self)
            self._segment_path = lambda: "hello-instance-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.HelloInstanceDetails, [], name, value)


        class HelloInstanceDetail(Entity):
            """
            Detailed info for a single hello instance
            
            .. attribute:: source_address  (key)
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address  (key)
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: up_time
            
            	Hello up time
            	**type**\:  :py:class:`UpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInstanceDetails.HelloInstanceDetail.UpTime>`
            
            .. attribute:: communication_lost_time
            
            	Time when communication was lost
            	**type**\:  :py:class:`CommunicationLostTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime>`
            
            .. attribute:: source_address_xr
            
            	Source address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_address_xr
            
            	Destination address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: hello_instance_owner
            
            	Hello instance owner
            	**type**\:  :py:class:`RsvpMgmtHelloInstanceOwner <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstanceOwner>`
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor Hello state
            	**type**\:  :py:class:`RsvpMgmtHelloState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloState>`
            
            .. attribute:: instance_type
            
            	Hello instance type
            	**type**\:  :py:class:`RsvpMgmtHelloInstance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloInstance>`
            
            .. attribute:: hello_interface
            
            	Interface to use
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: hello_interval
            
            	Hello Interval
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: missed_acks_allowed
            
            	Number of missed Hello allowed
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: source_instance
            
            	Source Instance
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: destination_instance
            
            	Destination Instance
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: communication_lost_reason
            
            	Reason why communication was lost
            	**type**\:  :py:class:`RsvpMgmtHelloDownReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloDownReason>`
            
            .. attribute:: total_communication_lost
            
            	Total number of times communication got lost
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_hello_missed
            
            	Lost Comm. Hello missed count
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_wrong_source_inst
            
            	Count of lost comm. due to wrong Source Inst
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_wrong_destination_inst
            
            	Count of lost comm. due to wrong Destination Inst
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_interface_down
            
            	Count of lost comm. due to interface down
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: communication_lost_neighbor_disabled_hello
            
            	Count of lost comm. due to nbor disabling Hellos
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: hello_messages_sent
            
            	Number of hello messages sent
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: hello_messages_received
            
            	Number of hello messages received
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            .. attribute:: hello_request_suppressed
            
            	Count of Hello Requests suppessed
            	**type**\: int
            
            	**range:** 0..18446744073709551615
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.HelloInstanceDetails.HelloInstanceDetail, self).__init__()

                self.yang_name = "hello-instance-detail"
                self.yang_parent_name = "hello-instance-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['source_address','destination_address']
                self._child_container_classes = OrderedDict([("up-time", ("up_time", Rsvp.HelloInstanceDetails.HelloInstanceDetail.UpTime)), ("communication-lost-time", ("communication_lost_time", Rsvp.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('source_address_xr', YLeaf(YType.str, 'source-address-xr')),
                    ('destination_address_xr', YLeaf(YType.str, 'destination-address-xr')),
                    ('hello_instance_owner', YLeaf(YType.enumeration, 'hello-instance-owner')),
                    ('neighbor_hello_state', YLeaf(YType.enumeration, 'neighbor-hello-state')),
                    ('instance_type', YLeaf(YType.enumeration, 'instance-type')),
                    ('hello_interface', YLeaf(YType.str, 'hello-interface')),
                    ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                    ('missed_acks_allowed', YLeaf(YType.uint32, 'missed-acks-allowed')),
                    ('source_instance', YLeaf(YType.uint32, 'source-instance')),
                    ('destination_instance', YLeaf(YType.uint32, 'destination-instance')),
                    ('communication_lost_reason', YLeaf(YType.enumeration, 'communication-lost-reason')),
                    ('total_communication_lost', YLeaf(YType.uint16, 'total-communication-lost')),
                    ('communication_lost_hello_missed', YLeaf(YType.uint16, 'communication-lost-hello-missed')),
                    ('communication_lost_wrong_source_inst', YLeaf(YType.uint16, 'communication-lost-wrong-source-inst')),
                    ('communication_lost_wrong_destination_inst', YLeaf(YType.uint16, 'communication-lost-wrong-destination-inst')),
                    ('communication_lost_interface_down', YLeaf(YType.uint16, 'communication-lost-interface-down')),
                    ('communication_lost_neighbor_disabled_hello', YLeaf(YType.uint16, 'communication-lost-neighbor-disabled-hello')),
                    ('hello_messages_sent', YLeaf(YType.uint64, 'hello-messages-sent')),
                    ('hello_messages_received', YLeaf(YType.uint64, 'hello-messages-received')),
                    ('hello_request_suppressed', YLeaf(YType.uint64, 'hello-request-suppressed')),
                ])
                self.source_address = None
                self.destination_address = None
                self.source_address_xr = None
                self.destination_address_xr = None
                self.hello_instance_owner = None
                self.neighbor_hello_state = None
                self.instance_type = None
                self.hello_interface = None
                self.hello_interval = None
                self.missed_acks_allowed = None
                self.source_instance = None
                self.destination_instance = None
                self.communication_lost_reason = None
                self.total_communication_lost = None
                self.communication_lost_hello_missed = None
                self.communication_lost_wrong_source_inst = None
                self.communication_lost_wrong_destination_inst = None
                self.communication_lost_interface_down = None
                self.communication_lost_neighbor_disabled_hello = None
                self.hello_messages_sent = None
                self.hello_messages_received = None
                self.hello_request_suppressed = None

                self.up_time = Rsvp.HelloInstanceDetails.HelloInstanceDetail.UpTime()
                self.up_time.parent = self
                self._children_name_map["up_time"] = "up-time"
                self._children_yang_names.add("up-time")

                self.communication_lost_time = Rsvp.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime()
                self.communication_lost_time.parent = self
                self._children_name_map["communication_lost_time"] = "communication-lost-time"
                self._children_yang_names.add("communication-lost-time")
                self._segment_path = lambda: "hello-instance-detail" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-instance-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.HelloInstanceDetails.HelloInstanceDetail, ['source_address', 'destination_address', 'source_address_xr', 'destination_address_xr', 'hello_instance_owner', 'neighbor_hello_state', 'instance_type', 'hello_interface', 'hello_interval', 'missed_acks_allowed', 'source_instance', 'destination_instance', 'communication_lost_reason', 'total_communication_lost', 'communication_lost_hello_missed', 'communication_lost_wrong_source_inst', 'communication_lost_wrong_destination_inst', 'communication_lost_interface_down', 'communication_lost_neighbor_disabled_hello', 'hello_messages_sent', 'hello_messages_received', 'hello_request_suppressed'], name, value)


            class UpTime(Entity):
                """
                Hello up time
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.HelloInstanceDetails.HelloInstanceDetail.UpTime, self).__init__()

                    self.yang_name = "up-time"
                    self.yang_parent_name = "hello-instance-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "up-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.HelloInstanceDetails.HelloInstanceDetail.UpTime, ['seconds', 'nanoseconds'], name, value)


            class CommunicationLostTime(Entity):
                """
                Time when communication was lost
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime, self).__init__()

                    self.yang_name = "communication-lost-time"
                    self.yang_parent_name = "hello-instance-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "communication-lost-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.HelloInstanceDetails.HelloInstanceDetail.CommunicationLostTime, ['seconds', 'nanoseconds'], name, value)


    class GlobalNeighborDetails(Entity):
        """
        Table of detailed info about global neighbors
        
        .. attribute:: global_neighbor_detail
        
        	Detail info for a single global neighbor
        	**type**\: list of  		 :py:class:`GlobalNeighborDetail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.GlobalNeighborDetails, self).__init__()

            self.yang_name = "global-neighbor-details"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("global-neighbor-detail", ("global_neighbor_detail", Rsvp.GlobalNeighborDetails.GlobalNeighborDetail))])
            self._leafs = OrderedDict()

            self.global_neighbor_detail = YList(self)
            self._segment_path = lambda: "global-neighbor-details"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.GlobalNeighborDetails, [], name, value)


        class GlobalNeighborDetail(Entity):
            """
            Detail info for a single global neighbor
            
            .. attribute:: neighbor_address  (key)
            
            	Address of global neighbor
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: global_neighbor_flags
            
            	Global Neighbor Flags
            	**type**\:  :py:class:`GlobalNeighborFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags>`
            
            .. attribute:: restart_time_left
            
            	How much restart time remains
            	**type**\:  :py:class:`RestartTimeLeft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft>`
            
            .. attribute:: restart_timer_expiry_time
            
            	When will restart timer expire
            	**type**\:  :py:class:`RestartTimerExpiryTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime>`
            
            .. attribute:: recovery_time_left
            
            	How much recovery timer remains
            	**type**\:  :py:class:`RecoveryTimeLeft <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft>`
            
            .. attribute:: recovery_timer_exp_time
            
            	Time at which recovery timer will expire
            	**type**\:  :py:class:`RecoveryTimerExpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime>`
            
            .. attribute:: is_gr_enabled
            
            	Is GR enabled
            	**type**\: bool
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: restart_state
            
            	Current restart state
            	**type**\:  :py:class:`RsvpMgmtRestartState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRestartState>`
            
            .. attribute:: restart_time
            
            	GR Restart Time (milliseconds)
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: is_restart_timer_running
            
            	Is GR restart timer running
            	**type**\: bool
            
            .. attribute:: recovery_time
            
            	GR Recovery Time (milliseconds)
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: is_recovery_timer_running
            
            	Is RSVP recovery timer running
            	**type**\: bool
            
            .. attribute:: hello_interval
            
            	Hello Interval (milliseconds)
            	**type**\: int
            
            	**range:** 0..4294967295
            
            	**units**\: millisecond
            
            .. attribute:: missed_hellos
            
            	Hello missed count
            	**type**\: int
            
            	**range:** 0..255
            
            .. attribute:: pending_states
            
            	Number of pending states for this neighbor
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: local_node_address
            
            	Local node address
            	**type**\: list of str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: interface_neighbor
            
            	Interface Neighbor List
            	**type**\: list of str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor's hello state
            	**type**\: list of   :py:class:`RsvpMgmtHelloState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloState>`
            
            .. attribute:: lost_communication_reason
            
            	Reason why communication was lost
            	**type**\: list of   :py:class:`RsvpMgmtHelloDownReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloDownReason>`
            
            .. attribute:: lost_communication_total
            
            	Total number of times communication got lost
            	**type**\: list of int
            
            	**range:** 0..65535
            
            .. attribute:: up_time
            
            	Hello up time
            	**type**\: list of  		 :py:class:`UpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.UpTime>`
            
            .. attribute:: lost_communication_time
            
            	Time when communication was lost
            	**type**\: list of  		 :py:class:`LostCommunicationTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.LostCommunicationTime>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail, self).__init__()

                self.yang_name = "global-neighbor-detail"
                self.yang_parent_name = "global-neighbor-details"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['neighbor_address']
                self._child_container_classes = OrderedDict([("global-neighbor-flags", ("global_neighbor_flags", Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags)), ("restart-time-left", ("restart_time_left", Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft)), ("restart-timer-expiry-time", ("restart_timer_expiry_time", Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime)), ("recovery-time-left", ("recovery_time_left", Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft)), ("recovery-timer-exp-time", ("recovery_timer_exp_time", Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime))])
                self._child_list_classes = OrderedDict([("up-time", ("up_time", Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.UpTime)), ("lost-communication-time", ("lost_communication_time", Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.LostCommunicationTime))])
                self._leafs = OrderedDict([
                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                    ('is_gr_enabled', YLeaf(YType.boolean, 'is-gr-enabled')),
                    ('node_address', YLeaf(YType.str, 'node-address')),
                    ('restart_state', YLeaf(YType.enumeration, 'restart-state')),
                    ('restart_time', YLeaf(YType.uint32, 'restart-time')),
                    ('is_restart_timer_running', YLeaf(YType.boolean, 'is-restart-timer-running')),
                    ('recovery_time', YLeaf(YType.uint32, 'recovery-time')),
                    ('is_recovery_timer_running', YLeaf(YType.boolean, 'is-recovery-timer-running')),
                    ('hello_interval', YLeaf(YType.uint32, 'hello-interval')),
                    ('missed_hellos', YLeaf(YType.uint8, 'missed-hellos')),
                    ('pending_states', YLeaf(YType.uint32, 'pending-states')),
                    ('local_node_address', YLeafList(YType.str, 'local-node-address')),
                    ('interface_neighbor', YLeafList(YType.str, 'interface-neighbor')),
                    ('neighbor_hello_state', YLeafList(YType.enumeration, 'neighbor-hello-state')),
                    ('lost_communication_reason', YLeafList(YType.enumeration, 'lost-communication-reason')),
                    ('lost_communication_total', YLeafList(YType.uint16, 'lost-communication-total')),
                ])
                self.neighbor_address = None
                self.is_gr_enabled = None
                self.node_address = None
                self.restart_state = None
                self.restart_time = None
                self.is_restart_timer_running = None
                self.recovery_time = None
                self.is_recovery_timer_running = None
                self.hello_interval = None
                self.missed_hellos = None
                self.pending_states = None
                self.local_node_address = []
                self.interface_neighbor = []
                self.neighbor_hello_state = []
                self.lost_communication_reason = []
                self.lost_communication_total = []

                self.global_neighbor_flags = Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags()
                self.global_neighbor_flags.parent = self
                self._children_name_map["global_neighbor_flags"] = "global-neighbor-flags"
                self._children_yang_names.add("global-neighbor-flags")

                self.restart_time_left = Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft()
                self.restart_time_left.parent = self
                self._children_name_map["restart_time_left"] = "restart-time-left"
                self._children_yang_names.add("restart-time-left")

                self.restart_timer_expiry_time = Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime()
                self.restart_timer_expiry_time.parent = self
                self._children_name_map["restart_timer_expiry_time"] = "restart-timer-expiry-time"
                self._children_yang_names.add("restart-timer-expiry-time")

                self.recovery_time_left = Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft()
                self.recovery_time_left.parent = self
                self._children_name_map["recovery_time_left"] = "recovery-time-left"
                self._children_yang_names.add("recovery-time-left")

                self.recovery_timer_exp_time = Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime()
                self.recovery_timer_exp_time.parent = self
                self._children_name_map["recovery_timer_exp_time"] = "recovery-timer-exp-time"
                self._children_yang_names.add("recovery-timer-exp-time")

                self.up_time = YList(self)
                self.lost_communication_time = YList(self)
                self._segment_path = lambda: "global-neighbor-detail" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail, ['neighbor_address', 'is_gr_enabled', 'node_address', 'restart_state', 'restart_time', 'is_restart_timer_running', 'recovery_time', 'is_recovery_timer_running', 'hello_interval', 'missed_hellos', 'pending_states', 'local_node_address', 'interface_neighbor', 'neighbor_hello_state', 'lost_communication_reason', 'lost_communication_total'], name, value)


            class GlobalNeighborFlags(Entity):
                """
                Global Neighbor Flags
                
                .. attribute:: is_application_ouni
                
                	OUNI Application
                	**type**\: bool
                
                .. attribute:: is_application_mpls
                
                	MPLS Application
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags, self).__init__()

                    self.yang_name = "global-neighbor-flags"
                    self.yang_parent_name = "global-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_application_ouni', YLeaf(YType.boolean, 'is-application-ouni')),
                        ('is_application_mpls', YLeaf(YType.boolean, 'is-application-mpls')),
                    ])
                    self.is_application_ouni = None
                    self.is_application_mpls = None
                    self._segment_path = lambda: "global-neighbor-flags"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.GlobalNeighborFlags, ['is_application_ouni', 'is_application_mpls'], name, value)


            class RestartTimeLeft(Entity):
                """
                How much restart time remains
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft, self).__init__()

                    self.yang_name = "restart-time-left"
                    self.yang_parent_name = "global-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "restart-time-left"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimeLeft, ['seconds', 'nanoseconds'], name, value)


            class RestartTimerExpiryTime(Entity):
                """
                When will restart timer expire
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime, self).__init__()

                    self.yang_name = "restart-timer-expiry-time"
                    self.yang_parent_name = "global-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "restart-timer-expiry-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RestartTimerExpiryTime, ['seconds', 'nanoseconds'], name, value)


            class RecoveryTimeLeft(Entity):
                """
                How much recovery timer remains
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft, self).__init__()

                    self.yang_name = "recovery-time-left"
                    self.yang_parent_name = "global-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "recovery-time-left"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimeLeft, ['seconds', 'nanoseconds'], name, value)


            class RecoveryTimerExpTime(Entity):
                """
                Time at which recovery timer will expire
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime, self).__init__()

                    self.yang_name = "recovery-timer-exp-time"
                    self.yang_parent_name = "global-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "recovery-timer-exp-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.RecoveryTimerExpTime, ['seconds', 'nanoseconds'], name, value)


            class UpTime(Entity):
                """
                Hello up time
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.UpTime, self).__init__()

                    self.yang_name = "up-time"
                    self.yang_parent_name = "global-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "up-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.UpTime, ['seconds', 'nanoseconds'], name, value)


            class LostCommunicationTime(Entity):
                """
                Time when communication was lost
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.LostCommunicationTime, self).__init__()

                    self.yang_name = "lost-communication-time"
                    self.yang_parent_name = "global-neighbor-detail"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "lost-communication-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.GlobalNeighborDetails.GlobalNeighborDetail.LostCommunicationTime, ['seconds', 'nanoseconds'], name, value)


    class PsbBriefs(Entity):
        """
        Table of brief info about path state blocks
        
        .. attribute:: psb_brief
        
        	Brief info for a single path state block
        	**type**\: list of  		 :py:class:`PsbBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.PsbBriefs, self).__init__()

            self.yang_name = "psb-briefs"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("psb-brief", ("psb_brief", Rsvp.PsbBriefs.PsbBrief))])
            self._leafs = OrderedDict()

            self.psb_brief = YList(self)
            self._segment_path = lambda: "psb-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.PsbBriefs, [], name, value)


        class PsbBrief(Entity):
            """
            Brief info for a single path state block
            
            .. attribute:: destination_address
            
            	Destination Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: destination_port
            
            	Destination Port
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: protocol
            
            	Protocol
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: extended_tunnel_id
            
            	Extended Tunnel ID
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: session_type
            
            	Session Type
            	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpSession>`
            
            .. attribute:: p2mp_id
            
            	P2MP ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: source_address
            
            	Source Address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: source_port
            
            	Source Port 
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: sub_group_origin
            
            	Subgroup Origin
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: sub_group_id
            
            	Subgroup ID
            	**type**\: int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: vrf_name
            
            	VRF Name
            	**type**\: str
            
            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
            
            .. attribute:: session
            
            	RSVP Session Information
            	**type**\:  :py:class:`Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Session>`
            
            .. attribute:: s2l_sub_lsp
            
            	RSVP S2L Sub\-LSP information
            	**type**\:  :py:class:`S2LSubLsp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.S2LSubLsp>`
            
            .. attribute:: template
            
            	RSVP Template
            	**type**\:  :py:class:`Template <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Template>`
            
            .. attribute:: session_attribute
            
            	RSVP Session Attribute
            	**type**\:  :py:class:`SessionAttribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.SessionAttribute>`
            
            .. attribute:: traffic_spec
            
            	RSVP Traffic Spec Info
            	**type**\:  :py:class:`TrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.TrafficSpec>`
            
            .. attribute:: generic_traffic_spec
            
            	RSVP Generic Traffic Spec Info
            	**type**\:  :py:class:`GenericTrafficSpec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec>`
            
            .. attribute:: input_interface
            
            	Path Input Interface
            	**type**\: str
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.PsbBriefs.PsbBrief, self).__init__()

                self.yang_name = "psb-brief"
                self.yang_parent_name = "psb-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("session", ("session", Rsvp.PsbBriefs.PsbBrief.Session)), ("s2l-sub-lsp", ("s2l_sub_lsp", Rsvp.PsbBriefs.PsbBrief.S2LSubLsp)), ("template", ("template", Rsvp.PsbBriefs.PsbBrief.Template)), ("session-attribute", ("session_attribute", Rsvp.PsbBriefs.PsbBrief.SessionAttribute)), ("traffic-spec", ("traffic_spec", Rsvp.PsbBriefs.PsbBrief.TrafficSpec)), ("generic-traffic-spec", ("generic_traffic_spec", Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('destination_address', YLeaf(YType.str, 'destination-address')),
                    ('destination_port', YLeaf(YType.int32, 'destination-port')),
                    ('protocol', YLeaf(YType.int32, 'protocol')),
                    ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                    ('session_type', YLeaf(YType.enumeration, 'session-type')),
                    ('p2mp_id', YLeaf(YType.int32, 'p2mp-id')),
                    ('source_address', YLeaf(YType.str, 'source-address')),
                    ('source_port', YLeaf(YType.int32, 'source-port')),
                    ('sub_group_origin', YLeaf(YType.str, 'sub-group-origin')),
                    ('sub_group_id', YLeaf(YType.int32, 'sub-group-id')),
                    ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                    ('input_interface', YLeaf(YType.str, 'input-interface')),
                ])
                self.destination_address = None
                self.destination_port = None
                self.protocol = None
                self.extended_tunnel_id = None
                self.session_type = None
                self.p2mp_id = None
                self.source_address = None
                self.source_port = None
                self.sub_group_origin = None
                self.sub_group_id = None
                self.vrf_name = None
                self.input_interface = None

                self.session = Rsvp.PsbBriefs.PsbBrief.Session()
                self.session.parent = self
                self._children_name_map["session"] = "session"
                self._children_yang_names.add("session")

                self.s2l_sub_lsp = Rsvp.PsbBriefs.PsbBrief.S2LSubLsp()
                self.s2l_sub_lsp.parent = self
                self._children_name_map["s2l_sub_lsp"] = "s2l-sub-lsp"
                self._children_yang_names.add("s2l-sub-lsp")

                self.template = Rsvp.PsbBriefs.PsbBrief.Template()
                self.template.parent = self
                self._children_name_map["template"] = "template"
                self._children_yang_names.add("template")

                self.session_attribute = Rsvp.PsbBriefs.PsbBrief.SessionAttribute()
                self.session_attribute.parent = self
                self._children_name_map["session_attribute"] = "session-attribute"
                self._children_yang_names.add("session-attribute")

                self.traffic_spec = Rsvp.PsbBriefs.PsbBrief.TrafficSpec()
                self.traffic_spec.parent = self
                self._children_name_map["traffic_spec"] = "traffic-spec"
                self._children_yang_names.add("traffic-spec")

                self.generic_traffic_spec = Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec()
                self.generic_traffic_spec.parent = self
                self._children_name_map["generic_traffic_spec"] = "generic-traffic-spec"
                self._children_yang_names.add("generic-traffic-spec")
                self._segment_path = lambda: "psb-brief"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.PsbBriefs.PsbBrief, ['destination_address', 'destination_port', 'protocol', 'extended_tunnel_id', 'session_type', 'p2mp_id', 'source_address', 'source_port', 'sub_group_origin', 'sub_group_id', 'vrf_name', 'input_interface'], name, value)


            class Session(Entity):
                """
                RSVP Session Information
                
                .. attribute:: rsvp_session
                
                	RSVP Session
                	**type**\:  :py:class:`RsvpSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbBriefs.PsbBrief.Session, self).__init__()

                    self.yang_name = "session"
                    self.yang_parent_name = "psb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-session", ("rsvp_session", Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_session = Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession()
                    self.rsvp_session.parent = self
                    self._children_name_map["rsvp_session"] = "rsvp-session"
                    self._children_yang_names.add("rsvp-session")
                    self._segment_path = lambda: "session"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/%s" % self._segment_path()


                class RsvpSession(Entity):
                    """
                    RSVP Session
                    
                    .. attribute:: ipv4
                    
                    	UDP IPv4 session
                    	**type**\:  :py:class:`Ipv4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4>`
                    
                    .. attribute:: ipv4_lsp_session
                    
                    	IPv4 LSP session
                    	**type**\:  :py:class:`Ipv4LspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession>`
                    
                    .. attribute:: ipv4_uni_session
                    
                    	IPv4 UNI session
                    	**type**\:  :py:class:`Ipv4UniSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession>`
                    
                    .. attribute:: ipv4_p2mp_lsp_session
                    
                    	IPv4 P2MP LSP session
                    	**type**\:  :py:class:`Ipv4P2MpLspSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession>`
                    
                    .. attribute:: session_type
                    
                    	SessionType
                    	**type**\:  :py:class:`RsvpMgmtSession <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtSession>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession, self).__init__()

                        self.yang_name = "rsvp-session"
                        self.yang_parent_name = "session"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("ipv4", ("ipv4", Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4)), ("ipv4-lsp-session", ("ipv4_lsp_session", Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession)), ("ipv4-uni-session", ("ipv4_uni_session", Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession)), ("ipv4-p2mp-lsp-session", ("ipv4_p2mp_lsp_session", Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('session_type', YLeaf(YType.enumeration, 'session-type')),
                        ])
                        self.session_type = None

                        self.ipv4 = Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4()
                        self.ipv4.parent = self
                        self._children_name_map["ipv4"] = "ipv4"
                        self._children_yang_names.add("ipv4")

                        self.ipv4_lsp_session = Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession()
                        self.ipv4_lsp_session.parent = self
                        self._children_name_map["ipv4_lsp_session"] = "ipv4-lsp-session"
                        self._children_yang_names.add("ipv4-lsp-session")

                        self.ipv4_uni_session = Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession()
                        self.ipv4_uni_session.parent = self
                        self._children_name_map["ipv4_uni_session"] = "ipv4-uni-session"
                        self._children_yang_names.add("ipv4-uni-session")

                        self.ipv4_p2mp_lsp_session = Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession()
                        self.ipv4_p2mp_lsp_session.parent = self
                        self._children_name_map["ipv4_p2mp_lsp_session"] = "ipv4-p2mp-lsp-session"
                        self._children_yang_names.add("ipv4-p2mp-lsp-session")
                        self._segment_path = lambda: "rsvp-session"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession, ['session_type'], name, value)


                    class Ipv4(Entity):
                        """
                        UDP IPv4 session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: protocol
                        
                        	Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: destination_port
                        
                        	The Session Destination Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4, self).__init__()

                            self.yang_name = "ipv4"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('protocol', YLeaf(YType.uint8, 'protocol')),
                                ('destination_port', YLeaf(YType.uint16, 'destination-port')),
                            ])
                            self.destination_address = None
                            self.protocol = None
                            self.destination_port = None
                            self._segment_path = lambda: "ipv4"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4, ['destination_address', 'protocol', 'destination_port'], name, value)


                    class Ipv4LspSession(Entity):
                        """
                        IPv4 LSP session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession, self).__init__()

                            self.yang_name = "ipv4-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4LspSession, ['destination_address', 'tunnel_id', 'extended_tunnel_id'], name, value)


                    class Ipv4UniSession(Entity):
                        """
                        IPv4 UNI session
                        
                        .. attribute:: destination_address
                        
                        	Destination address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_address
                        
                        	The Session Extended Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession, self).__init__()

                            self.yang_name = "ipv4-uni-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('destination_address', YLeaf(YType.str, 'destination-address')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_address', YLeaf(YType.str, 'extended-address')),
                            ])
                            self.destination_address = None
                            self.tunnel_id = None
                            self.extended_address = None
                            self._segment_path = lambda: "ipv4-uni-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4UniSession, ['destination_address', 'tunnel_id', 'extended_address'], name, value)


                    class Ipv4P2MpLspSession(Entity):
                        """
                        IPv4 P2MP LSP session
                        
                        .. attribute:: p2mp_id
                        
                        	The Point to Multipoint ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tunnel_id
                        
                        	The Session Tunnel ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: extended_tunnel_id
                        
                        	The Session Extended Tunnel ID
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession, self).__init__()

                            self.yang_name = "ipv4-p2mp-lsp-session"
                            self.yang_parent_name = "rsvp-session"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('p2mp_id', YLeaf(YType.uint32, 'p2mp-id')),
                                ('tunnel_id', YLeaf(YType.uint16, 'tunnel-id')),
                                ('extended_tunnel_id', YLeaf(YType.str, 'extended-tunnel-id')),
                            ])
                            self.p2mp_id = None
                            self.tunnel_id = None
                            self.extended_tunnel_id = None
                            self._segment_path = lambda: "ipv4-p2mp-lsp-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/rsvp-session/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.Session.RsvpSession.Ipv4P2MpLspSession, ['p2mp_id', 'tunnel_id', 'extended_tunnel_id'], name, value)


            class S2LSubLsp(Entity):
                """
                RSVP S2L Sub\-LSP information
                
                .. attribute:: s2l_destination_address
                
                	S2L Sub\-LSP Destination Address
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbBriefs.PsbBrief.S2LSubLsp, self).__init__()

                    self.yang_name = "s2l-sub-lsp"
                    self.yang_parent_name = "psb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('s2l_destination_address', YLeaf(YType.str, 's2l-destination-address')),
                    ])
                    self.s2l_destination_address = None
                    self._segment_path = lambda: "s2l-sub-lsp"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.S2LSubLsp, ['s2l_destination_address'], name, value)


            class Template(Entity):
                """
                RSVP Template
                
                .. attribute:: rsvp_filter
                
                	RSVP Filter
                	**type**\:  :py:class:`RsvpFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbBriefs.PsbBrief.Template, self).__init__()

                    self.yang_name = "template"
                    self.yang_parent_name = "psb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("rsvp-filter", ("rsvp_filter", Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.rsvp_filter = Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter()
                    self.rsvp_filter.parent = self
                    self._children_name_map["rsvp_filter"] = "rsvp-filter"
                    self._children_yang_names.add("rsvp-filter")
                    self._segment_path = lambda: "template"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/%s" % self._segment_path()


                class RsvpFilter(Entity):
                    """
                    RSVP Filter
                    
                    .. attribute:: udp_ipv4_session
                    
                    	UDP IPV4 FilterSpec
                    	**type**\:  :py:class:`UdpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session>`
                    
                    .. attribute:: p2mp_ipv4_session
                    
                    	IPv4 P2MP LSP FilterSpec
                    	**type**\:  :py:class:`P2MpIpv4Session <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session>`
                    
                    .. attribute:: filter_type
                    
                    	FilterType
                    	**type**\:  :py:class:`RsvpMgmtFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtFilter>`
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter, self).__init__()

                        self.yang_name = "rsvp-filter"
                        self.yang_parent_name = "template"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("udp-ipv4-session", ("udp_ipv4_session", Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session)), ("p2mp-ipv4-session", ("p2mp_ipv4_session", Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('filter_type', YLeaf(YType.enumeration, 'filter-type')),
                        ])
                        self.filter_type = None

                        self.udp_ipv4_session = Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session()
                        self.udp_ipv4_session.parent = self
                        self._children_name_map["udp_ipv4_session"] = "udp-ipv4-session"
                        self._children_yang_names.add("udp-ipv4-session")

                        self.p2mp_ipv4_session = Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session()
                        self.p2mp_ipv4_session.parent = self
                        self._children_name_map["p2mp_ipv4_session"] = "p2mp-ipv4-session"
                        self._children_yang_names.add("p2mp-ipv4-session")
                        self._segment_path = lambda: "rsvp-filter"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/template/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter, ['filter_type'], name, value)


                    class UdpIpv4Session(Entity):
                        """
                        UDP IPV4 FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session, self).__init__()

                            self.yang_name = "udp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self._segment_path = lambda: "udp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/template/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.UdpIpv4Session, ['source_address', 'source_port'], name, value)


                    class P2MpIpv4Session(Entity):
                        """
                        IPv4 P2MP LSP FilterSpec
                        
                        .. attribute:: source_address
                        
                        	Source Address
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: source_port
                        
                        	Source Port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: p2mp_sub_group_origin
                        
                        	Point to Multipoint SubGroup Origin
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: sub_group_id
                        
                        	Point to Multipoint Subgroup ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'ip-rsvp-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session, self).__init__()

                            self.yang_name = "p2mp-ipv4-session"
                            self.yang_parent_name = "rsvp-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('source_address', YLeaf(YType.str, 'source-address')),
                                ('source_port', YLeaf(YType.uint16, 'source-port')),
                                ('p2mp_sub_group_origin', YLeaf(YType.str, 'p2mp-sub-group-origin')),
                                ('sub_group_id', YLeaf(YType.uint16, 'sub-group-id')),
                            ])
                            self.source_address = None
                            self.source_port = None
                            self.p2mp_sub_group_origin = None
                            self.sub_group_id = None
                            self._segment_path = lambda: "p2mp-ipv4-session"
                            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/template/rsvp-filter/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.Template.RsvpFilter.P2MpIpv4Session, ['source_address', 'source_port', 'p2mp_sub_group_origin', 'sub_group_id'], name, value)


            class SessionAttribute(Entity):
                """
                RSVP Session Attribute
                
                .. attribute:: sess_attribute_flags
                
                	Session Attributes
                	**type**\:  :py:class:`SessAttributeFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags>`
                
                .. attribute:: setup_priority
                
                	Setup Priority
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: reservation_priority
                
                	Reservation Priority
                	**type**\: int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbBriefs.PsbBrief.SessionAttribute, self).__init__()

                    self.yang_name = "session-attribute"
                    self.yang_parent_name = "psb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("sess-attribute-flags", ("sess_attribute_flags", Rsvp.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('setup_priority', YLeaf(YType.uint8, 'setup-priority')),
                        ('reservation_priority', YLeaf(YType.uint8, 'reservation-priority')),
                    ])
                    self.setup_priority = None
                    self.reservation_priority = None

                    self.sess_attribute_flags = Rsvp.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags()
                    self.sess_attribute_flags.parent = self
                    self._children_name_map["sess_attribute_flags"] = "sess-attribute-flags"
                    self._children_yang_names.add("sess-attribute-flags")
                    self._segment_path = lambda: "session-attribute"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.SessionAttribute, ['setup_priority', 'reservation_priority'], name, value)


                class SessAttributeFlags(Entity):
                    """
                    Session Attributes
                    
                    .. attribute:: is_local_protect
                    
                    	Local Protection
                    	**type**\: bool
                    
                    .. attribute:: is_node_protect
                    
                    	Node Protection
                    	**type**\: bool
                    
                    .. attribute:: is_bandwidth_protect
                    
                    	Bandwidth Protection
                    	**type**\: bool
                    
                    .. attribute:: is_record_labels
                    
                    	Records Labels
                    	**type**\: bool
                    
                    .. attribute:: is_shared_explicit_requested
                    
                    	Shared Explicit Requested
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags, self).__init__()

                        self.yang_name = "sess-attribute-flags"
                        self.yang_parent_name = "session-attribute"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('is_local_protect', YLeaf(YType.boolean, 'is-local-protect')),
                            ('is_node_protect', YLeaf(YType.boolean, 'is-node-protect')),
                            ('is_bandwidth_protect', YLeaf(YType.boolean, 'is-bandwidth-protect')),
                            ('is_record_labels', YLeaf(YType.boolean, 'is-record-labels')),
                            ('is_shared_explicit_requested', YLeaf(YType.boolean, 'is-shared-explicit-requested')),
                        ])
                        self.is_local_protect = None
                        self.is_node_protect = None
                        self.is_bandwidth_protect = None
                        self.is_record_labels = None
                        self.is_shared_explicit_requested = None
                        self._segment_path = lambda: "sess-attribute-flags"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session-attribute/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.SessionAttribute.SessAttributeFlags, ['is_local_protect', 'is_node_protect', 'is_bandwidth_protect', 'is_record_labels', 'is_shared_explicit_requested'], name, value)


            class TrafficSpec(Entity):
                """
                RSVP Traffic Spec Info
                
                .. attribute:: traffic_average_rate
                
                	Traffic Average Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_max_burst
                
                	Traffic Maximum Burst
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: traffic_peak_rate
                
                	Traffic Peak Rate in bytes per second
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: byte/s
                
                .. attribute:: traffic_min_unit
                
                	Traffic Minimum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: traffic_max_unit
                
                	Traffic Maximum Unit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbBriefs.PsbBrief.TrafficSpec, self).__init__()

                    self.yang_name = "traffic-spec"
                    self.yang_parent_name = "psb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                        ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                        ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                        ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                        ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                    ])
                    self.traffic_average_rate = None
                    self.traffic_max_burst = None
                    self.traffic_peak_rate = None
                    self.traffic_min_unit = None
                    self.traffic_max_unit = None
                    self._segment_path = lambda: "traffic-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.TrafficSpec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


            class GenericTrafficSpec(Entity):
                """
                RSVP Generic Traffic Spec Info
                
                .. attribute:: g709otn_tspec
                
                	G709 OTN Sender Tspec
                	**type**\:  :py:class:`G709OtnTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec>`
                
                .. attribute:: intsrv_tspec
                
                	Integrated Services Sender Tspec
                	**type**\:  :py:class:`IntsrvTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec>`
                
                .. attribute:: tspec_type
                
                	TspecType
                	**type**\:  :py:class:`RsvpMgmtTspec <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtTspec>`
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec, self).__init__()

                    self.yang_name = "generic-traffic-spec"
                    self.yang_parent_name = "psb-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("g709otn-tspec", ("g709otn_tspec", Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec)), ("intsrv-tspec", ("intsrv_tspec", Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('tspec_type', YLeaf(YType.enumeration, 'tspec-type')),
                    ])
                    self.tspec_type = None

                    self.g709otn_tspec = Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec()
                    self.g709otn_tspec.parent = self
                    self._children_name_map["g709otn_tspec"] = "g709otn-tspec"
                    self._children_yang_names.add("g709otn-tspec")

                    self.intsrv_tspec = Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec()
                    self.intsrv_tspec.parent = self
                    self._children_name_map["intsrv_tspec"] = "intsrv-tspec"
                    self._children_yang_names.add("intsrv-tspec")
                    self._segment_path = lambda: "generic-traffic-spec"
                    self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec, ['tspec_type'], name, value)


                class G709OtnTspec(Entity):
                    """
                    G709 OTN Sender Tspec
                    
                    .. attribute:: traffic_signal_type
                    
                    	G709 OTN Traffic Signal Type (Refer G709 v3)
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: traffic_nvc
                    
                    	G709 OTN Traffic NVC
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_multiplier
                    
                    	G709 OTN Traffic Multiplier
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: traffic_bit_rate
                    
                    	G709 OTN Traffic Bit Rate
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec, self).__init__()

                        self.yang_name = "g709otn-tspec"
                        self.yang_parent_name = "generic-traffic-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('traffic_signal_type', YLeaf(YType.uint8, 'traffic-signal-type')),
                            ('traffic_nvc', YLeaf(YType.uint16, 'traffic-nvc')),
                            ('traffic_multiplier', YLeaf(YType.uint16, 'traffic-multiplier')),
                            ('traffic_bit_rate', YLeaf(YType.uint64, 'traffic-bit-rate')),
                        ])
                        self.traffic_signal_type = None
                        self.traffic_nvc = None
                        self.traffic_multiplier = None
                        self.traffic_bit_rate = None
                        self._segment_path = lambda: "g709otn-tspec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/generic-traffic-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.G709OtnTspec, ['traffic_signal_type', 'traffic_nvc', 'traffic_multiplier', 'traffic_bit_rate'], name, value)


                class IntsrvTspec(Entity):
                    """
                    Integrated Services Sender Tspec
                    
                    .. attribute:: traffic_average_rate
                    
                    	Traffic Average Rate in bytes per second
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_max_burst
                    
                    	Traffic Maximum Burst
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: traffic_peak_rate
                    
                    	Traffic Peak Rate in bytes per second
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: byte/s
                    
                    .. attribute:: traffic_min_unit
                    
                    	Traffic Minimum Unit
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: traffic_max_unit
                    
                    	Traffic Maximum Unit
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ip-rsvp-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec, self).__init__()

                        self.yang_name = "intsrv-tspec"
                        self.yang_parent_name = "generic-traffic-spec"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('traffic_average_rate', YLeaf(YType.uint64, 'traffic-average-rate')),
                            ('traffic_max_burst', YLeaf(YType.uint64, 'traffic-max-burst')),
                            ('traffic_peak_rate', YLeaf(YType.uint64, 'traffic-peak-rate')),
                            ('traffic_min_unit', YLeaf(YType.uint32, 'traffic-min-unit')),
                            ('traffic_max_unit', YLeaf(YType.uint32, 'traffic-max-unit')),
                        ])
                        self.traffic_average_rate = None
                        self.traffic_max_burst = None
                        self.traffic_peak_rate = None
                        self.traffic_min_unit = None
                        self.traffic_max_unit = None
                        self._segment_path = lambda: "intsrv-tspec"
                        self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/generic-traffic-spec/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(Rsvp.PsbBriefs.PsbBrief.GenericTrafficSpec.IntsrvTspec, ['traffic_average_rate', 'traffic_max_burst', 'traffic_peak_rate', 'traffic_min_unit', 'traffic_max_unit'], name, value)


    class GlobalNeighborBriefs(Entity):
        """
        Table of brief info about global neighbors
        
        .. attribute:: global_neighbor_brief
        
        	Brief info for a single global neighbor
        	**type**\: list of  		 :py:class:`GlobalNeighborBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief>`
        
        

        """

        _prefix = 'ip-rsvp-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Rsvp.GlobalNeighborBriefs, self).__init__()

            self.yang_name = "global-neighbor-briefs"
            self.yang_parent_name = "rsvp"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("global-neighbor-brief", ("global_neighbor_brief", Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief))])
            self._leafs = OrderedDict()

            self.global_neighbor_brief = YList(self)
            self._segment_path = lambda: "global-neighbor-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Rsvp.GlobalNeighborBriefs, [], name, value)


        class GlobalNeighborBrief(Entity):
            """
            Brief info for a single global neighbor
            
            .. attribute:: neighbor_address  (key)
            
            	Address of global neighbor
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: global_neighbor_flags
            
            	Global Neighbor Flags
            	**type**\:  :py:class:`GlobalNeighborFlags <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags>`
            
            .. attribute:: is_gr_enabled
            
            	Is GR enabled
            	**type**\: bool
            
            .. attribute:: node_address
            
            	Neighbor node address
            	**type**\: str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: restart_state
            
            	Restart state
            	**type**\:  :py:class:`RsvpMgmtRestartState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtRestartState>`
            
            .. attribute:: local_node_address
            
            	Local node address
            	**type**\: list of str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            .. attribute:: neighbor_hello_state
            
            	Neighbor Hello state
            	**type**\: list of   :py:class:`RsvpMgmtHelloState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloState>`
            
            .. attribute:: lost_communication_reason
            
            	Reason why communication was lost
            	**type**\: list of   :py:class:`RsvpMgmtHelloDownReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.RsvpMgmtHelloDownReason>`
            
            .. attribute:: lost_communication_total
            
            	Total number of times communication got lost
            	**type**\: list of int
            
            	**range:** 0..65535
            
            .. attribute:: up_time
            
            	Time hellos have been up
            	**type**\: list of  		 :py:class:`UpTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.UpTime>`
            
            .. attribute:: lost_communication_time
            
            	Time when communication was lost
            	**type**\: list of  		 :py:class:`LostCommunicationTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ip_rsvp_oper.Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.LostCommunicationTime>`
            
            

            """

            _prefix = 'ip-rsvp-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief, self).__init__()

                self.yang_name = "global-neighbor-brief"
                self.yang_parent_name = "global-neighbor-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['neighbor_address']
                self._child_container_classes = OrderedDict([("global-neighbor-flags", ("global_neighbor_flags", Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags))])
                self._child_list_classes = OrderedDict([("up-time", ("up_time", Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.UpTime)), ("lost-communication-time", ("lost_communication_time", Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.LostCommunicationTime))])
                self._leafs = OrderedDict([
                    ('neighbor_address', YLeaf(YType.str, 'neighbor-address')),
                    ('is_gr_enabled', YLeaf(YType.boolean, 'is-gr-enabled')),
                    ('node_address', YLeaf(YType.str, 'node-address')),
                    ('restart_state', YLeaf(YType.enumeration, 'restart-state')),
                    ('local_node_address', YLeafList(YType.str, 'local-node-address')),
                    ('neighbor_hello_state', YLeafList(YType.enumeration, 'neighbor-hello-state')),
                    ('lost_communication_reason', YLeafList(YType.enumeration, 'lost-communication-reason')),
                    ('lost_communication_total', YLeafList(YType.uint16, 'lost-communication-total')),
                ])
                self.neighbor_address = None
                self.is_gr_enabled = None
                self.node_address = None
                self.restart_state = None
                self.local_node_address = []
                self.neighbor_hello_state = []
                self.lost_communication_reason = []
                self.lost_communication_total = []

                self.global_neighbor_flags = Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags()
                self.global_neighbor_flags.parent = self
                self._children_name_map["global_neighbor_flags"] = "global-neighbor-flags"
                self._children_yang_names.add("global-neighbor-flags")

                self.up_time = YList(self)
                self.lost_communication_time = YList(self)
                self._segment_path = lambda: "global-neighbor-brief" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief, ['neighbor_address', 'is_gr_enabled', 'node_address', 'restart_state', 'local_node_address', 'neighbor_hello_state', 'lost_communication_reason', 'lost_communication_total'], name, value)


            class GlobalNeighborFlags(Entity):
                """
                Global Neighbor Flags
                
                .. attribute:: is_application_ouni
                
                	OUNI Application
                	**type**\: bool
                
                .. attribute:: is_application_mpls
                
                	MPLS Application
                	**type**\: bool
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags, self).__init__()

                    self.yang_name = "global-neighbor-flags"
                    self.yang_parent_name = "global-neighbor-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('is_application_ouni', YLeaf(YType.boolean, 'is-application-ouni')),
                        ('is_application_mpls', YLeaf(YType.boolean, 'is-application-mpls')),
                    ])
                    self.is_application_ouni = None
                    self.is_application_mpls = None
                    self._segment_path = lambda: "global-neighbor-flags"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.GlobalNeighborFlags, ['is_application_ouni', 'is_application_mpls'], name, value)


            class UpTime(Entity):
                """
                Time hellos have been up
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.UpTime, self).__init__()

                    self.yang_name = "up-time"
                    self.yang_parent_name = "global-neighbor-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "up-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.UpTime, ['seconds', 'nanoseconds'], name, value)


            class LostCommunicationTime(Entity):
                """
                Time when communication was lost
                
                .. attribute:: seconds
                
                	Time Value in Seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: second
                
                .. attribute:: nanoseconds
                
                	Time Value in Nano\-seconds
                	**type**\: int
                
                	**range:** \-2147483648..2147483647
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'ip-rsvp-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.LostCommunicationTime, self).__init__()

                    self.yang_name = "lost-communication-time"
                    self.yang_parent_name = "global-neighbor-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('seconds', YLeaf(YType.int32, 'seconds')),
                        ('nanoseconds', YLeaf(YType.int32, 'nanoseconds')),
                    ])
                    self.seconds = None
                    self.nanoseconds = None
                    self._segment_path = lambda: "lost-communication-time"

                def __setattr__(self, name, value):
                    self._perform_setattr(Rsvp.GlobalNeighborBriefs.GlobalNeighborBrief.LostCommunicationTime, ['seconds', 'nanoseconds'], name, value)

    def clone_ptr(self):
        self._top_entity = Rsvp()
        return self._top_entity

