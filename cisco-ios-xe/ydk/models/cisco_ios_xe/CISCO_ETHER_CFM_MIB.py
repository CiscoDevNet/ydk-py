""" CISCO_ETHER_CFM_MIB 

This MIB module defines the managed objects 
and notifications for Ethernet Connectivity 
Fault Management (CFM).

CFM is an end\-to\-end per service instance Ethernet layer 
Operations, Administration and Management (OAM) protocol. 

CFM events include\: 

\- Maintenance End\-Point (MEP) coming up\: establishing 
  connectivity

\- Maintenance End\-Point going down\: losing connectivity

\- Maintenance End\-Point unknown\: unexpected

\- Maintenance End\-Point missing\: expected but not reachable

\- Continuity Check Configuration Error\: collision in MEP IDs

\- Continuity Check Loop\: forwarding loop in network

\- Continuity Check Cross\-connect\: cross\-connected 
  forwarding path.

The following acronyms are used in this module\:

\- MEP\: Maintenance End Point

\- MEPID\: Maintenance End Point Identifier

\- CC\: Continuity Check

\- CCDB\: Continuity Check Database

\- SVLAN\: Service Provider Virtual Local Area Network

\- VLAN\: Virtual Local Area Network

\- CLI\: Command Line Interface.

\- OAM\: Operations Administration and Management.

"""
from collections import OrderedDict

from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error



class CISCOETHERCFMMIB(Entity):
    """
    
    
    .. attribute:: ceccfmevents
    
    	
    	**type**\:  :py:class:`Ceccfmevents <ydk.models.cisco_ios_xe.CISCO_ETHER_CFM_MIB.CISCOETHERCFMMIB.Ceccfmevents>`
    
    .. attribute:: cethercfmeventtable
    
    	This table contains a collection of Ethernet CFM notifications generated by the device. The notifications correspond to events recognized by the device and fall into the following classes\:  \- MEP\-Up  \- MEP\-Down  \- Configuration Error  \- Forwarding Loop  \- Cross\-connected Ethernet Connection  \- Crosscheck Missing MEP  \- Crosscheck Unknown MEP  \- Crosscheck Service Up  A conceptual row is created in this table whenever the device  encounters one of the events listed above. Rows can only be created by the agent, and not at the request of the management station.  Rows are deleted at the request of a management station by  setting the cEtherCfmEventDeleteRow object to 'delete'. Another way of deleting rows is through the CLI.  Although this table may be indexed uniquely by the  cEtherCfmEventIndex index, the first two indices  (cEtherCfmEventDomainIndex and cEtherCfmEventSvlan) are used to speed\-up queries per maintenance domain and per customer service instance. Furthermore, these two indices will help in defining the MIB views easily in order to restrict access to the MIB to particular entities (be it a service provider, or operator, or customer)
    	**type**\:  :py:class:`Cethercfmeventtable <ydk.models.cisco_ios_xe.CISCO_ETHER_CFM_MIB.CISCOETHERCFMMIB.Cethercfmeventtable>`
    
    

    """

    _prefix = 'CISCO-ETHER-CFM-MIB'
    _revision = '2004-12-28'

    def __init__(self):
        super(CISCOETHERCFMMIB, self).__init__()
        self._top_entity = None

        self.yang_name = "CISCO-ETHER-CFM-MIB"
        self.yang_parent_name = "CISCO-ETHER-CFM-MIB"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("cecCfmEvents", ("ceccfmevents", CISCOETHERCFMMIB.Ceccfmevents)), ("cEtherCfmEventTable", ("cethercfmeventtable", CISCOETHERCFMMIB.Cethercfmeventtable))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.ceccfmevents = CISCOETHERCFMMIB.Ceccfmevents()
        self.ceccfmevents.parent = self
        self._children_name_map["ceccfmevents"] = "cecCfmEvents"
        self._children_yang_names.add("cecCfmEvents")

        self.cethercfmeventtable = CISCOETHERCFMMIB.Cethercfmeventtable()
        self.cethercfmeventtable.parent = self
        self._children_name_map["cethercfmeventtable"] = "cEtherCfmEventTable"
        self._children_yang_names.add("cEtherCfmEventTable")
        self._segment_path = lambda: "CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB"


    class Ceccfmevents(Entity):
        """
        
        
        .. attribute:: cethercfmmaxeventindex
        
        	This object specifies the maximum upper value supported  for the cEtherCfmEventIndex index by this agent
        	**type**\: int
        
        	**range:** 1..4294967295
        
        

        """

        _prefix = 'CISCO-ETHER-CFM-MIB'
        _revision = '2004-12-28'

        def __init__(self):
            super(CISCOETHERCFMMIB.Ceccfmevents, self).__init__()

            self.yang_name = "cecCfmEvents"
            self.yang_parent_name = "CISCO-ETHER-CFM-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict([
                ('cethercfmmaxeventindex', YLeaf(YType.uint32, 'cEtherCfmMaxEventIndex')),
            ])
            self.cethercfmmaxeventindex = None
            self._segment_path = lambda: "cecCfmEvents"
            self._absolute_path = lambda: "CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOETHERCFMMIB.Ceccfmevents, ['cethercfmmaxeventindex'], name, value)


    class Cethercfmeventtable(Entity):
        """
        This table contains a collection of Ethernet CFM notifications
        generated by the device. The notifications correspond to events
        recognized by the device and fall into the following classes\:
        
        \- MEP\-Up
        
        \- MEP\-Down
        
        \- Configuration Error
        
        \- Forwarding Loop
        
        \- Cross\-connected Ethernet Connection
        
        \- Crosscheck Missing MEP
        
        \- Crosscheck Unknown MEP
        
        \- Crosscheck Service Up
        
        A conceptual row is created in this table whenever the device 
        encounters one of the events listed above. Rows can only be
        created by the agent, and not at the request of the management
        station.
        
        Rows are deleted at the request of a management station by 
        setting the cEtherCfmEventDeleteRow object to 'delete'.
        Another way of deleting rows is through the CLI.
        
        Although this table may be indexed uniquely by the 
        cEtherCfmEventIndex index, the first two indices 
        (cEtherCfmEventDomainIndex and cEtherCfmEventSvlan) are used
        to speed\-up queries per maintenance domain and per customer
        service instance. Furthermore, these two indices will help
        in defining the MIB views easily in order to restrict access
        to the MIB to particular entities (be it a service provider,
        or operator, or customer).
        
        .. attribute:: cethercfmevententry
        
        	An entry in this table is created for every event reported by Ethernet CFM
        	**type**\: list of  		 :py:class:`Cethercfmevententry <ydk.models.cisco_ios_xe.CISCO_ETHER_CFM_MIB.CISCOETHERCFMMIB.Cethercfmeventtable.Cethercfmevententry>`
        
        

        """

        _prefix = 'CISCO-ETHER-CFM-MIB'
        _revision = '2004-12-28'

        def __init__(self):
            super(CISCOETHERCFMMIB.Cethercfmeventtable, self).__init__()

            self.yang_name = "cEtherCfmEventTable"
            self.yang_parent_name = "CISCO-ETHER-CFM-MIB"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("cEtherCfmEventEntry", ("cethercfmevententry", CISCOETHERCFMMIB.Cethercfmeventtable.Cethercfmevententry))])
            self._leafs = OrderedDict()

            self.cethercfmevententry = YList(self)
            self._segment_path = lambda: "cEtherCfmEventTable"
            self._absolute_path = lambda: "CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(CISCOETHERCFMMIB.Cethercfmeventtable, [], name, value)


        class Cethercfmevententry(Entity):
            """
            An entry in this table is created for every event reported
            by Ethernet CFM.
            
            .. attribute:: cethercfmeventdomainindex  (key)
            
            	This object represents the ID which uniquely identifies  a CFM maintenance domain on the device. Every domain can be uniquely identified by its user\-defined  name (cEtherCfmEventDomainName) or device\-assigned ID (this object)
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: cethercfmeventsvlan  (key)
            
            	The service VLAN identifier of the customer service  instance to which the event belongs
            	**type**\: int
            
            	**range:** 1..4094
            
            .. attribute:: cethercfmeventindex  (key)
            
            	A monotonically increasing integer for the sole purpose of indexing CFM events.  When it reaches the maximum value  supported by the agent, as defined in the  cEtherCfmMaxEventIndex object, the agent wraps the value back to 1 and may flush existing entries
            	**type**\: int
            
            	**range:** 1..4294967295
            
            .. attribute:: cethercfmeventdomainname
            
            	The name of the CFM maintenance domain
            	**type**\: str
            
            .. attribute:: cethercfmeventtype
            
            	This object informs the management station of how to interpret the rest of the objects within a row, as summarized in the  following table\:  Legend I\: Ignored Object         V\: Valid Object  Object                                 cEtherCfmEventType                                \| 1 \| 2 \| 3 \| 4 \| 5 \| 6 \| 7 \| 8 ================================================================                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventDomainIndex      \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventSvlan            \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventIndex            \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLastChange       \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventServiceId        \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventDomainName       \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLclMepid         \| I \| I \| I \| V \| V \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLclMacAddress    \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLclMepCount      \| V \| V \| I \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventLclIfCount       \| V \| V \| I \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventRmtMepid         \| V \| V \| V \| I \| I \| V \| V \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventRmtMacAddress    \| V \| V \| V \| I \| V \| V \| V \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventRmtPortState     \| V \| I \| I \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventRmtServiceId     \| I \| I \| V \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventCode             \| V \| V \| I \| I \| I \| I \| I \| I                                \|   \|   \|   \|   \|   \|   \|   \| cEtherCfmEventDeleteRow        \| V \| V \| V \| V \| V \| V \| V \| V                                \|   \|   \|   \|   \|   \|   \|   \|  Note\: When reading any ignored object, a value of 0 will  be returned by the agent
            	**type**\:  :py:class:`Cethercfmeventtype <ydk.models.cisco_ios_xe.CISCO_ETHER_CFM_MIB.CISCOETHERCFMMIB.Cethercfmeventtable.Cethercfmevententry.Cethercfmeventtype>`
            
            .. attribute:: cethercfmeventlastchange
            
            	The value of sysUpTime at the time when this row was created
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: cethercfmeventserviceid
            
            	The customer service instance to which the event belongs
            	**type**\: str
            
            	**length:** 1..100
            
            .. attribute:: cethercfmeventlclmepid
            
            	The identifier of the local MEP impacted by the event
            	**type**\: int
            
            	**range:** 0..8191
            
            .. attribute:: cethercfmeventlclmacaddress
            
            	The MAC address of the device reporting the event
            	**type**\: str
            
            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
            
            .. attribute:: cethercfmeventlclmepcount
            
            	The number of local MEPs affected by the event
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: cethercfmeventlclifcount
            
            	The number of local interfaces affected by the event
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: cethercfmeventrmtmepid
            
            	The maintenance end\-point identifier of the remote  MEP causing the event entry to be logged
            	**type**\: int
            
            	**range:** 0..8191
            
            .. attribute:: cethercfmeventrmtmacaddress
            
            	The MAC address of the remote maintenance point for which the event entry is being logged
            	**type**\: str
            
            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
            
            .. attribute:: cethercfmeventrmtportstate
            
            	The operational state of the port on which the  remote MEP is configured. This information is  derived from the port\-state as indicated in the  CC message. The possible values are\:  'up'                    \- The port is operationally up.  'down'                  \- The port is operationally (but not                           administratively) down.  'adminDown'             \- The port is administratively down.  'test'                  \- The port is in test mode (perhaps                            due to an IEEE Standard 802.3ah OAM                           intrusive loopback operation).  'remoteExcessiveErrors' \- 802.3ah OAM reports that the other                            end of the link is receiving an                            excessive number of invalid frames.  'localExcessiveErrors'  \- 802.3ah OAM reports that this end of                           the link is receiving an excessive                            number of invalid frames.  'localNoData'           \- No data and no CFM messages have been                           received for an excessive length of                            time
            	**type**\:  :py:class:`Cethercfmeventrmtportstate <ydk.models.cisco_ios_xe.CISCO_ETHER_CFM_MIB.CISCOETHERCFMMIB.Cethercfmeventtable.Cethercfmevententry.Cethercfmeventrmtportstate>`
            
            .. attribute:: cethercfmeventrmtserviceid
            
            	The ID that the remote device has configured for the  customer service instance (VLAN)
            	**type**\: str
            
            	**length:** 1..100
            
            .. attribute:: cethercfmeventcode
            
            	This object is used in decoding 'mepUp' and 'mepDown' events.   \*\* For 'mepUp', the following codes are relevant\:      'new'           \- This is the very first time the device                        receives a CC message from the remote MEP.      'returning'     \- The device received a CC message from a                        remote MEP for which it had an expired                        CCDB entry.      'portState'     \- The device received a CC message from a                        remote MEP for which it has a valid CCDB                        entry, and the message indicates a port                        status change.  \*\* For 'mepDown', the following codes are relevant\:      'lastGasp'      \- The device received a CC message from a                       remote MEP with zero lifetime.      'timeout'       \- The local CCDB entry for the remote MEP                        expired.      'configClear'   \- A previous CC message from a MEP that                       triggered a configuration error event                       is cleared.          'loopClear'     \- A previous CC message from a MEP that                       triggered a loop error event is cleared.      'xconnectClear' \- A previous CC message from a MEP that                       triggered a crossconnect error event                        is cleared.      'unknownClear'  \- A previous CC message from a MEP that                       triggered an unknown MEP event is                        cleared
            	**type**\:  :py:class:`Cethercfmeventcode <ydk.models.cisco_ios_xe.CISCO_ETHER_CFM_MIB.CISCOETHERCFMMIB.Cethercfmeventtable.Cethercfmevententry.Cethercfmeventcode>`
            
            .. attribute:: cethercfmeventdeleterow
            
            	This object allows the management station to  delete a row in the cEtherCfmEventTable in order to free system resources.  When reading this object the value of 'noop' will be  returned. This object can only be set to 'delete'.   When this object is set to 'delete', the conceptual row corresponding to this object will be deleted to free system resources. This is equivalent to clearing the event log. Should the trigger that caused the event to be logged reoccur, the event will be re\-asserted but in a different conceptual row
            	**type**\:  :py:class:`Cethercfmeventdeleterow <ydk.models.cisco_ios_xe.CISCO_ETHER_CFM_MIB.CISCOETHERCFMMIB.Cethercfmeventtable.Cethercfmevententry.Cethercfmeventdeleterow>`
            
            

            """

            _prefix = 'CISCO-ETHER-CFM-MIB'
            _revision = '2004-12-28'

            def __init__(self):
                super(CISCOETHERCFMMIB.Cethercfmeventtable.Cethercfmevententry, self).__init__()

                self.yang_name = "cEtherCfmEventEntry"
                self.yang_parent_name = "cEtherCfmEventTable"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['cethercfmeventdomainindex','cethercfmeventsvlan','cethercfmeventindex']
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('cethercfmeventdomainindex', YLeaf(YType.uint32, 'cEtherCfmEventDomainIndex')),
                    ('cethercfmeventsvlan', YLeaf(YType.int32, 'cEtherCfmEventSvlan')),
                    ('cethercfmeventindex', YLeaf(YType.uint32, 'cEtherCfmEventIndex')),
                    ('cethercfmeventdomainname', YLeaf(YType.str, 'cEtherCfmEventDomainName')),
                    ('cethercfmeventtype', YLeaf(YType.enumeration, 'cEtherCfmEventType')),
                    ('cethercfmeventlastchange', YLeaf(YType.uint32, 'cEtherCfmEventLastChange')),
                    ('cethercfmeventserviceid', YLeaf(YType.str, 'cEtherCfmEventServiceId')),
                    ('cethercfmeventlclmepid', YLeaf(YType.uint32, 'cEtherCfmEventLclMepid')),
                    ('cethercfmeventlclmacaddress', YLeaf(YType.str, 'cEtherCfmEventLclMacAddress')),
                    ('cethercfmeventlclmepcount', YLeaf(YType.uint32, 'cEtherCfmEventLclMepCount')),
                    ('cethercfmeventlclifcount', YLeaf(YType.uint32, 'cEtherCfmEventLclIfCount')),
                    ('cethercfmeventrmtmepid', YLeaf(YType.uint32, 'cEtherCfmEventRmtMepid')),
                    ('cethercfmeventrmtmacaddress', YLeaf(YType.str, 'cEtherCfmEventRmtMacAddress')),
                    ('cethercfmeventrmtportstate', YLeaf(YType.enumeration, 'cEtherCfmEventRmtPortState')),
                    ('cethercfmeventrmtserviceid', YLeaf(YType.str, 'cEtherCfmEventRmtServiceId')),
                    ('cethercfmeventcode', YLeaf(YType.enumeration, 'cEtherCfmEventCode')),
                    ('cethercfmeventdeleterow', YLeaf(YType.enumeration, 'cEtherCfmEventDeleteRow')),
                ])
                self.cethercfmeventdomainindex = None
                self.cethercfmeventsvlan = None
                self.cethercfmeventindex = None
                self.cethercfmeventdomainname = None
                self.cethercfmeventtype = None
                self.cethercfmeventlastchange = None
                self.cethercfmeventserviceid = None
                self.cethercfmeventlclmepid = None
                self.cethercfmeventlclmacaddress = None
                self.cethercfmeventlclmepcount = None
                self.cethercfmeventlclifcount = None
                self.cethercfmeventrmtmepid = None
                self.cethercfmeventrmtmacaddress = None
                self.cethercfmeventrmtportstate = None
                self.cethercfmeventrmtserviceid = None
                self.cethercfmeventcode = None
                self.cethercfmeventdeleterow = None
                self._segment_path = lambda: "cEtherCfmEventEntry" + "[cEtherCfmEventDomainIndex='" + str(self.cethercfmeventdomainindex) + "']" + "[cEtherCfmEventSvlan='" + str(self.cethercfmeventsvlan) + "']" + "[cEtherCfmEventIndex='" + str(self.cethercfmeventindex) + "']"
                self._absolute_path = lambda: "CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB/cEtherCfmEventTable/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(CISCOETHERCFMMIB.Cethercfmeventtable.Cethercfmevententry, ['cethercfmeventdomainindex', 'cethercfmeventsvlan', 'cethercfmeventindex', 'cethercfmeventdomainname', 'cethercfmeventtype', 'cethercfmeventlastchange', 'cethercfmeventserviceid', 'cethercfmeventlclmepid', 'cethercfmeventlclmacaddress', 'cethercfmeventlclmepcount', 'cethercfmeventlclifcount', 'cethercfmeventrmtmepid', 'cethercfmeventrmtmacaddress', 'cethercfmeventrmtportstate', 'cethercfmeventrmtserviceid', 'cethercfmeventcode', 'cethercfmeventdeleterow'], name, value)

            class Cethercfmeventcode(Enum):
                """
                Cethercfmeventcode (Enum Class)

                This object is used in decoding 'mepUp' and 'mepDown' events. 

                \*\* For 'mepUp', the following codes are relevant\:

                    'new'           \- This is the very first time the device 

                                      receives a CC message from the remote MEP.

                    'returning'     \- The device received a CC message from a 

                                      remote MEP for which it had an expired 

                                      CCDB entry.

                    'portState'     \- The device received a CC message from a 

                                      remote MEP for which it has a valid CCDB 

                                      entry, and the message indicates a port 

                                      status change.

                \*\* For 'mepDown', the following codes are relevant\:

                    'lastGasp'      \- The device received a CC message from a

                                      remote MEP with zero lifetime.

                    'timeout'       \- The local CCDB entry for the remote MEP 

                                      expired.

                    'configClear'   \- A previous CC message from a MEP that

                                      triggered a configuration error event

                                      is cleared.

                    'loopClear'     \- A previous CC message from a MEP that

                                      triggered a loop error event is cleared.

                    'xconnectClear' \- A previous CC message from a MEP that

                                      triggered a crossconnect error event 

                                      is cleared.

                    'unknownClear'  \- A previous CC message from a MEP that

                                      triggered an unknown MEP event is 

                                      cleared.

                .. data:: new = 1

                .. data:: returning = 2

                .. data:: portState = 3

                .. data:: lastGasp = 4

                .. data:: timeout = 5

                .. data:: configClear = 6

                .. data:: loopClear = 7

                .. data:: xconnectClear = 8

                .. data:: unknownClear = 9

                """

                new = Enum.YLeaf(1, "new")

                returning = Enum.YLeaf(2, "returning")

                portState = Enum.YLeaf(3, "portState")

                lastGasp = Enum.YLeaf(4, "lastGasp")

                timeout = Enum.YLeaf(5, "timeout")

                configClear = Enum.YLeaf(6, "configClear")

                loopClear = Enum.YLeaf(7, "loopClear")

                xconnectClear = Enum.YLeaf(8, "xconnectClear")

                unknownClear = Enum.YLeaf(9, "unknownClear")


            class Cethercfmeventdeleterow(Enum):
                """
                Cethercfmeventdeleterow (Enum Class)

                This object allows the management station to 

                delete a row in the cEtherCfmEventTable in order

                to free system resources.

                When reading this object the value of 'noop' will be 

                returned. This object can only be set to 'delete'. 

                When this object is set to 'delete', the conceptual

                row corresponding to this object will be deleted to

                free system resources. This is equivalent to clearing

                the event log. Should the trigger that caused the event

                to be logged reoccur, the event will be re\-asserted but

                in a different conceptual row.

                .. data:: noop = 1

                .. data:: delete = 2

                """

                noop = Enum.YLeaf(1, "noop")

                delete = Enum.YLeaf(2, "delete")


            class Cethercfmeventrmtportstate(Enum):
                """
                Cethercfmeventrmtportstate (Enum Class)

                The operational state of the port on which the 

                remote MEP is configured. This information is 

                derived from the port\-state as indicated in the 

                CC message. The possible values are\:

                'up'                    \- The port is operationally up.

                'down'                  \- The port is operationally (but not

                                          administratively) down.

                'adminDown'             \- The port is administratively down.

                'test'                  \- The port is in test mode (perhaps 

                                          due to an IEEE Standard 802.3ah OAM

                                          intrusive loopback operation).

                'remoteExcessiveErrors' \- 802.3ah OAM reports that the other 

                                          end of the link is receiving an 

                                          excessive number of invalid frames.

                'localExcessiveErrors'  \- 802.3ah OAM reports that this end of

                                          the link is receiving an excessive 

                                          number of invalid frames.

                'localNoData'           \- No data and no CFM messages have been

                                          received for an excessive length of 

                                          time.

                .. data:: up = 1

                .. data:: down = 2

                .. data:: adminDown = 3

                .. data:: test = 4

                .. data:: remoteExcessiveErrors = 5

                .. data:: localExcessiveErrors = 6

                .. data:: localNoData = 7

                """

                up = Enum.YLeaf(1, "up")

                down = Enum.YLeaf(2, "down")

                adminDown = Enum.YLeaf(3, "adminDown")

                test = Enum.YLeaf(4, "test")

                remoteExcessiveErrors = Enum.YLeaf(5, "remoteExcessiveErrors")

                localExcessiveErrors = Enum.YLeaf(6, "localExcessiveErrors")

                localNoData = Enum.YLeaf(7, "localNoData")


            class Cethercfmeventtype(Enum):
                """
                Cethercfmeventtype (Enum Class)

                This object informs the management station of how to interpret

                the rest of the objects within a row, as summarized in the 

                following table\:

                Legend I\: Ignored Object 

                       V\: Valid Object

                Object                                 cEtherCfmEventType

                                               \| 1 \| 2 \| 3 \| 4 \| 5 \| 6 \| 7 \| 8

                ================================================================

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventDomainIndex      \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventSvlan            \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventIndex            \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventLastChange       \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventServiceId        \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventDomainName       \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventLclMepid         \| I \| I \| I \| V \| V \| I \| I \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventLclMacAddress    \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventLclMepCount      \| V \| V \| I \| I \| I \| I \| I \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventLclIfCount       \| V \| V \| I \| I \| I \| I \| I \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventRmtMepid         \| V \| V \| V \| I \| I \| V \| V \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventRmtMacAddress    \| V \| V \| V \| I \| V \| V \| V \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventRmtPortState     \| V \| I \| I \| I \| I \| I \| I \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventRmtServiceId     \| I \| I \| V \| I \| I \| I \| I \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventCode             \| V \| V \| I \| I \| I \| I \| I \| I

                                               \|   \|   \|   \|   \|   \|   \|   \|

                cEtherCfmEventDeleteRow        \| V \| V \| V \| V \| V \| V \| V \| V

                                               \|   \|   \|   \|   \|   \|   \|   \|

                Note\: When reading any ignored object, a value of 0 will 

                be returned by the agent.

                .. data:: mepUp = 1

                .. data:: mepDown = 2

                .. data:: xconnect = 3

                .. data:: loop = 4

                .. data:: config = 5

                .. data:: xcheckMissing = 6

                .. data:: xcheckUnknown = 7

                .. data:: xcheckServiceUp = 8

                """

                mepUp = Enum.YLeaf(1, "mepUp")

                mepDown = Enum.YLeaf(2, "mepDown")

                xconnect = Enum.YLeaf(3, "xconnect")

                loop = Enum.YLeaf(4, "loop")

                config = Enum.YLeaf(5, "config")

                xcheckMissing = Enum.YLeaf(6, "xcheckMissing")

                xcheckUnknown = Enum.YLeaf(7, "xcheckUnknown")

                xcheckServiceUp = Enum.YLeaf(8, "xcheckServiceUp")


    def clone_ptr(self):
        self._top_entity = CISCOETHERCFMMIB()
        return self._top_entity

