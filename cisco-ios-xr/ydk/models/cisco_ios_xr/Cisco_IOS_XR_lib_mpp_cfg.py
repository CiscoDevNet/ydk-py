""" Cisco_IOS_XR_lib_mpp_cfg 

This module contains a collection of YANG definitions
for Cisco IOS\-XR lib\-mpp package configuration.

This module contains definitions
for the following management objects\:
  control\-plane\: Configure control Plane

Copyright (c) 2013\-2017 by Cisco Systems, Inc.
All rights reserved.

"""
from collections import OrderedDict

from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error



class ControlPlane(Entity):
    """
    Configure control Plane
    
    .. attribute:: management_plane_protection
    
    	Configure management plane protection
    	**type**\:  :py:class:`ManagementPlaneProtection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection>`
    
    

    """

    _prefix = 'lib-mpp-cfg'
    _revision = '2017-07-28'

    def __init__(self):
        super(ControlPlane, self).__init__()
        self._top_entity = None

        self.yang_name = "control-plane"
        self.yang_parent_name = "Cisco-IOS-XR-lib-mpp-cfg"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("management-plane-protection", ("management_plane_protection", ControlPlane.ManagementPlaneProtection))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.management_plane_protection = ControlPlane.ManagementPlaneProtection()
        self.management_plane_protection.parent = self
        self._children_name_map["management_plane_protection"] = "management-plane-protection"
        self._children_yang_names.add("management-plane-protection")
        self._segment_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane"


    class ManagementPlaneProtection(Entity):
        """
        Configure management plane protection
        
        .. attribute:: outband
        
        	Outband Configuration
        	**type**\:  :py:class:`Outband <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband>`
        
        .. attribute:: inband
        
        	Inband Configuration
        	**type**\:  :py:class:`Inband <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband>`
        
        .. attribute:: tpa
        
        	MPP Third Party Application Configuration Commands
        	**type**\:  :py:class:`Tpa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Tpa>`
        
        

        """

        _prefix = 'lib-mpp-cfg'
        _revision = '2017-07-28'

        def __init__(self):
            super(ControlPlane.ManagementPlaneProtection, self).__init__()

            self.yang_name = "management-plane-protection"
            self.yang_parent_name = "control-plane"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("outband", ("outband", ControlPlane.ManagementPlaneProtection.Outband)), ("inband", ("inband", ControlPlane.ManagementPlaneProtection.Inband)), ("tpa", ("tpa", ControlPlane.ManagementPlaneProtection.Tpa))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.outband = ControlPlane.ManagementPlaneProtection.Outband()
            self.outband.parent = self
            self._children_name_map["outband"] = "outband"
            self._children_yang_names.add("outband")

            self.inband = ControlPlane.ManagementPlaneProtection.Inband()
            self.inband.parent = self
            self._children_name_map["inband"] = "inband"
            self._children_yang_names.add("inband")

            self.tpa = ControlPlane.ManagementPlaneProtection.Tpa()
            self.tpa.parent = self
            self._children_name_map["tpa"] = "tpa"
            self._children_yang_names.add("tpa")
            self._segment_path = lambda: "management-plane-protection"
            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/%s" % self._segment_path()


        class Outband(Entity):
            """
            Outband Configuration
            
            .. attribute:: outband_vrf
            
            	Configure outband VRF
            	**type**\: str
            
            .. attribute:: interface_selection
            
            	Configure interfaces
            	**type**\:  :py:class:`InterfaceSelection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection>`
            
            

            """

            _prefix = 'lib-mpp-cfg'
            _revision = '2017-07-28'

            def __init__(self):
                super(ControlPlane.ManagementPlaneProtection.Outband, self).__init__()

                self.yang_name = "outband"
                self.yang_parent_name = "management-plane-protection"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("interface-selection", ("interface_selection", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('outband_vrf', YLeaf(YType.str, 'outband-vrf')),
                ])
                self.outband_vrf = None

                self.interface_selection = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection()
                self.interface_selection.parent = self
                self._children_name_map["interface_selection"] = "interface-selection"
                self._children_yang_names.add("interface-selection")
                self._segment_path = lambda: "outband"
                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband, ['outband_vrf'], name, value)


            class InterfaceSelection(Entity):
                """
                Configure interfaces
                
                .. attribute:: interfaces
                
                	Configure a specific interface
                	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces>`
                
                .. attribute:: all_interfaces
                
                	Configure all Inband interfaces
                	**type**\:  :py:class:`AllInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces>`
                
                

                """

                _prefix = 'lib-mpp-cfg'
                _revision = '2017-07-28'

                def __init__(self):
                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection, self).__init__()

                    self.yang_name = "interface-selection"
                    self.yang_parent_name = "outband"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("interfaces", ("interfaces", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces)), ("all-interfaces", ("all_interfaces", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.interfaces = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces()
                    self.interfaces.parent = self
                    self._children_name_map["interfaces"] = "interfaces"
                    self._children_yang_names.add("interfaces")

                    self.all_interfaces = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces()
                    self.all_interfaces.parent = self
                    self._children_name_map["all_interfaces"] = "all-interfaces"
                    self._children_yang_names.add("all-interfaces")
                    self._segment_path = lambda: "interface-selection"
                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/%s" % self._segment_path()


                class Interfaces(Entity):
                    """
                    Configure a specific interface
                    
                    .. attribute:: interface
                    
                    	Specific interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface>`
                    
                    

                    """

                    _prefix = 'lib-mpp-cfg'
                    _revision = '2017-07-28'

                    def __init__(self):
                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces, self).__init__()

                        self.yang_name = "interfaces"
                        self.yang_parent_name = "interface-selection"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("interface", ("interface", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface))])
                        self._leafs = OrderedDict()

                        self.interface = YList(self)
                        self._segment_path = lambda: "interfaces"
                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces, [], name, value)


                    class Interface(Entity):
                        """
                        Specific interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Name of the Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: http_protocol
                        
                        	Configure HTTP on this interface
                        	**type**\:  :py:class:`HttpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol>`
                        
                        .. attribute:: tftp_protocol
                        
                        	Configure TFTP on this interface
                        	**type**\:  :py:class:`TftpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol>`
                        
                        .. attribute:: netconf_protocol
                        
                        	Configure NETCONF protocol and peer addresses
                        	**type**\:  :py:class:`NetconfProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol>`
                        
                        .. attribute:: xr_xml
                        
                        	Configure XML and peer addresses
                        	**type**\:  :py:class:`XrXml <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml>`
                        
                        .. attribute:: ssh_protocol
                        
                        	Configure SSH protocol and peer addresses
                        	**type**\:  :py:class:`SshProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol>`
                        
                        .. attribute:: snmp_protocol
                        
                        	Configure SNMP for this interface
                        	**type**\:  :py:class:`SnmpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol>`
                        
                        .. attribute:: telnet_protocol
                        
                        	Configure Telnet for this interface
                        	**type**\:  :py:class:`TelnetProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol>`
                        
                        .. attribute:: all_protocols
                        
                        	Configure all protocols on this interface
                        	**type**\:  :py:class:`AllProtocols <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['interface_name']
                            self._child_container_classes = OrderedDict([("http-protocol", ("http_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol)), ("tftp-protocol", ("tftp_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol)), ("netconf-protocol", ("netconf_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol)), ("xr-xml", ("xr_xml", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml)), ("ssh-protocol", ("ssh_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol)), ("snmp-protocol", ("snmp_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol)), ("telnet-protocol", ("telnet_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol)), ("all-protocols", ("all_protocols", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ])
                            self.interface_name = None

                            self.http_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol()
                            self.http_protocol.parent = self
                            self._children_name_map["http_protocol"] = "http-protocol"
                            self._children_yang_names.add("http-protocol")

                            self.tftp_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol()
                            self.tftp_protocol.parent = self
                            self._children_name_map["tftp_protocol"] = "tftp-protocol"
                            self._children_yang_names.add("tftp-protocol")

                            self.netconf_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol()
                            self.netconf_protocol.parent = self
                            self._children_name_map["netconf_protocol"] = "netconf-protocol"
                            self._children_yang_names.add("netconf-protocol")

                            self.xr_xml = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml()
                            self.xr_xml.parent = self
                            self._children_name_map["xr_xml"] = "xr-xml"
                            self._children_yang_names.add("xr-xml")

                            self.ssh_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol()
                            self.ssh_protocol.parent = self
                            self._children_name_map["ssh_protocol"] = "ssh-protocol"
                            self._children_yang_names.add("ssh-protocol")

                            self.snmp_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol()
                            self.snmp_protocol.parent = self
                            self._children_name_map["snmp_protocol"] = "snmp-protocol"
                            self._children_yang_names.add("snmp-protocol")

                            self.telnet_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol()
                            self.telnet_protocol.parent = self
                            self._children_name_map["telnet_protocol"] = "telnet-protocol"
                            self._children_yang_names.add("telnet-protocol")

                            self.all_protocols = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols()
                            self.all_protocols.parent = self
                            self._children_name_map["all_protocols"] = "all-protocols"
                            self._children_yang_names.add("all-protocols")
                            self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/interfaces/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface, ['interface_name'], name, value)


                        class HttpProtocol(Entity):
                            """
                            Configure HTTP on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol, self).__init__()

                                self.yang_name = "http-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "http-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "http-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                        class TftpProtocol(Entity):
                            """
                            Configure TFTP on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol, self).__init__()

                                self.yang_name = "tftp-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "tftp-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "tftp-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                        class NetconfProtocol(Entity):
                            """
                            Configure NETCONF protocol and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol, self).__init__()

                                self.yang_name = "netconf-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "netconf-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "netconf-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                        class XrXml(Entity):
                            """
                            Configure XML and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml, self).__init__()

                                self.yang_name = "xr-xml"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "xr-xml"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "xr-xml"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                        class SshProtocol(Entity):
                            """
                            Configure SSH protocol and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol, self).__init__()

                                self.yang_name = "ssh-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "ssh-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "ssh-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                        class SnmpProtocol(Entity):
                            """
                            Configure SNMP for this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol, self).__init__()

                                self.yang_name = "snmp-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "snmp-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "snmp-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                        class TelnetProtocol(Entity):
                            """
                            Configure Telnet for this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol, self).__init__()

                                self.yang_name = "telnet-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "telnet-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "telnet-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                        class AllProtocols(Entity):
                            """
                            Configure all protocols on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols, self).__init__()

                                self.yang_name = "all-protocols"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "all-protocols"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "all-protocols"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                class AllInterfaces(Entity):
                    """
                    Configure all Inband interfaces
                    
                    .. attribute:: http_protocol
                    
                    	Configure HTTP on this interface
                    	**type**\:  :py:class:`HttpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol>`
                    
                    .. attribute:: tftp_protocol
                    
                    	Configure TFTP on this interface
                    	**type**\:  :py:class:`TftpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol>`
                    
                    .. attribute:: netconf_protocol
                    
                    	Configure NETCONF protocol and peer addresses
                    	**type**\:  :py:class:`NetconfProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol>`
                    
                    .. attribute:: xr_xml
                    
                    	Configure XML and peer addresses
                    	**type**\:  :py:class:`XrXml <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml>`
                    
                    .. attribute:: ssh_protocol
                    
                    	Configure SSH protocol and peer addresses
                    	**type**\:  :py:class:`SshProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol>`
                    
                    .. attribute:: snmp_protocol
                    
                    	Configure SNMP for this interface
                    	**type**\:  :py:class:`SnmpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol>`
                    
                    .. attribute:: telnet_protocol
                    
                    	Configure Telnet for this interface
                    	**type**\:  :py:class:`TelnetProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol>`
                    
                    .. attribute:: all_protocols
                    
                    	Configure all protocols on this interface
                    	**type**\:  :py:class:`AllProtocols <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols>`
                    
                    

                    """

                    _prefix = 'lib-mpp-cfg'
                    _revision = '2017-07-28'

                    def __init__(self):
                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces, self).__init__()

                        self.yang_name = "all-interfaces"
                        self.yang_parent_name = "interface-selection"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("http-protocol", ("http_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol)), ("tftp-protocol", ("tftp_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol)), ("netconf-protocol", ("netconf_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol)), ("xr-xml", ("xr_xml", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml)), ("ssh-protocol", ("ssh_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol)), ("snmp-protocol", ("snmp_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol)), ("telnet-protocol", ("telnet_protocol", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol)), ("all-protocols", ("all_protocols", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.http_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol()
                        self.http_protocol.parent = self
                        self._children_name_map["http_protocol"] = "http-protocol"
                        self._children_yang_names.add("http-protocol")

                        self.tftp_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol()
                        self.tftp_protocol.parent = self
                        self._children_name_map["tftp_protocol"] = "tftp-protocol"
                        self._children_yang_names.add("tftp-protocol")

                        self.netconf_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol()
                        self.netconf_protocol.parent = self
                        self._children_name_map["netconf_protocol"] = "netconf-protocol"
                        self._children_yang_names.add("netconf-protocol")

                        self.xr_xml = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml()
                        self.xr_xml.parent = self
                        self._children_name_map["xr_xml"] = "xr-xml"
                        self._children_yang_names.add("xr-xml")

                        self.ssh_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol()
                        self.ssh_protocol.parent = self
                        self._children_name_map["ssh_protocol"] = "ssh-protocol"
                        self._children_yang_names.add("ssh-protocol")

                        self.snmp_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol()
                        self.snmp_protocol.parent = self
                        self._children_name_map["snmp_protocol"] = "snmp-protocol"
                        self._children_yang_names.add("snmp-protocol")

                        self.telnet_protocol = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol()
                        self.telnet_protocol.parent = self
                        self._children_name_map["telnet_protocol"] = "telnet-protocol"
                        self._children_yang_names.add("telnet-protocol")

                        self.all_protocols = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols()
                        self.all_protocols.parent = self
                        self._children_name_map["all_protocols"] = "all-protocols"
                        self._children_yang_names.add("all-protocols")
                        self._segment_path = lambda: "all-interfaces"
                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/%s" % self._segment_path()


                    class HttpProtocol(Entity):
                        """
                        Configure HTTP on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol, self).__init__()

                            self.yang_name = "http-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "http-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "http-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                    class TftpProtocol(Entity):
                        """
                        Configure TFTP on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol, self).__init__()

                            self.yang_name = "tftp-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "tftp-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "tftp-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                    class NetconfProtocol(Entity):
                        """
                        Configure NETCONF protocol and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol, self).__init__()

                            self.yang_name = "netconf-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "netconf-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "netconf-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                    class XrXml(Entity):
                        """
                        Configure XML and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml, self).__init__()

                            self.yang_name = "xr-xml"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "xr-xml"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "xr-xml"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                    class SshProtocol(Entity):
                        """
                        Configure SSH protocol and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol, self).__init__()

                            self.yang_name = "ssh-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "ssh-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "ssh-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                    class SnmpProtocol(Entity):
                        """
                        Configure SNMP for this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol, self).__init__()

                            self.yang_name = "snmp-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "snmp-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "snmp-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                    class TelnetProtocol(Entity):
                        """
                        Configure Telnet for this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol, self).__init__()

                            self.yang_name = "telnet-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "telnet-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "telnet-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                    class AllProtocols(Entity):
                        """
                        Configure all protocols on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols, self).__init__()

                            self.yang_name = "all-protocols"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "all-protocols"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "all-protocols"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/outband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Outband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


        class Inband(Entity):
            """
            Inband Configuration
            
            .. attribute:: interface_selection
            
            	Configure interfaces
            	**type**\:  :py:class:`InterfaceSelection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection>`
            
            

            """

            _prefix = 'lib-mpp-cfg'
            _revision = '2017-07-28'

            def __init__(self):
                super(ControlPlane.ManagementPlaneProtection.Inband, self).__init__()

                self.yang_name = "inband"
                self.yang_parent_name = "management-plane-protection"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("interface-selection", ("interface_selection", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict()

                self.interface_selection = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection()
                self.interface_selection.parent = self
                self._children_name_map["interface_selection"] = "interface-selection"
                self._children_yang_names.add("interface-selection")
                self._segment_path = lambda: "inband"
                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/%s" % self._segment_path()


            class InterfaceSelection(Entity):
                """
                Configure interfaces
                
                .. attribute:: interfaces
                
                	Configure a specific interface
                	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces>`
                
                .. attribute:: all_interfaces
                
                	Configure all Inband interfaces
                	**type**\:  :py:class:`AllInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces>`
                
                

                """

                _prefix = 'lib-mpp-cfg'
                _revision = '2017-07-28'

                def __init__(self):
                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection, self).__init__()

                    self.yang_name = "interface-selection"
                    self.yang_parent_name = "inband"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("interfaces", ("interfaces", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces)), ("all-interfaces", ("all_interfaces", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict()

                    self.interfaces = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces()
                    self.interfaces.parent = self
                    self._children_name_map["interfaces"] = "interfaces"
                    self._children_yang_names.add("interfaces")

                    self.all_interfaces = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces()
                    self.all_interfaces.parent = self
                    self._children_name_map["all_interfaces"] = "all-interfaces"
                    self._children_yang_names.add("all-interfaces")
                    self._segment_path = lambda: "interface-selection"
                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/%s" % self._segment_path()


                class Interfaces(Entity):
                    """
                    Configure a specific interface
                    
                    .. attribute:: interface
                    
                    	Specific interface
                    	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface>`
                    
                    

                    """

                    _prefix = 'lib-mpp-cfg'
                    _revision = '2017-07-28'

                    def __init__(self):
                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces, self).__init__()

                        self.yang_name = "interfaces"
                        self.yang_parent_name = "interface-selection"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("interface", ("interface", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface))])
                        self._leafs = OrderedDict()

                        self.interface = YList(self)
                        self._segment_path = lambda: "interfaces"
                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces, [], name, value)


                    class Interface(Entity):
                        """
                        Specific interface
                        
                        .. attribute:: interface_name  (key)
                        
                        	Name of the Interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: http_protocol
                        
                        	Configure HTTP on this interface
                        	**type**\:  :py:class:`HttpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol>`
                        
                        .. attribute:: tftp_protocol
                        
                        	Configure TFTP on this interface
                        	**type**\:  :py:class:`TftpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol>`
                        
                        .. attribute:: netconf_protocol
                        
                        	Configure NETCONF protocol and peer addresses
                        	**type**\:  :py:class:`NetconfProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol>`
                        
                        .. attribute:: xr_xml
                        
                        	Configure XML and peer addresses
                        	**type**\:  :py:class:`XrXml <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml>`
                        
                        .. attribute:: ssh_protocol
                        
                        	Configure SSH protocol and peer addresses
                        	**type**\:  :py:class:`SshProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol>`
                        
                        .. attribute:: snmp_protocol
                        
                        	Configure SNMP for this interface
                        	**type**\:  :py:class:`SnmpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol>`
                        
                        .. attribute:: telnet_protocol
                        
                        	Configure Telnet for this interface
                        	**type**\:  :py:class:`TelnetProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol>`
                        
                        .. attribute:: all_protocols
                        
                        	Configure all protocols on this interface
                        	**type**\:  :py:class:`AllProtocols <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = ['interface_name']
                            self._child_container_classes = OrderedDict([("http-protocol", ("http_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol)), ("tftp-protocol", ("tftp_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol)), ("netconf-protocol", ("netconf_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol)), ("xr-xml", ("xr_xml", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml)), ("ssh-protocol", ("ssh_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol)), ("snmp-protocol", ("snmp_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol)), ("telnet-protocol", ("telnet_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol)), ("all-protocols", ("all_protocols", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ])
                            self.interface_name = None

                            self.http_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol()
                            self.http_protocol.parent = self
                            self._children_name_map["http_protocol"] = "http-protocol"
                            self._children_yang_names.add("http-protocol")

                            self.tftp_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol()
                            self.tftp_protocol.parent = self
                            self._children_name_map["tftp_protocol"] = "tftp-protocol"
                            self._children_yang_names.add("tftp-protocol")

                            self.netconf_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol()
                            self.netconf_protocol.parent = self
                            self._children_name_map["netconf_protocol"] = "netconf-protocol"
                            self._children_yang_names.add("netconf-protocol")

                            self.xr_xml = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml()
                            self.xr_xml.parent = self
                            self._children_name_map["xr_xml"] = "xr-xml"
                            self._children_yang_names.add("xr-xml")

                            self.ssh_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol()
                            self.ssh_protocol.parent = self
                            self._children_name_map["ssh_protocol"] = "ssh-protocol"
                            self._children_yang_names.add("ssh-protocol")

                            self.snmp_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol()
                            self.snmp_protocol.parent = self
                            self._children_name_map["snmp_protocol"] = "snmp-protocol"
                            self._children_yang_names.add("snmp-protocol")

                            self.telnet_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol()
                            self.telnet_protocol.parent = self
                            self._children_name_map["telnet_protocol"] = "telnet-protocol"
                            self._children_yang_names.add("telnet-protocol")

                            self.all_protocols = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols()
                            self.all_protocols.parent = self
                            self._children_name_map["all_protocols"] = "all-protocols"
                            self._children_yang_names.add("all-protocols")
                            self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/interfaces/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface, ['interface_name'], name, value)


                        class HttpProtocol(Entity):
                            """
                            Configure HTTP on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol, self).__init__()

                                self.yang_name = "http-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "http-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "http-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                        class TftpProtocol(Entity):
                            """
                            Configure TFTP on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol, self).__init__()

                                self.yang_name = "tftp-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "tftp-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "tftp-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                        class NetconfProtocol(Entity):
                            """
                            Configure NETCONF protocol and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol, self).__init__()

                                self.yang_name = "netconf-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "netconf-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "netconf-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                        class XrXml(Entity):
                            """
                            Configure XML and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml, self).__init__()

                                self.yang_name = "xr-xml"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "xr-xml"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "xr-xml"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                        class SshProtocol(Entity):
                            """
                            Configure SSH protocol and peer addresses
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol, self).__init__()

                                self.yang_name = "ssh-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "ssh-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "ssh-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                        class SnmpProtocol(Entity):
                            """
                            Configure SNMP for this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol, self).__init__()

                                self.yang_name = "snmp-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "snmp-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "snmp-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                        class TelnetProtocol(Entity):
                            """
                            Configure Telnet for this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol, self).__init__()

                                self.yang_name = "telnet-protocol"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "telnet-protocol"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "telnet-protocol"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                        class AllProtocols(Entity):
                            """
                            Configure all protocols on this interface
                            
                            .. attribute:: peer_class
                            
                            	Configure peer addresses
                            	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols, self).__init__()

                                self.yang_name = "all-protocols"
                                self.yang_parent_name = "interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict()

                                self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass()
                                self.peer_class.parent = self
                                self._children_name_map["peer_class"] = "peer-class"
                                self._children_yang_names.add("peer-class")
                                self._segment_path = lambda: "all-protocols"


                            class PeerClass(Entity):
                                """
                                Configure peer addresses
                                
                                .. attribute:: peer_v4
                                
                                	Configure v4 peer addresses
                                	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4>`
                                
                                .. attribute:: peer_v6
                                
                                	Configure v6 peer addresses
                                	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6>`
                                
                                .. attribute:: peer_all
                                
                                	Only takes 'True'
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass, self).__init__()

                                    self.yang_name = "peer-class"
                                    self.yang_parent_name = "all-protocols"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                    ])
                                    self.peer_all = None

                                    self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4()
                                    self.peer_v4.parent = self
                                    self._children_name_map["peer_v4"] = "peer-v4"
                                    self._children_yang_names.add("peer-v4")

                                    self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6()
                                    self.peer_v6.parent = self
                                    self._children_name_map["peer_v6"] = "peer-v6"
                                    self._children_yang_names.add("peer-v6")
                                    self._segment_path = lambda: "peer-class"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass, ['peer_all'], name, value)


                                class PeerV4(Entity):
                                    """
                                    Configure v4 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4, self).__init__()

                                        self.yang_name = "peer-v4"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v4"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v4"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                                class PeerV6(Entity):
                                    """
                                    Configure v6 peer addresses
                                    
                                    .. attribute:: peers
                                    
                                    	Configure peer addresses
                                    	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers>`
                                    
                                    .. attribute:: peer_prefixes
                                    
                                    	Configure peer addresses with prefix
                                    	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6, self).__init__()

                                        self.yang_name = "peer-v6"
                                        self.yang_parent_name = "peer-class"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict()

                                        self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers()
                                        self.peers.parent = self
                                        self._children_name_map["peers"] = "peers"
                                        self._children_yang_names.add("peers")

                                        self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes()
                                        self.peer_prefixes.parent = self
                                        self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                        self._children_yang_names.add("peer-prefixes")
                                        self._segment_path = lambda: "peer-v6"


                                    class Peers(Entity):
                                        """
                                        Configure peer addresses
                                        
                                        .. attribute:: peer
                                        
                                        	Configure peer on the interface
                                        	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers, self).__init__()

                                            self.yang_name = "peers"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer))])
                                            self._leafs = OrderedDict()

                                            self.peer = YList(self)
                                            self._segment_path = lambda: "peers"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers, [], name, value)


                                        class Peer(Entity):
                                            """
                                            Configure peer on the interface
                                            
                                            .. attribute:: address  (key)
                                            
                                            	prefix
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                                self.yang_name = "peer"
                                                self.yang_parent_name = "peers"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address', YLeaf(YType.str, 'address')),
                                                ])
                                                self.address = None
                                                self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                    class PeerPrefixes(Entity):
                                        """
                                        Configure peer addresses with prefix
                                        
                                        .. attribute:: peer_prefix
                                        
                                        	Peer address (with prefix)
                                        	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                            self.yang_name = "peer-prefixes"
                                            self.yang_parent_name = "peer-v6"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                            self._leafs = OrderedDict()

                                            self.peer_prefix = YList(self)
                                            self._segment_path = lambda: "peer-prefixes"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                        class PeerPrefix(Entity):
                                            """
                                            Peer address (with prefix)
                                            
                                            .. attribute:: address_prefix  (key)
                                            
                                            	prefix/length
                                            	**type**\: union of the below types:
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                            
                                            		**type**\: str
                                            
                                            			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                            
                                            

                                            """

                                            _prefix = 'lib-mpp-cfg'
                                            _revision = '2017-07-28'

                                            def __init__(self):
                                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                                self.yang_name = "peer-prefix"
                                                self.yang_parent_name = "peer-prefixes"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['address_prefix']
                                                self._child_container_classes = OrderedDict([])
                                                self._child_list_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                                ])
                                                self.address_prefix = None
                                                self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.Interfaces.Interface.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                class AllInterfaces(Entity):
                    """
                    Configure all Inband interfaces
                    
                    .. attribute:: http_protocol
                    
                    	Configure HTTP on this interface
                    	**type**\:  :py:class:`HttpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol>`
                    
                    .. attribute:: tftp_protocol
                    
                    	Configure TFTP on this interface
                    	**type**\:  :py:class:`TftpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol>`
                    
                    .. attribute:: netconf_protocol
                    
                    	Configure NETCONF protocol and peer addresses
                    	**type**\:  :py:class:`NetconfProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol>`
                    
                    .. attribute:: xr_xml
                    
                    	Configure XML and peer addresses
                    	**type**\:  :py:class:`XrXml <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml>`
                    
                    .. attribute:: ssh_protocol
                    
                    	Configure SSH protocol and peer addresses
                    	**type**\:  :py:class:`SshProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol>`
                    
                    .. attribute:: snmp_protocol
                    
                    	Configure SNMP for this interface
                    	**type**\:  :py:class:`SnmpProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol>`
                    
                    .. attribute:: telnet_protocol
                    
                    	Configure Telnet for this interface
                    	**type**\:  :py:class:`TelnetProtocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol>`
                    
                    .. attribute:: all_protocols
                    
                    	Configure all protocols on this interface
                    	**type**\:  :py:class:`AllProtocols <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols>`
                    
                    

                    """

                    _prefix = 'lib-mpp-cfg'
                    _revision = '2017-07-28'

                    def __init__(self):
                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces, self).__init__()

                        self.yang_name = "all-interfaces"
                        self.yang_parent_name = "interface-selection"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("http-protocol", ("http_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol)), ("tftp-protocol", ("tftp_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol)), ("netconf-protocol", ("netconf_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol)), ("xr-xml", ("xr_xml", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml)), ("ssh-protocol", ("ssh_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol)), ("snmp-protocol", ("snmp_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol)), ("telnet-protocol", ("telnet_protocol", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol)), ("all-protocols", ("all_protocols", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict()

                        self.http_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol()
                        self.http_protocol.parent = self
                        self._children_name_map["http_protocol"] = "http-protocol"
                        self._children_yang_names.add("http-protocol")

                        self.tftp_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol()
                        self.tftp_protocol.parent = self
                        self._children_name_map["tftp_protocol"] = "tftp-protocol"
                        self._children_yang_names.add("tftp-protocol")

                        self.netconf_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol()
                        self.netconf_protocol.parent = self
                        self._children_name_map["netconf_protocol"] = "netconf-protocol"
                        self._children_yang_names.add("netconf-protocol")

                        self.xr_xml = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml()
                        self.xr_xml.parent = self
                        self._children_name_map["xr_xml"] = "xr-xml"
                        self._children_yang_names.add("xr-xml")

                        self.ssh_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol()
                        self.ssh_protocol.parent = self
                        self._children_name_map["ssh_protocol"] = "ssh-protocol"
                        self._children_yang_names.add("ssh-protocol")

                        self.snmp_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol()
                        self.snmp_protocol.parent = self
                        self._children_name_map["snmp_protocol"] = "snmp-protocol"
                        self._children_yang_names.add("snmp-protocol")

                        self.telnet_protocol = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol()
                        self.telnet_protocol.parent = self
                        self._children_name_map["telnet_protocol"] = "telnet-protocol"
                        self._children_yang_names.add("telnet-protocol")

                        self.all_protocols = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols()
                        self.all_protocols.parent = self
                        self._children_name_map["all_protocols"] = "all-protocols"
                        self._children_yang_names.add("all-protocols")
                        self._segment_path = lambda: "all-interfaces"
                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/%s" % self._segment_path()


                    class HttpProtocol(Entity):
                        """
                        Configure HTTP on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol, self).__init__()

                            self.yang_name = "http-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "http-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "http-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/http-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.HttpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                    class TftpProtocol(Entity):
                        """
                        Configure TFTP on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol, self).__init__()

                            self.yang_name = "tftp-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "tftp-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "tftp-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/tftp-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TftpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                    class NetconfProtocol(Entity):
                        """
                        Configure NETCONF protocol and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol, self).__init__()

                            self.yang_name = "netconf-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "netconf-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "netconf-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/netconf-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.NetconfProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                    class XrXml(Entity):
                        """
                        Configure XML and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml, self).__init__()

                            self.yang_name = "xr-xml"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "xr-xml"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "xr-xml"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/xr-xml/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.XrXml.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                    class SshProtocol(Entity):
                        """
                        Configure SSH protocol and peer addresses
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol, self).__init__()

                            self.yang_name = "ssh-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "ssh-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "ssh-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/ssh-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SshProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                    class SnmpProtocol(Entity):
                        """
                        Configure SNMP for this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol, self).__init__()

                            self.yang_name = "snmp-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "snmp-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "snmp-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/snmp-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.SnmpProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                    class TelnetProtocol(Entity):
                        """
                        Configure Telnet for this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol, self).__init__()

                            self.yang_name = "telnet-protocol"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "telnet-protocol"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "telnet-protocol"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/telnet-protocol/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.TelnetProtocol.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                    class AllProtocols(Entity):
                        """
                        Configure all protocols on this interface
                        
                        .. attribute:: peer_class
                        
                        	Configure peer addresses
                        	**type**\:  :py:class:`PeerClass <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols, self).__init__()

                            self.yang_name = "all-protocols"
                            self.yang_parent_name = "all-interfaces"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("peer-class", ("peer_class", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.peer_class = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass()
                            self.peer_class.parent = self
                            self._children_name_map["peer_class"] = "peer-class"
                            self._children_yang_names.add("peer-class")
                            self._segment_path = lambda: "all-protocols"
                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/%s" % self._segment_path()


                        class PeerClass(Entity):
                            """
                            Configure peer addresses
                            
                            .. attribute:: peer_v4
                            
                            	Configure v4 peer addresses
                            	**type**\:  :py:class:`PeerV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4>`
                            
                            .. attribute:: peer_v6
                            
                            	Configure v6 peer addresses
                            	**type**\:  :py:class:`PeerV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6>`
                            
                            .. attribute:: peer_all
                            
                            	Only takes 'True'
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass, self).__init__()

                                self.yang_name = "peer-class"
                                self.yang_parent_name = "all-protocols"
                                self.is_top_level_class = False
                                self.has_list_ancestor = False
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("peer-v4", ("peer_v4", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4)), ("peer-v6", ("peer_v6", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_all', YLeaf(YType.empty, 'peer-all')),
                                ])
                                self.peer_all = None

                                self.peer_v4 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4()
                                self.peer_v4.parent = self
                                self._children_name_map["peer_v4"] = "peer-v4"
                                self._children_yang_names.add("peer-v4")

                                self.peer_v6 = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6()
                                self.peer_v6.parent = self
                                self._children_name_map["peer_v6"] = "peer-v6"
                                self._children_yang_names.add("peer-v6")
                                self._segment_path = lambda: "peer-class"
                                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/%s" % self._segment_path()

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass, ['peer_all'], name, value)


                            class PeerV4(Entity):
                                """
                                Configure v4 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4, self).__init__()

                                    self.yang_name = "peer-v4"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v4"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v4"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v4/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV4.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


                            class PeerV6(Entity):
                                """
                                Configure v6 peer addresses
                                
                                .. attribute:: peers
                                
                                	Configure peer addresses
                                	**type**\:  :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers>`
                                
                                .. attribute:: peer_prefixes
                                
                                	Configure peer addresses with prefix
                                	**type**\:  :py:class:`PeerPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes>`
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6, self).__init__()

                                    self.yang_name = "peer-v6"
                                    self.yang_parent_name = "peer-class"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = False
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("peers", ("peers", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers)), ("peer-prefixes", ("peer_prefixes", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict()

                                    self.peers = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers()
                                    self.peers.parent = self
                                    self._children_name_map["peers"] = "peers"
                                    self._children_yang_names.add("peers")

                                    self.peer_prefixes = ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes()
                                    self.peer_prefixes.parent = self
                                    self._children_name_map["peer_prefixes"] = "peer-prefixes"
                                    self._children_yang_names.add("peer-prefixes")
                                    self._segment_path = lambda: "peer-v6"
                                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/%s" % self._segment_path()


                                class Peers(Entity):
                                    """
                                    Configure peer addresses
                                    
                                    .. attribute:: peer
                                    
                                    	Configure peer on the interface
                                    	**type**\: list of  		 :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers, self).__init__()

                                        self.yang_name = "peers"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer", ("peer", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer))])
                                        self._leafs = OrderedDict()

                                        self.peer = YList(self)
                                        self._segment_path = lambda: "peers"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers, [], name, value)


                                    class Peer(Entity):
                                        """
                                        Configure peer on the interface
                                        
                                        .. attribute:: address  (key)
                                        
                                        	prefix
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer, self).__init__()

                                            self.yang_name = "peer"
                                            self.yang_parent_name = "peers"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address', YLeaf(YType.str, 'address')),
                                            ])
                                            self.address = None
                                            self._segment_path = lambda: "peer" + "[address='" + str(self.address) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/peers/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.Peers.Peer, ['address'], name, value)


                                class PeerPrefixes(Entity):
                                    """
                                    Configure peer addresses with prefix
                                    
                                    .. attribute:: peer_prefix
                                    
                                    	Peer address (with prefix)
                                    	**type**\: list of  		 :py:class:`PeerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix>`
                                    
                                    

                                    """

                                    _prefix = 'lib-mpp-cfg'
                                    _revision = '2017-07-28'

                                    def __init__(self):
                                        super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes, self).__init__()

                                        self.yang_name = "peer-prefixes"
                                        self.yang_parent_name = "peer-v6"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = False
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([("peer-prefix", ("peer_prefix", ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix))])
                                        self._leafs = OrderedDict()

                                        self.peer_prefix = YList(self)
                                        self._segment_path = lambda: "peer-prefixes"
                                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/%s" % self._segment_path()

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes, [], name, value)


                                    class PeerPrefix(Entity):
                                        """
                                        Peer address (with prefix)
                                        
                                        .. attribute:: address_prefix  (key)
                                        
                                        	prefix/length
                                        	**type**\: union of the below types:
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                                        
                                        		**type**\: str
                                        
                                        			**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                                        
                                        

                                        """

                                        _prefix = 'lib-mpp-cfg'
                                        _revision = '2017-07-28'

                                        def __init__(self):
                                            super(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, self).__init__()

                                            self.yang_name = "peer-prefix"
                                            self.yang_parent_name = "peer-prefixes"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = False
                                            self.ylist_key_names = ['address_prefix']
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('address_prefix', YLeaf(YType.str, 'address-prefix')),
                                            ])
                                            self.address_prefix = None
                                            self._segment_path = lambda: "peer-prefix" + "[address-prefix='" + str(self.address_prefix) + "']"
                                            self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/inband/interface-selection/all-interfaces/all-protocols/peer-class/peer-v6/peer-prefixes/%s" % self._segment_path()

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(ControlPlane.ManagementPlaneProtection.Inband.InterfaceSelection.AllInterfaces.AllProtocols.PeerClass.PeerV6.PeerPrefixes.PeerPrefix, ['address_prefix'], name, value)


        class Tpa(Entity):
            """
            MPP Third Party Application Configuration
            Commands
            
            .. attribute:: vrfs
            
            	VRF configuration
            	**type**\:  :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Tpa.Vrfs>`
            
            

            """

            _prefix = 'lib-mpp-cfg'
            _revision = '2017-07-28'

            def __init__(self):
                super(ControlPlane.ManagementPlaneProtection.Tpa, self).__init__()

                self.yang_name = "tpa"
                self.yang_parent_name = "management-plane-protection"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("vrfs", ("vrfs", ControlPlane.ManagementPlaneProtection.Tpa.Vrfs))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict()

                self.vrfs = ControlPlane.ManagementPlaneProtection.Tpa.Vrfs()
                self.vrfs.parent = self
                self._children_name_map["vrfs"] = "vrfs"
                self._children_yang_names.add("vrfs")
                self._segment_path = lambda: "tpa"
                self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/%s" % self._segment_path()


            class Vrfs(Entity):
                """
                VRF configuration
                
                .. attribute:: vrf
                
                	VRF configuration
                	**type**\: list of  		 :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf>`
                
                

                """

                _prefix = 'lib-mpp-cfg'
                _revision = '2017-07-28'

                def __init__(self):
                    super(ControlPlane.ManagementPlaneProtection.Tpa.Vrfs, self).__init__()

                    self.yang_name = "vrfs"
                    self.yang_parent_name = "tpa"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("vrf", ("vrf", ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf))])
                    self._leafs = OrderedDict()

                    self.vrf = YList(self)
                    self._segment_path = lambda: "vrfs"
                    self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/tpa/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Tpa.Vrfs, [], name, value)


                class Vrf(Entity):
                    """
                    VRF configuration
                    
                    .. attribute:: vrf_name  (key)
                    
                    	VRF name
                    	**type**\: str
                    
                    	**length:** 1..32
                    
                    .. attribute:: address_family
                    
                    	Address family
                    	**type**\:  :py:class:`AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily>`
                    
                    

                    """

                    _prefix = 'lib-mpp-cfg'
                    _revision = '2017-07-28'

                    def __init__(self):
                        super(ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf, self).__init__()

                        self.yang_name = "vrf"
                        self.yang_parent_name = "vrfs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = ['vrf_name']
                        self._child_container_classes = OrderedDict([("address-family", ("address_family", ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('vrf_name', YLeaf(YType.str, 'vrf-name')),
                        ])
                        self.vrf_name = None

                        self.address_family = ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily()
                        self.address_family.parent = self
                        self._children_name_map["address_family"] = "address-family"
                        self._children_yang_names.add("address-family")
                        self._segment_path = lambda: "vrf" + "[vrf-name='" + str(self.vrf_name) + "']"
                        self._absolute_path = lambda: "Cisco-IOS-XR-lib-mpp-cfg:control-plane/management-plane-protection/tpa/vrfs/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf, ['vrf_name'], name, value)


                    class AddressFamily(Entity):
                        """
                        Address family
                        
                        .. attribute:: ipv4_table
                        
                        	IPv4 configuration
                        	**type**\:  :py:class:`Ipv4Table <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv4Table>`
                        
                        .. attribute:: ipv6_table
                        
                        	IPv6 configuration
                        	**type**\:  :py:class:`Ipv6Table <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv6Table>`
                        
                        

                        """

                        _prefix = 'lib-mpp-cfg'
                        _revision = '2017-07-28'

                        def __init__(self):
                            super(ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily, self).__init__()

                            self.yang_name = "address-family"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("ipv4-table", ("ipv4_table", ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv4Table)), ("ipv6-table", ("ipv6_table", ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv6Table))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict()

                            self.ipv4_table = ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv4Table()
                            self.ipv4_table.parent = self
                            self._children_name_map["ipv4_table"] = "ipv4-table"
                            self._children_yang_names.add("ipv4-table")

                            self.ipv6_table = ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv6Table()
                            self.ipv6_table.parent = self
                            self._children_name_map["ipv6_table"] = "ipv6-table"
                            self._children_yang_names.add("ipv6-table")
                            self._segment_path = lambda: "address-family"


                        class Ipv4Table(Entity):
                            """
                            IPv4 configuration
                            
                            .. attribute:: tpa_allow
                            
                            	MPP TPA control entries
                            	**type**\: list of  		 :py:class:`TpaAllow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv4Table.TpaAllow>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv4Table, self).__init__()

                                self.yang_name = "ipv4-table"
                                self.yang_parent_name = "address-family"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("tpa-allow", ("tpa_allow", ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv4Table.TpaAllow))])
                                self._leafs = OrderedDict()

                                self.tpa_allow = YList(self)
                                self._segment_path = lambda: "ipv4-table"

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv4Table, [], name, value)


                            class TpaAllow(Entity):
                                """
                                MPP TPA control entries
                                
                                .. attribute:: local_port  (key)
                                
                                	Local port value
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: protocol  (key)
                                
                                	L4 protocol value
                                	**type**\: int
                                
                                	**range:** 1..255
                                
                                .. attribute:: interface_name
                                
                                	Interface name for allow command, or 'any'
                                	**type**\: str
                                
                                	**length:** 1..32
                                
                                	**mandatory**\: True
                                
                                .. attribute:: remote_address
                                
                                	IPv4/6 remote\-address prefix to match, or 'any'
                                	**type**\: str
                                
                                	**length:** 1..32
                                
                                	**mandatory**\: True
                                
                                .. attribute:: remote_address_prefix
                                
                                	IPv4/6 remote\-address prefix length
                                	**type**\: int
                                
                                	**range:** 0..128
                                
                                .. attribute:: local_address
                                
                                	IPv4/6 local\-address prefix to match, or 'any'
                                	**type**\: str
                                
                                	**length:** 1..32
                                
                                	**mandatory**\: True
                                
                                .. attribute:: local_address_prefix
                                
                                	IPv4/6 local\-address prefix length
                                	**type**\: int
                                
                                	**range:** 0..128
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv4Table.TpaAllow, self).__init__()

                                    self.yang_name = "tpa-allow"
                                    self.yang_parent_name = "ipv4-table"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['local_port','protocol']
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('local_port', YLeaf(YType.uint16, 'local-port')),
                                        ('protocol', YLeaf(YType.uint32, 'protocol')),
                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                        ('remote_address', YLeaf(YType.str, 'remote-address')),
                                        ('remote_address_prefix', YLeaf(YType.uint32, 'remote-address-prefix')),
                                        ('local_address', YLeaf(YType.str, 'local-address')),
                                        ('local_address_prefix', YLeaf(YType.uint32, 'local-address-prefix')),
                                    ])
                                    self.local_port = None
                                    self.protocol = None
                                    self.interface_name = None
                                    self.remote_address = None
                                    self.remote_address_prefix = None
                                    self.local_address = None
                                    self.local_address_prefix = None
                                    self._segment_path = lambda: "tpa-allow" + "[local-port='" + str(self.local_port) + "']" + "[protocol='" + str(self.protocol) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv4Table.TpaAllow, ['local_port', 'protocol', 'interface_name', 'remote_address', 'remote_address_prefix', 'local_address', 'local_address_prefix'], name, value)


                        class Ipv6Table(Entity):
                            """
                            IPv6 configuration
                            
                            .. attribute:: tpa_allow
                            
                            	MPP TPA control entries
                            	**type**\: list of  		 :py:class:`TpaAllow <ydk.models.cisco_ios_xr.Cisco_IOS_XR_lib_mpp_cfg.ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv6Table.TpaAllow>`
                            
                            

                            """

                            _prefix = 'lib-mpp-cfg'
                            _revision = '2017-07-28'

                            def __init__(self):
                                super(ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv6Table, self).__init__()

                                self.yang_name = "ipv6-table"
                                self.yang_parent_name = "address-family"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("tpa-allow", ("tpa_allow", ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv6Table.TpaAllow))])
                                self._leafs = OrderedDict()

                                self.tpa_allow = YList(self)
                                self._segment_path = lambda: "ipv6-table"

                            def __setattr__(self, name, value):
                                self._perform_setattr(ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv6Table, [], name, value)


                            class TpaAllow(Entity):
                                """
                                MPP TPA control entries
                                
                                .. attribute:: local_port  (key)
                                
                                	Local port value
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: protocol  (key)
                                
                                	L4 protocol value
                                	**type**\: int
                                
                                	**range:** 1..255
                                
                                .. attribute:: interface_name
                                
                                	Interface name for allow command, or 'any'
                                	**type**\: str
                                
                                	**length:** 1..32
                                
                                	**mandatory**\: True
                                
                                .. attribute:: remote_address
                                
                                	IPv4/6 remote\-address prefix to match, or 'any'
                                	**type**\: str
                                
                                	**length:** 1..32
                                
                                	**mandatory**\: True
                                
                                .. attribute:: remote_address_prefix
                                
                                	IPv4/6 remote\-address prefix length
                                	**type**\: int
                                
                                	**range:** 0..128
                                
                                .. attribute:: local_address
                                
                                	IPv4/6 local\-address prefix to match, or 'any'
                                	**type**\: str
                                
                                	**length:** 1..32
                                
                                	**mandatory**\: True
                                
                                .. attribute:: local_address_prefix
                                
                                	IPv4/6 local\-address prefix length
                                	**type**\: int
                                
                                	**range:** 0..128
                                
                                

                                """

                                _prefix = 'lib-mpp-cfg'
                                _revision = '2017-07-28'

                                def __init__(self):
                                    super(ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv6Table.TpaAllow, self).__init__()

                                    self.yang_name = "tpa-allow"
                                    self.yang_parent_name = "ipv6-table"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['local_port','protocol']
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('local_port', YLeaf(YType.uint16, 'local-port')),
                                        ('protocol', YLeaf(YType.uint32, 'protocol')),
                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                        ('remote_address', YLeaf(YType.str, 'remote-address')),
                                        ('remote_address_prefix', YLeaf(YType.uint32, 'remote-address-prefix')),
                                        ('local_address', YLeaf(YType.str, 'local-address')),
                                        ('local_address_prefix', YLeaf(YType.uint32, 'local-address-prefix')),
                                    ])
                                    self.local_port = None
                                    self.protocol = None
                                    self.interface_name = None
                                    self.remote_address = None
                                    self.remote_address_prefix = None
                                    self.local_address = None
                                    self.local_address_prefix = None
                                    self._segment_path = lambda: "tpa-allow" + "[local-port='" + str(self.local_port) + "']" + "[protocol='" + str(self.protocol) + "']"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(ControlPlane.ManagementPlaneProtection.Tpa.Vrfs.Vrf.AddressFamily.Ipv6Table.TpaAllow, ['local_port', 'protocol', 'interface_name', 'remote_address', 'remote_address_prefix', 'local_address', 'local_address_prefix'], name, value)

    def clone_ptr(self):
        self._top_entity = ControlPlane()
        return self._top_entity

