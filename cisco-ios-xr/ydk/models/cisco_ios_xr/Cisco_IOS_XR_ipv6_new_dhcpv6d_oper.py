""" Cisco_IOS_XR_ipv6_new_dhcpv6d_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ipv6\-new\-dhcpv6d package operational data.

This module contains definitions
for the following management objects\:
  dhcpv6\: IPV6 DHCPD operational data

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.entity_utils import get_relative_entity_path as _get_relative_entity_path
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class BagDhcpv6DFsmState(Enum):
    """
    BagDhcpv6DFsmState

    Bag dhcpv6d fsm state

    .. data:: server_initializing = 0

    	Server initializing state for client binding

    .. data:: server_waiting_dpm = 1

    	Server waiting on DPM to validate subscriber

    .. data:: server_waiting_daps = 2

    	Server waiting on DAPS to assign/free

    	addr/prefix

    .. data:: server_waiting_client = 3

    	Server waiting for a request from the client

    .. data:: server_waiting_subscriber = 4

    	Server waiting for iedge response for the

    	session

    .. data:: server_waiting_rib = 5

    	Server waiting for RIB response for route add

    .. data:: server_bound_client = 6

    	Server bound state to the client

    .. data:: proxy_initializing = 10

    	Proxy initializing state for client binding

    .. data:: proxy_waiting_dpm = 11

    	Proxy waiting on DPM to validate subscriber

    .. data:: proxy_waiting_daps = 12

    	Proxy waiting on DAPS to assign/free prefix(ND)

    .. data:: proxy_waiting_client_server = 13

    	Proxy waiting for a msg from the client/srv

    .. data:: proxy_waiting_subscriber = 14

    	Proxy waiting on iedge to sub session resp

    .. data:: proxy_waiting_rib = 15

    	Proxy waiting on RIB response

    .. data:: proxy_bound_client = 16

    	Proxy bound state to the client

    """

    server_initializing = Enum.YLeaf(0, "server-initializing")

    server_waiting_dpm = Enum.YLeaf(1, "server-waiting-dpm")

    server_waiting_daps = Enum.YLeaf(2, "server-waiting-daps")

    server_waiting_client = Enum.YLeaf(3, "server-waiting-client")

    server_waiting_subscriber = Enum.YLeaf(4, "server-waiting-subscriber")

    server_waiting_rib = Enum.YLeaf(5, "server-waiting-rib")

    server_bound_client = Enum.YLeaf(6, "server-bound-client")

    proxy_initializing = Enum.YLeaf(10, "proxy-initializing")

    proxy_waiting_dpm = Enum.YLeaf(11, "proxy-waiting-dpm")

    proxy_waiting_daps = Enum.YLeaf(12, "proxy-waiting-daps")

    proxy_waiting_client_server = Enum.YLeaf(13, "proxy-waiting-client-server")

    proxy_waiting_subscriber = Enum.YLeaf(14, "proxy-waiting-subscriber")

    proxy_waiting_rib = Enum.YLeaf(15, "proxy-waiting-rib")

    proxy_bound_client = Enum.YLeaf(16, "proxy-bound-client")


class BagDhcpv6DIaId(Enum):
    """
    BagDhcpv6DIaId

    Bag dhcpv6d ia id

    .. data:: iana = 0

    	Non-temporary Addresses assigned 

    .. data:: iapd = 1

    	Prefix delegeated to client      

    .. data:: iata = 2

    	Temporary Addresses - not supported 

    """

    iana = Enum.YLeaf(0, "iana")

    iapd = Enum.YLeaf(1, "iapd")

    iata = Enum.YLeaf(2, "iata")


class BagDhcpv6DIntfSergRole(Enum):
    """
    BagDhcpv6DIntfSergRole

    Bag dhcpv6d intf serg role

    .. data:: none = 0

    	DHCPv6 Interface SERG role NONE

    .. data:: master = 1

    	DHCPv6 Interface SERG role Master

    .. data:: slave = 2

    	DHCPv6 Interface SERG role Slave

    """

    none = Enum.YLeaf(0, "none")

    master = Enum.YLeaf(1, "master")

    slave = Enum.YLeaf(2, "slave")


class BagDhcpv6DIntfSrgRole(Enum):
    """
    BagDhcpv6DIntfSrgRole

    Bag dhcpv6d intf srg role

    .. data:: none = 0

    	DHCPv6 Interface SRG role NONE

    .. data:: master = 1

    	DHCPv6 Interface SRG role Master

    .. data:: slave = 2

    	DHCPv6 Interface SRG role Slave

    """

    none = Enum.YLeaf(0, "none")

    master = Enum.YLeaf(1, "master")

    slave = Enum.YLeaf(2, "slave")


class BagDhcpv6DSubMode(Enum):
    """
    BagDhcpv6DSubMode

    Bag dhcpv6d sub mode

    .. data:: base = 0

    	DHCPv6 Base mode

    .. data:: server = 1

    	DHCPv6 Server mode

    .. data:: proxy = 2

    	DHCPv6 Proxy mode

    """

    base = Enum.YLeaf(0, "base")

    server = Enum.YLeaf(1, "server")

    proxy = Enum.YLeaf(2, "proxy")


class DhcpIssuPhase(Enum):
    """
    DhcpIssuPhase

    Dhcp issu phase

    .. data:: phase_not_started = 0

    	An ISSU event has not started

    .. data:: phase_load = 1

    	ISSU Load Phase

    .. data:: phase_run = 2

    	ISSU Run Phase

    .. data:: phase_completed = 3

    	An ISSU event has completed successfully

    .. data:: phase_aborted = 4

    	An ISSU event has aborted

    """

    phase_not_started = Enum.YLeaf(0, "phase-not-started")

    phase_load = Enum.YLeaf(1, "phase-load")

    phase_run = Enum.YLeaf(2, "phase-run")

    phase_completed = Enum.YLeaf(3, "phase-completed")

    phase_aborted = Enum.YLeaf(4, "phase-aborted")


class Dhcpv6IssuRole(Enum):
    """
    Dhcpv6IssuRole

    Dhcpv6 issu role

    .. data:: role_primary = 0

    	Primary role

    .. data:: role_secondary = 1

    	Secondary role

    """

    role_primary = Enum.YLeaf(0, "role-primary")

    role_secondary = Enum.YLeaf(1, "role-secondary")


class Dhcpv6IssuVersion(Enum):
    """
    Dhcpv6IssuVersion

    Dhcpv6 issu version

    .. data:: version1 = 0

    	Version 1

    .. data:: version2 = 1

    	Version 2

    """

    version1 = Enum.YLeaf(0, "version1")

    version2 = Enum.YLeaf(1, "version2")


class LeaseLimit(Enum):
    """
    LeaseLimit

    Profile lease limit type

    .. data:: none = 0

    	Lease limit type none

    .. data:: interface = 1

    	Lease limit type interface

    .. data:: circuit_id = 2

    	Lease limit type circuit ID

    .. data:: remote_id = 3

    	Lease limit type remote ID

    """

    none = Enum.YLeaf(0, "none")

    interface = Enum.YLeaf(1, "interface")

    circuit_id = Enum.YLeaf(2, "circuit-id")

    remote_id = Enum.YLeaf(3, "remote-id")



class Dhcpv6(Entity):
    """
    IPV6 DHCPD operational data
    
    .. attribute:: issu_status
    
    	DHCP IssuStatus
    	**type**\:   :py:class:`IssuStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.IssuStatus>`
    
    .. attribute:: nodes
    
    	IPv6 DHCP list of nodes
    	**type**\:   :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes>`
    
    

    """

    _prefix = 'ipv6-new-dhcpv6d-oper'
    _revision = '2015-11-09'

    def __init__(self):
        super(Dhcpv6, self).__init__()
        self._top_entity = None

        self.yang_name = "dhcpv6"
        self.yang_parent_name = "Cisco-IOS-XR-ipv6-new-dhcpv6d-oper"

        self.issu_status = Dhcpv6.IssuStatus()
        self.issu_status.parent = self
        self._children_name_map["issu_status"] = "issu-status"
        self._children_yang_names.add("issu-status")

        self.nodes = Dhcpv6.Nodes()
        self.nodes.parent = self
        self._children_name_map["nodes"] = "nodes"
        self._children_yang_names.add("nodes")


    class IssuStatus(Entity):
        """
        DHCP IssuStatus
        
        .. attribute:: big_bang_time
        
        	Timestamp for the Big Bang notification time in nanoseconds since Epoch, i.e. since 00\:00\:00 UTC , January 1, 1970
        	**type**\:  int
        
        	**range:** 0..18446744073709551615
        
        	**units**\: nanosecond
        
        .. attribute:: issu_ready_issu_mgr_connection
        
        	Whether or not DHCP is currently connected to ISSU Manager during the ISSU Load Phase
        	**type**\:  bool
        
        .. attribute:: issu_ready_time
        
        	Timestamp for the ISSU ready declaration in nanoseconds since Epoch, i.e. since 00\:00\:00 UTC , January 1, 1970
        	**type**\:  int
        
        	**range:** 0..18446744073709551615
        
        	**units**\: nanosecond
        
        .. attribute:: issu_sync_complete_time
        
        	Timestamp for the ISSU sync complete in nanoseconds since Epoch, i.e. since 00\:00\:00 UTC , January 1, 1970
        	**type**\:  int
        
        	**range:** 0..18446744073709551615
        
        	**units**\: nanosecond
        
        .. attribute:: issu_sync_start_time
        
        	Timestamp for the ISSU sync start in nanoseconds since Epoch, i.e. since 00\:00\:00 UTC, January 1, 1970
        	**type**\:  int
        
        	**range:** 0..18446744073709551615
        
        	**units**\: nanosecond
        
        .. attribute:: phase
        
        	The current ISSU phase of the DHCP process
        	**type**\:   :py:class:`DhcpIssuPhase <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.DhcpIssuPhase>`
        
        .. attribute:: primary_role_time
        
        	Timestamp for the change to Primary role notification time in nanoseconds since Epoch, i .e. since 00\:00\:00 UTC, January 1, 1970
        	**type**\:  int
        
        	**range:** 0..18446744073709551615
        
        	**units**\: nanosecond
        
        .. attribute:: process_start_time
        
        	Timestamp for the process start time in nanoseconds since Epoch, i.e. since 00\:00\:00 UTC , January 1, 1970
        	**type**\:  int
        
        	**range:** 0..18446744073709551615
        
        	**units**\: nanosecond
        
        .. attribute:: role
        
        	The current role of the DHCP process
        	**type**\:   :py:class:`Dhcpv6IssuRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6IssuRole>`
        
        .. attribute:: version
        
        	The current version of the DHCP process in the context of an ISSU
        	**type**\:   :py:class:`Dhcpv6IssuVersion <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6IssuVersion>`
        
        

        """

        _prefix = 'ipv6-new-dhcpv6d-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Dhcpv6.IssuStatus, self).__init__()

            self.yang_name = "issu-status"
            self.yang_parent_name = "dhcpv6"

            self.big_bang_time = YLeaf(YType.uint64, "big-bang-time")

            self.issu_ready_issu_mgr_connection = YLeaf(YType.boolean, "issu-ready-issu-mgr-connection")

            self.issu_ready_time = YLeaf(YType.uint64, "issu-ready-time")

            self.issu_sync_complete_time = YLeaf(YType.uint64, "issu-sync-complete-time")

            self.issu_sync_start_time = YLeaf(YType.uint64, "issu-sync-start-time")

            self.phase = YLeaf(YType.enumeration, "phase")

            self.primary_role_time = YLeaf(YType.uint64, "primary-role-time")

            self.process_start_time = YLeaf(YType.uint64, "process-start-time")

            self.role = YLeaf(YType.enumeration, "role")

            self.version = YLeaf(YType.enumeration, "version")

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in ("big_bang_time",
                            "issu_ready_issu_mgr_connection",
                            "issu_ready_time",
                            "issu_sync_complete_time",
                            "issu_sync_start_time",
                            "phase",
                            "primary_role_time",
                            "process_start_time",
                            "role",
                            "version") and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(Dhcpv6.IssuStatus, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(Dhcpv6.IssuStatus, self).__setattr__(name, value)

        def has_data(self):
            return (
                self.big_bang_time.is_set or
                self.issu_ready_issu_mgr_connection.is_set or
                self.issu_ready_time.is_set or
                self.issu_sync_complete_time.is_set or
                self.issu_sync_start_time.is_set or
                self.phase.is_set or
                self.primary_role_time.is_set or
                self.process_start_time.is_set or
                self.role.is_set or
                self.version.is_set)

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                self.big_bang_time.yfilter != YFilter.not_set or
                self.issu_ready_issu_mgr_connection.yfilter != YFilter.not_set or
                self.issu_ready_time.yfilter != YFilter.not_set or
                self.issu_sync_complete_time.yfilter != YFilter.not_set or
                self.issu_sync_start_time.yfilter != YFilter.not_set or
                self.phase.yfilter != YFilter.not_set or
                self.primary_role_time.yfilter != YFilter.not_set or
                self.process_start_time.yfilter != YFilter.not_set or
                self.role.yfilter != YFilter.not_set or
                self.version.yfilter != YFilter.not_set)

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "issu-status" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-ipv6-new-dhcpv6d-oper:dhcpv6/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()
            if (self.big_bang_time.is_set or self.big_bang_time.yfilter != YFilter.not_set):
                leaf_name_data.append(self.big_bang_time.get_name_leafdata())
            if (self.issu_ready_issu_mgr_connection.is_set or self.issu_ready_issu_mgr_connection.yfilter != YFilter.not_set):
                leaf_name_data.append(self.issu_ready_issu_mgr_connection.get_name_leafdata())
            if (self.issu_ready_time.is_set or self.issu_ready_time.yfilter != YFilter.not_set):
                leaf_name_data.append(self.issu_ready_time.get_name_leafdata())
            if (self.issu_sync_complete_time.is_set or self.issu_sync_complete_time.yfilter != YFilter.not_set):
                leaf_name_data.append(self.issu_sync_complete_time.get_name_leafdata())
            if (self.issu_sync_start_time.is_set or self.issu_sync_start_time.yfilter != YFilter.not_set):
                leaf_name_data.append(self.issu_sync_start_time.get_name_leafdata())
            if (self.phase.is_set or self.phase.yfilter != YFilter.not_set):
                leaf_name_data.append(self.phase.get_name_leafdata())
            if (self.primary_role_time.is_set or self.primary_role_time.yfilter != YFilter.not_set):
                leaf_name_data.append(self.primary_role_time.get_name_leafdata())
            if (self.process_start_time.is_set or self.process_start_time.yfilter != YFilter.not_set):
                leaf_name_data.append(self.process_start_time.get_name_leafdata())
            if (self.role.is_set or self.role.yfilter != YFilter.not_set):
                leaf_name_data.append(self.role.get_name_leafdata())
            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                leaf_name_data.append(self.version.get_name_leafdata())

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "big-bang-time" or name == "issu-ready-issu-mgr-connection" or name == "issu-ready-time" or name == "issu-sync-complete-time" or name == "issu-sync-start-time" or name == "phase" or name == "primary-role-time" or name == "process-start-time" or name == "role" or name == "version"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            if(value_path == "big-bang-time"):
                self.big_bang_time = value
                self.big_bang_time.value_namespace = name_space
                self.big_bang_time.value_namespace_prefix = name_space_prefix
            if(value_path == "issu-ready-issu-mgr-connection"):
                self.issu_ready_issu_mgr_connection = value
                self.issu_ready_issu_mgr_connection.value_namespace = name_space
                self.issu_ready_issu_mgr_connection.value_namespace_prefix = name_space_prefix
            if(value_path == "issu-ready-time"):
                self.issu_ready_time = value
                self.issu_ready_time.value_namespace = name_space
                self.issu_ready_time.value_namespace_prefix = name_space_prefix
            if(value_path == "issu-sync-complete-time"):
                self.issu_sync_complete_time = value
                self.issu_sync_complete_time.value_namespace = name_space
                self.issu_sync_complete_time.value_namespace_prefix = name_space_prefix
            if(value_path == "issu-sync-start-time"):
                self.issu_sync_start_time = value
                self.issu_sync_start_time.value_namespace = name_space
                self.issu_sync_start_time.value_namespace_prefix = name_space_prefix
            if(value_path == "phase"):
                self.phase = value
                self.phase.value_namespace = name_space
                self.phase.value_namespace_prefix = name_space_prefix
            if(value_path == "primary-role-time"):
                self.primary_role_time = value
                self.primary_role_time.value_namespace = name_space
                self.primary_role_time.value_namespace_prefix = name_space_prefix
            if(value_path == "process-start-time"):
                self.process_start_time = value
                self.process_start_time.value_namespace = name_space
                self.process_start_time.value_namespace_prefix = name_space_prefix
            if(value_path == "role"):
                self.role = value
                self.role.value_namespace = name_space
                self.role.value_namespace_prefix = name_space_prefix
            if(value_path == "version"):
                self.version = value
                self.version.value_namespace = name_space
                self.version.value_namespace_prefix = name_space_prefix


    class Nodes(Entity):
        """
        IPv6 DHCP list of nodes
        
        .. attribute:: node
        
        	IPv6 DHCP particular node name
        	**type**\: list of    :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node>`
        
        

        """

        _prefix = 'ipv6-new-dhcpv6d-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Dhcpv6.Nodes, self).__init__()

            self.yang_name = "nodes"
            self.yang_parent_name = "dhcpv6"

            self.node = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(Dhcpv6.Nodes, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(Dhcpv6.Nodes, self).__setattr__(name, value)


        class Node(Entity):
            """
            IPv6 DHCP particular node name
            
            .. attribute:: node_name  <key>
            
            	Node name
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: base
            
            	IPv6 DHCP Base
            	**type**\:   :py:class:`Base <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Base>`
            
            .. attribute:: proxy
            
            	IPv6 DHCP proxy operational data
            	**type**\:   :py:class:`Proxy <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy>`
            
            .. attribute:: relay
            
            	IPv6 DHCP relay operational data
            	**type**\:   :py:class:`Relay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay>`
            
            .. attribute:: server
            
            	IPv6 DHCP server operational data
            	**type**\:   :py:class:`Server <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server>`
            
            

            """

            _prefix = 'ipv6-new-dhcpv6d-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Dhcpv6.Nodes.Node, self).__init__()

                self.yang_name = "node"
                self.yang_parent_name = "nodes"

                self.node_name = YLeaf(YType.str, "node-name")

                self.base = Dhcpv6.Nodes.Node.Base()
                self.base.parent = self
                self._children_name_map["base"] = "base"
                self._children_yang_names.add("base")

                self.proxy = Dhcpv6.Nodes.Node.Proxy()
                self.proxy.parent = self
                self._children_name_map["proxy"] = "proxy"
                self._children_yang_names.add("proxy")

                self.relay = Dhcpv6.Nodes.Node.Relay()
                self.relay.parent = self
                self._children_name_map["relay"] = "relay"
                self._children_yang_names.add("relay")

                self.server = Dhcpv6.Nodes.Node.Server()
                self.server.parent = self
                self._children_name_map["server"] = "server"
                self._children_yang_names.add("server")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("node_name") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Dhcpv6.Nodes.Node, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Dhcpv6.Nodes.Node, self).__setattr__(name, value)


            class Proxy(Entity):
                """
                IPv6 DHCP proxy operational data
                
                .. attribute:: binding
                
                	DHCPV6 proxy bindings
                	**type**\:   :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Binding>`
                
                .. attribute:: interfaces
                
                	DHCPV6 proxy interface
                	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Interfaces>`
                
                .. attribute:: profiles
                
                	IPv6 DHCP proxy profile
                	**type**\:   :py:class:`Profiles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Profiles>`
                
                .. attribute:: statistics
                
                	DHCPv6 proxy statistics
                	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Statistics>`
                
                .. attribute:: vrfs
                
                	DHCPV6 proxy list of VRF names
                	**type**\:   :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs>`
                
                

                """

                _prefix = 'ipv6-new-dhcpv6d-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Dhcpv6.Nodes.Node.Proxy, self).__init__()

                    self.yang_name = "proxy"
                    self.yang_parent_name = "node"

                    self.binding = Dhcpv6.Nodes.Node.Proxy.Binding()
                    self.binding.parent = self
                    self._children_name_map["binding"] = "binding"
                    self._children_yang_names.add("binding")

                    self.interfaces = Dhcpv6.Nodes.Node.Proxy.Interfaces()
                    self.interfaces.parent = self
                    self._children_name_map["interfaces"] = "interfaces"
                    self._children_yang_names.add("interfaces")

                    self.profiles = Dhcpv6.Nodes.Node.Proxy.Profiles()
                    self.profiles.parent = self
                    self._children_name_map["profiles"] = "profiles"
                    self._children_yang_names.add("profiles")

                    self.statistics = Dhcpv6.Nodes.Node.Proxy.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"
                    self._children_yang_names.add("statistics")

                    self.vrfs = Dhcpv6.Nodes.Node.Proxy.Vrfs()
                    self.vrfs.parent = self
                    self._children_name_map["vrfs"] = "vrfs"
                    self._children_yang_names.add("vrfs")


                class Vrfs(Entity):
                    """
                    DHCPV6 proxy list of VRF names
                    
                    .. attribute:: vrf
                    
                    	IPv6 DHCP proxy VRF name
                    	**type**\: list of    :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Proxy.Vrfs, self).__init__()

                        self.yang_name = "vrfs"
                        self.yang_parent_name = "proxy"

                        self.vrf = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs, self).__setattr__(name, value)


                    class Vrf(Entity):
                        """
                        IPv6 DHCP proxy VRF name
                        
                        .. attribute:: vrf_name  <key>
                        
                        	VRF name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: statistics
                        
                        	IPv6 DHCP proxy statistics
                        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics>`
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf, self).__init__()

                            self.yang_name = "vrf"
                            self.yang_parent_name = "vrfs"

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.statistics = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf, self).__setattr__(name, value)


                        class Statistics(Entity):
                            """
                            IPv6 DHCP proxy statistics
                            
                            .. attribute:: advertise
                            
                            	DHCPV6 advertise packets
                            	**type**\:   :py:class:`Advertise <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Advertise>`
                            
                            .. attribute:: confirm
                            
                            	DHCPV6 confirm packets
                            	**type**\:   :py:class:`Confirm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Confirm>`
                            
                            .. attribute:: decline
                            
                            	DHCPV6 decline packets
                            	**type**\:   :py:class:`Decline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Decline>`
                            
                            .. attribute:: inform
                            
                            	DHCPV6 inform packets
                            	**type**\:   :py:class:`Inform <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Inform>`
                            
                            .. attribute:: lease_query
                            
                            	DHCPV6 lease query packets
                            	**type**\:   :py:class:`LeaseQuery <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQuery>`
                            
                            .. attribute:: lease_query_data
                            
                            	DHCPV6 lease query data packets
                            	**type**\:   :py:class:`LeaseQueryData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryData>`
                            
                            .. attribute:: lease_query_done
                            
                            	DHCPV6 lease query done packets
                            	**type**\:   :py:class:`LeaseQueryDone <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryDone>`
                            
                            .. attribute:: lease_query_reply
                            
                            	DHCPV6 lease query reply packets
                            	**type**\:   :py:class:`LeaseQueryReply <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryReply>`
                            
                            .. attribute:: rebind
                            
                            	DHCPV6 rebind packets
                            	**type**\:   :py:class:`Rebind <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Rebind>`
                            
                            .. attribute:: reconfig
                            
                            	DHCPV6 reconfig packets
                            	**type**\:   :py:class:`Reconfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Reconfig>`
                            
                            .. attribute:: relay_forward
                            
                            	DHCPV6 relay forward packets
                            	**type**\:   :py:class:`RelayForward <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.RelayForward>`
                            
                            .. attribute:: relay_reply
                            
                            	DHCPV6 relay reply packets
                            	**type**\:   :py:class:`RelayReply <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.RelayReply>`
                            
                            .. attribute:: release
                            
                            	DHCPV6 release packets
                            	**type**\:   :py:class:`Release <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Release>`
                            
                            .. attribute:: renew
                            
                            	DHCPV6 renew packets
                            	**type**\:   :py:class:`Renew <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Renew>`
                            
                            .. attribute:: reply
                            
                            	DHCPV6 reply packets
                            	**type**\:   :py:class:`Reply <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Reply>`
                            
                            .. attribute:: request
                            
                            	DHCPV6 request packets
                            	**type**\:   :py:class:`Request <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Request>`
                            
                            .. attribute:: solicit
                            
                            	DHCPV6 solicit packets
                            	**type**\:   :py:class:`Solicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Solicit>`
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "vrf"

                                self.advertise = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Advertise()
                                self.advertise.parent = self
                                self._children_name_map["advertise"] = "advertise"
                                self._children_yang_names.add("advertise")

                                self.confirm = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Confirm()
                                self.confirm.parent = self
                                self._children_name_map["confirm"] = "confirm"
                                self._children_yang_names.add("confirm")

                                self.decline = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Decline()
                                self.decline.parent = self
                                self._children_name_map["decline"] = "decline"
                                self._children_yang_names.add("decline")

                                self.inform = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Inform()
                                self.inform.parent = self
                                self._children_name_map["inform"] = "inform"
                                self._children_yang_names.add("inform")

                                self.lease_query = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQuery()
                                self.lease_query.parent = self
                                self._children_name_map["lease_query"] = "lease-query"
                                self._children_yang_names.add("lease-query")

                                self.lease_query_data = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryData()
                                self.lease_query_data.parent = self
                                self._children_name_map["lease_query_data"] = "lease-query-data"
                                self._children_yang_names.add("lease-query-data")

                                self.lease_query_done = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryDone()
                                self.lease_query_done.parent = self
                                self._children_name_map["lease_query_done"] = "lease-query-done"
                                self._children_yang_names.add("lease-query-done")

                                self.lease_query_reply = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryReply()
                                self.lease_query_reply.parent = self
                                self._children_name_map["lease_query_reply"] = "lease-query-reply"
                                self._children_yang_names.add("lease-query-reply")

                                self.rebind = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Rebind()
                                self.rebind.parent = self
                                self._children_name_map["rebind"] = "rebind"
                                self._children_yang_names.add("rebind")

                                self.reconfig = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Reconfig()
                                self.reconfig.parent = self
                                self._children_name_map["reconfig"] = "reconfig"
                                self._children_yang_names.add("reconfig")

                                self.relay_forward = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.RelayForward()
                                self.relay_forward.parent = self
                                self._children_name_map["relay_forward"] = "relay-forward"
                                self._children_yang_names.add("relay-forward")

                                self.relay_reply = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.RelayReply()
                                self.relay_reply.parent = self
                                self._children_name_map["relay_reply"] = "relay-reply"
                                self._children_yang_names.add("relay-reply")

                                self.release = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Release()
                                self.release.parent = self
                                self._children_name_map["release"] = "release"
                                self._children_yang_names.add("release")

                                self.renew = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Renew()
                                self.renew.parent = self
                                self._children_name_map["renew"] = "renew"
                                self._children_yang_names.add("renew")

                                self.reply = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Reply()
                                self.reply.parent = self
                                self._children_name_map["reply"] = "reply"
                                self._children_yang_names.add("reply")

                                self.request = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Request()
                                self.request.parent = self
                                self._children_name_map["request"] = "request"
                                self._children_yang_names.add("request")

                                self.solicit = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Solicit()
                                self.solicit.parent = self
                                self._children_name_map["solicit"] = "solicit"
                                self._children_yang_names.add("solicit")


                            class Solicit(Entity):
                                """
                                DHCPV6 solicit packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Solicit, self).__init__()

                                    self.yang_name = "solicit"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Solicit, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Solicit, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "solicit" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Advertise(Entity):
                                """
                                DHCPV6 advertise packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Advertise, self).__init__()

                                    self.yang_name = "advertise"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Advertise, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Advertise, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "advertise" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Request(Entity):
                                """
                                DHCPV6 request packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Request, self).__init__()

                                    self.yang_name = "request"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Request, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Request, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "request" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Reply(Entity):
                                """
                                DHCPV6 reply packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Reply, self).__init__()

                                    self.yang_name = "reply"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Reply, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Reply, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "reply" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Confirm(Entity):
                                """
                                DHCPV6 confirm packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Confirm, self).__init__()

                                    self.yang_name = "confirm"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Confirm, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Confirm, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "confirm" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Decline(Entity):
                                """
                                DHCPV6 decline packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Decline, self).__init__()

                                    self.yang_name = "decline"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Decline, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Decline, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "decline" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Renew(Entity):
                                """
                                DHCPV6 renew packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Renew, self).__init__()

                                    self.yang_name = "renew"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Renew, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Renew, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "renew" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Rebind(Entity):
                                """
                                DHCPV6 rebind packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Rebind, self).__init__()

                                    self.yang_name = "rebind"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Rebind, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Rebind, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "rebind" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Release(Entity):
                                """
                                DHCPV6 release packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Release, self).__init__()

                                    self.yang_name = "release"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Release, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Release, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "release" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Reconfig(Entity):
                                """
                                DHCPV6 reconfig packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Reconfig, self).__init__()

                                    self.yang_name = "reconfig"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Reconfig, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Reconfig, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "reconfig" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Inform(Entity):
                                """
                                DHCPV6 inform packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Inform, self).__init__()

                                    self.yang_name = "inform"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Inform, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Inform, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "inform" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class RelayForward(Entity):
                                """
                                DHCPV6 relay forward packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.RelayForward, self).__init__()

                                    self.yang_name = "relay-forward"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.RelayForward, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.RelayForward, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "relay-forward" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class RelayReply(Entity):
                                """
                                DHCPV6 relay reply packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.RelayReply, self).__init__()

                                    self.yang_name = "relay-reply"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.RelayReply, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.RelayReply, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "relay-reply" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQuery(Entity):
                                """
                                DHCPV6 lease query packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQuery, self).__init__()

                                    self.yang_name = "lease-query"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQuery, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQuery, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQueryReply(Entity):
                                """
                                DHCPV6 lease query reply packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryReply, self).__init__()

                                    self.yang_name = "lease-query-reply"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryReply, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryReply, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query-reply" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQueryDone(Entity):
                                """
                                DHCPV6 lease query done packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryDone, self).__init__()

                                    self.yang_name = "lease-query-done"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryDone, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryDone, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query-done" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQueryData(Entity):
                                """
                                DHCPV6 lease query data packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryData, self).__init__()

                                    self.yang_name = "lease-query-data"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryData, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryData, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query-data" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.advertise is not None and self.advertise.has_data()) or
                                    (self.confirm is not None and self.confirm.has_data()) or
                                    (self.decline is not None and self.decline.has_data()) or
                                    (self.inform is not None and self.inform.has_data()) or
                                    (self.lease_query is not None and self.lease_query.has_data()) or
                                    (self.lease_query_data is not None and self.lease_query_data.has_data()) or
                                    (self.lease_query_done is not None and self.lease_query_done.has_data()) or
                                    (self.lease_query_reply is not None and self.lease_query_reply.has_data()) or
                                    (self.rebind is not None and self.rebind.has_data()) or
                                    (self.reconfig is not None and self.reconfig.has_data()) or
                                    (self.relay_forward is not None and self.relay_forward.has_data()) or
                                    (self.relay_reply is not None and self.relay_reply.has_data()) or
                                    (self.release is not None and self.release.has_data()) or
                                    (self.renew is not None and self.renew.has_data()) or
                                    (self.reply is not None and self.reply.has_data()) or
                                    (self.request is not None and self.request.has_data()) or
                                    (self.solicit is not None and self.solicit.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.advertise is not None and self.advertise.has_operation()) or
                                    (self.confirm is not None and self.confirm.has_operation()) or
                                    (self.decline is not None and self.decline.has_operation()) or
                                    (self.inform is not None and self.inform.has_operation()) or
                                    (self.lease_query is not None and self.lease_query.has_operation()) or
                                    (self.lease_query_data is not None and self.lease_query_data.has_operation()) or
                                    (self.lease_query_done is not None and self.lease_query_done.has_operation()) or
                                    (self.lease_query_reply is not None and self.lease_query_reply.has_operation()) or
                                    (self.rebind is not None and self.rebind.has_operation()) or
                                    (self.reconfig is not None and self.reconfig.has_operation()) or
                                    (self.relay_forward is not None and self.relay_forward.has_operation()) or
                                    (self.relay_reply is not None and self.relay_reply.has_operation()) or
                                    (self.release is not None and self.release.has_operation()) or
                                    (self.renew is not None and self.renew.has_operation()) or
                                    (self.reply is not None and self.reply.has_operation()) or
                                    (self.request is not None and self.request.has_operation()) or
                                    (self.solicit is not None and self.solicit.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "statistics" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "advertise"):
                                    if (self.advertise is None):
                                        self.advertise = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Advertise()
                                        self.advertise.parent = self
                                        self._children_name_map["advertise"] = "advertise"
                                    return self.advertise

                                if (child_yang_name == "confirm"):
                                    if (self.confirm is None):
                                        self.confirm = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Confirm()
                                        self.confirm.parent = self
                                        self._children_name_map["confirm"] = "confirm"
                                    return self.confirm

                                if (child_yang_name == "decline"):
                                    if (self.decline is None):
                                        self.decline = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Decline()
                                        self.decline.parent = self
                                        self._children_name_map["decline"] = "decline"
                                    return self.decline

                                if (child_yang_name == "inform"):
                                    if (self.inform is None):
                                        self.inform = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Inform()
                                        self.inform.parent = self
                                        self._children_name_map["inform"] = "inform"
                                    return self.inform

                                if (child_yang_name == "lease-query"):
                                    if (self.lease_query is None):
                                        self.lease_query = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQuery()
                                        self.lease_query.parent = self
                                        self._children_name_map["lease_query"] = "lease-query"
                                    return self.lease_query

                                if (child_yang_name == "lease-query-data"):
                                    if (self.lease_query_data is None):
                                        self.lease_query_data = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryData()
                                        self.lease_query_data.parent = self
                                        self._children_name_map["lease_query_data"] = "lease-query-data"
                                    return self.lease_query_data

                                if (child_yang_name == "lease-query-done"):
                                    if (self.lease_query_done is None):
                                        self.lease_query_done = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryDone()
                                        self.lease_query_done.parent = self
                                        self._children_name_map["lease_query_done"] = "lease-query-done"
                                    return self.lease_query_done

                                if (child_yang_name == "lease-query-reply"):
                                    if (self.lease_query_reply is None):
                                        self.lease_query_reply = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.LeaseQueryReply()
                                        self.lease_query_reply.parent = self
                                        self._children_name_map["lease_query_reply"] = "lease-query-reply"
                                    return self.lease_query_reply

                                if (child_yang_name == "rebind"):
                                    if (self.rebind is None):
                                        self.rebind = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Rebind()
                                        self.rebind.parent = self
                                        self._children_name_map["rebind"] = "rebind"
                                    return self.rebind

                                if (child_yang_name == "reconfig"):
                                    if (self.reconfig is None):
                                        self.reconfig = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Reconfig()
                                        self.reconfig.parent = self
                                        self._children_name_map["reconfig"] = "reconfig"
                                    return self.reconfig

                                if (child_yang_name == "relay-forward"):
                                    if (self.relay_forward is None):
                                        self.relay_forward = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.RelayForward()
                                        self.relay_forward.parent = self
                                        self._children_name_map["relay_forward"] = "relay-forward"
                                    return self.relay_forward

                                if (child_yang_name == "relay-reply"):
                                    if (self.relay_reply is None):
                                        self.relay_reply = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.RelayReply()
                                        self.relay_reply.parent = self
                                        self._children_name_map["relay_reply"] = "relay-reply"
                                    return self.relay_reply

                                if (child_yang_name == "release"):
                                    if (self.release is None):
                                        self.release = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Release()
                                        self.release.parent = self
                                        self._children_name_map["release"] = "release"
                                    return self.release

                                if (child_yang_name == "renew"):
                                    if (self.renew is None):
                                        self.renew = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Renew()
                                        self.renew.parent = self
                                        self._children_name_map["renew"] = "renew"
                                    return self.renew

                                if (child_yang_name == "reply"):
                                    if (self.reply is None):
                                        self.reply = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Reply()
                                        self.reply.parent = self
                                        self._children_name_map["reply"] = "reply"
                                    return self.reply

                                if (child_yang_name == "request"):
                                    if (self.request is None):
                                        self.request = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Request()
                                        self.request.parent = self
                                        self._children_name_map["request"] = "request"
                                    return self.request

                                if (child_yang_name == "solicit"):
                                    if (self.solicit is None):
                                        self.solicit = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics.Solicit()
                                        self.solicit.parent = self
                                        self._children_name_map["solicit"] = "solicit"
                                    return self.solicit

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "advertise" or name == "confirm" or name == "decline" or name == "inform" or name == "lease-query" or name == "lease-query-data" or name == "lease-query-done" or name == "lease-query-reply" or name == "rebind" or name == "reconfig" or name == "relay-forward" or name == "relay-reply" or name == "release" or name == "renew" or name == "reply" or name == "request" or name == "solicit"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.vrf_name.is_set or
                                (self.statistics is not None and self.statistics.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.statistics is not None and self.statistics.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "vrf" + "[vrf-name='" + self.vrf_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "statistics"):
                                if (self.statistics is None):
                                    self.statistics = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"
                                return self.statistics

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "statistics" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.vrf:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.vrf:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "vrfs" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "vrf"):
                            for c in self.vrf:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Dhcpv6.Nodes.Node.Proxy.Vrfs.Vrf()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.vrf.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "vrf"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Profiles(Entity):
                    """
                    IPv6 DHCP proxy profile
                    
                    .. attribute:: profile
                    
                    	IPv6 DHCP proxy profile
                    	**type**\: list of    :py:class:`Profile <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Profiles.Profile>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Proxy.Profiles, self).__init__()

                        self.yang_name = "profiles"
                        self.yang_parent_name = "proxy"

                        self.profile = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Dhcpv6.Nodes.Node.Proxy.Profiles, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Dhcpv6.Nodes.Node.Proxy.Profiles, self).__setattr__(name, value)


                    class Profile(Entity):
                        """
                        IPv6 DHCP proxy profile
                        
                        .. attribute:: profile_name  <key>
                        
                        	Profile name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: info
                        
                        	IPv6 DHCP proxy profile Info
                        	**type**\:   :py:class:`Info <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info>`
                        
                        .. attribute:: throttle_infos
                        
                        	DHCPV6 throttle table
                        	**type**\:   :py:class:`ThrottleInfos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.ThrottleInfos>`
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile, self).__init__()

                            self.yang_name = "profile"
                            self.yang_parent_name = "profiles"

                            self.profile_name = YLeaf(YType.str, "profile-name")

                            self.info = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info()
                            self.info.parent = self
                            self._children_name_map["info"] = "info"
                            self._children_yang_names.add("info")

                            self.throttle_infos = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.ThrottleInfos()
                            self.throttle_infos.parent = self
                            self._children_name_map["throttle_infos"] = "throttle-infos"
                            self._children_yang_names.add("throttle-infos")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("profile_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile, self).__setattr__(name, value)


                        class ThrottleInfos(Entity):
                            """
                            DHCPV6 throttle table
                            
                            .. attribute:: throttle_info
                            
                            	IPv6 DHCP proxy profile Throttle Info
                            	**type**\: list of    :py:class:`ThrottleInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.ThrottleInfos.ThrottleInfo>`
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.ThrottleInfos, self).__init__()

                                self.yang_name = "throttle-infos"
                                self.yang_parent_name = "profile"

                                self.throttle_info = YList(self)

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in () and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.ThrottleInfos, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.ThrottleInfos, self).__setattr__(name, value)


                            class ThrottleInfo(Entity):
                                """
                                IPv6 DHCP proxy profile Throttle Info
                                
                                .. attribute:: mac_address  <key>
                                
                                	MAC address
                                	**type**\:  str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: binding_chaddr
                                
                                	Client MAC address
                                	**type**\:  str
                                
                                	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                
                                .. attribute:: ifname
                                
                                	DHCP access interface
                                	**type**\:  str
                                
                                	**length:** 0..65
                                
                                .. attribute:: state
                                
                                	State of entry
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: time_left
                                
                                	Time Left in secs
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.ThrottleInfos.ThrottleInfo, self).__init__()

                                    self.yang_name = "throttle-info"
                                    self.yang_parent_name = "throttle-infos"

                                    self.mac_address = YLeaf(YType.str, "mac-address")

                                    self.binding_chaddr = YLeaf(YType.str, "binding-chaddr")

                                    self.ifname = YLeaf(YType.str, "ifname")

                                    self.state = YLeaf(YType.uint32, "state")

                                    self.time_left = YLeaf(YType.uint32, "time-left")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("mac_address",
                                                    "binding_chaddr",
                                                    "ifname",
                                                    "state",
                                                    "time_left") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.ThrottleInfos.ThrottleInfo, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.ThrottleInfos.ThrottleInfo, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.mac_address.is_set or
                                        self.binding_chaddr.is_set or
                                        self.ifname.is_set or
                                        self.state.is_set or
                                        self.time_left.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.mac_address.yfilter != YFilter.not_set or
                                        self.binding_chaddr.yfilter != YFilter.not_set or
                                        self.ifname.yfilter != YFilter.not_set or
                                        self.state.yfilter != YFilter.not_set or
                                        self.time_left.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "throttle-info" + "[mac-address='" + self.mac_address.get() + "']" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.mac_address.is_set or self.mac_address.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.mac_address.get_name_leafdata())
                                    if (self.binding_chaddr.is_set or self.binding_chaddr.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.binding_chaddr.get_name_leafdata())
                                    if (self.ifname.is_set or self.ifname.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ifname.get_name_leafdata())
                                    if (self.state.is_set or self.state.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.state.get_name_leafdata())
                                    if (self.time_left.is_set or self.time_left.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time_left.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "mac-address" or name == "binding-chaddr" or name == "ifname" or name == "state" or name == "time-left"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "mac-address"):
                                        self.mac_address = value
                                        self.mac_address.value_namespace = name_space
                                        self.mac_address.value_namespace_prefix = name_space_prefix
                                    if(value_path == "binding-chaddr"):
                                        self.binding_chaddr = value
                                        self.binding_chaddr.value_namespace = name_space
                                        self.binding_chaddr.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ifname"):
                                        self.ifname = value
                                        self.ifname.value_namespace = name_space
                                        self.ifname.value_namespace_prefix = name_space_prefix
                                    if(value_path == "state"):
                                        self.state = value
                                        self.state.value_namespace = name_space
                                        self.state.value_namespace_prefix = name_space_prefix
                                    if(value_path == "time-left"):
                                        self.time_left = value
                                        self.time_left.value_namespace = name_space
                                        self.time_left.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                for c in self.throttle_info:
                                    if (c.has_data()):
                                        return True
                                return False

                            def has_operation(self):
                                for c in self.throttle_info:
                                    if (c.has_operation()):
                                        return True
                                return self.yfilter != YFilter.not_set

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "throttle-infos" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "throttle-info"):
                                    for c in self.throttle_info:
                                        segment = c.get_segment_path()
                                        if (segment_path == segment):
                                            return c
                                    c = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.ThrottleInfos.ThrottleInfo()
                                    c.parent = self
                                    local_reference_key = "ydk::seg::%s" % segment_path
                                    self._local_refs[local_reference_key] = c
                                    self.throttle_info.append(c)
                                    return c

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "throttle-info"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass


                        class Info(Entity):
                            """
                            IPv6 DHCP proxy profile Info
                            
                            .. attribute:: interface_id_references
                            
                            	Interface id references
                            	**type**\:   :py:class:`InterfaceIdReferences <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceIdReferences>`
                            
                            .. attribute:: interface_name
                            
                            	Interface names
                            	**type**\:  list of str
                            
                            	**length:** 0..65
                            
                            .. attribute:: interface_references
                            
                            	Interface references
                            	**type**\:   :py:class:`InterfaceReferences <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceReferences>`
                            
                            .. attribute:: profile_helper_address
                            
                            	Helper addresses
                            	**type**\:  list of str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: profile_link_address
                            
                            	Link address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: profile_name
                            
                            	Proxy profile name
                            	**type**\:  str
                            
                            	**length:** 0..65
                            
                            .. attribute:: remote_id
                            
                            	Remote id
                            	**type**\:  str
                            
                            	**length:** 0..257
                            
                            .. attribute:: vrf_name
                            
                            	VRF names
                            	**type**\:  list of str
                            
                            	**length:** 0..33
                            
                            .. attribute:: vrf_references
                            
                            	VRF references
                            	**type**\:   :py:class:`VrfReferences <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.VrfReferences>`
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info, self).__init__()

                                self.yang_name = "info"
                                self.yang_parent_name = "profile"

                                self.interface_name = YLeafList(YType.str, "interface-name")

                                self.profile_helper_address = YLeafList(YType.str, "profile-helper-address")

                                self.profile_link_address = YLeaf(YType.str, "profile-link-address")

                                self.profile_name = YLeaf(YType.str, "profile-name")

                                self.remote_id = YLeaf(YType.str, "remote-id")

                                self.vrf_name = YLeafList(YType.str, "vrf-name")

                                self.interface_id_references = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceIdReferences()
                                self.interface_id_references.parent = self
                                self._children_name_map["interface_id_references"] = "interface-id-references"
                                self._children_yang_names.add("interface-id-references")

                                self.interface_references = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceReferences()
                                self.interface_references.parent = self
                                self._children_name_map["interface_references"] = "interface-references"
                                self._children_yang_names.add("interface-references")

                                self.vrf_references = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.VrfReferences()
                                self.vrf_references.parent = self
                                self._children_name_map["vrf_references"] = "vrf-references"
                                self._children_yang_names.add("vrf-references")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("interface_name",
                                                "profile_helper_address",
                                                "profile_link_address",
                                                "profile_name",
                                                "remote_id",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info, self).__setattr__(name, value)


                            class InterfaceIdReferences(Entity):
                                """
                                Interface id references
                                
                                .. attribute:: ipv6_dhcpv6d_proxy_iid_reference
                                
                                	ipv6 dhcpv6d proxy iid reference
                                	**type**\: list of    :py:class:`Ipv6Dhcpv6DProxyIidReference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceIdReferences.Ipv6Dhcpv6DProxyIidReference>`
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceIdReferences, self).__init__()

                                    self.yang_name = "interface-id-references"
                                    self.yang_parent_name = "info"

                                    self.ipv6_dhcpv6d_proxy_iid_reference = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceIdReferences, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceIdReferences, self).__setattr__(name, value)


                                class Ipv6Dhcpv6DProxyIidReference(Entity):
                                    """
                                    ipv6 dhcpv6d proxy iid reference
                                    
                                    .. attribute:: proxy_iid_interface_name
                                    
                                    	Interface name for interface id
                                    	**type**\:  str
                                    
                                    	**length:** 0..65
                                    
                                    .. attribute:: proxy_interface_id
                                    
                                    	Interface id
                                    	**type**\:  str
                                    
                                    	**length:** 0..257
                                    
                                    

                                    """

                                    _prefix = 'ipv6-new-dhcpv6d-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceIdReferences.Ipv6Dhcpv6DProxyIidReference, self).__init__()

                                        self.yang_name = "ipv6-dhcpv6d-proxy-iid-reference"
                                        self.yang_parent_name = "interface-id-references"

                                        self.proxy_iid_interface_name = YLeaf(YType.str, "proxy-iid-interface-name")

                                        self.proxy_interface_id = YLeaf(YType.str, "proxy-interface-id")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("proxy_iid_interface_name",
                                                        "proxy_interface_id") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceIdReferences.Ipv6Dhcpv6DProxyIidReference, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceIdReferences.Ipv6Dhcpv6DProxyIidReference, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.proxy_iid_interface_name.is_set or
                                            self.proxy_interface_id.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.proxy_iid_interface_name.yfilter != YFilter.not_set or
                                            self.proxy_interface_id.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "ipv6-dhcpv6d-proxy-iid-reference" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.proxy_iid_interface_name.is_set or self.proxy_iid_interface_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.proxy_iid_interface_name.get_name_leafdata())
                                        if (self.proxy_interface_id.is_set or self.proxy_interface_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.proxy_interface_id.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "proxy-iid-interface-name" or name == "proxy-interface-id"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "proxy-iid-interface-name"):
                                            self.proxy_iid_interface_name = value
                                            self.proxy_iid_interface_name.value_namespace = name_space
                                            self.proxy_iid_interface_name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "proxy-interface-id"):
                                            self.proxy_interface_id = value
                                            self.proxy_interface_id.value_namespace = name_space
                                            self.proxy_interface_id.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.ipv6_dhcpv6d_proxy_iid_reference:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.ipv6_dhcpv6d_proxy_iid_reference:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interface-id-references" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "ipv6-dhcpv6d-proxy-iid-reference"):
                                        for c in self.ipv6_dhcpv6d_proxy_iid_reference:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceIdReferences.Ipv6Dhcpv6DProxyIidReference()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.ipv6_dhcpv6d_proxy_iid_reference.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "ipv6-dhcpv6d-proxy-iid-reference"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class VrfReferences(Entity):
                                """
                                VRF references
                                
                                .. attribute:: ipv6_dhcpv6d_proxy_vrf_reference
                                
                                	ipv6 dhcpv6d proxy vrf reference
                                	**type**\: list of    :py:class:`Ipv6Dhcpv6DProxyVrfReference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.VrfReferences.Ipv6Dhcpv6DProxyVrfReference>`
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.VrfReferences, self).__init__()

                                    self.yang_name = "vrf-references"
                                    self.yang_parent_name = "info"

                                    self.ipv6_dhcpv6d_proxy_vrf_reference = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.VrfReferences, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.VrfReferences, self).__setattr__(name, value)


                                class Ipv6Dhcpv6DProxyVrfReference(Entity):
                                    """
                                    ipv6 dhcpv6d proxy vrf reference
                                    
                                    .. attribute:: proxy_reference_vrf_name
                                    
                                    	VRF name
                                    	**type**\:  str
                                    
                                    	**length:** 0..33
                                    
                                    

                                    """

                                    _prefix = 'ipv6-new-dhcpv6d-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.VrfReferences.Ipv6Dhcpv6DProxyVrfReference, self).__init__()

                                        self.yang_name = "ipv6-dhcpv6d-proxy-vrf-reference"
                                        self.yang_parent_name = "vrf-references"

                                        self.proxy_reference_vrf_name = YLeaf(YType.str, "proxy-reference-vrf-name")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("proxy_reference_vrf_name") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.VrfReferences.Ipv6Dhcpv6DProxyVrfReference, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.VrfReferences.Ipv6Dhcpv6DProxyVrfReference, self).__setattr__(name, value)

                                    def has_data(self):
                                        return self.proxy_reference_vrf_name.is_set

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.proxy_reference_vrf_name.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "ipv6-dhcpv6d-proxy-vrf-reference" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.proxy_reference_vrf_name.is_set or self.proxy_reference_vrf_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.proxy_reference_vrf_name.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "proxy-reference-vrf-name"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "proxy-reference-vrf-name"):
                                            self.proxy_reference_vrf_name = value
                                            self.proxy_reference_vrf_name.value_namespace = name_space
                                            self.proxy_reference_vrf_name.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.ipv6_dhcpv6d_proxy_vrf_reference:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.ipv6_dhcpv6d_proxy_vrf_reference:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "vrf-references" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "ipv6-dhcpv6d-proxy-vrf-reference"):
                                        for c in self.ipv6_dhcpv6d_proxy_vrf_reference:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.VrfReferences.Ipv6Dhcpv6DProxyVrfReference()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.ipv6_dhcpv6d_proxy_vrf_reference.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "ipv6-dhcpv6d-proxy-vrf-reference"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass


                            class InterfaceReferences(Entity):
                                """
                                Interface references
                                
                                .. attribute:: ipv6_dhcpv6d_proxy_interface_reference
                                
                                	ipv6 dhcpv6d proxy interface reference
                                	**type**\: list of    :py:class:`Ipv6Dhcpv6DProxyInterfaceReference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceReferences.Ipv6Dhcpv6DProxyInterfaceReference>`
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceReferences, self).__init__()

                                    self.yang_name = "interface-references"
                                    self.yang_parent_name = "info"

                                    self.ipv6_dhcpv6d_proxy_interface_reference = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceReferences, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceReferences, self).__setattr__(name, value)


                                class Ipv6Dhcpv6DProxyInterfaceReference(Entity):
                                    """
                                    ipv6 dhcpv6d proxy interface reference
                                    
                                    .. attribute:: proxy_reference_interface_name
                                    
                                    	Interface name
                                    	**type**\:  str
                                    
                                    	**length:** 0..65
                                    
                                    

                                    """

                                    _prefix = 'ipv6-new-dhcpv6d-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceReferences.Ipv6Dhcpv6DProxyInterfaceReference, self).__init__()

                                        self.yang_name = "ipv6-dhcpv6d-proxy-interface-reference"
                                        self.yang_parent_name = "interface-references"

                                        self.proxy_reference_interface_name = YLeaf(YType.str, "proxy-reference-interface-name")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("proxy_reference_interface_name") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceReferences.Ipv6Dhcpv6DProxyInterfaceReference, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceReferences.Ipv6Dhcpv6DProxyInterfaceReference, self).__setattr__(name, value)

                                    def has_data(self):
                                        return self.proxy_reference_interface_name.is_set

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.proxy_reference_interface_name.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "ipv6-dhcpv6d-proxy-interface-reference" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.proxy_reference_interface_name.is_set or self.proxy_reference_interface_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.proxy_reference_interface_name.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "proxy-reference-interface-name"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "proxy-reference-interface-name"):
                                            self.proxy_reference_interface_name = value
                                            self.proxy_reference_interface_name.value_namespace = name_space
                                            self.proxy_reference_interface_name.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.ipv6_dhcpv6d_proxy_interface_reference:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.ipv6_dhcpv6d_proxy_interface_reference:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interface-references" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "ipv6-dhcpv6d-proxy-interface-reference"):
                                        for c in self.ipv6_dhcpv6d_proxy_interface_reference:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceReferences.Ipv6Dhcpv6DProxyInterfaceReference()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.ipv6_dhcpv6d_proxy_interface_reference.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "ipv6-dhcpv6d-proxy-interface-reference"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass

                            def has_data(self):
                                for leaf in self.interface_name.getYLeafs():
                                    if (leaf.yfilter != YFilter.not_set):
                                        return True
                                for leaf in self.profile_helper_address.getYLeafs():
                                    if (leaf.yfilter != YFilter.not_set):
                                        return True
                                for leaf in self.vrf_name.getYLeafs():
                                    if (leaf.yfilter != YFilter.not_set):
                                        return True
                                return (
                                    self.profile_link_address.is_set or
                                    self.profile_name.is_set or
                                    self.remote_id.is_set or
                                    (self.interface_id_references is not None and self.interface_id_references.has_data()) or
                                    (self.interface_references is not None and self.interface_references.has_data()) or
                                    (self.vrf_references is not None and self.vrf_references.has_data()))

                            def has_operation(self):
                                for leaf in self.interface_name.getYLeafs():
                                    if (leaf.is_set):
                                        return True
                                for leaf in self.profile_helper_address.getYLeafs():
                                    if (leaf.is_set):
                                        return True
                                for leaf in self.vrf_name.getYLeafs():
                                    if (leaf.is_set):
                                        return True
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.profile_helper_address.yfilter != YFilter.not_set or
                                    self.profile_link_address.yfilter != YFilter.not_set or
                                    self.profile_name.yfilter != YFilter.not_set or
                                    self.remote_id.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set or
                                    (self.interface_id_references is not None and self.interface_id_references.has_operation()) or
                                    (self.interface_references is not None and self.interface_references.has_operation()) or
                                    (self.vrf_references is not None and self.vrf_references.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "info" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.profile_link_address.is_set or self.profile_link_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.profile_link_address.get_name_leafdata())
                                if (self.profile_name.is_set or self.profile_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.profile_name.get_name_leafdata())
                                if (self.remote_id.is_set or self.remote_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.remote_id.get_name_leafdata())

                                leaf_name_data.extend(self.interface_name.get_name_leafdata())

                                leaf_name_data.extend(self.profile_helper_address.get_name_leafdata())

                                leaf_name_data.extend(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "interface-id-references"):
                                    if (self.interface_id_references is None):
                                        self.interface_id_references = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceIdReferences()
                                        self.interface_id_references.parent = self
                                        self._children_name_map["interface_id_references"] = "interface-id-references"
                                    return self.interface_id_references

                                if (child_yang_name == "interface-references"):
                                    if (self.interface_references is None):
                                        self.interface_references = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.InterfaceReferences()
                                        self.interface_references.parent = self
                                        self._children_name_map["interface_references"] = "interface-references"
                                    return self.interface_references

                                if (child_yang_name == "vrf-references"):
                                    if (self.vrf_references is None):
                                        self.vrf_references = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info.VrfReferences()
                                        self.vrf_references.parent = self
                                        self._children_name_map["vrf_references"] = "vrf-references"
                                    return self.vrf_references

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "interface-id-references" or name == "interface-references" or name == "vrf-references" or name == "interface-name" or name == "profile-helper-address" or name == "profile-link-address" or name == "profile-name" or name == "remote-id" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "interface-name"):
                                    self.interface_name.append(value)
                                if(value_path == "profile-helper-address"):
                                    self.profile_helper_address.append(value)
                                if(value_path == "profile-link-address"):
                                    self.profile_link_address = value
                                    self.profile_link_address.value_namespace = name_space
                                    self.profile_link_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "profile-name"):
                                    self.profile_name = value
                                    self.profile_name.value_namespace = name_space
                                    self.profile_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "remote-id"):
                                    self.remote_id = value
                                    self.remote_id.value_namespace = name_space
                                    self.remote_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name.append(value)

                        def has_data(self):
                            return (
                                self.profile_name.is_set or
                                (self.info is not None and self.info.has_data()) or
                                (self.throttle_infos is not None and self.throttle_infos.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.profile_name.yfilter != YFilter.not_set or
                                (self.info is not None and self.info.has_operation()) or
                                (self.throttle_infos is not None and self.throttle_infos.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "profile" + "[profile-name='" + self.profile_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.profile_name.is_set or self.profile_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.profile_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "info"):
                                if (self.info is None):
                                    self.info = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.Info()
                                    self.info.parent = self
                                    self._children_name_map["info"] = "info"
                                return self.info

                            if (child_yang_name == "throttle-infos"):
                                if (self.throttle_infos is None):
                                    self.throttle_infos = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile.ThrottleInfos()
                                    self.throttle_infos.parent = self
                                    self._children_name_map["throttle_infos"] = "throttle-infos"
                                return self.throttle_infos

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "info" or name == "throttle-infos" or name == "profile-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "profile-name"):
                                self.profile_name = value
                                self.profile_name.value_namespace = name_space
                                self.profile_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.profile:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.profile:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "profiles" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "profile"):
                            for c in self.profile:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Dhcpv6.Nodes.Node.Proxy.Profiles.Profile()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.profile.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "profile"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Interfaces(Entity):
                    """
                    DHCPV6 proxy interface
                    
                    .. attribute:: interface
                    
                    	IPv6 DHCP proxy interface
                    	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Interfaces.Interface>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Proxy.Interfaces, self).__init__()

                        self.yang_name = "interfaces"
                        self.yang_parent_name = "proxy"

                        self.interface = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Dhcpv6.Nodes.Node.Proxy.Interfaces, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Dhcpv6.Nodes.Node.Proxy.Interfaces, self).__setattr__(name, value)


                    class Interface(Entity):
                        """
                        IPv6 DHCP proxy interface
                        
                        .. attribute:: interface_name  <key>
                        
                        	Interface Name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: is_proxy_interface_ambiguous
                        
                        	Is interface ambiguous
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: mac_throttle
                        
                        	Mac Throttle Status
                        	**type**\:  bool
                        
                        .. attribute:: proxy_interface_lease_limit_type
                        
                        	Lease limit type on interface
                        	**type**\:   :py:class:`LeaseLimit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.LeaseLimit>`
                        
                        .. attribute:: proxy_interface_lease_limits
                        
                        	Lease limit count on interface
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: proxy_interface_mode
                        
                        	Mode of interface
                        	**type**\:   :py:class:`BagDhcpv6DSubMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.BagDhcpv6DSubMode>`
                        
                        .. attribute:: proxy_interface_profile_name
                        
                        	Name of profile attached to the interface
                        	**type**\:  str
                        
                        	**length:** 0..65
                        
                        .. attribute:: proxy_vrf_name
                        
                        	VRF name
                        	**type**\:  str
                        
                        	**length:** 0..33
                        
                        .. attribute:: serg_role
                        
                        	DHCPv6 Interface SERG role
                        	**type**\:   :py:class:`BagDhcpv6DIntfSergRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.BagDhcpv6DIntfSergRole>`
                        
                        .. attribute:: srg_role
                        
                        	DHCPv6 Interface SRG role
                        	**type**\:   :py:class:`BagDhcpv6DIntfSrgRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.BagDhcpv6DIntfSrgRole>`
                        
                        .. attribute:: srg_vrf_name
                        
                        	SRG VRF name
                        	**type**\:  str
                        
                        	**length:** 0..33
                        
                        .. attribute:: srgp2p
                        
                        	SRG P2P Status
                        	**type**\:  bool
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Proxy.Interfaces.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interfaces"

                            self.interface_name = YLeaf(YType.str, "interface-name")

                            self.is_proxy_interface_ambiguous = YLeaf(YType.uint32, "is-proxy-interface-ambiguous")

                            self.mac_throttle = YLeaf(YType.boolean, "mac-throttle")

                            self.proxy_interface_lease_limit_type = YLeaf(YType.enumeration, "proxy-interface-lease-limit-type")

                            self.proxy_interface_lease_limits = YLeaf(YType.uint32, "proxy-interface-lease-limits")

                            self.proxy_interface_mode = YLeaf(YType.enumeration, "proxy-interface-mode")

                            self.proxy_interface_profile_name = YLeaf(YType.str, "proxy-interface-profile-name")

                            self.proxy_vrf_name = YLeaf(YType.str, "proxy-vrf-name")

                            self.serg_role = YLeaf(YType.enumeration, "serg-role")

                            self.srg_role = YLeaf(YType.enumeration, "srg-role")

                            self.srg_vrf_name = YLeaf(YType.str, "srg-vrf-name")

                            self.srgp2p = YLeaf(YType.boolean, "srgp2p")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("interface_name",
                                            "is_proxy_interface_ambiguous",
                                            "mac_throttle",
                                            "proxy_interface_lease_limit_type",
                                            "proxy_interface_lease_limits",
                                            "proxy_interface_mode",
                                            "proxy_interface_profile_name",
                                            "proxy_vrf_name",
                                            "serg_role",
                                            "srg_role",
                                            "srg_vrf_name",
                                            "srgp2p") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Proxy.Interfaces.Interface, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Proxy.Interfaces.Interface, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.interface_name.is_set or
                                self.is_proxy_interface_ambiguous.is_set or
                                self.mac_throttle.is_set or
                                self.proxy_interface_lease_limit_type.is_set or
                                self.proxy_interface_lease_limits.is_set or
                                self.proxy_interface_mode.is_set or
                                self.proxy_interface_profile_name.is_set or
                                self.proxy_vrf_name.is_set or
                                self.serg_role.is_set or
                                self.srg_role.is_set or
                                self.srg_vrf_name.is_set or
                                self.srgp2p.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.interface_name.yfilter != YFilter.not_set or
                                self.is_proxy_interface_ambiguous.yfilter != YFilter.not_set or
                                self.mac_throttle.yfilter != YFilter.not_set or
                                self.proxy_interface_lease_limit_type.yfilter != YFilter.not_set or
                                self.proxy_interface_lease_limits.yfilter != YFilter.not_set or
                                self.proxy_interface_mode.yfilter != YFilter.not_set or
                                self.proxy_interface_profile_name.yfilter != YFilter.not_set or
                                self.proxy_vrf_name.yfilter != YFilter.not_set or
                                self.serg_role.yfilter != YFilter.not_set or
                                self.srg_role.yfilter != YFilter.not_set or
                                self.srg_vrf_name.yfilter != YFilter.not_set or
                                self.srgp2p.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "interface" + "[interface-name='" + self.interface_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.interface_name.get_name_leafdata())
                            if (self.is_proxy_interface_ambiguous.is_set or self.is_proxy_interface_ambiguous.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_proxy_interface_ambiguous.get_name_leafdata())
                            if (self.mac_throttle.is_set or self.mac_throttle.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.mac_throttle.get_name_leafdata())
                            if (self.proxy_interface_lease_limit_type.is_set or self.proxy_interface_lease_limit_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.proxy_interface_lease_limit_type.get_name_leafdata())
                            if (self.proxy_interface_lease_limits.is_set or self.proxy_interface_lease_limits.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.proxy_interface_lease_limits.get_name_leafdata())
                            if (self.proxy_interface_mode.is_set or self.proxy_interface_mode.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.proxy_interface_mode.get_name_leafdata())
                            if (self.proxy_interface_profile_name.is_set or self.proxy_interface_profile_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.proxy_interface_profile_name.get_name_leafdata())
                            if (self.proxy_vrf_name.is_set or self.proxy_vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.proxy_vrf_name.get_name_leafdata())
                            if (self.serg_role.is_set or self.serg_role.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.serg_role.get_name_leafdata())
                            if (self.srg_role.is_set or self.srg_role.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.srg_role.get_name_leafdata())
                            if (self.srg_vrf_name.is_set or self.srg_vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.srg_vrf_name.get_name_leafdata())
                            if (self.srgp2p.is_set or self.srgp2p.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.srgp2p.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "interface-name" or name == "is-proxy-interface-ambiguous" or name == "mac-throttle" or name == "proxy-interface-lease-limit-type" or name == "proxy-interface-lease-limits" or name == "proxy-interface-mode" or name == "proxy-interface-profile-name" or name == "proxy-vrf-name" or name == "serg-role" or name == "srg-role" or name == "srg-vrf-name" or name == "srgp2p"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "interface-name"):
                                self.interface_name = value
                                self.interface_name.value_namespace = name_space
                                self.interface_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "is-proxy-interface-ambiguous"):
                                self.is_proxy_interface_ambiguous = value
                                self.is_proxy_interface_ambiguous.value_namespace = name_space
                                self.is_proxy_interface_ambiguous.value_namespace_prefix = name_space_prefix
                            if(value_path == "mac-throttle"):
                                self.mac_throttle = value
                                self.mac_throttle.value_namespace = name_space
                                self.mac_throttle.value_namespace_prefix = name_space_prefix
                            if(value_path == "proxy-interface-lease-limit-type"):
                                self.proxy_interface_lease_limit_type = value
                                self.proxy_interface_lease_limit_type.value_namespace = name_space
                                self.proxy_interface_lease_limit_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "proxy-interface-lease-limits"):
                                self.proxy_interface_lease_limits = value
                                self.proxy_interface_lease_limits.value_namespace = name_space
                                self.proxy_interface_lease_limits.value_namespace_prefix = name_space_prefix
                            if(value_path == "proxy-interface-mode"):
                                self.proxy_interface_mode = value
                                self.proxy_interface_mode.value_namespace = name_space
                                self.proxy_interface_mode.value_namespace_prefix = name_space_prefix
                            if(value_path == "proxy-interface-profile-name"):
                                self.proxy_interface_profile_name = value
                                self.proxy_interface_profile_name.value_namespace = name_space
                                self.proxy_interface_profile_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "proxy-vrf-name"):
                                self.proxy_vrf_name = value
                                self.proxy_vrf_name.value_namespace = name_space
                                self.proxy_vrf_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "serg-role"):
                                self.serg_role = value
                                self.serg_role.value_namespace = name_space
                                self.serg_role.value_namespace_prefix = name_space_prefix
                            if(value_path == "srg-role"):
                                self.srg_role = value
                                self.srg_role.value_namespace = name_space
                                self.srg_role.value_namespace_prefix = name_space_prefix
                            if(value_path == "srg-vrf-name"):
                                self.srg_vrf_name = value
                                self.srg_vrf_name.value_namespace = name_space
                                self.srg_vrf_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "srgp2p"):
                                self.srgp2p = value
                                self.srgp2p.value_namespace = name_space
                                self.srgp2p.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.interface:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.interface:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "interfaces" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "interface"):
                            for c in self.interface:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Dhcpv6.Nodes.Node.Proxy.Interfaces.Interface()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.interface.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "interface"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Statistics(Entity):
                    """
                    DHCPv6 proxy statistics
                    
                    .. attribute:: ipv6_dhcpv6d_proxy_stat
                    
                    	ipv6 dhcpv6d proxy stat
                    	**type**\: list of    :py:class:`Ipv6Dhcpv6DProxyStat <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Statistics.Ipv6Dhcpv6DProxyStat>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Proxy.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "proxy"

                        self.ipv6_dhcpv6d_proxy_stat = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Dhcpv6.Nodes.Node.Proxy.Statistics, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Dhcpv6.Nodes.Node.Proxy.Statistics, self).__setattr__(name, value)


                    class Ipv6Dhcpv6DProxyStat(Entity):
                        """
                        ipv6 dhcpv6d proxy stat
                        
                        .. attribute:: statistics
                        
                        	Proxy statistics
                        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Statistics.Ipv6Dhcpv6DProxyStat.Statistics>`
                        
                        .. attribute:: vrf_name
                        
                        	DHCPv6 L3 VRF name
                        	**type**\:  str
                        
                        	**length:** 0..33
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Proxy.Statistics.Ipv6Dhcpv6DProxyStat, self).__init__()

                            self.yang_name = "ipv6-dhcpv6d-proxy-stat"
                            self.yang_parent_name = "statistics"

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.statistics = Dhcpv6.Nodes.Node.Proxy.Statistics.Ipv6Dhcpv6DProxyStat.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Proxy.Statistics.Ipv6Dhcpv6DProxyStat, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Proxy.Statistics.Ipv6Dhcpv6DProxyStat, self).__setattr__(name, value)


                        class Statistics(Entity):
                            """
                            Proxy statistics
                            
                            .. attribute:: dropped_packets
                            
                            	Dropped packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: received_packets
                            
                            	Received packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: transmitted_packets
                            
                            	Transmitted packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Proxy.Statistics.Ipv6Dhcpv6DProxyStat.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "ipv6-dhcpv6d-proxy-stat"

                                self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                self.received_packets = YLeaf(YType.uint64, "received-packets")

                                self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("dropped_packets",
                                                "received_packets",
                                                "transmitted_packets") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Proxy.Statistics.Ipv6Dhcpv6DProxyStat.Statistics, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Proxy.Statistics.Ipv6Dhcpv6DProxyStat.Statistics, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.dropped_packets.is_set or
                                    self.received_packets.is_set or
                                    self.transmitted_packets.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.dropped_packets.yfilter != YFilter.not_set or
                                    self.received_packets.yfilter != YFilter.not_set or
                                    self.transmitted_packets.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "statistics" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.received_packets.get_name_leafdata())
                                if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "dropped-packets"):
                                    self.dropped_packets = value
                                    self.dropped_packets.value_namespace = name_space
                                    self.dropped_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "received-packets"):
                                    self.received_packets = value
                                    self.received_packets.value_namespace = name_space
                                    self.received_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "transmitted-packets"):
                                    self.transmitted_packets = value
                                    self.transmitted_packets.value_namespace = name_space
                                    self.transmitted_packets.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.vrf_name.is_set or
                                (self.statistics is not None and self.statistics.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.statistics is not None and self.statistics.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "ipv6-dhcpv6d-proxy-stat" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "statistics"):
                                if (self.statistics is None):
                                    self.statistics = Dhcpv6.Nodes.Node.Proxy.Statistics.Ipv6Dhcpv6DProxyStat.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"
                                return self.statistics

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "statistics" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.ipv6_dhcpv6d_proxy_stat:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.ipv6_dhcpv6d_proxy_stat:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "statistics" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "ipv6-dhcpv6d-proxy-stat"):
                            for c in self.ipv6_dhcpv6d_proxy_stat:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Dhcpv6.Nodes.Node.Proxy.Statistics.Ipv6Dhcpv6DProxyStat()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.ipv6_dhcpv6d_proxy_stat.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "ipv6-dhcpv6d-proxy-stat"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Binding(Entity):
                    """
                    DHCPV6 proxy bindings
                    
                    .. attribute:: clients
                    
                    	DHCPV6 proxy client bindings
                    	**type**\:   :py:class:`Clients <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Binding.Clients>`
                    
                    .. attribute:: summary
                    
                    	DHCPV6 proxy binding summary
                    	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Binding.Summary>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Proxy.Binding, self).__init__()

                        self.yang_name = "binding"
                        self.yang_parent_name = "proxy"

                        self.clients = Dhcpv6.Nodes.Node.Proxy.Binding.Clients()
                        self.clients.parent = self
                        self._children_name_map["clients"] = "clients"
                        self._children_yang_names.add("clients")

                        self.summary = Dhcpv6.Nodes.Node.Proxy.Binding.Summary()
                        self.summary.parent = self
                        self._children_name_map["summary"] = "summary"
                        self._children_yang_names.add("summary")


                    class Clients(Entity):
                        """
                        DHCPV6 proxy client bindings
                        
                        .. attribute:: client
                        
                        	Single DHCPV6 proxy binding
                        	**type**\: list of    :py:class:`Client <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client>`
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients, self).__init__()

                            self.yang_name = "clients"
                            self.yang_parent_name = "binding"

                            self.client = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients, self).__setattr__(name, value)


                        class Client(Entity):
                            """
                            Single DHCPV6 proxy binding
                            
                            .. attribute:: client_id  <key>
                            
                            	Client ID
                            	**type**\:  str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: access_vrf_name
                            
                            	DHCPV6 access VRF name to client
                            	**type**\:  str
                            
                            	**length:** 0..33
                            
                            .. attribute:: class_name
                            
                            	DHCPV6 class name
                            	**type**\:  str
                            
                            	**length:** 0..64
                            
                            .. attribute:: client_flag
                            
                            	DHCPV6 client flag
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: duid
                            
                            	Client DUID
                            	**type**\:  str
                            
                            .. attribute:: framed_ipv6_prefix
                            
                            	DHCPV6 framed ipv6 addess used by ND
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: framed_prefix_length
                            
                            	DHCPV6 framed ipv6 prefix length used by ND
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ia_id_p_ds
                            
                            	Number of ia\_id/pd
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ia_id_pd
                            
                            	List of DHCPv6 IA\_ID/PDs
                            	**type**\:   :py:class:`IaIdPd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd>`
                            
                            .. attribute:: interface_name
                            
                            	DHCPV6 access interface to client
                            	**type**\:  str
                            
                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                            
                            .. attribute:: is_nak_next_renew
                            
                            	Is true if DHCP next renew from client will be NAK'd
                            	**type**\:  bool
                            
                            .. attribute:: mac_address
                            
                            	Client MAC address
                            	**type**\:  str
                            
                            .. attribute:: pool_name
                            
                            	DHCPV6 pool name
                            	**type**\:  str
                            
                            	**length:** 0..64
                            
                            .. attribute:: profile_name
                            
                            	DHCPV6 profile name
                            	**type**\:  str
                            
                            	**length:** 0..65
                            
                            .. attribute:: proxy_binding_inner_tag
                            
                            	DHCPV6 VLAN Inner VLAN
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: proxy_binding_outer_tag
                            
                            	DHCPV6 VLAN Outer VLAN
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: proxy_binding_tags
                            
                            	DHCPV6 VLAN tag count
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: rx_interface_id
                            
                            	DHCPV6 received Interface ID
                            	**type**\:  str
                            
                            	**length:** 0..771
                            
                            .. attribute:: rx_remote_id
                            
                            	DHCPV6 received Remote ID
                            	**type**\:  str
                            
                            	**length:** 0..771
                            
                            .. attribute:: serg_intf_role
                            
                            	DHCPV6 SERG Intf Role
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: serg_state
                            
                            	DHCPV6 SERG state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: server_ipv6_address
                            
                            	DHCPV6 server IPv6 address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: srg_intf_role
                            
                            	DHCPV6 SRG Intf Role
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: srg_state
                            
                            	DHCPV6 SRG state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: srg_vrf_name
                            
                            	DHCPV6 SRG VRF NAME
                            	**type**\:  str
                            
                            	**length:** 0..33
                            
                            .. attribute:: srgp2p
                            
                            	SRG P2P Status
                            	**type**\:  bool
                            
                            .. attribute:: subscriber_label
                            
                            	DHCPV6 subscriber label
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: tx_interface_id
                            
                            	DHCPV6 transmitted Interface ID
                            	**type**\:  str
                            
                            	**length:** 0..771
                            
                            .. attribute:: tx_remote_id
                            
                            	DHCPV6 transmitted Remote ID
                            	**type**\:  str
                            
                            	**length:** 0..771
                            
                            .. attribute:: vrf_name
                            
                            	DHCPVV6 client/subscriber VRF name
                            	**type**\:  str
                            
                            	**length:** 0..33
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client, self).__init__()

                                self.yang_name = "client"
                                self.yang_parent_name = "clients"

                                self.client_id = YLeaf(YType.str, "client-id")

                                self.access_vrf_name = YLeaf(YType.str, "access-vrf-name")

                                self.class_name = YLeaf(YType.str, "class-name")

                                self.client_flag = YLeaf(YType.uint32, "client-flag")

                                self.duid = YLeaf(YType.str, "duid")

                                self.framed_ipv6_prefix = YLeaf(YType.str, "framed-ipv6-prefix")

                                self.framed_prefix_length = YLeaf(YType.uint8, "framed-prefix-length")

                                self.ia_id_p_ds = YLeaf(YType.uint32, "ia-id-p-ds")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.is_nak_next_renew = YLeaf(YType.boolean, "is-nak-next-renew")

                                self.mac_address = YLeaf(YType.str, "mac-address")

                                self.pool_name = YLeaf(YType.str, "pool-name")

                                self.profile_name = YLeaf(YType.str, "profile-name")

                                self.proxy_binding_inner_tag = YLeaf(YType.uint32, "proxy-binding-inner-tag")

                                self.proxy_binding_outer_tag = YLeaf(YType.uint32, "proxy-binding-outer-tag")

                                self.proxy_binding_tags = YLeaf(YType.uint8, "proxy-binding-tags")

                                self.rx_interface_id = YLeaf(YType.str, "rx-interface-id")

                                self.rx_remote_id = YLeaf(YType.str, "rx-remote-id")

                                self.serg_intf_role = YLeaf(YType.uint32, "serg-intf-role")

                                self.serg_state = YLeaf(YType.uint32, "serg-state")

                                self.server_ipv6_address = YLeaf(YType.str, "server-ipv6-address")

                                self.srg_intf_role = YLeaf(YType.uint32, "srg-intf-role")

                                self.srg_state = YLeaf(YType.uint32, "srg-state")

                                self.srg_vrf_name = YLeaf(YType.str, "srg-vrf-name")

                                self.srgp2p = YLeaf(YType.boolean, "srgp2p")

                                self.subscriber_label = YLeaf(YType.uint32, "subscriber-label")

                                self.tx_interface_id = YLeaf(YType.str, "tx-interface-id")

                                self.tx_remote_id = YLeaf(YType.str, "tx-remote-id")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                                self.ia_id_pd = Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd()
                                self.ia_id_pd.parent = self
                                self._children_name_map["ia_id_pd"] = "ia-id-pd"
                                self._children_yang_names.add("ia-id-pd")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("client_id",
                                                "access_vrf_name",
                                                "class_name",
                                                "client_flag",
                                                "duid",
                                                "framed_ipv6_prefix",
                                                "framed_prefix_length",
                                                "ia_id_p_ds",
                                                "interface_name",
                                                "is_nak_next_renew",
                                                "mac_address",
                                                "pool_name",
                                                "profile_name",
                                                "proxy_binding_inner_tag",
                                                "proxy_binding_outer_tag",
                                                "proxy_binding_tags",
                                                "rx_interface_id",
                                                "rx_remote_id",
                                                "serg_intf_role",
                                                "serg_state",
                                                "server_ipv6_address",
                                                "srg_intf_role",
                                                "srg_state",
                                                "srg_vrf_name",
                                                "srgp2p",
                                                "subscriber_label",
                                                "tx_interface_id",
                                                "tx_remote_id",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client, self).__setattr__(name, value)


                            class IaIdPd(Entity):
                                """
                                List of DHCPv6 IA\_ID/PDs
                                
                                .. attribute:: bag_dhcpv6d_ia_id_pd_info
                                
                                	bag dhcpv6d ia id pd info
                                	**type**\: list of    :py:class:`BagDhcpv6DIaIdPdInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo>`
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd, self).__init__()

                                    self.yang_name = "ia-id-pd"
                                    self.yang_parent_name = "client"

                                    self.bag_dhcpv6d_ia_id_pd_info = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd, self).__setattr__(name, value)


                                class BagDhcpv6DIaIdPdInfo(Entity):
                                    """
                                    bag dhcpv6d ia id pd info
                                    
                                    .. attribute:: addresses
                                    
                                    	List of addresses in this IA
                                    	**type**\:   :py:class:`Addresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses>`
                                    
                                    .. attribute:: flags
                                    
                                    	FSM Flag for this IA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ia_id
                                    
                                    	IA\_ID of this IA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ia_type
                                    
                                    	IA type
                                    	**type**\:   :py:class:`BagDhcpv6DIaId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.BagDhcpv6DIaId>`
                                    
                                    .. attribute:: state
                                    
                                    	State
                                    	**type**\:   :py:class:`BagDhcpv6DFsmState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.BagDhcpv6DFsmState>`
                                    
                                    .. attribute:: total_address
                                    
                                    	Total address in this IA
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'ipv6-new-dhcpv6d-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo, self).__init__()

                                        self.yang_name = "bag-dhcpv6d-ia-id-pd-info"
                                        self.yang_parent_name = "ia-id-pd"

                                        self.flags = YLeaf(YType.uint32, "flags")

                                        self.ia_id = YLeaf(YType.uint32, "ia-id")

                                        self.ia_type = YLeaf(YType.enumeration, "ia-type")

                                        self.state = YLeaf(YType.enumeration, "state")

                                        self.total_address = YLeaf(YType.uint16, "total-address")

                                        self.addresses = Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses()
                                        self.addresses.parent = self
                                        self._children_name_map["addresses"] = "addresses"
                                        self._children_yang_names.add("addresses")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("flags",
                                                        "ia_id",
                                                        "ia_type",
                                                        "state",
                                                        "total_address") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo, self).__setattr__(name, value)


                                    class Addresses(Entity):
                                        """
                                        List of addresses in this IA
                                        
                                        .. attribute:: bag_dhcpv6d_addr_attrb
                                        
                                        	bag dhcpv6d addr attrb
                                        	**type**\: list of    :py:class:`BagDhcpv6DAddrAttrb <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses.BagDhcpv6DAddrAttrb>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-new-dhcpv6d-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses, self).__init__()

                                            self.yang_name = "addresses"
                                            self.yang_parent_name = "bag-dhcpv6d-ia-id-pd-info"

                                            self.bag_dhcpv6d_addr_attrb = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in () and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses, self).__setattr__(name, value)


                                        class BagDhcpv6DAddrAttrb(Entity):
                                            """
                                            bag dhcpv6d addr attrb
                                            
                                            .. attribute:: lease_time
                                            
                                            	Lease time in seconds
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            	**units**\: second
                                            
                                            .. attribute:: prefix
                                            
                                            	IPv6 prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: prefix_length
                                            
                                            	Prefix length
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: remaining_lease_time
                                            
                                            	Remaining lease time in seconds
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            	**units**\: second
                                            
                                            

                                            """

                                            _prefix = 'ipv6-new-dhcpv6d-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses.BagDhcpv6DAddrAttrb, self).__init__()

                                                self.yang_name = "bag-dhcpv6d-addr-attrb"
                                                self.yang_parent_name = "addresses"

                                                self.lease_time = YLeaf(YType.uint32, "lease-time")

                                                self.prefix = YLeaf(YType.str, "prefix")

                                                self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                                self.remaining_lease_time = YLeaf(YType.uint32, "remaining-lease-time")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("lease_time",
                                                                "prefix",
                                                                "prefix_length",
                                                                "remaining_lease_time") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses.BagDhcpv6DAddrAttrb, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses.BagDhcpv6DAddrAttrb, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.lease_time.is_set or
                                                    self.prefix.is_set or
                                                    self.prefix_length.is_set or
                                                    self.remaining_lease_time.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.lease_time.yfilter != YFilter.not_set or
                                                    self.prefix.yfilter != YFilter.not_set or
                                                    self.prefix_length.yfilter != YFilter.not_set or
                                                    self.remaining_lease_time.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "bag-dhcpv6d-addr-attrb" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.lease_time.is_set or self.lease_time.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.lease_time.get_name_leafdata())
                                                if (self.prefix.is_set or self.prefix.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.prefix.get_name_leafdata())
                                                if (self.prefix_length.is_set or self.prefix_length.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.prefix_length.get_name_leafdata())
                                                if (self.remaining_lease_time.is_set or self.remaining_lease_time.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.remaining_lease_time.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "lease-time" or name == "prefix" or name == "prefix-length" or name == "remaining-lease-time"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "lease-time"):
                                                    self.lease_time = value
                                                    self.lease_time.value_namespace = name_space
                                                    self.lease_time.value_namespace_prefix = name_space_prefix
                                                if(value_path == "prefix"):
                                                    self.prefix = value
                                                    self.prefix.value_namespace = name_space
                                                    self.prefix.value_namespace_prefix = name_space_prefix
                                                if(value_path == "prefix-length"):
                                                    self.prefix_length = value
                                                    self.prefix_length.value_namespace = name_space
                                                    self.prefix_length.value_namespace_prefix = name_space_prefix
                                                if(value_path == "remaining-lease-time"):
                                                    self.remaining_lease_time = value
                                                    self.remaining_lease_time.value_namespace = name_space
                                                    self.remaining_lease_time.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.bag_dhcpv6d_addr_attrb:
                                                if (c.has_data()):
                                                    return True
                                            return False

                                        def has_operation(self):
                                            for c in self.bag_dhcpv6d_addr_attrb:
                                                if (c.has_operation()):
                                                    return True
                                            return self.yfilter != YFilter.not_set

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "addresses" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "bag-dhcpv6d-addr-attrb"):
                                                for c in self.bag_dhcpv6d_addr_attrb:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses.BagDhcpv6DAddrAttrb()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.bag_dhcpv6d_addr_attrb.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "bag-dhcpv6d-addr-attrb"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass

                                    def has_data(self):
                                        return (
                                            self.flags.is_set or
                                            self.ia_id.is_set or
                                            self.ia_type.is_set or
                                            self.state.is_set or
                                            self.total_address.is_set or
                                            (self.addresses is not None and self.addresses.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.flags.yfilter != YFilter.not_set or
                                            self.ia_id.yfilter != YFilter.not_set or
                                            self.ia_type.yfilter != YFilter.not_set or
                                            self.state.yfilter != YFilter.not_set or
                                            self.total_address.yfilter != YFilter.not_set or
                                            (self.addresses is not None and self.addresses.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "bag-dhcpv6d-ia-id-pd-info" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.flags.is_set or self.flags.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.flags.get_name_leafdata())
                                        if (self.ia_id.is_set or self.ia_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.ia_id.get_name_leafdata())
                                        if (self.ia_type.is_set or self.ia_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.ia_type.get_name_leafdata())
                                        if (self.state.is_set or self.state.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.state.get_name_leafdata())
                                        if (self.total_address.is_set or self.total_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.total_address.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "addresses"):
                                            if (self.addresses is None):
                                                self.addresses = Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses()
                                                self.addresses.parent = self
                                                self._children_name_map["addresses"] = "addresses"
                                            return self.addresses

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "addresses" or name == "flags" or name == "ia-id" or name == "ia-type" or name == "state" or name == "total-address"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "flags"):
                                            self.flags = value
                                            self.flags.value_namespace = name_space
                                            self.flags.value_namespace_prefix = name_space_prefix
                                        if(value_path == "ia-id"):
                                            self.ia_id = value
                                            self.ia_id.value_namespace = name_space
                                            self.ia_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "ia-type"):
                                            self.ia_type = value
                                            self.ia_type.value_namespace = name_space
                                            self.ia_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "state"):
                                            self.state = value
                                            self.state.value_namespace = name_space
                                            self.state.value_namespace_prefix = name_space_prefix
                                        if(value_path == "total-address"):
                                            self.total_address = value
                                            self.total_address.value_namespace = name_space
                                            self.total_address.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.bag_dhcpv6d_ia_id_pd_info:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.bag_dhcpv6d_ia_id_pd_info:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ia-id-pd" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "bag-dhcpv6d-ia-id-pd-info"):
                                        for c in self.bag_dhcpv6d_ia_id_pd_info:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.bag_dhcpv6d_ia_id_pd_info.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "bag-dhcpv6d-ia-id-pd-info"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass

                            def has_data(self):
                                return (
                                    self.client_id.is_set or
                                    self.access_vrf_name.is_set or
                                    self.class_name.is_set or
                                    self.client_flag.is_set or
                                    self.duid.is_set or
                                    self.framed_ipv6_prefix.is_set or
                                    self.framed_prefix_length.is_set or
                                    self.ia_id_p_ds.is_set or
                                    self.interface_name.is_set or
                                    self.is_nak_next_renew.is_set or
                                    self.mac_address.is_set or
                                    self.pool_name.is_set or
                                    self.profile_name.is_set or
                                    self.proxy_binding_inner_tag.is_set or
                                    self.proxy_binding_outer_tag.is_set or
                                    self.proxy_binding_tags.is_set or
                                    self.rx_interface_id.is_set or
                                    self.rx_remote_id.is_set or
                                    self.serg_intf_role.is_set or
                                    self.serg_state.is_set or
                                    self.server_ipv6_address.is_set or
                                    self.srg_intf_role.is_set or
                                    self.srg_state.is_set or
                                    self.srg_vrf_name.is_set or
                                    self.srgp2p.is_set or
                                    self.subscriber_label.is_set or
                                    self.tx_interface_id.is_set or
                                    self.tx_remote_id.is_set or
                                    self.vrf_name.is_set or
                                    (self.ia_id_pd is not None and self.ia_id_pd.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.client_id.yfilter != YFilter.not_set or
                                    self.access_vrf_name.yfilter != YFilter.not_set or
                                    self.class_name.yfilter != YFilter.not_set or
                                    self.client_flag.yfilter != YFilter.not_set or
                                    self.duid.yfilter != YFilter.not_set or
                                    self.framed_ipv6_prefix.yfilter != YFilter.not_set or
                                    self.framed_prefix_length.yfilter != YFilter.not_set or
                                    self.ia_id_p_ds.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.is_nak_next_renew.yfilter != YFilter.not_set or
                                    self.mac_address.yfilter != YFilter.not_set or
                                    self.pool_name.yfilter != YFilter.not_set or
                                    self.profile_name.yfilter != YFilter.not_set or
                                    self.proxy_binding_inner_tag.yfilter != YFilter.not_set or
                                    self.proxy_binding_outer_tag.yfilter != YFilter.not_set or
                                    self.proxy_binding_tags.yfilter != YFilter.not_set or
                                    self.rx_interface_id.yfilter != YFilter.not_set or
                                    self.rx_remote_id.yfilter != YFilter.not_set or
                                    self.serg_intf_role.yfilter != YFilter.not_set or
                                    self.serg_state.yfilter != YFilter.not_set or
                                    self.server_ipv6_address.yfilter != YFilter.not_set or
                                    self.srg_intf_role.yfilter != YFilter.not_set or
                                    self.srg_state.yfilter != YFilter.not_set or
                                    self.srg_vrf_name.yfilter != YFilter.not_set or
                                    self.srgp2p.yfilter != YFilter.not_set or
                                    self.subscriber_label.yfilter != YFilter.not_set or
                                    self.tx_interface_id.yfilter != YFilter.not_set or
                                    self.tx_remote_id.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set or
                                    (self.ia_id_pd is not None and self.ia_id_pd.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "client" + "[client-id='" + self.client_id.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.client_id.is_set or self.client_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.client_id.get_name_leafdata())
                                if (self.access_vrf_name.is_set or self.access_vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.access_vrf_name.get_name_leafdata())
                                if (self.class_name.is_set or self.class_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.class_name.get_name_leafdata())
                                if (self.client_flag.is_set or self.client_flag.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.client_flag.get_name_leafdata())
                                if (self.duid.is_set or self.duid.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.duid.get_name_leafdata())
                                if (self.framed_ipv6_prefix.is_set or self.framed_ipv6_prefix.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.framed_ipv6_prefix.get_name_leafdata())
                                if (self.framed_prefix_length.is_set or self.framed_prefix_length.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.framed_prefix_length.get_name_leafdata())
                                if (self.ia_id_p_ds.is_set or self.ia_id_p_ds.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ia_id_p_ds.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.is_nak_next_renew.is_set or self.is_nak_next_renew.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.is_nak_next_renew.get_name_leafdata())
                                if (self.mac_address.is_set or self.mac_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.mac_address.get_name_leafdata())
                                if (self.pool_name.is_set or self.pool_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.pool_name.get_name_leafdata())
                                if (self.profile_name.is_set or self.profile_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.profile_name.get_name_leafdata())
                                if (self.proxy_binding_inner_tag.is_set or self.proxy_binding_inner_tag.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proxy_binding_inner_tag.get_name_leafdata())
                                if (self.proxy_binding_outer_tag.is_set or self.proxy_binding_outer_tag.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proxy_binding_outer_tag.get_name_leafdata())
                                if (self.proxy_binding_tags.is_set or self.proxy_binding_tags.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.proxy_binding_tags.get_name_leafdata())
                                if (self.rx_interface_id.is_set or self.rx_interface_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rx_interface_id.get_name_leafdata())
                                if (self.rx_remote_id.is_set or self.rx_remote_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rx_remote_id.get_name_leafdata())
                                if (self.serg_intf_role.is_set or self.serg_intf_role.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.serg_intf_role.get_name_leafdata())
                                if (self.serg_state.is_set or self.serg_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.serg_state.get_name_leafdata())
                                if (self.server_ipv6_address.is_set or self.server_ipv6_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.server_ipv6_address.get_name_leafdata())
                                if (self.srg_intf_role.is_set or self.srg_intf_role.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.srg_intf_role.get_name_leafdata())
                                if (self.srg_state.is_set or self.srg_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.srg_state.get_name_leafdata())
                                if (self.srg_vrf_name.is_set or self.srg_vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.srg_vrf_name.get_name_leafdata())
                                if (self.srgp2p.is_set or self.srgp2p.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.srgp2p.get_name_leafdata())
                                if (self.subscriber_label.is_set or self.subscriber_label.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.subscriber_label.get_name_leafdata())
                                if (self.tx_interface_id.is_set or self.tx_interface_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tx_interface_id.get_name_leafdata())
                                if (self.tx_remote_id.is_set or self.tx_remote_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.tx_remote_id.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ia-id-pd"):
                                    if (self.ia_id_pd is None):
                                        self.ia_id_pd = Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client.IaIdPd()
                                        self.ia_id_pd.parent = self
                                        self._children_name_map["ia_id_pd"] = "ia-id-pd"
                                    return self.ia_id_pd

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ia-id-pd" or name == "client-id" or name == "access-vrf-name" or name == "class-name" or name == "client-flag" or name == "duid" or name == "framed-ipv6-prefix" or name == "framed-prefix-length" or name == "ia-id-p-ds" or name == "interface-name" or name == "is-nak-next-renew" or name == "mac-address" or name == "pool-name" or name == "profile-name" or name == "proxy-binding-inner-tag" or name == "proxy-binding-outer-tag" or name == "proxy-binding-tags" or name == "rx-interface-id" or name == "rx-remote-id" or name == "serg-intf-role" or name == "serg-state" or name == "server-ipv6-address" or name == "srg-intf-role" or name == "srg-state" or name == "srg-vrf-name" or name == "srgp2p" or name == "subscriber-label" or name == "tx-interface-id" or name == "tx-remote-id" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "client-id"):
                                    self.client_id = value
                                    self.client_id.value_namespace = name_space
                                    self.client_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "access-vrf-name"):
                                    self.access_vrf_name = value
                                    self.access_vrf_name.value_namespace = name_space
                                    self.access_vrf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "class-name"):
                                    self.class_name = value
                                    self.class_name.value_namespace = name_space
                                    self.class_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "client-flag"):
                                    self.client_flag = value
                                    self.client_flag.value_namespace = name_space
                                    self.client_flag.value_namespace_prefix = name_space_prefix
                                if(value_path == "duid"):
                                    self.duid = value
                                    self.duid.value_namespace = name_space
                                    self.duid.value_namespace_prefix = name_space_prefix
                                if(value_path == "framed-ipv6-prefix"):
                                    self.framed_ipv6_prefix = value
                                    self.framed_ipv6_prefix.value_namespace = name_space
                                    self.framed_ipv6_prefix.value_namespace_prefix = name_space_prefix
                                if(value_path == "framed-prefix-length"):
                                    self.framed_prefix_length = value
                                    self.framed_prefix_length.value_namespace = name_space
                                    self.framed_prefix_length.value_namespace_prefix = name_space_prefix
                                if(value_path == "ia-id-p-ds"):
                                    self.ia_id_p_ds = value
                                    self.ia_id_p_ds.value_namespace = name_space
                                    self.ia_id_p_ds.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "is-nak-next-renew"):
                                    self.is_nak_next_renew = value
                                    self.is_nak_next_renew.value_namespace = name_space
                                    self.is_nak_next_renew.value_namespace_prefix = name_space_prefix
                                if(value_path == "mac-address"):
                                    self.mac_address = value
                                    self.mac_address.value_namespace = name_space
                                    self.mac_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "pool-name"):
                                    self.pool_name = value
                                    self.pool_name.value_namespace = name_space
                                    self.pool_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "profile-name"):
                                    self.profile_name = value
                                    self.profile_name.value_namespace = name_space
                                    self.profile_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "proxy-binding-inner-tag"):
                                    self.proxy_binding_inner_tag = value
                                    self.proxy_binding_inner_tag.value_namespace = name_space
                                    self.proxy_binding_inner_tag.value_namespace_prefix = name_space_prefix
                                if(value_path == "proxy-binding-outer-tag"):
                                    self.proxy_binding_outer_tag = value
                                    self.proxy_binding_outer_tag.value_namespace = name_space
                                    self.proxy_binding_outer_tag.value_namespace_prefix = name_space_prefix
                                if(value_path == "proxy-binding-tags"):
                                    self.proxy_binding_tags = value
                                    self.proxy_binding_tags.value_namespace = name_space
                                    self.proxy_binding_tags.value_namespace_prefix = name_space_prefix
                                if(value_path == "rx-interface-id"):
                                    self.rx_interface_id = value
                                    self.rx_interface_id.value_namespace = name_space
                                    self.rx_interface_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "rx-remote-id"):
                                    self.rx_remote_id = value
                                    self.rx_remote_id.value_namespace = name_space
                                    self.rx_remote_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "serg-intf-role"):
                                    self.serg_intf_role = value
                                    self.serg_intf_role.value_namespace = name_space
                                    self.serg_intf_role.value_namespace_prefix = name_space_prefix
                                if(value_path == "serg-state"):
                                    self.serg_state = value
                                    self.serg_state.value_namespace = name_space
                                    self.serg_state.value_namespace_prefix = name_space_prefix
                                if(value_path == "server-ipv6-address"):
                                    self.server_ipv6_address = value
                                    self.server_ipv6_address.value_namespace = name_space
                                    self.server_ipv6_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "srg-intf-role"):
                                    self.srg_intf_role = value
                                    self.srg_intf_role.value_namespace = name_space
                                    self.srg_intf_role.value_namespace_prefix = name_space_prefix
                                if(value_path == "srg-state"):
                                    self.srg_state = value
                                    self.srg_state.value_namespace = name_space
                                    self.srg_state.value_namespace_prefix = name_space_prefix
                                if(value_path == "srg-vrf-name"):
                                    self.srg_vrf_name = value
                                    self.srg_vrf_name.value_namespace = name_space
                                    self.srg_vrf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "srgp2p"):
                                    self.srgp2p = value
                                    self.srgp2p.value_namespace = name_space
                                    self.srgp2p.value_namespace_prefix = name_space_prefix
                                if(value_path == "subscriber-label"):
                                    self.subscriber_label = value
                                    self.subscriber_label.value_namespace = name_space
                                    self.subscriber_label.value_namespace_prefix = name_space_prefix
                                if(value_path == "tx-interface-id"):
                                    self.tx_interface_id = value
                                    self.tx_interface_id.value_namespace = name_space
                                    self.tx_interface_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "tx-remote-id"):
                                    self.tx_remote_id = value
                                    self.tx_remote_id.value_namespace = name_space
                                    self.tx_remote_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.client:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.client:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "clients" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "client"):
                                for c in self.client:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = Dhcpv6.Nodes.Node.Proxy.Binding.Clients.Client()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.client.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "client"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class Summary(Entity):
                        """
                        DHCPV6 proxy binding summary
                        
                        .. attribute:: clients
                        
                        	Total number of clients
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: iana
                        
                        	IANA proxy binding summary
                        	**type**\:   :py:class:`Iana <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Binding.Summary.Iana>`
                        
                        .. attribute:: iapd
                        
                        	IAPD proxy binding summary
                        	**type**\:   :py:class:`Iapd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Proxy.Binding.Summary.Iapd>`
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Proxy.Binding.Summary, self).__init__()

                            self.yang_name = "summary"
                            self.yang_parent_name = "binding"

                            self.clients = YLeaf(YType.uint32, "clients")

                            self.iana = Dhcpv6.Nodes.Node.Proxy.Binding.Summary.Iana()
                            self.iana.parent = self
                            self._children_name_map["iana"] = "iana"
                            self._children_yang_names.add("iana")

                            self.iapd = Dhcpv6.Nodes.Node.Proxy.Binding.Summary.Iapd()
                            self.iapd.parent = self
                            self._children_name_map["iapd"] = "iapd"
                            self._children_yang_names.add("iapd")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("clients") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Proxy.Binding.Summary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Proxy.Binding.Summary, self).__setattr__(name, value)


                        class Iana(Entity):
                            """
                            IANA proxy binding summary
                            
                            .. attribute:: bound_clients
                            
                            	Number of clients in bound state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: daps_waiting_clients
                            
                            	Number of clients waiting on DAPS to assign/free prefix(ND)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: dpm_waiting_clients
                            
                            	Number of clients waiting on DPM to validate subscriber
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iedge_waiting_clients
                            
                            	Number of clients waiting on iedge to subscriber session
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: initializing_clients
                            
                            	Number of clients in init state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: msg_waiting_clients
                            
                            	Number of clients waiting for a message from the client/server
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: rib_waiting_clients
                            
                            	Number of clients in waiting on RIB response
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Proxy.Binding.Summary.Iana, self).__init__()

                                self.yang_name = "iana"
                                self.yang_parent_name = "summary"

                                self.bound_clients = YLeaf(YType.uint32, "bound-clients")

                                self.daps_waiting_clients = YLeaf(YType.uint32, "daps-waiting-clients")

                                self.dpm_waiting_clients = YLeaf(YType.uint32, "dpm-waiting-clients")

                                self.iedge_waiting_clients = YLeaf(YType.uint32, "iedge-waiting-clients")

                                self.initializing_clients = YLeaf(YType.uint32, "initializing-clients")

                                self.msg_waiting_clients = YLeaf(YType.uint32, "msg-waiting-clients")

                                self.rib_waiting_clients = YLeaf(YType.uint32, "rib-waiting-clients")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("bound_clients",
                                                "daps_waiting_clients",
                                                "dpm_waiting_clients",
                                                "iedge_waiting_clients",
                                                "initializing_clients",
                                                "msg_waiting_clients",
                                                "rib_waiting_clients") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Proxy.Binding.Summary.Iana, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Proxy.Binding.Summary.Iana, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.bound_clients.is_set or
                                    self.daps_waiting_clients.is_set or
                                    self.dpm_waiting_clients.is_set or
                                    self.iedge_waiting_clients.is_set or
                                    self.initializing_clients.is_set or
                                    self.msg_waiting_clients.is_set or
                                    self.rib_waiting_clients.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.bound_clients.yfilter != YFilter.not_set or
                                    self.daps_waiting_clients.yfilter != YFilter.not_set or
                                    self.dpm_waiting_clients.yfilter != YFilter.not_set or
                                    self.iedge_waiting_clients.yfilter != YFilter.not_set or
                                    self.initializing_clients.yfilter != YFilter.not_set or
                                    self.msg_waiting_clients.yfilter != YFilter.not_set or
                                    self.rib_waiting_clients.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "iana" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.bound_clients.is_set or self.bound_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.bound_clients.get_name_leafdata())
                                if (self.daps_waiting_clients.is_set or self.daps_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.daps_waiting_clients.get_name_leafdata())
                                if (self.dpm_waiting_clients.is_set or self.dpm_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dpm_waiting_clients.get_name_leafdata())
                                if (self.iedge_waiting_clients.is_set or self.iedge_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.iedge_waiting_clients.get_name_leafdata())
                                if (self.initializing_clients.is_set or self.initializing_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.initializing_clients.get_name_leafdata())
                                if (self.msg_waiting_clients.is_set or self.msg_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.msg_waiting_clients.get_name_leafdata())
                                if (self.rib_waiting_clients.is_set or self.rib_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rib_waiting_clients.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "bound-clients" or name == "daps-waiting-clients" or name == "dpm-waiting-clients" or name == "iedge-waiting-clients" or name == "initializing-clients" or name == "msg-waiting-clients" or name == "rib-waiting-clients"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "bound-clients"):
                                    self.bound_clients = value
                                    self.bound_clients.value_namespace = name_space
                                    self.bound_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "daps-waiting-clients"):
                                    self.daps_waiting_clients = value
                                    self.daps_waiting_clients.value_namespace = name_space
                                    self.daps_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "dpm-waiting-clients"):
                                    self.dpm_waiting_clients = value
                                    self.dpm_waiting_clients.value_namespace = name_space
                                    self.dpm_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "iedge-waiting-clients"):
                                    self.iedge_waiting_clients = value
                                    self.iedge_waiting_clients.value_namespace = name_space
                                    self.iedge_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "initializing-clients"):
                                    self.initializing_clients = value
                                    self.initializing_clients.value_namespace = name_space
                                    self.initializing_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "msg-waiting-clients"):
                                    self.msg_waiting_clients = value
                                    self.msg_waiting_clients.value_namespace = name_space
                                    self.msg_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "rib-waiting-clients"):
                                    self.rib_waiting_clients = value
                                    self.rib_waiting_clients.value_namespace = name_space
                                    self.rib_waiting_clients.value_namespace_prefix = name_space_prefix


                        class Iapd(Entity):
                            """
                            IAPD proxy binding summary
                            
                            .. attribute:: bound_clients
                            
                            	Number of clients in bound state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: daps_waiting_clients
                            
                            	Number of clients waiting on DAPS to assign/free prefix(ND)
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: dpm_waiting_clients
                            
                            	Number of clients waiting on DPM to validate subscriber
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iedge_waiting_clients
                            
                            	Number of clients waiting on iedge to subscriber session
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: initializing_clients
                            
                            	Number of clients in init state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: msg_waiting_clients
                            
                            	Number of clients waiting for a message from the client/server
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: rib_waiting_clients
                            
                            	Number of clients in waiting on RIB response
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Proxy.Binding.Summary.Iapd, self).__init__()

                                self.yang_name = "iapd"
                                self.yang_parent_name = "summary"

                                self.bound_clients = YLeaf(YType.uint32, "bound-clients")

                                self.daps_waiting_clients = YLeaf(YType.uint32, "daps-waiting-clients")

                                self.dpm_waiting_clients = YLeaf(YType.uint32, "dpm-waiting-clients")

                                self.iedge_waiting_clients = YLeaf(YType.uint32, "iedge-waiting-clients")

                                self.initializing_clients = YLeaf(YType.uint32, "initializing-clients")

                                self.msg_waiting_clients = YLeaf(YType.uint32, "msg-waiting-clients")

                                self.rib_waiting_clients = YLeaf(YType.uint32, "rib-waiting-clients")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("bound_clients",
                                                "daps_waiting_clients",
                                                "dpm_waiting_clients",
                                                "iedge_waiting_clients",
                                                "initializing_clients",
                                                "msg_waiting_clients",
                                                "rib_waiting_clients") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Proxy.Binding.Summary.Iapd, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Proxy.Binding.Summary.Iapd, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.bound_clients.is_set or
                                    self.daps_waiting_clients.is_set or
                                    self.dpm_waiting_clients.is_set or
                                    self.iedge_waiting_clients.is_set or
                                    self.initializing_clients.is_set or
                                    self.msg_waiting_clients.is_set or
                                    self.rib_waiting_clients.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.bound_clients.yfilter != YFilter.not_set or
                                    self.daps_waiting_clients.yfilter != YFilter.not_set or
                                    self.dpm_waiting_clients.yfilter != YFilter.not_set or
                                    self.iedge_waiting_clients.yfilter != YFilter.not_set or
                                    self.initializing_clients.yfilter != YFilter.not_set or
                                    self.msg_waiting_clients.yfilter != YFilter.not_set or
                                    self.rib_waiting_clients.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "iapd" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.bound_clients.is_set or self.bound_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.bound_clients.get_name_leafdata())
                                if (self.daps_waiting_clients.is_set or self.daps_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.daps_waiting_clients.get_name_leafdata())
                                if (self.dpm_waiting_clients.is_set or self.dpm_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dpm_waiting_clients.get_name_leafdata())
                                if (self.iedge_waiting_clients.is_set or self.iedge_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.iedge_waiting_clients.get_name_leafdata())
                                if (self.initializing_clients.is_set or self.initializing_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.initializing_clients.get_name_leafdata())
                                if (self.msg_waiting_clients.is_set or self.msg_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.msg_waiting_clients.get_name_leafdata())
                                if (self.rib_waiting_clients.is_set or self.rib_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rib_waiting_clients.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "bound-clients" or name == "daps-waiting-clients" or name == "dpm-waiting-clients" or name == "iedge-waiting-clients" or name == "initializing-clients" or name == "msg-waiting-clients" or name == "rib-waiting-clients"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "bound-clients"):
                                    self.bound_clients = value
                                    self.bound_clients.value_namespace = name_space
                                    self.bound_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "daps-waiting-clients"):
                                    self.daps_waiting_clients = value
                                    self.daps_waiting_clients.value_namespace = name_space
                                    self.daps_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "dpm-waiting-clients"):
                                    self.dpm_waiting_clients = value
                                    self.dpm_waiting_clients.value_namespace = name_space
                                    self.dpm_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "iedge-waiting-clients"):
                                    self.iedge_waiting_clients = value
                                    self.iedge_waiting_clients.value_namespace = name_space
                                    self.iedge_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "initializing-clients"):
                                    self.initializing_clients = value
                                    self.initializing_clients.value_namespace = name_space
                                    self.initializing_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "msg-waiting-clients"):
                                    self.msg_waiting_clients = value
                                    self.msg_waiting_clients.value_namespace = name_space
                                    self.msg_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "rib-waiting-clients"):
                                    self.rib_waiting_clients = value
                                    self.rib_waiting_clients.value_namespace = name_space
                                    self.rib_waiting_clients.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.clients.is_set or
                                (self.iana is not None and self.iana.has_data()) or
                                (self.iapd is not None and self.iapd.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.clients.yfilter != YFilter.not_set or
                                (self.iana is not None and self.iana.has_operation()) or
                                (self.iapd is not None and self.iapd.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "summary" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.clients.is_set or self.clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.clients.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "iana"):
                                if (self.iana is None):
                                    self.iana = Dhcpv6.Nodes.Node.Proxy.Binding.Summary.Iana()
                                    self.iana.parent = self
                                    self._children_name_map["iana"] = "iana"
                                return self.iana

                            if (child_yang_name == "iapd"):
                                if (self.iapd is None):
                                    self.iapd = Dhcpv6.Nodes.Node.Proxy.Binding.Summary.Iapd()
                                    self.iapd.parent = self
                                    self._children_name_map["iapd"] = "iapd"
                                return self.iapd

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "iana" or name == "iapd" or name == "clients"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "clients"):
                                self.clients = value
                                self.clients.value_namespace = name_space
                                self.clients.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            (self.clients is not None and self.clients.has_data()) or
                            (self.summary is not None and self.summary.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            (self.clients is not None and self.clients.has_operation()) or
                            (self.summary is not None and self.summary.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "binding" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "clients"):
                            if (self.clients is None):
                                self.clients = Dhcpv6.Nodes.Node.Proxy.Binding.Clients()
                                self.clients.parent = self
                                self._children_name_map["clients"] = "clients"
                            return self.clients

                        if (child_yang_name == "summary"):
                            if (self.summary is None):
                                self.summary = Dhcpv6.Nodes.Node.Proxy.Binding.Summary()
                                self.summary.parent = self
                                self._children_name_map["summary"] = "summary"
                            return self.summary

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "clients" or name == "summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        (self.binding is not None and self.binding.has_data()) or
                        (self.interfaces is not None and self.interfaces.has_data()) or
                        (self.profiles is not None and self.profiles.has_data()) or
                        (self.statistics is not None and self.statistics.has_data()) or
                        (self.vrfs is not None and self.vrfs.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.binding is not None and self.binding.has_operation()) or
                        (self.interfaces is not None and self.interfaces.has_operation()) or
                        (self.profiles is not None and self.profiles.has_operation()) or
                        (self.statistics is not None and self.statistics.has_operation()) or
                        (self.vrfs is not None and self.vrfs.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "proxy" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "binding"):
                        if (self.binding is None):
                            self.binding = Dhcpv6.Nodes.Node.Proxy.Binding()
                            self.binding.parent = self
                            self._children_name_map["binding"] = "binding"
                        return self.binding

                    if (child_yang_name == "interfaces"):
                        if (self.interfaces is None):
                            self.interfaces = Dhcpv6.Nodes.Node.Proxy.Interfaces()
                            self.interfaces.parent = self
                            self._children_name_map["interfaces"] = "interfaces"
                        return self.interfaces

                    if (child_yang_name == "profiles"):
                        if (self.profiles is None):
                            self.profiles = Dhcpv6.Nodes.Node.Proxy.Profiles()
                            self.profiles.parent = self
                            self._children_name_map["profiles"] = "profiles"
                        return self.profiles

                    if (child_yang_name == "statistics"):
                        if (self.statistics is None):
                            self.statistics = Dhcpv6.Nodes.Node.Proxy.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                        return self.statistics

                    if (child_yang_name == "vrfs"):
                        if (self.vrfs is None):
                            self.vrfs = Dhcpv6.Nodes.Node.Proxy.Vrfs()
                            self.vrfs.parent = self
                            self._children_name_map["vrfs"] = "vrfs"
                        return self.vrfs

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "binding" or name == "interfaces" or name == "profiles" or name == "statistics" or name == "vrfs"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Base(Entity):
                """
                IPv6 DHCP Base
                
                .. attribute:: addr_bindings
                
                	IPv6 DHCP Base Binding
                	**type**\:   :py:class:`AddrBindings <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Base.AddrBindings>`
                
                .. attribute:: database
                
                	DHCP database
                	**type**\:   :py:class:`Database <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Base.Database>`
                
                

                """

                _prefix = 'ipv6-new-dhcpv6d-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Dhcpv6.Nodes.Node.Base, self).__init__()

                    self.yang_name = "base"
                    self.yang_parent_name = "node"

                    self.addr_bindings = Dhcpv6.Nodes.Node.Base.AddrBindings()
                    self.addr_bindings.parent = self
                    self._children_name_map["addr_bindings"] = "addr-bindings"
                    self._children_yang_names.add("addr-bindings")

                    self.database = Dhcpv6.Nodes.Node.Base.Database()
                    self.database.parent = self
                    self._children_name_map["database"] = "database"
                    self._children_yang_names.add("database")


                class Database(Entity):
                    """
                    DHCP database
                    
                    .. attribute:: configured
                    
                    	Database feature configured
                    	**type**\:  bool
                    
                    .. attribute:: failed_full_file_write_count
                    
                    	Failed full file write count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: failed_incremental_file_write_count
                    
                    	Failed incremental file write count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: full_file_record_count
                    
                    	Full file record count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: full_file_write_count
                    
                    	Full file write count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: full_file_write_interval
                    
                    	Full file write interval in minutes
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: minute
                    
                    .. attribute:: incremental_file_record_count
                    
                    	Incremental file record count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: incremental_file_write_count
                    
                    	Incremental file write count
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: incremental_file_write_interval
                    
                    	Incremental file write interval in minutes
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: minute
                    
                    .. attribute:: last_full_file_write_error_timestamp
                    
                    	Last full file write error timestamp since epoch
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: last_full_write_file_name
                    
                    	Last full write file name
                    	**type**\:  str
                    
                    	**length:** 0..64
                    
                    .. attribute:: last_full_write_time
                    
                    	Last full write time since epoch
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: last_incremental_file_write_error_timestamp
                    
                    	Last incremental file write error timestamp since epoch
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: last_incremental_write_file_name
                    
                    	Last incremental write file name
                    	**type**\:  str
                    
                    	**length:** 0..64
                    
                    .. attribute:: last_incremental_write_time
                    
                    	Last incremental write time since epoch
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: version
                    
                    	Current file version
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Base.Database, self).__init__()

                        self.yang_name = "database"
                        self.yang_parent_name = "base"

                        self.configured = YLeaf(YType.boolean, "configured")

                        self.failed_full_file_write_count = YLeaf(YType.uint32, "failed-full-file-write-count")

                        self.failed_incremental_file_write_count = YLeaf(YType.uint32, "failed-incremental-file-write-count")

                        self.full_file_record_count = YLeaf(YType.uint32, "full-file-record-count")

                        self.full_file_write_count = YLeaf(YType.uint32, "full-file-write-count")

                        self.full_file_write_interval = YLeaf(YType.uint32, "full-file-write-interval")

                        self.incremental_file_record_count = YLeaf(YType.uint32, "incremental-file-record-count")

                        self.incremental_file_write_count = YLeaf(YType.uint32, "incremental-file-write-count")

                        self.incremental_file_write_interval = YLeaf(YType.uint32, "incremental-file-write-interval")

                        self.last_full_file_write_error_timestamp = YLeaf(YType.uint32, "last-full-file-write-error-timestamp")

                        self.last_full_write_file_name = YLeaf(YType.str, "last-full-write-file-name")

                        self.last_full_write_time = YLeaf(YType.uint32, "last-full-write-time")

                        self.last_incremental_file_write_error_timestamp = YLeaf(YType.uint32, "last-incremental-file-write-error-timestamp")

                        self.last_incremental_write_file_name = YLeaf(YType.str, "last-incremental-write-file-name")

                        self.last_incremental_write_time = YLeaf(YType.uint32, "last-incremental-write-time")

                        self.version = YLeaf(YType.uint32, "version")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("configured",
                                        "failed_full_file_write_count",
                                        "failed_incremental_file_write_count",
                                        "full_file_record_count",
                                        "full_file_write_count",
                                        "full_file_write_interval",
                                        "incremental_file_record_count",
                                        "incremental_file_write_count",
                                        "incremental_file_write_interval",
                                        "last_full_file_write_error_timestamp",
                                        "last_full_write_file_name",
                                        "last_full_write_time",
                                        "last_incremental_file_write_error_timestamp",
                                        "last_incremental_write_file_name",
                                        "last_incremental_write_time",
                                        "version") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Dhcpv6.Nodes.Node.Base.Database, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Dhcpv6.Nodes.Node.Base.Database, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.configured.is_set or
                            self.failed_full_file_write_count.is_set or
                            self.failed_incremental_file_write_count.is_set or
                            self.full_file_record_count.is_set or
                            self.full_file_write_count.is_set or
                            self.full_file_write_interval.is_set or
                            self.incremental_file_record_count.is_set or
                            self.incremental_file_write_count.is_set or
                            self.incremental_file_write_interval.is_set or
                            self.last_full_file_write_error_timestamp.is_set or
                            self.last_full_write_file_name.is_set or
                            self.last_full_write_time.is_set or
                            self.last_incremental_file_write_error_timestamp.is_set or
                            self.last_incremental_write_file_name.is_set or
                            self.last_incremental_write_time.is_set or
                            self.version.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.configured.yfilter != YFilter.not_set or
                            self.failed_full_file_write_count.yfilter != YFilter.not_set or
                            self.failed_incremental_file_write_count.yfilter != YFilter.not_set or
                            self.full_file_record_count.yfilter != YFilter.not_set or
                            self.full_file_write_count.yfilter != YFilter.not_set or
                            self.full_file_write_interval.yfilter != YFilter.not_set or
                            self.incremental_file_record_count.yfilter != YFilter.not_set or
                            self.incremental_file_write_count.yfilter != YFilter.not_set or
                            self.incremental_file_write_interval.yfilter != YFilter.not_set or
                            self.last_full_file_write_error_timestamp.yfilter != YFilter.not_set or
                            self.last_full_write_file_name.yfilter != YFilter.not_set or
                            self.last_full_write_time.yfilter != YFilter.not_set or
                            self.last_incremental_file_write_error_timestamp.yfilter != YFilter.not_set or
                            self.last_incremental_write_file_name.yfilter != YFilter.not_set or
                            self.last_incremental_write_time.yfilter != YFilter.not_set or
                            self.version.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "database" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.configured.is_set or self.configured.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.configured.get_name_leafdata())
                        if (self.failed_full_file_write_count.is_set or self.failed_full_file_write_count.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.failed_full_file_write_count.get_name_leafdata())
                        if (self.failed_incremental_file_write_count.is_set or self.failed_incremental_file_write_count.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.failed_incremental_file_write_count.get_name_leafdata())
                        if (self.full_file_record_count.is_set or self.full_file_record_count.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.full_file_record_count.get_name_leafdata())
                        if (self.full_file_write_count.is_set or self.full_file_write_count.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.full_file_write_count.get_name_leafdata())
                        if (self.full_file_write_interval.is_set or self.full_file_write_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.full_file_write_interval.get_name_leafdata())
                        if (self.incremental_file_record_count.is_set or self.incremental_file_record_count.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.incremental_file_record_count.get_name_leafdata())
                        if (self.incremental_file_write_count.is_set or self.incremental_file_write_count.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.incremental_file_write_count.get_name_leafdata())
                        if (self.incremental_file_write_interval.is_set or self.incremental_file_write_interval.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.incremental_file_write_interval.get_name_leafdata())
                        if (self.last_full_file_write_error_timestamp.is_set or self.last_full_file_write_error_timestamp.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.last_full_file_write_error_timestamp.get_name_leafdata())
                        if (self.last_full_write_file_name.is_set or self.last_full_write_file_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.last_full_write_file_name.get_name_leafdata())
                        if (self.last_full_write_time.is_set or self.last_full_write_time.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.last_full_write_time.get_name_leafdata())
                        if (self.last_incremental_file_write_error_timestamp.is_set or self.last_incremental_file_write_error_timestamp.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.last_incremental_file_write_error_timestamp.get_name_leafdata())
                        if (self.last_incremental_write_file_name.is_set or self.last_incremental_write_file_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.last_incremental_write_file_name.get_name_leafdata())
                        if (self.last_incremental_write_time.is_set or self.last_incremental_write_time.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.last_incremental_write_time.get_name_leafdata())
                        if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.version.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "configured" or name == "failed-full-file-write-count" or name == "failed-incremental-file-write-count" or name == "full-file-record-count" or name == "full-file-write-count" or name == "full-file-write-interval" or name == "incremental-file-record-count" or name == "incremental-file-write-count" or name == "incremental-file-write-interval" or name == "last-full-file-write-error-timestamp" or name == "last-full-write-file-name" or name == "last-full-write-time" or name == "last-incremental-file-write-error-timestamp" or name == "last-incremental-write-file-name" or name == "last-incremental-write-time" or name == "version"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "configured"):
                            self.configured = value
                            self.configured.value_namespace = name_space
                            self.configured.value_namespace_prefix = name_space_prefix
                        if(value_path == "failed-full-file-write-count"):
                            self.failed_full_file_write_count = value
                            self.failed_full_file_write_count.value_namespace = name_space
                            self.failed_full_file_write_count.value_namespace_prefix = name_space_prefix
                        if(value_path == "failed-incremental-file-write-count"):
                            self.failed_incremental_file_write_count = value
                            self.failed_incremental_file_write_count.value_namespace = name_space
                            self.failed_incremental_file_write_count.value_namespace_prefix = name_space_prefix
                        if(value_path == "full-file-record-count"):
                            self.full_file_record_count = value
                            self.full_file_record_count.value_namespace = name_space
                            self.full_file_record_count.value_namespace_prefix = name_space_prefix
                        if(value_path == "full-file-write-count"):
                            self.full_file_write_count = value
                            self.full_file_write_count.value_namespace = name_space
                            self.full_file_write_count.value_namespace_prefix = name_space_prefix
                        if(value_path == "full-file-write-interval"):
                            self.full_file_write_interval = value
                            self.full_file_write_interval.value_namespace = name_space
                            self.full_file_write_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "incremental-file-record-count"):
                            self.incremental_file_record_count = value
                            self.incremental_file_record_count.value_namespace = name_space
                            self.incremental_file_record_count.value_namespace_prefix = name_space_prefix
                        if(value_path == "incremental-file-write-count"):
                            self.incremental_file_write_count = value
                            self.incremental_file_write_count.value_namespace = name_space
                            self.incremental_file_write_count.value_namespace_prefix = name_space_prefix
                        if(value_path == "incremental-file-write-interval"):
                            self.incremental_file_write_interval = value
                            self.incremental_file_write_interval.value_namespace = name_space
                            self.incremental_file_write_interval.value_namespace_prefix = name_space_prefix
                        if(value_path == "last-full-file-write-error-timestamp"):
                            self.last_full_file_write_error_timestamp = value
                            self.last_full_file_write_error_timestamp.value_namespace = name_space
                            self.last_full_file_write_error_timestamp.value_namespace_prefix = name_space_prefix
                        if(value_path == "last-full-write-file-name"):
                            self.last_full_write_file_name = value
                            self.last_full_write_file_name.value_namespace = name_space
                            self.last_full_write_file_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "last-full-write-time"):
                            self.last_full_write_time = value
                            self.last_full_write_time.value_namespace = name_space
                            self.last_full_write_time.value_namespace_prefix = name_space_prefix
                        if(value_path == "last-incremental-file-write-error-timestamp"):
                            self.last_incremental_file_write_error_timestamp = value
                            self.last_incremental_file_write_error_timestamp.value_namespace = name_space
                            self.last_incremental_file_write_error_timestamp.value_namespace_prefix = name_space_prefix
                        if(value_path == "last-incremental-write-file-name"):
                            self.last_incremental_write_file_name = value
                            self.last_incremental_write_file_name.value_namespace = name_space
                            self.last_incremental_write_file_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "last-incremental-write-time"):
                            self.last_incremental_write_time = value
                            self.last_incremental_write_time.value_namespace = name_space
                            self.last_incremental_write_time.value_namespace_prefix = name_space_prefix
                        if(value_path == "version"):
                            self.version = value
                            self.version.value_namespace = name_space
                            self.version.value_namespace_prefix = name_space_prefix


                class AddrBindings(Entity):
                    """
                    IPv6 DHCP Base Binding
                    
                    .. attribute:: addr_binding
                    
                    	DHCPv6 base stats debug
                    	**type**\: list of    :py:class:`AddrBinding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Base.AddrBindings.AddrBinding>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Base.AddrBindings, self).__init__()

                        self.yang_name = "addr-bindings"
                        self.yang_parent_name = "base"

                        self.addr_binding = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Dhcpv6.Nodes.Node.Base.AddrBindings, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Dhcpv6.Nodes.Node.Base.AddrBindings, self).__setattr__(name, value)


                    class AddrBinding(Entity):
                        """
                        DHCPv6 base stats debug
                        
                        .. attribute:: addr_string  <key>
                        
                        	Address String
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: access_vrf_name
                        
                        	DHCPV6 access interface VRF name
                        	**type**\:  str
                        
                        	**length:** 0..33
                        
                        .. attribute:: base_binding_inner_tag
                        
                        	DHCPV6 VLAN Inner VLAN
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: base_binding_outer_tag
                        
                        	DHCPV6 VLAN Outer VLAN
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: base_binding_tags
                        
                        	DHCPV6 VLAN tag count
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: interface_name
                        
                        	DHCPV6 access interface to client
                        	**type**\:  str
                        
                        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                        
                        .. attribute:: ipv6_address
                        
                        	DHCPV6 IPv6 address
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: is_nak_next_renew
                        
                        	Is true if DHCPV6 next renew from client will be NAK'd
                        	**type**\:  bool
                        
                        .. attribute:: lease_time
                        
                        	Lease time in seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: second
                        
                        .. attribute:: mac_address
                        
                        	DHCPV6 client MAC address
                        	**type**\:  str
                        
                        .. attribute:: old_subscriber_label
                        
                        	DHCPV6 old subscriber label
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: profile_name
                        
                        	DHCPV6 profile name
                        	**type**\:  str
                        
                        	**length:** 0..64
                        
                        .. attribute:: remaining_lease_time
                        
                        	Remaining lease time in seconds
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: second
                        
                        .. attribute:: reply_server_ipv6_address
                        
                        	DHCPV6 reply server IPv6 address
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: rx_client_duid
                        
                        	DHCPV6 received client DUID
                        	**type**\:  str
                        
                        	**length:** 0..771
                        
                        .. attribute:: rx_interface_id
                        
                        	DHCPV6 received Interface ID
                        	**type**\:  str
                        
                        	**length:** 0..771
                        
                        .. attribute:: rx_remote_id
                        
                        	DHCPV6 received Remote ID
                        	**type**\:  str
                        
                        	**length:** 0..771
                        
                        .. attribute:: server_ipv6_address
                        
                        	DHCPV6 server IPv6 address
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: server_vrf_name
                        
                        	DHCPV6 server VRF name
                        	**type**\:  str
                        
                        	**length:** 0..33
                        
                        .. attribute:: state
                        
                        	DHCPV6 client state
                        	**type**\:   :py:class:`BagDhcpv6DFsmState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.BagDhcpv6DFsmState>`
                        
                        .. attribute:: subscriber_label
                        
                        	DHCPV6 subscriber label
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: tx_client_uid
                        
                        	DHCPV6 transmitted client DUID
                        	**type**\:  str
                        
                        	**length:** 0..771
                        
                        .. attribute:: tx_interface_id
                        
                        	DHCPV6 transmitted Interface ID
                        	**type**\:  str
                        
                        	**length:** 0..771
                        
                        .. attribute:: tx_remote_id
                        
                        	DHCPV6 transmitted Remote ID
                        	**type**\:  str
                        
                        	**length:** 0..771
                        
                        .. attribute:: vrf_name
                        
                        	DHCPV6 client/subscriber VRF name
                        	**type**\:  str
                        
                        	**length:** 0..33
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Base.AddrBindings.AddrBinding, self).__init__()

                            self.yang_name = "addr-binding"
                            self.yang_parent_name = "addr-bindings"

                            self.addr_string = YLeaf(YType.str, "addr-string")

                            self.access_vrf_name = YLeaf(YType.str, "access-vrf-name")

                            self.base_binding_inner_tag = YLeaf(YType.uint32, "base-binding-inner-tag")

                            self.base_binding_outer_tag = YLeaf(YType.uint32, "base-binding-outer-tag")

                            self.base_binding_tags = YLeaf(YType.uint8, "base-binding-tags")

                            self.interface_name = YLeaf(YType.str, "interface-name")

                            self.ipv6_address = YLeaf(YType.str, "ipv6-address")

                            self.is_nak_next_renew = YLeaf(YType.boolean, "is-nak-next-renew")

                            self.lease_time = YLeaf(YType.uint32, "lease-time")

                            self.mac_address = YLeaf(YType.str, "mac-address")

                            self.old_subscriber_label = YLeaf(YType.uint32, "old-subscriber-label")

                            self.profile_name = YLeaf(YType.str, "profile-name")

                            self.remaining_lease_time = YLeaf(YType.uint32, "remaining-lease-time")

                            self.reply_server_ipv6_address = YLeaf(YType.str, "reply-server-ipv6-address")

                            self.rx_client_duid = YLeaf(YType.str, "rx-client-duid")

                            self.rx_interface_id = YLeaf(YType.str, "rx-interface-id")

                            self.rx_remote_id = YLeaf(YType.str, "rx-remote-id")

                            self.server_ipv6_address = YLeaf(YType.str, "server-ipv6-address")

                            self.server_vrf_name = YLeaf(YType.str, "server-vrf-name")

                            self.state = YLeaf(YType.enumeration, "state")

                            self.subscriber_label = YLeaf(YType.uint32, "subscriber-label")

                            self.tx_client_uid = YLeaf(YType.str, "tx-client-uid")

                            self.tx_interface_id = YLeaf(YType.str, "tx-interface-id")

                            self.tx_remote_id = YLeaf(YType.str, "tx-remote-id")

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("addr_string",
                                            "access_vrf_name",
                                            "base_binding_inner_tag",
                                            "base_binding_outer_tag",
                                            "base_binding_tags",
                                            "interface_name",
                                            "ipv6_address",
                                            "is_nak_next_renew",
                                            "lease_time",
                                            "mac_address",
                                            "old_subscriber_label",
                                            "profile_name",
                                            "remaining_lease_time",
                                            "reply_server_ipv6_address",
                                            "rx_client_duid",
                                            "rx_interface_id",
                                            "rx_remote_id",
                                            "server_ipv6_address",
                                            "server_vrf_name",
                                            "state",
                                            "subscriber_label",
                                            "tx_client_uid",
                                            "tx_interface_id",
                                            "tx_remote_id",
                                            "vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Base.AddrBindings.AddrBinding, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Base.AddrBindings.AddrBinding, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.addr_string.is_set or
                                self.access_vrf_name.is_set or
                                self.base_binding_inner_tag.is_set or
                                self.base_binding_outer_tag.is_set or
                                self.base_binding_tags.is_set or
                                self.interface_name.is_set or
                                self.ipv6_address.is_set or
                                self.is_nak_next_renew.is_set or
                                self.lease_time.is_set or
                                self.mac_address.is_set or
                                self.old_subscriber_label.is_set or
                                self.profile_name.is_set or
                                self.remaining_lease_time.is_set or
                                self.reply_server_ipv6_address.is_set or
                                self.rx_client_duid.is_set or
                                self.rx_interface_id.is_set or
                                self.rx_remote_id.is_set or
                                self.server_ipv6_address.is_set or
                                self.server_vrf_name.is_set or
                                self.state.is_set or
                                self.subscriber_label.is_set or
                                self.tx_client_uid.is_set or
                                self.tx_interface_id.is_set or
                                self.tx_remote_id.is_set or
                                self.vrf_name.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.addr_string.yfilter != YFilter.not_set or
                                self.access_vrf_name.yfilter != YFilter.not_set or
                                self.base_binding_inner_tag.yfilter != YFilter.not_set or
                                self.base_binding_outer_tag.yfilter != YFilter.not_set or
                                self.base_binding_tags.yfilter != YFilter.not_set or
                                self.interface_name.yfilter != YFilter.not_set or
                                self.ipv6_address.yfilter != YFilter.not_set or
                                self.is_nak_next_renew.yfilter != YFilter.not_set or
                                self.lease_time.yfilter != YFilter.not_set or
                                self.mac_address.yfilter != YFilter.not_set or
                                self.old_subscriber_label.yfilter != YFilter.not_set or
                                self.profile_name.yfilter != YFilter.not_set or
                                self.remaining_lease_time.yfilter != YFilter.not_set or
                                self.reply_server_ipv6_address.yfilter != YFilter.not_set or
                                self.rx_client_duid.yfilter != YFilter.not_set or
                                self.rx_interface_id.yfilter != YFilter.not_set or
                                self.rx_remote_id.yfilter != YFilter.not_set or
                                self.server_ipv6_address.yfilter != YFilter.not_set or
                                self.server_vrf_name.yfilter != YFilter.not_set or
                                self.state.yfilter != YFilter.not_set or
                                self.subscriber_label.yfilter != YFilter.not_set or
                                self.tx_client_uid.yfilter != YFilter.not_set or
                                self.tx_interface_id.yfilter != YFilter.not_set or
                                self.tx_remote_id.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "addr-binding" + "[addr-string='" + self.addr_string.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.addr_string.is_set or self.addr_string.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.addr_string.get_name_leafdata())
                            if (self.access_vrf_name.is_set or self.access_vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.access_vrf_name.get_name_leafdata())
                            if (self.base_binding_inner_tag.is_set or self.base_binding_inner_tag.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.base_binding_inner_tag.get_name_leafdata())
                            if (self.base_binding_outer_tag.is_set or self.base_binding_outer_tag.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.base_binding_outer_tag.get_name_leafdata())
                            if (self.base_binding_tags.is_set or self.base_binding_tags.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.base_binding_tags.get_name_leafdata())
                            if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.interface_name.get_name_leafdata())
                            if (self.ipv6_address.is_set or self.ipv6_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.ipv6_address.get_name_leafdata())
                            if (self.is_nak_next_renew.is_set or self.is_nak_next_renew.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_nak_next_renew.get_name_leafdata())
                            if (self.lease_time.is_set or self.lease_time.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.lease_time.get_name_leafdata())
                            if (self.mac_address.is_set or self.mac_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.mac_address.get_name_leafdata())
                            if (self.old_subscriber_label.is_set or self.old_subscriber_label.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.old_subscriber_label.get_name_leafdata())
                            if (self.profile_name.is_set or self.profile_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.profile_name.get_name_leafdata())
                            if (self.remaining_lease_time.is_set or self.remaining_lease_time.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.remaining_lease_time.get_name_leafdata())
                            if (self.reply_server_ipv6_address.is_set or self.reply_server_ipv6_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.reply_server_ipv6_address.get_name_leafdata())
                            if (self.rx_client_duid.is_set or self.rx_client_duid.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rx_client_duid.get_name_leafdata())
                            if (self.rx_interface_id.is_set or self.rx_interface_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rx_interface_id.get_name_leafdata())
                            if (self.rx_remote_id.is_set or self.rx_remote_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.rx_remote_id.get_name_leafdata())
                            if (self.server_ipv6_address.is_set or self.server_ipv6_address.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_ipv6_address.get_name_leafdata())
                            if (self.server_vrf_name.is_set or self.server_vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_vrf_name.get_name_leafdata())
                            if (self.state.is_set or self.state.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.state.get_name_leafdata())
                            if (self.subscriber_label.is_set or self.subscriber_label.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.subscriber_label.get_name_leafdata())
                            if (self.tx_client_uid.is_set or self.tx_client_uid.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.tx_client_uid.get_name_leafdata())
                            if (self.tx_interface_id.is_set or self.tx_interface_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.tx_interface_id.get_name_leafdata())
                            if (self.tx_remote_id.is_set or self.tx_remote_id.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.tx_remote_id.get_name_leafdata())
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "addr-string" or name == "access-vrf-name" or name == "base-binding-inner-tag" or name == "base-binding-outer-tag" or name == "base-binding-tags" or name == "interface-name" or name == "ipv6-address" or name == "is-nak-next-renew" or name == "lease-time" or name == "mac-address" or name == "old-subscriber-label" or name == "profile-name" or name == "remaining-lease-time" or name == "reply-server-ipv6-address" or name == "rx-client-duid" or name == "rx-interface-id" or name == "rx-remote-id" or name == "server-ipv6-address" or name == "server-vrf-name" or name == "state" or name == "subscriber-label" or name == "tx-client-uid" or name == "tx-interface-id" or name == "tx-remote-id" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "addr-string"):
                                self.addr_string = value
                                self.addr_string.value_namespace = name_space
                                self.addr_string.value_namespace_prefix = name_space_prefix
                            if(value_path == "access-vrf-name"):
                                self.access_vrf_name = value
                                self.access_vrf_name.value_namespace = name_space
                                self.access_vrf_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "base-binding-inner-tag"):
                                self.base_binding_inner_tag = value
                                self.base_binding_inner_tag.value_namespace = name_space
                                self.base_binding_inner_tag.value_namespace_prefix = name_space_prefix
                            if(value_path == "base-binding-outer-tag"):
                                self.base_binding_outer_tag = value
                                self.base_binding_outer_tag.value_namespace = name_space
                                self.base_binding_outer_tag.value_namespace_prefix = name_space_prefix
                            if(value_path == "base-binding-tags"):
                                self.base_binding_tags = value
                                self.base_binding_tags.value_namespace = name_space
                                self.base_binding_tags.value_namespace_prefix = name_space_prefix
                            if(value_path == "interface-name"):
                                self.interface_name = value
                                self.interface_name.value_namespace = name_space
                                self.interface_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "ipv6-address"):
                                self.ipv6_address = value
                                self.ipv6_address.value_namespace = name_space
                                self.ipv6_address.value_namespace_prefix = name_space_prefix
                            if(value_path == "is-nak-next-renew"):
                                self.is_nak_next_renew = value
                                self.is_nak_next_renew.value_namespace = name_space
                                self.is_nak_next_renew.value_namespace_prefix = name_space_prefix
                            if(value_path == "lease-time"):
                                self.lease_time = value
                                self.lease_time.value_namespace = name_space
                                self.lease_time.value_namespace_prefix = name_space_prefix
                            if(value_path == "mac-address"):
                                self.mac_address = value
                                self.mac_address.value_namespace = name_space
                                self.mac_address.value_namespace_prefix = name_space_prefix
                            if(value_path == "old-subscriber-label"):
                                self.old_subscriber_label = value
                                self.old_subscriber_label.value_namespace = name_space
                                self.old_subscriber_label.value_namespace_prefix = name_space_prefix
                            if(value_path == "profile-name"):
                                self.profile_name = value
                                self.profile_name.value_namespace = name_space
                                self.profile_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "remaining-lease-time"):
                                self.remaining_lease_time = value
                                self.remaining_lease_time.value_namespace = name_space
                                self.remaining_lease_time.value_namespace_prefix = name_space_prefix
                            if(value_path == "reply-server-ipv6-address"):
                                self.reply_server_ipv6_address = value
                                self.reply_server_ipv6_address.value_namespace = name_space
                                self.reply_server_ipv6_address.value_namespace_prefix = name_space_prefix
                            if(value_path == "rx-client-duid"):
                                self.rx_client_duid = value
                                self.rx_client_duid.value_namespace = name_space
                                self.rx_client_duid.value_namespace_prefix = name_space_prefix
                            if(value_path == "rx-interface-id"):
                                self.rx_interface_id = value
                                self.rx_interface_id.value_namespace = name_space
                                self.rx_interface_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "rx-remote-id"):
                                self.rx_remote_id = value
                                self.rx_remote_id.value_namespace = name_space
                                self.rx_remote_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-ipv6-address"):
                                self.server_ipv6_address = value
                                self.server_ipv6_address.value_namespace = name_space
                                self.server_ipv6_address.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-vrf-name"):
                                self.server_vrf_name = value
                                self.server_vrf_name.value_namespace = name_space
                                self.server_vrf_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "state"):
                                self.state = value
                                self.state.value_namespace = name_space
                                self.state.value_namespace_prefix = name_space_prefix
                            if(value_path == "subscriber-label"):
                                self.subscriber_label = value
                                self.subscriber_label.value_namespace = name_space
                                self.subscriber_label.value_namespace_prefix = name_space_prefix
                            if(value_path == "tx-client-uid"):
                                self.tx_client_uid = value
                                self.tx_client_uid.value_namespace = name_space
                                self.tx_client_uid.value_namespace_prefix = name_space_prefix
                            if(value_path == "tx-interface-id"):
                                self.tx_interface_id = value
                                self.tx_interface_id.value_namespace = name_space
                                self.tx_interface_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "tx-remote-id"):
                                self.tx_remote_id = value
                                self.tx_remote_id.value_namespace = name_space
                                self.tx_remote_id.value_namespace_prefix = name_space_prefix
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.addr_binding:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.addr_binding:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "addr-bindings" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "addr-binding"):
                            for c in self.addr_binding:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Dhcpv6.Nodes.Node.Base.AddrBindings.AddrBinding()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.addr_binding.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "addr-binding"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        (self.addr_bindings is not None and self.addr_bindings.has_data()) or
                        (self.database is not None and self.database.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.addr_bindings is not None and self.addr_bindings.has_operation()) or
                        (self.database is not None and self.database.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "base" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "addr-bindings"):
                        if (self.addr_bindings is None):
                            self.addr_bindings = Dhcpv6.Nodes.Node.Base.AddrBindings()
                            self.addr_bindings.parent = self
                            self._children_name_map["addr_bindings"] = "addr-bindings"
                        return self.addr_bindings

                    if (child_yang_name == "database"):
                        if (self.database is None):
                            self.database = Dhcpv6.Nodes.Node.Base.Database()
                            self.database.parent = self
                            self._children_name_map["database"] = "database"
                        return self.database

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "addr-bindings" or name == "database"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Server(Entity):
                """
                IPv6 DHCP server operational data
                
                .. attribute:: binding
                
                	DHCPV6 server bindings
                	**type**\:   :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Binding>`
                
                .. attribute:: binding_options
                
                	DHCPv6 server binding with options
                	**type**\:   :py:class:`BindingOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.BindingOptions>`
                
                .. attribute:: interfaces
                
                	DHCPV6 server interface
                	**type**\:   :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Interfaces>`
                
                .. attribute:: profiles
                
                	IPv6 DHCP server profile
                	**type**\:   :py:class:`Profiles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Profiles>`
                
                .. attribute:: statistics
                
                	DHCPv6 server statistics
                	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Statistics>`
                
                .. attribute:: vrfs
                
                	DHCPV6 server list of VRF names
                	**type**\:   :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs>`
                
                

                """

                _prefix = 'ipv6-new-dhcpv6d-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Dhcpv6.Nodes.Node.Server, self).__init__()

                    self.yang_name = "server"
                    self.yang_parent_name = "node"

                    self.binding = Dhcpv6.Nodes.Node.Server.Binding()
                    self.binding.parent = self
                    self._children_name_map["binding"] = "binding"
                    self._children_yang_names.add("binding")

                    self.binding_options = Dhcpv6.Nodes.Node.Server.BindingOptions()
                    self.binding_options.parent = self
                    self._children_name_map["binding_options"] = "binding-options"
                    self._children_yang_names.add("binding-options")

                    self.interfaces = Dhcpv6.Nodes.Node.Server.Interfaces()
                    self.interfaces.parent = self
                    self._children_name_map["interfaces"] = "interfaces"
                    self._children_yang_names.add("interfaces")

                    self.profiles = Dhcpv6.Nodes.Node.Server.Profiles()
                    self.profiles.parent = self
                    self._children_name_map["profiles"] = "profiles"
                    self._children_yang_names.add("profiles")

                    self.statistics = Dhcpv6.Nodes.Node.Server.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"
                    self._children_yang_names.add("statistics")

                    self.vrfs = Dhcpv6.Nodes.Node.Server.Vrfs()
                    self.vrfs.parent = self
                    self._children_name_map["vrfs"] = "vrfs"
                    self._children_yang_names.add("vrfs")


                class Binding(Entity):
                    """
                    DHCPV6 server bindings
                    
                    .. attribute:: clients
                    
                    	DHCPV6 server client bindings
                    	**type**\:   :py:class:`Clients <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Binding.Clients>`
                    
                    .. attribute:: summary
                    
                    	DHCPV6 server binding summary
                    	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Binding.Summary>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Server.Binding, self).__init__()

                        self.yang_name = "binding"
                        self.yang_parent_name = "server"

                        self.clients = Dhcpv6.Nodes.Node.Server.Binding.Clients()
                        self.clients.parent = self
                        self._children_name_map["clients"] = "clients"
                        self._children_yang_names.add("clients")

                        self.summary = Dhcpv6.Nodes.Node.Server.Binding.Summary()
                        self.summary.parent = self
                        self._children_name_map["summary"] = "summary"
                        self._children_yang_names.add("summary")


                    class Summary(Entity):
                        """
                        DHCPV6 server binding summary
                        
                        .. attribute:: clients
                        
                        	Total number of clients
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: iana
                        
                        	IANA server binding summary
                        	**type**\:   :py:class:`Iana <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Binding.Summary.Iana>`
                        
                        .. attribute:: iapd
                        
                        	IAPD server binding summary
                        	**type**\:   :py:class:`Iapd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Binding.Summary.Iapd>`
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Server.Binding.Summary, self).__init__()

                            self.yang_name = "summary"
                            self.yang_parent_name = "binding"

                            self.clients = YLeaf(YType.uint32, "clients")

                            self.iana = Dhcpv6.Nodes.Node.Server.Binding.Summary.Iana()
                            self.iana.parent = self
                            self._children_name_map["iana"] = "iana"
                            self._children_yang_names.add("iana")

                            self.iapd = Dhcpv6.Nodes.Node.Server.Binding.Summary.Iapd()
                            self.iapd.parent = self
                            self._children_name_map["iapd"] = "iapd"
                            self._children_yang_names.add("iapd")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("clients") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Server.Binding.Summary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Server.Binding.Summary, self).__setattr__(name, value)


                        class Iana(Entity):
                            """
                            IANA server binding summary
                            
                            .. attribute:: bound_clients
                            
                            	Number of clients in bound state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: daps_waiting_clients
                            
                            	Number of clients waiting on DAPS to assign/free addr/prefix
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: dpm_waiting_clients
                            
                            	Number of clients waiting on DPM to validate subscriber
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iedge_waiting_clients
                            
                            	Number of clients waiting for iedge for the session
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: initializing_clients
                            
                            	Number of clients in init state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: request_waiting_clients
                            
                            	Number of clients waiting for a request from the client
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: rib_waiting_clients
                            
                            	Number of clients in waiting for RIB response
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Server.Binding.Summary.Iana, self).__init__()

                                self.yang_name = "iana"
                                self.yang_parent_name = "summary"

                                self.bound_clients = YLeaf(YType.uint32, "bound-clients")

                                self.daps_waiting_clients = YLeaf(YType.uint32, "daps-waiting-clients")

                                self.dpm_waiting_clients = YLeaf(YType.uint32, "dpm-waiting-clients")

                                self.iedge_waiting_clients = YLeaf(YType.uint32, "iedge-waiting-clients")

                                self.initializing_clients = YLeaf(YType.uint32, "initializing-clients")

                                self.request_waiting_clients = YLeaf(YType.uint32, "request-waiting-clients")

                                self.rib_waiting_clients = YLeaf(YType.uint32, "rib-waiting-clients")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("bound_clients",
                                                "daps_waiting_clients",
                                                "dpm_waiting_clients",
                                                "iedge_waiting_clients",
                                                "initializing_clients",
                                                "request_waiting_clients",
                                                "rib_waiting_clients") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Server.Binding.Summary.Iana, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Server.Binding.Summary.Iana, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.bound_clients.is_set or
                                    self.daps_waiting_clients.is_set or
                                    self.dpm_waiting_clients.is_set or
                                    self.iedge_waiting_clients.is_set or
                                    self.initializing_clients.is_set or
                                    self.request_waiting_clients.is_set or
                                    self.rib_waiting_clients.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.bound_clients.yfilter != YFilter.not_set or
                                    self.daps_waiting_clients.yfilter != YFilter.not_set or
                                    self.dpm_waiting_clients.yfilter != YFilter.not_set or
                                    self.iedge_waiting_clients.yfilter != YFilter.not_set or
                                    self.initializing_clients.yfilter != YFilter.not_set or
                                    self.request_waiting_clients.yfilter != YFilter.not_set or
                                    self.rib_waiting_clients.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "iana" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.bound_clients.is_set or self.bound_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.bound_clients.get_name_leafdata())
                                if (self.daps_waiting_clients.is_set or self.daps_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.daps_waiting_clients.get_name_leafdata())
                                if (self.dpm_waiting_clients.is_set or self.dpm_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dpm_waiting_clients.get_name_leafdata())
                                if (self.iedge_waiting_clients.is_set or self.iedge_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.iedge_waiting_clients.get_name_leafdata())
                                if (self.initializing_clients.is_set or self.initializing_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.initializing_clients.get_name_leafdata())
                                if (self.request_waiting_clients.is_set or self.request_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.request_waiting_clients.get_name_leafdata())
                                if (self.rib_waiting_clients.is_set or self.rib_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rib_waiting_clients.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "bound-clients" or name == "daps-waiting-clients" or name == "dpm-waiting-clients" or name == "iedge-waiting-clients" or name == "initializing-clients" or name == "request-waiting-clients" or name == "rib-waiting-clients"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "bound-clients"):
                                    self.bound_clients = value
                                    self.bound_clients.value_namespace = name_space
                                    self.bound_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "daps-waiting-clients"):
                                    self.daps_waiting_clients = value
                                    self.daps_waiting_clients.value_namespace = name_space
                                    self.daps_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "dpm-waiting-clients"):
                                    self.dpm_waiting_clients = value
                                    self.dpm_waiting_clients.value_namespace = name_space
                                    self.dpm_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "iedge-waiting-clients"):
                                    self.iedge_waiting_clients = value
                                    self.iedge_waiting_clients.value_namespace = name_space
                                    self.iedge_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "initializing-clients"):
                                    self.initializing_clients = value
                                    self.initializing_clients.value_namespace = name_space
                                    self.initializing_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "request-waiting-clients"):
                                    self.request_waiting_clients = value
                                    self.request_waiting_clients.value_namespace = name_space
                                    self.request_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "rib-waiting-clients"):
                                    self.rib_waiting_clients = value
                                    self.rib_waiting_clients.value_namespace = name_space
                                    self.rib_waiting_clients.value_namespace_prefix = name_space_prefix


                        class Iapd(Entity):
                            """
                            IAPD server binding summary
                            
                            .. attribute:: bound_clients
                            
                            	Number of clients in bound state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: daps_waiting_clients
                            
                            	Number of clients waiting on DAPS to assign/free addr/prefix
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: dpm_waiting_clients
                            
                            	Number of clients waiting on DPM to validate subscriber
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iedge_waiting_clients
                            
                            	Number of clients waiting for iedge for the session
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: initializing_clients
                            
                            	Number of clients in init state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: request_waiting_clients
                            
                            	Number of clients waiting for a request from the client
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: rib_waiting_clients
                            
                            	Number of clients in waiting for RIB response
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Server.Binding.Summary.Iapd, self).__init__()

                                self.yang_name = "iapd"
                                self.yang_parent_name = "summary"

                                self.bound_clients = YLeaf(YType.uint32, "bound-clients")

                                self.daps_waiting_clients = YLeaf(YType.uint32, "daps-waiting-clients")

                                self.dpm_waiting_clients = YLeaf(YType.uint32, "dpm-waiting-clients")

                                self.iedge_waiting_clients = YLeaf(YType.uint32, "iedge-waiting-clients")

                                self.initializing_clients = YLeaf(YType.uint32, "initializing-clients")

                                self.request_waiting_clients = YLeaf(YType.uint32, "request-waiting-clients")

                                self.rib_waiting_clients = YLeaf(YType.uint32, "rib-waiting-clients")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("bound_clients",
                                                "daps_waiting_clients",
                                                "dpm_waiting_clients",
                                                "iedge_waiting_clients",
                                                "initializing_clients",
                                                "request_waiting_clients",
                                                "rib_waiting_clients") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Server.Binding.Summary.Iapd, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Server.Binding.Summary.Iapd, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.bound_clients.is_set or
                                    self.daps_waiting_clients.is_set or
                                    self.dpm_waiting_clients.is_set or
                                    self.iedge_waiting_clients.is_set or
                                    self.initializing_clients.is_set or
                                    self.request_waiting_clients.is_set or
                                    self.rib_waiting_clients.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.bound_clients.yfilter != YFilter.not_set or
                                    self.daps_waiting_clients.yfilter != YFilter.not_set or
                                    self.dpm_waiting_clients.yfilter != YFilter.not_set or
                                    self.iedge_waiting_clients.yfilter != YFilter.not_set or
                                    self.initializing_clients.yfilter != YFilter.not_set or
                                    self.request_waiting_clients.yfilter != YFilter.not_set or
                                    self.rib_waiting_clients.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "iapd" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.bound_clients.is_set or self.bound_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.bound_clients.get_name_leafdata())
                                if (self.daps_waiting_clients.is_set or self.daps_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.daps_waiting_clients.get_name_leafdata())
                                if (self.dpm_waiting_clients.is_set or self.dpm_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dpm_waiting_clients.get_name_leafdata())
                                if (self.iedge_waiting_clients.is_set or self.iedge_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.iedge_waiting_clients.get_name_leafdata())
                                if (self.initializing_clients.is_set or self.initializing_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.initializing_clients.get_name_leafdata())
                                if (self.request_waiting_clients.is_set or self.request_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.request_waiting_clients.get_name_leafdata())
                                if (self.rib_waiting_clients.is_set or self.rib_waiting_clients.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rib_waiting_clients.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "bound-clients" or name == "daps-waiting-clients" or name == "dpm-waiting-clients" or name == "iedge-waiting-clients" or name == "initializing-clients" or name == "request-waiting-clients" or name == "rib-waiting-clients"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "bound-clients"):
                                    self.bound_clients = value
                                    self.bound_clients.value_namespace = name_space
                                    self.bound_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "daps-waiting-clients"):
                                    self.daps_waiting_clients = value
                                    self.daps_waiting_clients.value_namespace = name_space
                                    self.daps_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "dpm-waiting-clients"):
                                    self.dpm_waiting_clients = value
                                    self.dpm_waiting_clients.value_namespace = name_space
                                    self.dpm_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "iedge-waiting-clients"):
                                    self.iedge_waiting_clients = value
                                    self.iedge_waiting_clients.value_namespace = name_space
                                    self.iedge_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "initializing-clients"):
                                    self.initializing_clients = value
                                    self.initializing_clients.value_namespace = name_space
                                    self.initializing_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "request-waiting-clients"):
                                    self.request_waiting_clients = value
                                    self.request_waiting_clients.value_namespace = name_space
                                    self.request_waiting_clients.value_namespace_prefix = name_space_prefix
                                if(value_path == "rib-waiting-clients"):
                                    self.rib_waiting_clients = value
                                    self.rib_waiting_clients.value_namespace = name_space
                                    self.rib_waiting_clients.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.clients.is_set or
                                (self.iana is not None and self.iana.has_data()) or
                                (self.iapd is not None and self.iapd.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.clients.yfilter != YFilter.not_set or
                                (self.iana is not None and self.iana.has_operation()) or
                                (self.iapd is not None and self.iapd.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "summary" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.clients.is_set or self.clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.clients.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "iana"):
                                if (self.iana is None):
                                    self.iana = Dhcpv6.Nodes.Node.Server.Binding.Summary.Iana()
                                    self.iana.parent = self
                                    self._children_name_map["iana"] = "iana"
                                return self.iana

                            if (child_yang_name == "iapd"):
                                if (self.iapd is None):
                                    self.iapd = Dhcpv6.Nodes.Node.Server.Binding.Summary.Iapd()
                                    self.iapd.parent = self
                                    self._children_name_map["iapd"] = "iapd"
                                return self.iapd

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "iana" or name == "iapd" or name == "clients"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "clients"):
                                self.clients = value
                                self.clients.value_namespace = name_space
                                self.clients.value_namespace_prefix = name_space_prefix


                    class Clients(Entity):
                        """
                        DHCPV6 server client bindings
                        
                        .. attribute:: client
                        
                        	Single DHCPV6 server binding
                        	**type**\: list of    :py:class:`Client <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Binding.Clients.Client>`
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Server.Binding.Clients, self).__init__()

                            self.yang_name = "clients"
                            self.yang_parent_name = "binding"

                            self.client = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Server.Binding.Clients, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Server.Binding.Clients, self).__setattr__(name, value)


                        class Client(Entity):
                            """
                            Single DHCPV6 server binding
                            
                            .. attribute:: client_id  <key>
                            
                            	Client ID
                            	**type**\:  str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: access_vrf_name
                            
                            	DHCPV6 access VRF name to client
                            	**type**\:  str
                            
                            	**length:** 0..33
                            
                            .. attribute:: address_pool_name
                            
                            	DHCPV6 server address pool name
                            	**type**\:  str
                            
                            	**length:** 0..64
                            
                            .. attribute:: class_name
                            
                            	DHCPV6 class name
                            	**type**\:  str
                            
                            	**length:** 0..64
                            
                            .. attribute:: client_flag
                            
                            	DHCPV6 client flag
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: client_id_xr
                            
                            	Client unique identifier
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: dns_server_count
                            
                            	DNS server count
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: duid
                            
                            	Client DUID
                            	**type**\:  str
                            
                            .. attribute:: framed_ipv6_prefix
                            
                            	DHCPV6 framed ipv6 addess used by ND
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: framed_prefix_length
                            
                            	DHCPV6 framed ipv6 prefix length used by ND
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ia_id_p_ds
                            
                            	Number of ia\_id/pd
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: ia_id_pd
                            
                            	List of DHCPv6 IA\_ID/PDs
                            	**type**\:   :py:class:`IaIdPd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd>`
                            
                            .. attribute:: interface_name
                            
                            	DHCPV6 access interface to client
                            	**type**\:  str
                            
                            	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                            
                            .. attribute:: is_nak_next_renew
                            
                            	Is true if DHCPv6 next renew from client will be NAK'd
                            	**type**\:  bool
                            
                            .. attribute:: link_local_address
                            
                            	DHCPV6 IPv6 client link local address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: mac_address
                            
                            	Client MAC address
                            	**type**\:  str
                            
                            .. attribute:: pool_name
                            
                            	DHCPV6 pool name
                            	**type**\:  str
                            
                            	**length:** 0..64
                            
                            .. attribute:: prefix_pool_name
                            
                            	DHCPV6 server prefix pool name
                            	**type**\:  str
                            
                            	**length:** 0..64
                            
                            .. attribute:: profile_name
                            
                            	DHCPV6 profile name
                            	**type**\:  str
                            
                            	**length:** 0..64
                            
                            .. attribute:: rx_interface_id
                            
                            	DHCPV6 received Interface ID
                            	**type**\:  str
                            
                            	**length:** 0..771
                            
                            .. attribute:: rx_remote_id
                            
                            	DHCPV6 received Remote ID
                            	**type**\:  str
                            
                            	**length:** 0..771
                            
                            .. attribute:: serg_intf_role
                            
                            	DHCPV6 SERG Intf Role
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: server_binding_inner_tag
                            
                            	DHCPV6 VLAN Inner VLAN
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: server_binding_outer_tag
                            
                            	DHCPV6 VLAN Outer VLAN
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: server_binding_tags
                            
                            	DHCPV6 VLAN tag count
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: sesrg_state
                            
                            	DHCPV6 SERG state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: srg_intf_role
                            
                            	DHCPV6 SRG Intf Role
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: srg_state
                            
                            	DHCPV6 SRG state
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: srg_vrf_name
                            
                            	DHCPV6 SRG VRF NAME
                            	**type**\:  str
                            
                            	**length:** 0..33
                            
                            .. attribute:: srgp2p
                            
                            	SRG P2P Status
                            	**type**\:  bool
                            
                            .. attribute:: subscriber_label
                            
                            	DHCPV6 subscriber label
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: vrf_name
                            
                            	DHCPVV6 client/subscriber VRF name
                            	**type**\:  str
                            
                            	**length:** 0..33
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client, self).__init__()

                                self.yang_name = "client"
                                self.yang_parent_name = "clients"

                                self.client_id = YLeaf(YType.str, "client-id")

                                self.access_vrf_name = YLeaf(YType.str, "access-vrf-name")

                                self.address_pool_name = YLeaf(YType.str, "address-pool-name")

                                self.class_name = YLeaf(YType.str, "class-name")

                                self.client_flag = YLeaf(YType.uint32, "client-flag")

                                self.client_id_xr = YLeaf(YType.uint32, "client-id-xr")

                                self.dns_server_count = YLeaf(YType.uint32, "dns-server-count")

                                self.duid = YLeaf(YType.str, "duid")

                                self.framed_ipv6_prefix = YLeaf(YType.str, "framed-ipv6-prefix")

                                self.framed_prefix_length = YLeaf(YType.uint8, "framed-prefix-length")

                                self.ia_id_p_ds = YLeaf(YType.uint32, "ia-id-p-ds")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.is_nak_next_renew = YLeaf(YType.boolean, "is-nak-next-renew")

                                self.link_local_address = YLeaf(YType.str, "link-local-address")

                                self.mac_address = YLeaf(YType.str, "mac-address")

                                self.pool_name = YLeaf(YType.str, "pool-name")

                                self.prefix_pool_name = YLeaf(YType.str, "prefix-pool-name")

                                self.profile_name = YLeaf(YType.str, "profile-name")

                                self.rx_interface_id = YLeaf(YType.str, "rx-interface-id")

                                self.rx_remote_id = YLeaf(YType.str, "rx-remote-id")

                                self.serg_intf_role = YLeaf(YType.uint32, "serg-intf-role")

                                self.server_binding_inner_tag = YLeaf(YType.uint32, "server-binding-inner-tag")

                                self.server_binding_outer_tag = YLeaf(YType.uint32, "server-binding-outer-tag")

                                self.server_binding_tags = YLeaf(YType.uint8, "server-binding-tags")

                                self.sesrg_state = YLeaf(YType.uint32, "sesrg-state")

                                self.srg_intf_role = YLeaf(YType.uint32, "srg-intf-role")

                                self.srg_state = YLeaf(YType.uint32, "srg-state")

                                self.srg_vrf_name = YLeaf(YType.str, "srg-vrf-name")

                                self.srgp2p = YLeaf(YType.boolean, "srgp2p")

                                self.subscriber_label = YLeaf(YType.uint32, "subscriber-label")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                                self.ia_id_pd = Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd()
                                self.ia_id_pd.parent = self
                                self._children_name_map["ia_id_pd"] = "ia-id-pd"
                                self._children_yang_names.add("ia-id-pd")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("client_id",
                                                "access_vrf_name",
                                                "address_pool_name",
                                                "class_name",
                                                "client_flag",
                                                "client_id_xr",
                                                "dns_server_count",
                                                "duid",
                                                "framed_ipv6_prefix",
                                                "framed_prefix_length",
                                                "ia_id_p_ds",
                                                "interface_name",
                                                "is_nak_next_renew",
                                                "link_local_address",
                                                "mac_address",
                                                "pool_name",
                                                "prefix_pool_name",
                                                "profile_name",
                                                "rx_interface_id",
                                                "rx_remote_id",
                                                "serg_intf_role",
                                                "server_binding_inner_tag",
                                                "server_binding_outer_tag",
                                                "server_binding_tags",
                                                "sesrg_state",
                                                "srg_intf_role",
                                                "srg_state",
                                                "srg_vrf_name",
                                                "srgp2p",
                                                "subscriber_label",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client, self).__setattr__(name, value)


                            class IaIdPd(Entity):
                                """
                                List of DHCPv6 IA\_ID/PDs
                                
                                .. attribute:: bag_dhcpv6d_ia_id_pd_info
                                
                                	bag dhcpv6d ia id pd info
                                	**type**\: list of    :py:class:`BagDhcpv6DIaIdPdInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo>`
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd, self).__init__()

                                    self.yang_name = "ia-id-pd"
                                    self.yang_parent_name = "client"

                                    self.bag_dhcpv6d_ia_id_pd_info = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd, self).__setattr__(name, value)


                                class BagDhcpv6DIaIdPdInfo(Entity):
                                    """
                                    bag dhcpv6d ia id pd info
                                    
                                    .. attribute:: addresses
                                    
                                    	List of addresses in this IA
                                    	**type**\:   :py:class:`Addresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses>`
                                    
                                    .. attribute:: flags
                                    
                                    	FSM Flag for this IA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ia_id
                                    
                                    	IA\_ID of this IA
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: ia_type
                                    
                                    	IA type
                                    	**type**\:   :py:class:`BagDhcpv6DIaId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.BagDhcpv6DIaId>`
                                    
                                    .. attribute:: state
                                    
                                    	State
                                    	**type**\:   :py:class:`BagDhcpv6DFsmState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.BagDhcpv6DFsmState>`
                                    
                                    .. attribute:: total_address
                                    
                                    	Total address in this IA
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'ipv6-new-dhcpv6d-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo, self).__init__()

                                        self.yang_name = "bag-dhcpv6d-ia-id-pd-info"
                                        self.yang_parent_name = "ia-id-pd"

                                        self.flags = YLeaf(YType.uint32, "flags")

                                        self.ia_id = YLeaf(YType.uint32, "ia-id")

                                        self.ia_type = YLeaf(YType.enumeration, "ia-type")

                                        self.state = YLeaf(YType.enumeration, "state")

                                        self.total_address = YLeaf(YType.uint16, "total-address")

                                        self.addresses = Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses()
                                        self.addresses.parent = self
                                        self._children_name_map["addresses"] = "addresses"
                                        self._children_yang_names.add("addresses")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("flags",
                                                        "ia_id",
                                                        "ia_type",
                                                        "state",
                                                        "total_address") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo, self).__setattr__(name, value)


                                    class Addresses(Entity):
                                        """
                                        List of addresses in this IA
                                        
                                        .. attribute:: bag_dhcpv6d_addr_attrb
                                        
                                        	bag dhcpv6d addr attrb
                                        	**type**\: list of    :py:class:`BagDhcpv6DAddrAttrb <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses.BagDhcpv6DAddrAttrb>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-new-dhcpv6d-oper'
                                        _revision = '2015-11-09'

                                        def __init__(self):
                                            super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses, self).__init__()

                                            self.yang_name = "addresses"
                                            self.yang_parent_name = "bag-dhcpv6d-ia-id-pd-info"

                                            self.bag_dhcpv6d_addr_attrb = YList(self)

                                        def __setattr__(self, name, value):
                                            self._check_monkey_patching_error(name, value)
                                            with _handle_type_error():
                                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                        "Please use list append or extend method."
                                                                        .format(value))
                                                if isinstance(value, Enum.YLeaf):
                                                    value = value.name
                                                if name in () and name in self.__dict__:
                                                    if isinstance(value, YLeaf):
                                                        self.__dict__[name].set(value.get())
                                                    elif isinstance(value, YLeafList):
                                                        super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses, self).__setattr__(name, value)
                                                    else:
                                                        self.__dict__[name].set(value)
                                                else:
                                                    if hasattr(value, "parent") and name != "parent":
                                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                            value.parent = self
                                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                                            value.parent = self
                                                    super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses, self).__setattr__(name, value)


                                        class BagDhcpv6DAddrAttrb(Entity):
                                            """
                                            bag dhcpv6d addr attrb
                                            
                                            .. attribute:: lease_time
                                            
                                            	Lease time in seconds
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            	**units**\: second
                                            
                                            .. attribute:: prefix
                                            
                                            	IPv6 prefix
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: prefix_length
                                            
                                            	Prefix length
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: remaining_lease_time
                                            
                                            	Remaining lease time in seconds
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            	**units**\: second
                                            
                                            

                                            """

                                            _prefix = 'ipv6-new-dhcpv6d-oper'
                                            _revision = '2015-11-09'

                                            def __init__(self):
                                                super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses.BagDhcpv6DAddrAttrb, self).__init__()

                                                self.yang_name = "bag-dhcpv6d-addr-attrb"
                                                self.yang_parent_name = "addresses"

                                                self.lease_time = YLeaf(YType.uint32, "lease-time")

                                                self.prefix = YLeaf(YType.str, "prefix")

                                                self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                                self.remaining_lease_time = YLeaf(YType.uint32, "remaining-lease-time")

                                            def __setattr__(self, name, value):
                                                self._check_monkey_patching_error(name, value)
                                                with _handle_type_error():
                                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                            "Please use list append or extend method."
                                                                            .format(value))
                                                    if isinstance(value, Enum.YLeaf):
                                                        value = value.name
                                                    if name in ("lease_time",
                                                                "prefix",
                                                                "prefix_length",
                                                                "remaining_lease_time") and name in self.__dict__:
                                                        if isinstance(value, YLeaf):
                                                            self.__dict__[name].set(value.get())
                                                        elif isinstance(value, YLeafList):
                                                            super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses.BagDhcpv6DAddrAttrb, self).__setattr__(name, value)
                                                        else:
                                                            self.__dict__[name].set(value)
                                                    else:
                                                        if hasattr(value, "parent") and name != "parent":
                                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                                value.parent = self
                                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                                value.parent = self
                                                        super(Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses.BagDhcpv6DAddrAttrb, self).__setattr__(name, value)

                                            def has_data(self):
                                                return (
                                                    self.lease_time.is_set or
                                                    self.prefix.is_set or
                                                    self.prefix_length.is_set or
                                                    self.remaining_lease_time.is_set)

                                            def has_operation(self):
                                                return (
                                                    self.yfilter != YFilter.not_set or
                                                    self.lease_time.yfilter != YFilter.not_set or
                                                    self.prefix.yfilter != YFilter.not_set or
                                                    self.prefix_length.yfilter != YFilter.not_set or
                                                    self.remaining_lease_time.yfilter != YFilter.not_set)

                                            def get_segment_path(self):
                                                path_buffer = ""
                                                path_buffer = "bag-dhcpv6d-addr-attrb" + path_buffer

                                                return path_buffer

                                            def get_entity_path(self, ancestor):
                                                path_buffer = ""
                                                if (ancestor is None):
                                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                                else:
                                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                                leaf_name_data = LeafDataList()
                                                if (self.lease_time.is_set or self.lease_time.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.lease_time.get_name_leafdata())
                                                if (self.prefix.is_set or self.prefix.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.prefix.get_name_leafdata())
                                                if (self.prefix_length.is_set or self.prefix_length.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.prefix_length.get_name_leafdata())
                                                if (self.remaining_lease_time.is_set or self.remaining_lease_time.yfilter != YFilter.not_set):
                                                    leaf_name_data.append(self.remaining_lease_time.get_name_leafdata())

                                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                                return entity_path

                                            def get_child_by_name(self, child_yang_name, segment_path):
                                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                                if child is not None:
                                                    return child

                                                return None

                                            def has_leaf_or_child_of_name(self, name):
                                                if(name == "lease-time" or name == "prefix" or name == "prefix-length" or name == "remaining-lease-time"):
                                                    return True
                                                return False

                                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                                if(value_path == "lease-time"):
                                                    self.lease_time = value
                                                    self.lease_time.value_namespace = name_space
                                                    self.lease_time.value_namespace_prefix = name_space_prefix
                                                if(value_path == "prefix"):
                                                    self.prefix = value
                                                    self.prefix.value_namespace = name_space
                                                    self.prefix.value_namespace_prefix = name_space_prefix
                                                if(value_path == "prefix-length"):
                                                    self.prefix_length = value
                                                    self.prefix_length.value_namespace = name_space
                                                    self.prefix_length.value_namespace_prefix = name_space_prefix
                                                if(value_path == "remaining-lease-time"):
                                                    self.remaining_lease_time = value
                                                    self.remaining_lease_time.value_namespace = name_space
                                                    self.remaining_lease_time.value_namespace_prefix = name_space_prefix

                                        def has_data(self):
                                            for c in self.bag_dhcpv6d_addr_attrb:
                                                if (c.has_data()):
                                                    return True
                                            return False

                                        def has_operation(self):
                                            for c in self.bag_dhcpv6d_addr_attrb:
                                                if (c.has_operation()):
                                                    return True
                                            return self.yfilter != YFilter.not_set

                                        def get_segment_path(self):
                                            path_buffer = ""
                                            path_buffer = "addresses" + path_buffer

                                            return path_buffer

                                        def get_entity_path(self, ancestor):
                                            path_buffer = ""
                                            if (ancestor is None):
                                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                            else:
                                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                            leaf_name_data = LeafDataList()

                                            entity_path = EntityPath(path_buffer, leaf_name_data)
                                            return entity_path

                                        def get_child_by_name(self, child_yang_name, segment_path):
                                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                            if child is not None:
                                                return child

                                            if (child_yang_name == "bag-dhcpv6d-addr-attrb"):
                                                for c in self.bag_dhcpv6d_addr_attrb:
                                                    segment = c.get_segment_path()
                                                    if (segment_path == segment):
                                                        return c
                                                c = Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses.BagDhcpv6DAddrAttrb()
                                                c.parent = self
                                                local_reference_key = "ydk::seg::%s" % segment_path
                                                self._local_refs[local_reference_key] = c
                                                self.bag_dhcpv6d_addr_attrb.append(c)
                                                return c

                                            return None

                                        def has_leaf_or_child_of_name(self, name):
                                            if(name == "bag-dhcpv6d-addr-attrb"):
                                                return True
                                            return False

                                        def set_value(self, value_path, value, name_space, name_space_prefix):
                                            pass

                                    def has_data(self):
                                        return (
                                            self.flags.is_set or
                                            self.ia_id.is_set or
                                            self.ia_type.is_set or
                                            self.state.is_set or
                                            self.total_address.is_set or
                                            (self.addresses is not None and self.addresses.has_data()))

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.flags.yfilter != YFilter.not_set or
                                            self.ia_id.yfilter != YFilter.not_set or
                                            self.ia_type.yfilter != YFilter.not_set or
                                            self.state.yfilter != YFilter.not_set or
                                            self.total_address.yfilter != YFilter.not_set or
                                            (self.addresses is not None and self.addresses.has_operation()))

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "bag-dhcpv6d-ia-id-pd-info" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.flags.is_set or self.flags.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.flags.get_name_leafdata())
                                        if (self.ia_id.is_set or self.ia_id.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.ia_id.get_name_leafdata())
                                        if (self.ia_type.is_set or self.ia_type.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.ia_type.get_name_leafdata())
                                        if (self.state.is_set or self.state.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.state.get_name_leafdata())
                                        if (self.total_address.is_set or self.total_address.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.total_address.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        if (child_yang_name == "addresses"):
                                            if (self.addresses is None):
                                                self.addresses = Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo.Addresses()
                                                self.addresses.parent = self
                                                self._children_name_map["addresses"] = "addresses"
                                            return self.addresses

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "addresses" or name == "flags" or name == "ia-id" or name == "ia-type" or name == "state" or name == "total-address"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "flags"):
                                            self.flags = value
                                            self.flags.value_namespace = name_space
                                            self.flags.value_namespace_prefix = name_space_prefix
                                        if(value_path == "ia-id"):
                                            self.ia_id = value
                                            self.ia_id.value_namespace = name_space
                                            self.ia_id.value_namespace_prefix = name_space_prefix
                                        if(value_path == "ia-type"):
                                            self.ia_type = value
                                            self.ia_type.value_namespace = name_space
                                            self.ia_type.value_namespace_prefix = name_space_prefix
                                        if(value_path == "state"):
                                            self.state = value
                                            self.state.value_namespace = name_space
                                            self.state.value_namespace_prefix = name_space_prefix
                                        if(value_path == "total-address"):
                                            self.total_address = value
                                            self.total_address.value_namespace = name_space
                                            self.total_address.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.bag_dhcpv6d_ia_id_pd_info:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.bag_dhcpv6d_ia_id_pd_info:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "ia-id-pd" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "bag-dhcpv6d-ia-id-pd-info"):
                                        for c in self.bag_dhcpv6d_ia_id_pd_info:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd.BagDhcpv6DIaIdPdInfo()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.bag_dhcpv6d_ia_id_pd_info.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "bag-dhcpv6d-ia-id-pd-info"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass

                            def has_data(self):
                                return (
                                    self.client_id.is_set or
                                    self.access_vrf_name.is_set or
                                    self.address_pool_name.is_set or
                                    self.class_name.is_set or
                                    self.client_flag.is_set or
                                    self.client_id_xr.is_set or
                                    self.dns_server_count.is_set or
                                    self.duid.is_set or
                                    self.framed_ipv6_prefix.is_set or
                                    self.framed_prefix_length.is_set or
                                    self.ia_id_p_ds.is_set or
                                    self.interface_name.is_set or
                                    self.is_nak_next_renew.is_set or
                                    self.link_local_address.is_set or
                                    self.mac_address.is_set or
                                    self.pool_name.is_set or
                                    self.prefix_pool_name.is_set or
                                    self.profile_name.is_set or
                                    self.rx_interface_id.is_set or
                                    self.rx_remote_id.is_set or
                                    self.serg_intf_role.is_set or
                                    self.server_binding_inner_tag.is_set or
                                    self.server_binding_outer_tag.is_set or
                                    self.server_binding_tags.is_set or
                                    self.sesrg_state.is_set or
                                    self.srg_intf_role.is_set or
                                    self.srg_state.is_set or
                                    self.srg_vrf_name.is_set or
                                    self.srgp2p.is_set or
                                    self.subscriber_label.is_set or
                                    self.vrf_name.is_set or
                                    (self.ia_id_pd is not None and self.ia_id_pd.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.client_id.yfilter != YFilter.not_set or
                                    self.access_vrf_name.yfilter != YFilter.not_set or
                                    self.address_pool_name.yfilter != YFilter.not_set or
                                    self.class_name.yfilter != YFilter.not_set or
                                    self.client_flag.yfilter != YFilter.not_set or
                                    self.client_id_xr.yfilter != YFilter.not_set or
                                    self.dns_server_count.yfilter != YFilter.not_set or
                                    self.duid.yfilter != YFilter.not_set or
                                    self.framed_ipv6_prefix.yfilter != YFilter.not_set or
                                    self.framed_prefix_length.yfilter != YFilter.not_set or
                                    self.ia_id_p_ds.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.is_nak_next_renew.yfilter != YFilter.not_set or
                                    self.link_local_address.yfilter != YFilter.not_set or
                                    self.mac_address.yfilter != YFilter.not_set or
                                    self.pool_name.yfilter != YFilter.not_set or
                                    self.prefix_pool_name.yfilter != YFilter.not_set or
                                    self.profile_name.yfilter != YFilter.not_set or
                                    self.rx_interface_id.yfilter != YFilter.not_set or
                                    self.rx_remote_id.yfilter != YFilter.not_set or
                                    self.serg_intf_role.yfilter != YFilter.not_set or
                                    self.server_binding_inner_tag.yfilter != YFilter.not_set or
                                    self.server_binding_outer_tag.yfilter != YFilter.not_set or
                                    self.server_binding_tags.yfilter != YFilter.not_set or
                                    self.sesrg_state.yfilter != YFilter.not_set or
                                    self.srg_intf_role.yfilter != YFilter.not_set or
                                    self.srg_state.yfilter != YFilter.not_set or
                                    self.srg_vrf_name.yfilter != YFilter.not_set or
                                    self.srgp2p.yfilter != YFilter.not_set or
                                    self.subscriber_label.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set or
                                    (self.ia_id_pd is not None and self.ia_id_pd.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "client" + "[client-id='" + self.client_id.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.client_id.is_set or self.client_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.client_id.get_name_leafdata())
                                if (self.access_vrf_name.is_set or self.access_vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.access_vrf_name.get_name_leafdata())
                                if (self.address_pool_name.is_set or self.address_pool_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.address_pool_name.get_name_leafdata())
                                if (self.class_name.is_set or self.class_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.class_name.get_name_leafdata())
                                if (self.client_flag.is_set or self.client_flag.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.client_flag.get_name_leafdata())
                                if (self.client_id_xr.is_set or self.client_id_xr.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.client_id_xr.get_name_leafdata())
                                if (self.dns_server_count.is_set or self.dns_server_count.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dns_server_count.get_name_leafdata())
                                if (self.duid.is_set or self.duid.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.duid.get_name_leafdata())
                                if (self.framed_ipv6_prefix.is_set or self.framed_ipv6_prefix.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.framed_ipv6_prefix.get_name_leafdata())
                                if (self.framed_prefix_length.is_set or self.framed_prefix_length.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.framed_prefix_length.get_name_leafdata())
                                if (self.ia_id_p_ds.is_set or self.ia_id_p_ds.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ia_id_p_ds.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.is_nak_next_renew.is_set or self.is_nak_next_renew.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.is_nak_next_renew.get_name_leafdata())
                                if (self.link_local_address.is_set or self.link_local_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.link_local_address.get_name_leafdata())
                                if (self.mac_address.is_set or self.mac_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.mac_address.get_name_leafdata())
                                if (self.pool_name.is_set or self.pool_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.pool_name.get_name_leafdata())
                                if (self.prefix_pool_name.is_set or self.prefix_pool_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.prefix_pool_name.get_name_leafdata())
                                if (self.profile_name.is_set or self.profile_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.profile_name.get_name_leafdata())
                                if (self.rx_interface_id.is_set or self.rx_interface_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rx_interface_id.get_name_leafdata())
                                if (self.rx_remote_id.is_set or self.rx_remote_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rx_remote_id.get_name_leafdata())
                                if (self.serg_intf_role.is_set or self.serg_intf_role.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.serg_intf_role.get_name_leafdata())
                                if (self.server_binding_inner_tag.is_set or self.server_binding_inner_tag.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.server_binding_inner_tag.get_name_leafdata())
                                if (self.server_binding_outer_tag.is_set or self.server_binding_outer_tag.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.server_binding_outer_tag.get_name_leafdata())
                                if (self.server_binding_tags.is_set or self.server_binding_tags.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.server_binding_tags.get_name_leafdata())
                                if (self.sesrg_state.is_set or self.sesrg_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.sesrg_state.get_name_leafdata())
                                if (self.srg_intf_role.is_set or self.srg_intf_role.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.srg_intf_role.get_name_leafdata())
                                if (self.srg_state.is_set or self.srg_state.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.srg_state.get_name_leafdata())
                                if (self.srg_vrf_name.is_set or self.srg_vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.srg_vrf_name.get_name_leafdata())
                                if (self.srgp2p.is_set or self.srgp2p.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.srgp2p.get_name_leafdata())
                                if (self.subscriber_label.is_set or self.subscriber_label.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.subscriber_label.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "ia-id-pd"):
                                    if (self.ia_id_pd is None):
                                        self.ia_id_pd = Dhcpv6.Nodes.Node.Server.Binding.Clients.Client.IaIdPd()
                                        self.ia_id_pd.parent = self
                                        self._children_name_map["ia_id_pd"] = "ia-id-pd"
                                    return self.ia_id_pd

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "ia-id-pd" or name == "client-id" or name == "access-vrf-name" or name == "address-pool-name" or name == "class-name" or name == "client-flag" or name == "client-id-xr" or name == "dns-server-count" or name == "duid" or name == "framed-ipv6-prefix" or name == "framed-prefix-length" or name == "ia-id-p-ds" or name == "interface-name" or name == "is-nak-next-renew" or name == "link-local-address" or name == "mac-address" or name == "pool-name" or name == "prefix-pool-name" or name == "profile-name" or name == "rx-interface-id" or name == "rx-remote-id" or name == "serg-intf-role" or name == "server-binding-inner-tag" or name == "server-binding-outer-tag" or name == "server-binding-tags" or name == "sesrg-state" or name == "srg-intf-role" or name == "srg-state" or name == "srg-vrf-name" or name == "srgp2p" or name == "subscriber-label" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "client-id"):
                                    self.client_id = value
                                    self.client_id.value_namespace = name_space
                                    self.client_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "access-vrf-name"):
                                    self.access_vrf_name = value
                                    self.access_vrf_name.value_namespace = name_space
                                    self.access_vrf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "address-pool-name"):
                                    self.address_pool_name = value
                                    self.address_pool_name.value_namespace = name_space
                                    self.address_pool_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "class-name"):
                                    self.class_name = value
                                    self.class_name.value_namespace = name_space
                                    self.class_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "client-flag"):
                                    self.client_flag = value
                                    self.client_flag.value_namespace = name_space
                                    self.client_flag.value_namespace_prefix = name_space_prefix
                                if(value_path == "client-id-xr"):
                                    self.client_id_xr = value
                                    self.client_id_xr.value_namespace = name_space
                                    self.client_id_xr.value_namespace_prefix = name_space_prefix
                                if(value_path == "dns-server-count"):
                                    self.dns_server_count = value
                                    self.dns_server_count.value_namespace = name_space
                                    self.dns_server_count.value_namespace_prefix = name_space_prefix
                                if(value_path == "duid"):
                                    self.duid = value
                                    self.duid.value_namespace = name_space
                                    self.duid.value_namespace_prefix = name_space_prefix
                                if(value_path == "framed-ipv6-prefix"):
                                    self.framed_ipv6_prefix = value
                                    self.framed_ipv6_prefix.value_namespace = name_space
                                    self.framed_ipv6_prefix.value_namespace_prefix = name_space_prefix
                                if(value_path == "framed-prefix-length"):
                                    self.framed_prefix_length = value
                                    self.framed_prefix_length.value_namespace = name_space
                                    self.framed_prefix_length.value_namespace_prefix = name_space_prefix
                                if(value_path == "ia-id-p-ds"):
                                    self.ia_id_p_ds = value
                                    self.ia_id_p_ds.value_namespace = name_space
                                    self.ia_id_p_ds.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "is-nak-next-renew"):
                                    self.is_nak_next_renew = value
                                    self.is_nak_next_renew.value_namespace = name_space
                                    self.is_nak_next_renew.value_namespace_prefix = name_space_prefix
                                if(value_path == "link-local-address"):
                                    self.link_local_address = value
                                    self.link_local_address.value_namespace = name_space
                                    self.link_local_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "mac-address"):
                                    self.mac_address = value
                                    self.mac_address.value_namespace = name_space
                                    self.mac_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "pool-name"):
                                    self.pool_name = value
                                    self.pool_name.value_namespace = name_space
                                    self.pool_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "prefix-pool-name"):
                                    self.prefix_pool_name = value
                                    self.prefix_pool_name.value_namespace = name_space
                                    self.prefix_pool_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "profile-name"):
                                    self.profile_name = value
                                    self.profile_name.value_namespace = name_space
                                    self.profile_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "rx-interface-id"):
                                    self.rx_interface_id = value
                                    self.rx_interface_id.value_namespace = name_space
                                    self.rx_interface_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "rx-remote-id"):
                                    self.rx_remote_id = value
                                    self.rx_remote_id.value_namespace = name_space
                                    self.rx_remote_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "serg-intf-role"):
                                    self.serg_intf_role = value
                                    self.serg_intf_role.value_namespace = name_space
                                    self.serg_intf_role.value_namespace_prefix = name_space_prefix
                                if(value_path == "server-binding-inner-tag"):
                                    self.server_binding_inner_tag = value
                                    self.server_binding_inner_tag.value_namespace = name_space
                                    self.server_binding_inner_tag.value_namespace_prefix = name_space_prefix
                                if(value_path == "server-binding-outer-tag"):
                                    self.server_binding_outer_tag = value
                                    self.server_binding_outer_tag.value_namespace = name_space
                                    self.server_binding_outer_tag.value_namespace_prefix = name_space_prefix
                                if(value_path == "server-binding-tags"):
                                    self.server_binding_tags = value
                                    self.server_binding_tags.value_namespace = name_space
                                    self.server_binding_tags.value_namespace_prefix = name_space_prefix
                                if(value_path == "sesrg-state"):
                                    self.sesrg_state = value
                                    self.sesrg_state.value_namespace = name_space
                                    self.sesrg_state.value_namespace_prefix = name_space_prefix
                                if(value_path == "srg-intf-role"):
                                    self.srg_intf_role = value
                                    self.srg_intf_role.value_namespace = name_space
                                    self.srg_intf_role.value_namespace_prefix = name_space_prefix
                                if(value_path == "srg-state"):
                                    self.srg_state = value
                                    self.srg_state.value_namespace = name_space
                                    self.srg_state.value_namespace_prefix = name_space_prefix
                                if(value_path == "srg-vrf-name"):
                                    self.srg_vrf_name = value
                                    self.srg_vrf_name.value_namespace = name_space
                                    self.srg_vrf_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "srgp2p"):
                                    self.srgp2p = value
                                    self.srgp2p.value_namespace = name_space
                                    self.srgp2p.value_namespace_prefix = name_space_prefix
                                if(value_path == "subscriber-label"):
                                    self.subscriber_label = value
                                    self.subscriber_label.value_namespace = name_space
                                    self.subscriber_label.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.client:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.client:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "clients" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "client"):
                                for c in self.client:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = Dhcpv6.Nodes.Node.Server.Binding.Clients.Client()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.client.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "client"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            (self.clients is not None and self.clients.has_data()) or
                            (self.summary is not None and self.summary.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            (self.clients is not None and self.clients.has_operation()) or
                            (self.summary is not None and self.summary.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "binding" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "clients"):
                            if (self.clients is None):
                                self.clients = Dhcpv6.Nodes.Node.Server.Binding.Clients()
                                self.clients.parent = self
                                self._children_name_map["clients"] = "clients"
                            return self.clients

                        if (child_yang_name == "summary"):
                            if (self.summary is None):
                                self.summary = Dhcpv6.Nodes.Node.Server.Binding.Summary()
                                self.summary.parent = self
                                self._children_name_map["summary"] = "summary"
                            return self.summary

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "clients" or name == "summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Vrfs(Entity):
                    """
                    DHCPV6 server list of VRF names
                    
                    .. attribute:: vrf
                    
                    	IPv6 DHCP server VRF name
                    	**type**\: list of    :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Server.Vrfs, self).__init__()

                        self.yang_name = "vrfs"
                        self.yang_parent_name = "server"

                        self.vrf = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Dhcpv6.Nodes.Node.Server.Vrfs, self).__setattr__(name, value)


                    class Vrf(Entity):
                        """
                        IPv6 DHCP server VRF name
                        
                        .. attribute:: vrf_name  <key>
                        
                        	VRF name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: statistics
                        
                        	IPv6 DHCP server statistics
                        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics>`
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf, self).__init__()

                            self.yang_name = "vrf"
                            self.yang_parent_name = "vrfs"

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.statistics = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf, self).__setattr__(name, value)


                        class Statistics(Entity):
                            """
                            IPv6 DHCP server statistics
                            
                            .. attribute:: advertise
                            
                            	DHCPV6 advertise packets
                            	**type**\:   :py:class:`Advertise <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Advertise>`
                            
                            .. attribute:: confirm
                            
                            	DHCPV6 confirm packets
                            	**type**\:   :py:class:`Confirm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Confirm>`
                            
                            .. attribute:: decline
                            
                            	DHCPV6 decline packets
                            	**type**\:   :py:class:`Decline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Decline>`
                            
                            .. attribute:: inform
                            
                            	DHCPV6 inform packets
                            	**type**\:   :py:class:`Inform <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Inform>`
                            
                            .. attribute:: lease_query
                            
                            	DHCPV6 lease query packets
                            	**type**\:   :py:class:`LeaseQuery <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQuery>`
                            
                            .. attribute:: lease_query_data
                            
                            	DHCPV6 lease query data packets
                            	**type**\:   :py:class:`LeaseQueryData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryData>`
                            
                            .. attribute:: lease_query_done
                            
                            	DHCPV6 lease query done packets
                            	**type**\:   :py:class:`LeaseQueryDone <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryDone>`
                            
                            .. attribute:: lease_query_reply
                            
                            	DHCPV6 lease query reply packets
                            	**type**\:   :py:class:`LeaseQueryReply <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryReply>`
                            
                            .. attribute:: rebind
                            
                            	DHCPV6 rebind packets
                            	**type**\:   :py:class:`Rebind <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Rebind>`
                            
                            .. attribute:: reconfig
                            
                            	DHCPV6 reconfig packets
                            	**type**\:   :py:class:`Reconfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Reconfig>`
                            
                            .. attribute:: relay_forward
                            
                            	DHCPV6 relay forward packets
                            	**type**\:   :py:class:`RelayForward <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.RelayForward>`
                            
                            .. attribute:: relay_reply
                            
                            	DHCPV6 relay reply packets
                            	**type**\:   :py:class:`RelayReply <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.RelayReply>`
                            
                            .. attribute:: release
                            
                            	DHCPV6 release packets
                            	**type**\:   :py:class:`Release <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Release>`
                            
                            .. attribute:: renew
                            
                            	DHCPV6 renew packets
                            	**type**\:   :py:class:`Renew <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Renew>`
                            
                            .. attribute:: reply
                            
                            	DHCPV6 reply packets
                            	**type**\:   :py:class:`Reply <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Reply>`
                            
                            .. attribute:: request
                            
                            	DHCPV6 request packets
                            	**type**\:   :py:class:`Request <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Request>`
                            
                            .. attribute:: solicit
                            
                            	DHCPV6 solicit packets
                            	**type**\:   :py:class:`Solicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Solicit>`
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "vrf"

                                self.advertise = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Advertise()
                                self.advertise.parent = self
                                self._children_name_map["advertise"] = "advertise"
                                self._children_yang_names.add("advertise")

                                self.confirm = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Confirm()
                                self.confirm.parent = self
                                self._children_name_map["confirm"] = "confirm"
                                self._children_yang_names.add("confirm")

                                self.decline = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Decline()
                                self.decline.parent = self
                                self._children_name_map["decline"] = "decline"
                                self._children_yang_names.add("decline")

                                self.inform = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Inform()
                                self.inform.parent = self
                                self._children_name_map["inform"] = "inform"
                                self._children_yang_names.add("inform")

                                self.lease_query = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQuery()
                                self.lease_query.parent = self
                                self._children_name_map["lease_query"] = "lease-query"
                                self._children_yang_names.add("lease-query")

                                self.lease_query_data = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryData()
                                self.lease_query_data.parent = self
                                self._children_name_map["lease_query_data"] = "lease-query-data"
                                self._children_yang_names.add("lease-query-data")

                                self.lease_query_done = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryDone()
                                self.lease_query_done.parent = self
                                self._children_name_map["lease_query_done"] = "lease-query-done"
                                self._children_yang_names.add("lease-query-done")

                                self.lease_query_reply = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryReply()
                                self.lease_query_reply.parent = self
                                self._children_name_map["lease_query_reply"] = "lease-query-reply"
                                self._children_yang_names.add("lease-query-reply")

                                self.rebind = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Rebind()
                                self.rebind.parent = self
                                self._children_name_map["rebind"] = "rebind"
                                self._children_yang_names.add("rebind")

                                self.reconfig = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Reconfig()
                                self.reconfig.parent = self
                                self._children_name_map["reconfig"] = "reconfig"
                                self._children_yang_names.add("reconfig")

                                self.relay_forward = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.RelayForward()
                                self.relay_forward.parent = self
                                self._children_name_map["relay_forward"] = "relay-forward"
                                self._children_yang_names.add("relay-forward")

                                self.relay_reply = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.RelayReply()
                                self.relay_reply.parent = self
                                self._children_name_map["relay_reply"] = "relay-reply"
                                self._children_yang_names.add("relay-reply")

                                self.release = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Release()
                                self.release.parent = self
                                self._children_name_map["release"] = "release"
                                self._children_yang_names.add("release")

                                self.renew = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Renew()
                                self.renew.parent = self
                                self._children_name_map["renew"] = "renew"
                                self._children_yang_names.add("renew")

                                self.reply = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Reply()
                                self.reply.parent = self
                                self._children_name_map["reply"] = "reply"
                                self._children_yang_names.add("reply")

                                self.request = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Request()
                                self.request.parent = self
                                self._children_name_map["request"] = "request"
                                self._children_yang_names.add("request")

                                self.solicit = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Solicit()
                                self.solicit.parent = self
                                self._children_name_map["solicit"] = "solicit"
                                self._children_yang_names.add("solicit")


                            class Solicit(Entity):
                                """
                                DHCPV6 solicit packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Solicit, self).__init__()

                                    self.yang_name = "solicit"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Solicit, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Solicit, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "solicit" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Advertise(Entity):
                                """
                                DHCPV6 advertise packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Advertise, self).__init__()

                                    self.yang_name = "advertise"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Advertise, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Advertise, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "advertise" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Request(Entity):
                                """
                                DHCPV6 request packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Request, self).__init__()

                                    self.yang_name = "request"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Request, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Request, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "request" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Reply(Entity):
                                """
                                DHCPV6 reply packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Reply, self).__init__()

                                    self.yang_name = "reply"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Reply, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Reply, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "reply" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Confirm(Entity):
                                """
                                DHCPV6 confirm packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Confirm, self).__init__()

                                    self.yang_name = "confirm"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Confirm, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Confirm, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "confirm" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Decline(Entity):
                                """
                                DHCPV6 decline packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Decline, self).__init__()

                                    self.yang_name = "decline"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Decline, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Decline, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "decline" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Renew(Entity):
                                """
                                DHCPV6 renew packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Renew, self).__init__()

                                    self.yang_name = "renew"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Renew, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Renew, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "renew" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Rebind(Entity):
                                """
                                DHCPV6 rebind packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Rebind, self).__init__()

                                    self.yang_name = "rebind"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Rebind, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Rebind, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "rebind" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Release(Entity):
                                """
                                DHCPV6 release packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Release, self).__init__()

                                    self.yang_name = "release"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Release, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Release, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "release" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Reconfig(Entity):
                                """
                                DHCPV6 reconfig packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Reconfig, self).__init__()

                                    self.yang_name = "reconfig"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Reconfig, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Reconfig, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "reconfig" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Inform(Entity):
                                """
                                DHCPV6 inform packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Inform, self).__init__()

                                    self.yang_name = "inform"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Inform, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Inform, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "inform" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class RelayForward(Entity):
                                """
                                DHCPV6 relay forward packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.RelayForward, self).__init__()

                                    self.yang_name = "relay-forward"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.RelayForward, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.RelayForward, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "relay-forward" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class RelayReply(Entity):
                                """
                                DHCPV6 relay reply packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.RelayReply, self).__init__()

                                    self.yang_name = "relay-reply"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.RelayReply, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.RelayReply, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "relay-reply" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQuery(Entity):
                                """
                                DHCPV6 lease query packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQuery, self).__init__()

                                    self.yang_name = "lease-query"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQuery, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQuery, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQueryReply(Entity):
                                """
                                DHCPV6 lease query reply packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryReply, self).__init__()

                                    self.yang_name = "lease-query-reply"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryReply, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryReply, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query-reply" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQueryDone(Entity):
                                """
                                DHCPV6 lease query done packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryDone, self).__init__()

                                    self.yang_name = "lease-query-done"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryDone, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryDone, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query-done" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQueryData(Entity):
                                """
                                DHCPV6 lease query data packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryData, self).__init__()

                                    self.yang_name = "lease-query-data"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryData, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryData, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query-data" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.advertise is not None and self.advertise.has_data()) or
                                    (self.confirm is not None and self.confirm.has_data()) or
                                    (self.decline is not None and self.decline.has_data()) or
                                    (self.inform is not None and self.inform.has_data()) or
                                    (self.lease_query is not None and self.lease_query.has_data()) or
                                    (self.lease_query_data is not None and self.lease_query_data.has_data()) or
                                    (self.lease_query_done is not None and self.lease_query_done.has_data()) or
                                    (self.lease_query_reply is not None and self.lease_query_reply.has_data()) or
                                    (self.rebind is not None and self.rebind.has_data()) or
                                    (self.reconfig is not None and self.reconfig.has_data()) or
                                    (self.relay_forward is not None and self.relay_forward.has_data()) or
                                    (self.relay_reply is not None and self.relay_reply.has_data()) or
                                    (self.release is not None and self.release.has_data()) or
                                    (self.renew is not None and self.renew.has_data()) or
                                    (self.reply is not None and self.reply.has_data()) or
                                    (self.request is not None and self.request.has_data()) or
                                    (self.solicit is not None and self.solicit.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.advertise is not None and self.advertise.has_operation()) or
                                    (self.confirm is not None and self.confirm.has_operation()) or
                                    (self.decline is not None and self.decline.has_operation()) or
                                    (self.inform is not None and self.inform.has_operation()) or
                                    (self.lease_query is not None and self.lease_query.has_operation()) or
                                    (self.lease_query_data is not None and self.lease_query_data.has_operation()) or
                                    (self.lease_query_done is not None and self.lease_query_done.has_operation()) or
                                    (self.lease_query_reply is not None and self.lease_query_reply.has_operation()) or
                                    (self.rebind is not None and self.rebind.has_operation()) or
                                    (self.reconfig is not None and self.reconfig.has_operation()) or
                                    (self.relay_forward is not None and self.relay_forward.has_operation()) or
                                    (self.relay_reply is not None and self.relay_reply.has_operation()) or
                                    (self.release is not None and self.release.has_operation()) or
                                    (self.renew is not None and self.renew.has_operation()) or
                                    (self.reply is not None and self.reply.has_operation()) or
                                    (self.request is not None and self.request.has_operation()) or
                                    (self.solicit is not None and self.solicit.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "statistics" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "advertise"):
                                    if (self.advertise is None):
                                        self.advertise = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Advertise()
                                        self.advertise.parent = self
                                        self._children_name_map["advertise"] = "advertise"
                                    return self.advertise

                                if (child_yang_name == "confirm"):
                                    if (self.confirm is None):
                                        self.confirm = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Confirm()
                                        self.confirm.parent = self
                                        self._children_name_map["confirm"] = "confirm"
                                    return self.confirm

                                if (child_yang_name == "decline"):
                                    if (self.decline is None):
                                        self.decline = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Decline()
                                        self.decline.parent = self
                                        self._children_name_map["decline"] = "decline"
                                    return self.decline

                                if (child_yang_name == "inform"):
                                    if (self.inform is None):
                                        self.inform = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Inform()
                                        self.inform.parent = self
                                        self._children_name_map["inform"] = "inform"
                                    return self.inform

                                if (child_yang_name == "lease-query"):
                                    if (self.lease_query is None):
                                        self.lease_query = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQuery()
                                        self.lease_query.parent = self
                                        self._children_name_map["lease_query"] = "lease-query"
                                    return self.lease_query

                                if (child_yang_name == "lease-query-data"):
                                    if (self.lease_query_data is None):
                                        self.lease_query_data = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryData()
                                        self.lease_query_data.parent = self
                                        self._children_name_map["lease_query_data"] = "lease-query-data"
                                    return self.lease_query_data

                                if (child_yang_name == "lease-query-done"):
                                    if (self.lease_query_done is None):
                                        self.lease_query_done = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryDone()
                                        self.lease_query_done.parent = self
                                        self._children_name_map["lease_query_done"] = "lease-query-done"
                                    return self.lease_query_done

                                if (child_yang_name == "lease-query-reply"):
                                    if (self.lease_query_reply is None):
                                        self.lease_query_reply = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.LeaseQueryReply()
                                        self.lease_query_reply.parent = self
                                        self._children_name_map["lease_query_reply"] = "lease-query-reply"
                                    return self.lease_query_reply

                                if (child_yang_name == "rebind"):
                                    if (self.rebind is None):
                                        self.rebind = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Rebind()
                                        self.rebind.parent = self
                                        self._children_name_map["rebind"] = "rebind"
                                    return self.rebind

                                if (child_yang_name == "reconfig"):
                                    if (self.reconfig is None):
                                        self.reconfig = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Reconfig()
                                        self.reconfig.parent = self
                                        self._children_name_map["reconfig"] = "reconfig"
                                    return self.reconfig

                                if (child_yang_name == "relay-forward"):
                                    if (self.relay_forward is None):
                                        self.relay_forward = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.RelayForward()
                                        self.relay_forward.parent = self
                                        self._children_name_map["relay_forward"] = "relay-forward"
                                    return self.relay_forward

                                if (child_yang_name == "relay-reply"):
                                    if (self.relay_reply is None):
                                        self.relay_reply = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.RelayReply()
                                        self.relay_reply.parent = self
                                        self._children_name_map["relay_reply"] = "relay-reply"
                                    return self.relay_reply

                                if (child_yang_name == "release"):
                                    if (self.release is None):
                                        self.release = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Release()
                                        self.release.parent = self
                                        self._children_name_map["release"] = "release"
                                    return self.release

                                if (child_yang_name == "renew"):
                                    if (self.renew is None):
                                        self.renew = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Renew()
                                        self.renew.parent = self
                                        self._children_name_map["renew"] = "renew"
                                    return self.renew

                                if (child_yang_name == "reply"):
                                    if (self.reply is None):
                                        self.reply = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Reply()
                                        self.reply.parent = self
                                        self._children_name_map["reply"] = "reply"
                                    return self.reply

                                if (child_yang_name == "request"):
                                    if (self.request is None):
                                        self.request = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Request()
                                        self.request.parent = self
                                        self._children_name_map["request"] = "request"
                                    return self.request

                                if (child_yang_name == "solicit"):
                                    if (self.solicit is None):
                                        self.solicit = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics.Solicit()
                                        self.solicit.parent = self
                                        self._children_name_map["solicit"] = "solicit"
                                    return self.solicit

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "advertise" or name == "confirm" or name == "decline" or name == "inform" or name == "lease-query" or name == "lease-query-data" or name == "lease-query-done" or name == "lease-query-reply" or name == "rebind" or name == "reconfig" or name == "relay-forward" or name == "relay-reply" or name == "release" or name == "renew" or name == "reply" or name == "request" or name == "solicit"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.vrf_name.is_set or
                                (self.statistics is not None and self.statistics.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.statistics is not None and self.statistics.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "vrf" + "[vrf-name='" + self.vrf_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "statistics"):
                                if (self.statistics is None):
                                    self.statistics = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"
                                return self.statistics

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "statistics" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.vrf:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.vrf:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "vrfs" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "vrf"):
                            for c in self.vrf:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Dhcpv6.Nodes.Node.Server.Vrfs.Vrf()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.vrf.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "vrf"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Profiles(Entity):
                    """
                    IPv6 DHCP server profile
                    
                    .. attribute:: profile
                    
                    	IPv6 DHCP server profile
                    	**type**\: list of    :py:class:`Profile <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Profiles.Profile>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Server.Profiles, self).__init__()

                        self.yang_name = "profiles"
                        self.yang_parent_name = "server"

                        self.profile = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Dhcpv6.Nodes.Node.Server.Profiles, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Dhcpv6.Nodes.Node.Server.Profiles, self).__setattr__(name, value)


                    class Profile(Entity):
                        """
                        IPv6 DHCP server profile
                        
                        .. attribute:: profile_name  <key>
                        
                        	Profile name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: info
                        
                        	IPv6 DHCP server profile Info
                        	**type**\:   :py:class:`Info <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info>`
                        
                        .. attribute:: throttle_infos
                        
                        	DHCPV6 throttle table
                        	**type**\:   :py:class:`ThrottleInfos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Profiles.Profile.ThrottleInfos>`
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Server.Profiles.Profile, self).__init__()

                            self.yang_name = "profile"
                            self.yang_parent_name = "profiles"

                            self.profile_name = YLeaf(YType.str, "profile-name")

                            self.info = Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info()
                            self.info.parent = self
                            self._children_name_map["info"] = "info"
                            self._children_yang_names.add("info")

                            self.throttle_infos = Dhcpv6.Nodes.Node.Server.Profiles.Profile.ThrottleInfos()
                            self.throttle_infos.parent = self
                            self._children_name_map["throttle_infos"] = "throttle-infos"
                            self._children_yang_names.add("throttle-infos")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("profile_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Server.Profiles.Profile, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Server.Profiles.Profile, self).__setattr__(name, value)


                        class Info(Entity):
                            """
                            IPv6 DHCP server profile Info
                            
                            .. attribute:: aftr_name
                            
                            	Server aftr name
                            	**type**\:  str
                            
                            	**length:** 0..65
                            
                            .. attribute:: delegated_prefix_pool_name
                            
                            	Server delegated prefix pool name
                            	**type**\:  str
                            
                            	**length:** 0..65
                            
                            .. attribute:: domain_name
                            
                            	Server domain name
                            	**type**\:  str
                            
                            	**length:** 0..65
                            
                            .. attribute:: framed_addr_pool_name
                            
                            	Server framed address pool name
                            	**type**\:  str
                            
                            	**length:** 0..65
                            
                            .. attribute:: interface_references
                            
                            	Interface references
                            	**type**\:   :py:class:`InterfaceReferences <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.InterfaceReferences>`
                            
                            .. attribute:: lease
                            
                            	Server lease time
                            	**type**\:   :py:class:`Lease <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.Lease>`
                            
                            .. attribute:: profile_dns
                            
                            	DNS address count
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: profile_dns_address
                            
                            	DNS addresses
                            	**type**\:  list of str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: profile_name
                            
                            	Server profile name
                            	**type**\:  str
                            
                            	**length:** 0..65
                            
                            .. attribute:: rapid_commit
                            
                            	Rapid Commit
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info, self).__init__()

                                self.yang_name = "info"
                                self.yang_parent_name = "profile"

                                self.aftr_name = YLeaf(YType.str, "aftr-name")

                                self.delegated_prefix_pool_name = YLeaf(YType.str, "delegated-prefix-pool-name")

                                self.domain_name = YLeaf(YType.str, "domain-name")

                                self.framed_addr_pool_name = YLeaf(YType.str, "framed-addr-pool-name")

                                self.profile_dns = YLeaf(YType.uint8, "profile-dns")

                                self.profile_dns_address = YLeafList(YType.str, "profile-dns-address")

                                self.profile_name = YLeaf(YType.str, "profile-name")

                                self.rapid_commit = YLeaf(YType.boolean, "rapid-commit")

                                self.interface_references = Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.InterfaceReferences()
                                self.interface_references.parent = self
                                self._children_name_map["interface_references"] = "interface-references"
                                self._children_yang_names.add("interface-references")

                                self.lease = Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.Lease()
                                self.lease.parent = self
                                self._children_name_map["lease"] = "lease"
                                self._children_yang_names.add("lease")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("aftr_name",
                                                "delegated_prefix_pool_name",
                                                "domain_name",
                                                "framed_addr_pool_name",
                                                "profile_dns",
                                                "profile_dns_address",
                                                "profile_name",
                                                "rapid_commit") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info, self).__setattr__(name, value)


                            class Lease(Entity):
                                """
                                Server lease time
                                
                                .. attribute:: seconds
                                
                                	DHCPV6 client lease in seconds
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**units**\: second
                                
                                .. attribute:: time
                                
                                	Time in format HH\:MM\:SS
                                	**type**\:  str
                                
                                	**length:** 0..10
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.Lease, self).__init__()

                                    self.yang_name = "lease"
                                    self.yang_parent_name = "info"

                                    self.seconds = YLeaf(YType.uint32, "seconds")

                                    self.time = YLeaf(YType.str, "time")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("seconds",
                                                    "time") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.Lease, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.Lease, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.seconds.is_set or
                                        self.time.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.seconds.yfilter != YFilter.not_set or
                                        self.time.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.seconds.is_set or self.seconds.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.seconds.get_name_leafdata())
                                    if (self.time.is_set or self.time.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "seconds" or name == "time"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "seconds"):
                                        self.seconds = value
                                        self.seconds.value_namespace = name_space
                                        self.seconds.value_namespace_prefix = name_space_prefix
                                    if(value_path == "time"):
                                        self.time = value
                                        self.time.value_namespace = name_space
                                        self.time.value_namespace_prefix = name_space_prefix


                            class InterfaceReferences(Entity):
                                """
                                Interface references
                                
                                .. attribute:: ipv6_dhcpv6d_server_interface_reference
                                
                                	ipv6 dhcpv6d server interface reference
                                	**type**\: list of    :py:class:`Ipv6Dhcpv6DServerInterfaceReference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.InterfaceReferences.Ipv6Dhcpv6DServerInterfaceReference>`
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.InterfaceReferences, self).__init__()

                                    self.yang_name = "interface-references"
                                    self.yang_parent_name = "info"

                                    self.ipv6_dhcpv6d_server_interface_reference = YList(self)

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in () and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.InterfaceReferences, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.InterfaceReferences, self).__setattr__(name, value)


                                class Ipv6Dhcpv6DServerInterfaceReference(Entity):
                                    """
                                    ipv6 dhcpv6d server interface reference
                                    
                                    .. attribute:: server_reference_interface_name
                                    
                                    	Interface name
                                    	**type**\:  str
                                    
                                    	**length:** 0..65
                                    
                                    

                                    """

                                    _prefix = 'ipv6-new-dhcpv6d-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.InterfaceReferences.Ipv6Dhcpv6DServerInterfaceReference, self).__init__()

                                        self.yang_name = "ipv6-dhcpv6d-server-interface-reference"
                                        self.yang_parent_name = "interface-references"

                                        self.server_reference_interface_name = YLeaf(YType.str, "server-reference-interface-name")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("server_reference_interface_name") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.InterfaceReferences.Ipv6Dhcpv6DServerInterfaceReference, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.InterfaceReferences.Ipv6Dhcpv6DServerInterfaceReference, self).__setattr__(name, value)

                                    def has_data(self):
                                        return self.server_reference_interface_name.is_set

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.server_reference_interface_name.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "ipv6-dhcpv6d-server-interface-reference" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.server_reference_interface_name.is_set or self.server_reference_interface_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.server_reference_interface_name.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "server-reference-interface-name"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "server-reference-interface-name"):
                                            self.server_reference_interface_name = value
                                            self.server_reference_interface_name.value_namespace = name_space
                                            self.server_reference_interface_name.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    for c in self.ipv6_dhcpv6d_server_interface_reference:
                                        if (c.has_data()):
                                            return True
                                    return False

                                def has_operation(self):
                                    for c in self.ipv6_dhcpv6d_server_interface_reference:
                                        if (c.has_operation()):
                                            return True
                                    return self.yfilter != YFilter.not_set

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "interface-references" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "ipv6-dhcpv6d-server-interface-reference"):
                                        for c in self.ipv6_dhcpv6d_server_interface_reference:
                                            segment = c.get_segment_path()
                                            if (segment_path == segment):
                                                return c
                                        c = Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.InterfaceReferences.Ipv6Dhcpv6DServerInterfaceReference()
                                        c.parent = self
                                        local_reference_key = "ydk::seg::%s" % segment_path
                                        self._local_refs[local_reference_key] = c
                                        self.ipv6_dhcpv6d_server_interface_reference.append(c)
                                        return c

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "ipv6-dhcpv6d-server-interface-reference"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    pass

                            def has_data(self):
                                for leaf in self.profile_dns_address.getYLeafs():
                                    if (leaf.yfilter != YFilter.not_set):
                                        return True
                                return (
                                    self.aftr_name.is_set or
                                    self.delegated_prefix_pool_name.is_set or
                                    self.domain_name.is_set or
                                    self.framed_addr_pool_name.is_set or
                                    self.profile_dns.is_set or
                                    self.profile_name.is_set or
                                    self.rapid_commit.is_set or
                                    (self.interface_references is not None and self.interface_references.has_data()) or
                                    (self.lease is not None and self.lease.has_data()))

                            def has_operation(self):
                                for leaf in self.profile_dns_address.getYLeafs():
                                    if (leaf.is_set):
                                        return True
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.aftr_name.yfilter != YFilter.not_set or
                                    self.delegated_prefix_pool_name.yfilter != YFilter.not_set or
                                    self.domain_name.yfilter != YFilter.not_set or
                                    self.framed_addr_pool_name.yfilter != YFilter.not_set or
                                    self.profile_dns.yfilter != YFilter.not_set or
                                    self.profile_dns_address.yfilter != YFilter.not_set or
                                    self.profile_name.yfilter != YFilter.not_set or
                                    self.rapid_commit.yfilter != YFilter.not_set or
                                    (self.interface_references is not None and self.interface_references.has_operation()) or
                                    (self.lease is not None and self.lease.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "info" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.aftr_name.is_set or self.aftr_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.aftr_name.get_name_leafdata())
                                if (self.delegated_prefix_pool_name.is_set or self.delegated_prefix_pool_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.delegated_prefix_pool_name.get_name_leafdata())
                                if (self.domain_name.is_set or self.domain_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.domain_name.get_name_leafdata())
                                if (self.framed_addr_pool_name.is_set or self.framed_addr_pool_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.framed_addr_pool_name.get_name_leafdata())
                                if (self.profile_dns.is_set or self.profile_dns.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.profile_dns.get_name_leafdata())
                                if (self.profile_name.is_set or self.profile_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.profile_name.get_name_leafdata())
                                if (self.rapid_commit.is_set or self.rapid_commit.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rapid_commit.get_name_leafdata())

                                leaf_name_data.extend(self.profile_dns_address.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "interface-references"):
                                    if (self.interface_references is None):
                                        self.interface_references = Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.InterfaceReferences()
                                        self.interface_references.parent = self
                                        self._children_name_map["interface_references"] = "interface-references"
                                    return self.interface_references

                                if (child_yang_name == "lease"):
                                    if (self.lease is None):
                                        self.lease = Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info.Lease()
                                        self.lease.parent = self
                                        self._children_name_map["lease"] = "lease"
                                    return self.lease

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "interface-references" or name == "lease" or name == "aftr-name" or name == "delegated-prefix-pool-name" or name == "domain-name" or name == "framed-addr-pool-name" or name == "profile-dns" or name == "profile-dns-address" or name == "profile-name" or name == "rapid-commit"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "aftr-name"):
                                    self.aftr_name = value
                                    self.aftr_name.value_namespace = name_space
                                    self.aftr_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "delegated-prefix-pool-name"):
                                    self.delegated_prefix_pool_name = value
                                    self.delegated_prefix_pool_name.value_namespace = name_space
                                    self.delegated_prefix_pool_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "domain-name"):
                                    self.domain_name = value
                                    self.domain_name.value_namespace = name_space
                                    self.domain_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "framed-addr-pool-name"):
                                    self.framed_addr_pool_name = value
                                    self.framed_addr_pool_name.value_namespace = name_space
                                    self.framed_addr_pool_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "profile-dns"):
                                    self.profile_dns = value
                                    self.profile_dns.value_namespace = name_space
                                    self.profile_dns.value_namespace_prefix = name_space_prefix
                                if(value_path == "profile-dns-address"):
                                    self.profile_dns_address.append(value)
                                if(value_path == "profile-name"):
                                    self.profile_name = value
                                    self.profile_name.value_namespace = name_space
                                    self.profile_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "rapid-commit"):
                                    self.rapid_commit = value
                                    self.rapid_commit.value_namespace = name_space
                                    self.rapid_commit.value_namespace_prefix = name_space_prefix


                        class ThrottleInfos(Entity):
                            """
                            DHCPV6 throttle table
                            
                            .. attribute:: throttle_info
                            
                            	IPv6 DHCP server profile Throttle Info
                            	**type**\: list of    :py:class:`ThrottleInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Profiles.Profile.ThrottleInfos.ThrottleInfo>`
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.ThrottleInfos, self).__init__()

                                self.yang_name = "throttle-infos"
                                self.yang_parent_name = "profile"

                                self.throttle_info = YList(self)

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in () and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.ThrottleInfos, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.ThrottleInfos, self).__setattr__(name, value)


                            class ThrottleInfo(Entity):
                                """
                                IPv6 DHCP server profile Throttle Info
                                
                                .. attribute:: mac_address  <key>
                                
                                	MAC address
                                	**type**\:  str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: binding_chaddr
                                
                                	Client MAC address
                                	**type**\:  str
                                
                                	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                
                                .. attribute:: ifname
                                
                                	DHCP access interface
                                	**type**\:  str
                                
                                	**length:** 0..65
                                
                                .. attribute:: state
                                
                                	State of entry
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: time_left
                                
                                	Time Left in secs
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.ThrottleInfos.ThrottleInfo, self).__init__()

                                    self.yang_name = "throttle-info"
                                    self.yang_parent_name = "throttle-infos"

                                    self.mac_address = YLeaf(YType.str, "mac-address")

                                    self.binding_chaddr = YLeaf(YType.str, "binding-chaddr")

                                    self.ifname = YLeaf(YType.str, "ifname")

                                    self.state = YLeaf(YType.uint32, "state")

                                    self.time_left = YLeaf(YType.uint32, "time-left")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("mac_address",
                                                    "binding_chaddr",
                                                    "ifname",
                                                    "state",
                                                    "time_left") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.ThrottleInfos.ThrottleInfo, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Server.Profiles.Profile.ThrottleInfos.ThrottleInfo, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.mac_address.is_set or
                                        self.binding_chaddr.is_set or
                                        self.ifname.is_set or
                                        self.state.is_set or
                                        self.time_left.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.mac_address.yfilter != YFilter.not_set or
                                        self.binding_chaddr.yfilter != YFilter.not_set or
                                        self.ifname.yfilter != YFilter.not_set or
                                        self.state.yfilter != YFilter.not_set or
                                        self.time_left.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "throttle-info" + "[mac-address='" + self.mac_address.get() + "']" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.mac_address.is_set or self.mac_address.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.mac_address.get_name_leafdata())
                                    if (self.binding_chaddr.is_set or self.binding_chaddr.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.binding_chaddr.get_name_leafdata())
                                    if (self.ifname.is_set or self.ifname.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.ifname.get_name_leafdata())
                                    if (self.state.is_set or self.state.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.state.get_name_leafdata())
                                    if (self.time_left.is_set or self.time_left.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.time_left.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "mac-address" or name == "binding-chaddr" or name == "ifname" or name == "state" or name == "time-left"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "mac-address"):
                                        self.mac_address = value
                                        self.mac_address.value_namespace = name_space
                                        self.mac_address.value_namespace_prefix = name_space_prefix
                                    if(value_path == "binding-chaddr"):
                                        self.binding_chaddr = value
                                        self.binding_chaddr.value_namespace = name_space
                                        self.binding_chaddr.value_namespace_prefix = name_space_prefix
                                    if(value_path == "ifname"):
                                        self.ifname = value
                                        self.ifname.value_namespace = name_space
                                        self.ifname.value_namespace_prefix = name_space_prefix
                                    if(value_path == "state"):
                                        self.state = value
                                        self.state.value_namespace = name_space
                                        self.state.value_namespace_prefix = name_space_prefix
                                    if(value_path == "time-left"):
                                        self.time_left = value
                                        self.time_left.value_namespace = name_space
                                        self.time_left.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                for c in self.throttle_info:
                                    if (c.has_data()):
                                        return True
                                return False

                            def has_operation(self):
                                for c in self.throttle_info:
                                    if (c.has_operation()):
                                        return True
                                return self.yfilter != YFilter.not_set

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "throttle-infos" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "throttle-info"):
                                    for c in self.throttle_info:
                                        segment = c.get_segment_path()
                                        if (segment_path == segment):
                                            return c
                                    c = Dhcpv6.Nodes.Node.Server.Profiles.Profile.ThrottleInfos.ThrottleInfo()
                                    c.parent = self
                                    local_reference_key = "ydk::seg::%s" % segment_path
                                    self._local_refs[local_reference_key] = c
                                    self.throttle_info.append(c)
                                    return c

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "throttle-info"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.profile_name.is_set or
                                (self.info is not None and self.info.has_data()) or
                                (self.throttle_infos is not None and self.throttle_infos.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.profile_name.yfilter != YFilter.not_set or
                                (self.info is not None and self.info.has_operation()) or
                                (self.throttle_infos is not None and self.throttle_infos.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "profile" + "[profile-name='" + self.profile_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.profile_name.is_set or self.profile_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.profile_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "info"):
                                if (self.info is None):
                                    self.info = Dhcpv6.Nodes.Node.Server.Profiles.Profile.Info()
                                    self.info.parent = self
                                    self._children_name_map["info"] = "info"
                                return self.info

                            if (child_yang_name == "throttle-infos"):
                                if (self.throttle_infos is None):
                                    self.throttle_infos = Dhcpv6.Nodes.Node.Server.Profiles.Profile.ThrottleInfos()
                                    self.throttle_infos.parent = self
                                    self._children_name_map["throttle_infos"] = "throttle-infos"
                                return self.throttle_infos

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "info" or name == "throttle-infos" or name == "profile-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "profile-name"):
                                self.profile_name = value
                                self.profile_name.value_namespace = name_space
                                self.profile_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.profile:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.profile:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "profiles" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "profile"):
                            for c in self.profile:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Dhcpv6.Nodes.Node.Server.Profiles.Profile()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.profile.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "profile"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Interfaces(Entity):
                    """
                    DHCPV6 server interface
                    
                    .. attribute:: interface
                    
                    	IPv6 DHCP server interface
                    	**type**\: list of    :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Interfaces.Interface>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Server.Interfaces, self).__init__()

                        self.yang_name = "interfaces"
                        self.yang_parent_name = "server"

                        self.interface = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Dhcpv6.Nodes.Node.Server.Interfaces, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Dhcpv6.Nodes.Node.Server.Interfaces, self).__setattr__(name, value)


                    class Interface(Entity):
                        """
                        IPv6 DHCP server interface
                        
                        .. attribute:: interface_name  <key>
                        
                        	Interface Name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: is_server_interface_ambiguous
                        
                        	Is interface ambiguous
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: mac_throttle
                        
                        	Mac Throttle Status
                        	**type**\:  bool
                        
                        .. attribute:: serg_role
                        
                        	DHCPv6 Interface SERG role
                        	**type**\:   :py:class:`BagDhcpv6DIntfSergRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.BagDhcpv6DIntfSergRole>`
                        
                        .. attribute:: server_interface_lease_limit_type
                        
                        	Lease limit type on interface
                        	**type**\:   :py:class:`LeaseLimit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.LeaseLimit>`
                        
                        .. attribute:: server_interface_lease_limits
                        
                        	Lease limit count on interface
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: server_interface_mode
                        
                        	Mode of interface
                        	**type**\:   :py:class:`BagDhcpv6DSubMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.BagDhcpv6DSubMode>`
                        
                        .. attribute:: server_interface_profile_name
                        
                        	Name of profile attached to the interface
                        	**type**\:  str
                        
                        	**length:** 0..65
                        
                        .. attribute:: server_vrf_name
                        
                        	VRF name
                        	**type**\:  str
                        
                        	**length:** 0..33
                        
                        .. attribute:: srg_role
                        
                        	DHCPv6 Interface SRG role
                        	**type**\:   :py:class:`BagDhcpv6DIntfSrgRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.BagDhcpv6DIntfSrgRole>`
                        
                        .. attribute:: srg_vrf_name
                        
                        	SRG VRF name
                        	**type**\:  str
                        
                        	**length:** 0..33
                        
                        .. attribute:: srgp2p
                        
                        	SRG P2P Status
                        	**type**\:  bool
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Server.Interfaces.Interface, self).__init__()

                            self.yang_name = "interface"
                            self.yang_parent_name = "interfaces"

                            self.interface_name = YLeaf(YType.str, "interface-name")

                            self.is_server_interface_ambiguous = YLeaf(YType.uint32, "is-server-interface-ambiguous")

                            self.mac_throttle = YLeaf(YType.boolean, "mac-throttle")

                            self.serg_role = YLeaf(YType.enumeration, "serg-role")

                            self.server_interface_lease_limit_type = YLeaf(YType.enumeration, "server-interface-lease-limit-type")

                            self.server_interface_lease_limits = YLeaf(YType.uint32, "server-interface-lease-limits")

                            self.server_interface_mode = YLeaf(YType.enumeration, "server-interface-mode")

                            self.server_interface_profile_name = YLeaf(YType.str, "server-interface-profile-name")

                            self.server_vrf_name = YLeaf(YType.str, "server-vrf-name")

                            self.srg_role = YLeaf(YType.enumeration, "srg-role")

                            self.srg_vrf_name = YLeaf(YType.str, "srg-vrf-name")

                            self.srgp2p = YLeaf(YType.boolean, "srgp2p")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("interface_name",
                                            "is_server_interface_ambiguous",
                                            "mac_throttle",
                                            "serg_role",
                                            "server_interface_lease_limit_type",
                                            "server_interface_lease_limits",
                                            "server_interface_mode",
                                            "server_interface_profile_name",
                                            "server_vrf_name",
                                            "srg_role",
                                            "srg_vrf_name",
                                            "srgp2p") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Server.Interfaces.Interface, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Server.Interfaces.Interface, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.interface_name.is_set or
                                self.is_server_interface_ambiguous.is_set or
                                self.mac_throttle.is_set or
                                self.serg_role.is_set or
                                self.server_interface_lease_limit_type.is_set or
                                self.server_interface_lease_limits.is_set or
                                self.server_interface_mode.is_set or
                                self.server_interface_profile_name.is_set or
                                self.server_vrf_name.is_set or
                                self.srg_role.is_set or
                                self.srg_vrf_name.is_set or
                                self.srgp2p.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.interface_name.yfilter != YFilter.not_set or
                                self.is_server_interface_ambiguous.yfilter != YFilter.not_set or
                                self.mac_throttle.yfilter != YFilter.not_set or
                                self.serg_role.yfilter != YFilter.not_set or
                                self.server_interface_lease_limit_type.yfilter != YFilter.not_set or
                                self.server_interface_lease_limits.yfilter != YFilter.not_set or
                                self.server_interface_mode.yfilter != YFilter.not_set or
                                self.server_interface_profile_name.yfilter != YFilter.not_set or
                                self.server_vrf_name.yfilter != YFilter.not_set or
                                self.srg_role.yfilter != YFilter.not_set or
                                self.srg_vrf_name.yfilter != YFilter.not_set or
                                self.srgp2p.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "interface" + "[interface-name='" + self.interface_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.interface_name.get_name_leafdata())
                            if (self.is_server_interface_ambiguous.is_set or self.is_server_interface_ambiguous.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.is_server_interface_ambiguous.get_name_leafdata())
                            if (self.mac_throttle.is_set or self.mac_throttle.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.mac_throttle.get_name_leafdata())
                            if (self.serg_role.is_set or self.serg_role.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.serg_role.get_name_leafdata())
                            if (self.server_interface_lease_limit_type.is_set or self.server_interface_lease_limit_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_interface_lease_limit_type.get_name_leafdata())
                            if (self.server_interface_lease_limits.is_set or self.server_interface_lease_limits.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_interface_lease_limits.get_name_leafdata())
                            if (self.server_interface_mode.is_set or self.server_interface_mode.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_interface_mode.get_name_leafdata())
                            if (self.server_interface_profile_name.is_set or self.server_interface_profile_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_interface_profile_name.get_name_leafdata())
                            if (self.server_vrf_name.is_set or self.server_vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.server_vrf_name.get_name_leafdata())
                            if (self.srg_role.is_set or self.srg_role.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.srg_role.get_name_leafdata())
                            if (self.srg_vrf_name.is_set or self.srg_vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.srg_vrf_name.get_name_leafdata())
                            if (self.srgp2p.is_set or self.srgp2p.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.srgp2p.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "interface-name" or name == "is-server-interface-ambiguous" or name == "mac-throttle" or name == "serg-role" or name == "server-interface-lease-limit-type" or name == "server-interface-lease-limits" or name == "server-interface-mode" or name == "server-interface-profile-name" or name == "server-vrf-name" or name == "srg-role" or name == "srg-vrf-name" or name == "srgp2p"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "interface-name"):
                                self.interface_name = value
                                self.interface_name.value_namespace = name_space
                                self.interface_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "is-server-interface-ambiguous"):
                                self.is_server_interface_ambiguous = value
                                self.is_server_interface_ambiguous.value_namespace = name_space
                                self.is_server_interface_ambiguous.value_namespace_prefix = name_space_prefix
                            if(value_path == "mac-throttle"):
                                self.mac_throttle = value
                                self.mac_throttle.value_namespace = name_space
                                self.mac_throttle.value_namespace_prefix = name_space_prefix
                            if(value_path == "serg-role"):
                                self.serg_role = value
                                self.serg_role.value_namespace = name_space
                                self.serg_role.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-interface-lease-limit-type"):
                                self.server_interface_lease_limit_type = value
                                self.server_interface_lease_limit_type.value_namespace = name_space
                                self.server_interface_lease_limit_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-interface-lease-limits"):
                                self.server_interface_lease_limits = value
                                self.server_interface_lease_limits.value_namespace = name_space
                                self.server_interface_lease_limits.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-interface-mode"):
                                self.server_interface_mode = value
                                self.server_interface_mode.value_namespace = name_space
                                self.server_interface_mode.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-interface-profile-name"):
                                self.server_interface_profile_name = value
                                self.server_interface_profile_name.value_namespace = name_space
                                self.server_interface_profile_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "server-vrf-name"):
                                self.server_vrf_name = value
                                self.server_vrf_name.value_namespace = name_space
                                self.server_vrf_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "srg-role"):
                                self.srg_role = value
                                self.srg_role.value_namespace = name_space
                                self.srg_role.value_namespace_prefix = name_space_prefix
                            if(value_path == "srg-vrf-name"):
                                self.srg_vrf_name = value
                                self.srg_vrf_name.value_namespace = name_space
                                self.srg_vrf_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "srgp2p"):
                                self.srgp2p = value
                                self.srgp2p.value_namespace = name_space
                                self.srgp2p.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.interface:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.interface:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "interfaces" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "interface"):
                            for c in self.interface:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Dhcpv6.Nodes.Node.Server.Interfaces.Interface()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.interface.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "interface"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Statistics(Entity):
                    """
                    DHCPv6 server statistics
                    
                    .. attribute:: ipv6_dhcpv6d_server_stat
                    
                    	ipv6 dhcpv6d server stat
                    	**type**\: list of    :py:class:`Ipv6Dhcpv6DServerStat <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Statistics.Ipv6Dhcpv6DServerStat>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Server.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "server"

                        self.ipv6_dhcpv6d_server_stat = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Dhcpv6.Nodes.Node.Server.Statistics, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Dhcpv6.Nodes.Node.Server.Statistics, self).__setattr__(name, value)


                    class Ipv6Dhcpv6DServerStat(Entity):
                        """
                        ipv6 dhcpv6d server stat
                        
                        .. attribute:: statistics
                        
                        	Server statistics
                        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.Statistics.Ipv6Dhcpv6DServerStat.Statistics>`
                        
                        .. attribute:: vrf_name
                        
                        	DHCPv6 L3 VRF name
                        	**type**\:  str
                        
                        	**length:** 0..33
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Server.Statistics.Ipv6Dhcpv6DServerStat, self).__init__()

                            self.yang_name = "ipv6-dhcpv6d-server-stat"
                            self.yang_parent_name = "statistics"

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.statistics = Dhcpv6.Nodes.Node.Server.Statistics.Ipv6Dhcpv6DServerStat.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Server.Statistics.Ipv6Dhcpv6DServerStat, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Server.Statistics.Ipv6Dhcpv6DServerStat, self).__setattr__(name, value)


                        class Statistics(Entity):
                            """
                            Server statistics
                            
                            .. attribute:: dropped_packets
                            
                            	Dropped packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: received_packets
                            
                            	Received packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: transmitted_packets
                            
                            	Transmitted packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Server.Statistics.Ipv6Dhcpv6DServerStat.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "ipv6-dhcpv6d-server-stat"

                                self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                self.received_packets = YLeaf(YType.uint64, "received-packets")

                                self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("dropped_packets",
                                                "received_packets",
                                                "transmitted_packets") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Server.Statistics.Ipv6Dhcpv6DServerStat.Statistics, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Server.Statistics.Ipv6Dhcpv6DServerStat.Statistics, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.dropped_packets.is_set or
                                    self.received_packets.is_set or
                                    self.transmitted_packets.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.dropped_packets.yfilter != YFilter.not_set or
                                    self.received_packets.yfilter != YFilter.not_set or
                                    self.transmitted_packets.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "statistics" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.received_packets.get_name_leafdata())
                                if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "dropped-packets"):
                                    self.dropped_packets = value
                                    self.dropped_packets.value_namespace = name_space
                                    self.dropped_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "received-packets"):
                                    self.received_packets = value
                                    self.received_packets.value_namespace = name_space
                                    self.received_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "transmitted-packets"):
                                    self.transmitted_packets = value
                                    self.transmitted_packets.value_namespace = name_space
                                    self.transmitted_packets.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.vrf_name.is_set or
                                (self.statistics is not None and self.statistics.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.statistics is not None and self.statistics.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "ipv6-dhcpv6d-server-stat" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "statistics"):
                                if (self.statistics is None):
                                    self.statistics = Dhcpv6.Nodes.Node.Server.Statistics.Ipv6Dhcpv6DServerStat.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"
                                return self.statistics

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "statistics" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.ipv6_dhcpv6d_server_stat:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.ipv6_dhcpv6d_server_stat:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "statistics" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "ipv6-dhcpv6d-server-stat"):
                            for c in self.ipv6_dhcpv6d_server_stat:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Dhcpv6.Nodes.Node.Server.Statistics.Ipv6Dhcpv6DServerStat()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.ipv6_dhcpv6d_server_stat.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "ipv6-dhcpv6d-server-stat"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class BindingOptions(Entity):
                    """
                    DHCPv6 server binding with options
                    
                    .. attribute:: duid_bind_options
                    
                    	DHCPv6 server binding from DUID
                    	**type**\:   :py:class:`DuidBindOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.BindingOptions.DuidBindOptions>`
                    
                    .. attribute:: mac_bind_options
                    
                    	DHCPv6 server binding from MAC address
                    	**type**\:   :py:class:`MacBindOptions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.BindingOptions.MacBindOptions>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Server.BindingOptions, self).__init__()

                        self.yang_name = "binding-options"
                        self.yang_parent_name = "server"

                        self.duid_bind_options = Dhcpv6.Nodes.Node.Server.BindingOptions.DuidBindOptions()
                        self.duid_bind_options.parent = self
                        self._children_name_map["duid_bind_options"] = "duid-bind-options"
                        self._children_yang_names.add("duid-bind-options")

                        self.mac_bind_options = Dhcpv6.Nodes.Node.Server.BindingOptions.MacBindOptions()
                        self.mac_bind_options.parent = self
                        self._children_name_map["mac_bind_options"] = "mac-bind-options"
                        self._children_yang_names.add("mac-bind-options")


                    class MacBindOptions(Entity):
                        """
                        DHCPv6 server binding from MAC address
                        
                        .. attribute:: mac_bind_option
                        
                        	DHCPv6 server binding with options
                        	**type**\: list of    :py:class:`MacBindOption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.BindingOptions.MacBindOptions.MacBindOption>`
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Server.BindingOptions.MacBindOptions, self).__init__()

                            self.yang_name = "mac-bind-options"
                            self.yang_parent_name = "binding-options"

                            self.mac_bind_option = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Server.BindingOptions.MacBindOptions, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Server.BindingOptions.MacBindOptions, self).__setattr__(name, value)


                        class MacBindOption(Entity):
                            """
                            DHCPv6 server binding with options
                            
                            .. attribute:: mac_address  <key>
                            
                            	MAC address
                            	**type**\:  str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: dns_address
                            
                            	DNS addresses
                            	**type**\:  list of str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: dns_count
                            
                            	DNS address count
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: duid_xr
                            
                            	Client DUID
                            	**type**\:  str
                            
                            .. attribute:: mac_address_xr
                            
                            	Client MAC address
                            	**type**\:  str
                            
                            .. attribute:: opt17
                            
                            	Client Option 17 value
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Server.BindingOptions.MacBindOptions.MacBindOption, self).__init__()

                                self.yang_name = "mac-bind-option"
                                self.yang_parent_name = "mac-bind-options"

                                self.mac_address = YLeaf(YType.str, "mac-address")

                                self.dns_address = YLeafList(YType.str, "dns-address")

                                self.dns_count = YLeaf(YType.uint8, "dns-count")

                                self.duid_xr = YLeaf(YType.str, "duid-xr")

                                self.mac_address_xr = YLeaf(YType.str, "mac-address-xr")

                                self.opt17 = YLeaf(YType.str, "opt17")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("mac_address",
                                                "dns_address",
                                                "dns_count",
                                                "duid_xr",
                                                "mac_address_xr",
                                                "opt17") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Server.BindingOptions.MacBindOptions.MacBindOption, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Server.BindingOptions.MacBindOptions.MacBindOption, self).__setattr__(name, value)

                            def has_data(self):
                                for leaf in self.dns_address.getYLeafs():
                                    if (leaf.yfilter != YFilter.not_set):
                                        return True
                                return (
                                    self.mac_address.is_set or
                                    self.dns_count.is_set or
                                    self.duid_xr.is_set or
                                    self.mac_address_xr.is_set or
                                    self.opt17.is_set)

                            def has_operation(self):
                                for leaf in self.dns_address.getYLeafs():
                                    if (leaf.is_set):
                                        return True
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.mac_address.yfilter != YFilter.not_set or
                                    self.dns_address.yfilter != YFilter.not_set or
                                    self.dns_count.yfilter != YFilter.not_set or
                                    self.duid_xr.yfilter != YFilter.not_set or
                                    self.mac_address_xr.yfilter != YFilter.not_set or
                                    self.opt17.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "mac-bind-option" + "[mac-address='" + self.mac_address.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.mac_address.is_set or self.mac_address.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.mac_address.get_name_leafdata())
                                if (self.dns_count.is_set or self.dns_count.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dns_count.get_name_leafdata())
                                if (self.duid_xr.is_set or self.duid_xr.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.duid_xr.get_name_leafdata())
                                if (self.mac_address_xr.is_set or self.mac_address_xr.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.mac_address_xr.get_name_leafdata())
                                if (self.opt17.is_set or self.opt17.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.opt17.get_name_leafdata())

                                leaf_name_data.extend(self.dns_address.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "mac-address" or name == "dns-address" or name == "dns-count" or name == "duid-xr" or name == "mac-address-xr" or name == "opt17"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "mac-address"):
                                    self.mac_address = value
                                    self.mac_address.value_namespace = name_space
                                    self.mac_address.value_namespace_prefix = name_space_prefix
                                if(value_path == "dns-address"):
                                    self.dns_address.append(value)
                                if(value_path == "dns-count"):
                                    self.dns_count = value
                                    self.dns_count.value_namespace = name_space
                                    self.dns_count.value_namespace_prefix = name_space_prefix
                                if(value_path == "duid-xr"):
                                    self.duid_xr = value
                                    self.duid_xr.value_namespace = name_space
                                    self.duid_xr.value_namespace_prefix = name_space_prefix
                                if(value_path == "mac-address-xr"):
                                    self.mac_address_xr = value
                                    self.mac_address_xr.value_namespace = name_space
                                    self.mac_address_xr.value_namespace_prefix = name_space_prefix
                                if(value_path == "opt17"):
                                    self.opt17 = value
                                    self.opt17.value_namespace = name_space
                                    self.opt17.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.mac_bind_option:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.mac_bind_option:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "mac-bind-options" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "mac-bind-option"):
                                for c in self.mac_bind_option:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = Dhcpv6.Nodes.Node.Server.BindingOptions.MacBindOptions.MacBindOption()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.mac_bind_option.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "mac-bind-option"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass


                    class DuidBindOptions(Entity):
                        """
                        DHCPv6 server binding from DUID
                        
                        .. attribute:: duid_bind_option
                        
                        	DHCPv6 server binding with options
                        	**type**\: list of    :py:class:`DuidBindOption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Server.BindingOptions.DuidBindOptions.DuidBindOption>`
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Server.BindingOptions.DuidBindOptions, self).__init__()

                            self.yang_name = "duid-bind-options"
                            self.yang_parent_name = "binding-options"

                            self.duid_bind_option = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Server.BindingOptions.DuidBindOptions, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Server.BindingOptions.DuidBindOptions, self).__setattr__(name, value)


                        class DuidBindOption(Entity):
                            """
                            DHCPv6 server binding with options
                            
                            .. attribute:: duid  <key>
                            
                            	DUID of Binding
                            	**type**\:  str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: dns_address
                            
                            	DNS addresses
                            	**type**\:  list of str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: dns_count
                            
                            	DNS address count
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: duid_xr
                            
                            	Client DUID
                            	**type**\:  str
                            
                            .. attribute:: mac_address_xr
                            
                            	Client MAC address
                            	**type**\:  str
                            
                            .. attribute:: opt17
                            
                            	Client Option 17 value
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Server.BindingOptions.DuidBindOptions.DuidBindOption, self).__init__()

                                self.yang_name = "duid-bind-option"
                                self.yang_parent_name = "duid-bind-options"

                                self.duid = YLeaf(YType.str, "duid")

                                self.dns_address = YLeafList(YType.str, "dns-address")

                                self.dns_count = YLeaf(YType.uint8, "dns-count")

                                self.duid_xr = YLeaf(YType.str, "duid-xr")

                                self.mac_address_xr = YLeaf(YType.str, "mac-address-xr")

                                self.opt17 = YLeaf(YType.str, "opt17")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("duid",
                                                "dns_address",
                                                "dns_count",
                                                "duid_xr",
                                                "mac_address_xr",
                                                "opt17") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Server.BindingOptions.DuidBindOptions.DuidBindOption, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Server.BindingOptions.DuidBindOptions.DuidBindOption, self).__setattr__(name, value)

                            def has_data(self):
                                for leaf in self.dns_address.getYLeafs():
                                    if (leaf.yfilter != YFilter.not_set):
                                        return True
                                return (
                                    self.duid.is_set or
                                    self.dns_count.is_set or
                                    self.duid_xr.is_set or
                                    self.mac_address_xr.is_set or
                                    self.opt17.is_set)

                            def has_operation(self):
                                for leaf in self.dns_address.getYLeafs():
                                    if (leaf.is_set):
                                        return True
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.duid.yfilter != YFilter.not_set or
                                    self.dns_address.yfilter != YFilter.not_set or
                                    self.dns_count.yfilter != YFilter.not_set or
                                    self.duid_xr.yfilter != YFilter.not_set or
                                    self.mac_address_xr.yfilter != YFilter.not_set or
                                    self.opt17.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "duid-bind-option" + "[duid='" + self.duid.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.duid.is_set or self.duid.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.duid.get_name_leafdata())
                                if (self.dns_count.is_set or self.dns_count.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dns_count.get_name_leafdata())
                                if (self.duid_xr.is_set or self.duid_xr.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.duid_xr.get_name_leafdata())
                                if (self.mac_address_xr.is_set or self.mac_address_xr.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.mac_address_xr.get_name_leafdata())
                                if (self.opt17.is_set or self.opt17.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.opt17.get_name_leafdata())

                                leaf_name_data.extend(self.dns_address.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "duid" or name == "dns-address" or name == "dns-count" or name == "duid-xr" or name == "mac-address-xr" or name == "opt17"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "duid"):
                                    self.duid = value
                                    self.duid.value_namespace = name_space
                                    self.duid.value_namespace_prefix = name_space_prefix
                                if(value_path == "dns-address"):
                                    self.dns_address.append(value)
                                if(value_path == "dns-count"):
                                    self.dns_count = value
                                    self.dns_count.value_namespace = name_space
                                    self.dns_count.value_namespace_prefix = name_space_prefix
                                if(value_path == "duid-xr"):
                                    self.duid_xr = value
                                    self.duid_xr.value_namespace = name_space
                                    self.duid_xr.value_namespace_prefix = name_space_prefix
                                if(value_path == "mac-address-xr"):
                                    self.mac_address_xr = value
                                    self.mac_address_xr.value_namespace = name_space
                                    self.mac_address_xr.value_namespace_prefix = name_space_prefix
                                if(value_path == "opt17"):
                                    self.opt17 = value
                                    self.opt17.value_namespace = name_space
                                    self.opt17.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.duid_bind_option:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.duid_bind_option:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "duid-bind-options" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "duid-bind-option"):
                                for c in self.duid_bind_option:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = Dhcpv6.Nodes.Node.Server.BindingOptions.DuidBindOptions.DuidBindOption()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.duid_bind_option.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "duid-bind-option"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            (self.duid_bind_options is not None and self.duid_bind_options.has_data()) or
                            (self.mac_bind_options is not None and self.mac_bind_options.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            (self.duid_bind_options is not None and self.duid_bind_options.has_operation()) or
                            (self.mac_bind_options is not None and self.mac_bind_options.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "binding-options" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "duid-bind-options"):
                            if (self.duid_bind_options is None):
                                self.duid_bind_options = Dhcpv6.Nodes.Node.Server.BindingOptions.DuidBindOptions()
                                self.duid_bind_options.parent = self
                                self._children_name_map["duid_bind_options"] = "duid-bind-options"
                            return self.duid_bind_options

                        if (child_yang_name == "mac-bind-options"):
                            if (self.mac_bind_options is None):
                                self.mac_bind_options = Dhcpv6.Nodes.Node.Server.BindingOptions.MacBindOptions()
                                self.mac_bind_options.parent = self
                                self._children_name_map["mac_bind_options"] = "mac-bind-options"
                            return self.mac_bind_options

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "duid-bind-options" or name == "mac-bind-options"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        (self.binding is not None and self.binding.has_data()) or
                        (self.binding_options is not None and self.binding_options.has_data()) or
                        (self.interfaces is not None and self.interfaces.has_data()) or
                        (self.profiles is not None and self.profiles.has_data()) or
                        (self.statistics is not None and self.statistics.has_data()) or
                        (self.vrfs is not None and self.vrfs.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.binding is not None and self.binding.has_operation()) or
                        (self.binding_options is not None and self.binding_options.has_operation()) or
                        (self.interfaces is not None and self.interfaces.has_operation()) or
                        (self.profiles is not None and self.profiles.has_operation()) or
                        (self.statistics is not None and self.statistics.has_operation()) or
                        (self.vrfs is not None and self.vrfs.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "server" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "binding"):
                        if (self.binding is None):
                            self.binding = Dhcpv6.Nodes.Node.Server.Binding()
                            self.binding.parent = self
                            self._children_name_map["binding"] = "binding"
                        return self.binding

                    if (child_yang_name == "binding-options"):
                        if (self.binding_options is None):
                            self.binding_options = Dhcpv6.Nodes.Node.Server.BindingOptions()
                            self.binding_options.parent = self
                            self._children_name_map["binding_options"] = "binding-options"
                        return self.binding_options

                    if (child_yang_name == "interfaces"):
                        if (self.interfaces is None):
                            self.interfaces = Dhcpv6.Nodes.Node.Server.Interfaces()
                            self.interfaces.parent = self
                            self._children_name_map["interfaces"] = "interfaces"
                        return self.interfaces

                    if (child_yang_name == "profiles"):
                        if (self.profiles is None):
                            self.profiles = Dhcpv6.Nodes.Node.Server.Profiles()
                            self.profiles.parent = self
                            self._children_name_map["profiles"] = "profiles"
                        return self.profiles

                    if (child_yang_name == "statistics"):
                        if (self.statistics is None):
                            self.statistics = Dhcpv6.Nodes.Node.Server.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                        return self.statistics

                    if (child_yang_name == "vrfs"):
                        if (self.vrfs is None):
                            self.vrfs = Dhcpv6.Nodes.Node.Server.Vrfs()
                            self.vrfs.parent = self
                            self._children_name_map["vrfs"] = "vrfs"
                        return self.vrfs

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "binding" or name == "binding-options" or name == "interfaces" or name == "profiles" or name == "statistics" or name == "vrfs"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Relay(Entity):
                """
                IPv6 DHCP relay operational data
                
                .. attribute:: binding
                
                	DHCPV6 relay bindings
                	**type**\:   :py:class:`Binding <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Binding>`
                
                .. attribute:: statistics
                
                	DHCPv6 relay statistics
                	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Statistics>`
                
                .. attribute:: vrfs
                
                	DHCPV6 relay list of VRF names
                	**type**\:   :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs>`
                
                

                """

                _prefix = 'ipv6-new-dhcpv6d-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Dhcpv6.Nodes.Node.Relay, self).__init__()

                    self.yang_name = "relay"
                    self.yang_parent_name = "node"

                    self.binding = Dhcpv6.Nodes.Node.Relay.Binding()
                    self.binding.parent = self
                    self._children_name_map["binding"] = "binding"
                    self._children_yang_names.add("binding")

                    self.statistics = Dhcpv6.Nodes.Node.Relay.Statistics()
                    self.statistics.parent = self
                    self._children_name_map["statistics"] = "statistics"
                    self._children_yang_names.add("statistics")

                    self.vrfs = Dhcpv6.Nodes.Node.Relay.Vrfs()
                    self.vrfs.parent = self
                    self._children_name_map["vrfs"] = "vrfs"
                    self._children_yang_names.add("vrfs")


                class Statistics(Entity):
                    """
                    DHCPv6 relay statistics
                    
                    .. attribute:: ipv6_dhcpv6d_relay_stat
                    
                    	ipv6 dhcpv6d relay stat
                    	**type**\: list of    :py:class:`Ipv6Dhcpv6DRelayStat <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Statistics.Ipv6Dhcpv6DRelayStat>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Relay.Statistics, self).__init__()

                        self.yang_name = "statistics"
                        self.yang_parent_name = "relay"

                        self.ipv6_dhcpv6d_relay_stat = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Dhcpv6.Nodes.Node.Relay.Statistics, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Dhcpv6.Nodes.Node.Relay.Statistics, self).__setattr__(name, value)


                    class Ipv6Dhcpv6DRelayStat(Entity):
                        """
                        ipv6 dhcpv6d relay stat
                        
                        .. attribute:: statistics
                        
                        	Relay statistics
                        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Statistics.Ipv6Dhcpv6DRelayStat.Statistics>`
                        
                        .. attribute:: vrf_name
                        
                        	DHCPv6 L3 VRF name
                        	**type**\:  str
                        
                        	**length:** 0..33
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Relay.Statistics.Ipv6Dhcpv6DRelayStat, self).__init__()

                            self.yang_name = "ipv6-dhcpv6d-relay-stat"
                            self.yang_parent_name = "statistics"

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.statistics = Dhcpv6.Nodes.Node.Relay.Statistics.Ipv6Dhcpv6DRelayStat.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Relay.Statistics.Ipv6Dhcpv6DRelayStat, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Relay.Statistics.Ipv6Dhcpv6DRelayStat, self).__setattr__(name, value)


                        class Statistics(Entity):
                            """
                            Relay statistics
                            
                            .. attribute:: dropped_packets
                            
                            	Dropped packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: received_packets
                            
                            	Received packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: transmitted_packets
                            
                            	Transmitted packets
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Relay.Statistics.Ipv6Dhcpv6DRelayStat.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "ipv6-dhcpv6d-relay-stat"

                                self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                self.received_packets = YLeaf(YType.uint64, "received-packets")

                                self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("dropped_packets",
                                                "received_packets",
                                                "transmitted_packets") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Relay.Statistics.Ipv6Dhcpv6DRelayStat.Statistics, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Relay.Statistics.Ipv6Dhcpv6DRelayStat.Statistics, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.dropped_packets.is_set or
                                    self.received_packets.is_set or
                                    self.transmitted_packets.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.dropped_packets.yfilter != YFilter.not_set or
                                    self.received_packets.yfilter != YFilter.not_set or
                                    self.transmitted_packets.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "statistics" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.received_packets.get_name_leafdata())
                                if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "dropped-packets"):
                                    self.dropped_packets = value
                                    self.dropped_packets.value_namespace = name_space
                                    self.dropped_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "received-packets"):
                                    self.received_packets = value
                                    self.received_packets.value_namespace = name_space
                                    self.received_packets.value_namespace_prefix = name_space_prefix
                                if(value_path == "transmitted-packets"):
                                    self.transmitted_packets = value
                                    self.transmitted_packets.value_namespace = name_space
                                    self.transmitted_packets.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.vrf_name.is_set or
                                (self.statistics is not None and self.statistics.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.statistics is not None and self.statistics.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "ipv6-dhcpv6d-relay-stat" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "statistics"):
                                if (self.statistics is None):
                                    self.statistics = Dhcpv6.Nodes.Node.Relay.Statistics.Ipv6Dhcpv6DRelayStat.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"
                                return self.statistics

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "statistics" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.ipv6_dhcpv6d_relay_stat:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.ipv6_dhcpv6d_relay_stat:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "statistics" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "ipv6-dhcpv6d-relay-stat"):
                            for c in self.ipv6_dhcpv6d_relay_stat:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Dhcpv6.Nodes.Node.Relay.Statistics.Ipv6Dhcpv6DRelayStat()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.ipv6_dhcpv6d_relay_stat.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "ipv6-dhcpv6d-relay-stat"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Binding(Entity):
                    """
                    DHCPV6 relay bindings
                    
                    .. attribute:: clients
                    
                    	DHCPV6 relay client bindings
                    	**type**\:   :py:class:`Clients <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Binding.Clients>`
                    
                    .. attribute:: summary
                    
                    	DHCPV6 relay binding summary
                    	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Binding.Summary>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Relay.Binding, self).__init__()

                        self.yang_name = "binding"
                        self.yang_parent_name = "relay"

                        self.clients = Dhcpv6.Nodes.Node.Relay.Binding.Clients()
                        self.clients.parent = self
                        self._children_name_map["clients"] = "clients"
                        self._children_yang_names.add("clients")

                        self.summary = Dhcpv6.Nodes.Node.Relay.Binding.Summary()
                        self.summary.parent = self
                        self._children_name_map["summary"] = "summary"
                        self._children_yang_names.add("summary")


                    class Summary(Entity):
                        """
                        DHCPV6 relay binding summary
                        
                        .. attribute:: clients
                        
                        	Total number of clients
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Relay.Binding.Summary, self).__init__()

                            self.yang_name = "summary"
                            self.yang_parent_name = "binding"

                            self.clients = YLeaf(YType.uint32, "clients")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("clients") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Relay.Binding.Summary, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Relay.Binding.Summary, self).__setattr__(name, value)

                        def has_data(self):
                            return self.clients.is_set

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.clients.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "summary" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.clients.is_set or self.clients.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.clients.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "clients"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "clients"):
                                self.clients = value
                                self.clients.value_namespace = name_space
                                self.clients.value_namespace_prefix = name_space_prefix


                    class Clients(Entity):
                        """
                        DHCPV6 relay client bindings
                        
                        .. attribute:: client
                        
                        	Single DHCPV6 relay binding
                        	**type**\: list of    :py:class:`Client <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Binding.Clients.Client>`
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Relay.Binding.Clients, self).__init__()

                            self.yang_name = "clients"
                            self.yang_parent_name = "binding"

                            self.client = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Relay.Binding.Clients, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Relay.Binding.Clients, self).__setattr__(name, value)


                        class Client(Entity):
                            """
                            Single DHCPV6 relay binding
                            
                            .. attribute:: client_id  <key>
                            
                            	Client ID
                            	**type**\:  str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: client_id_xr
                            
                            	Client unique identifier
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: duid
                            
                            	Client DUID
                            	**type**\:  str
                            
                            .. attribute:: ia_id
                            
                            	IA\_ID of this IA
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: interface_name
                            
                            	Interface name
                            	**type**\:  str
                            
                            	**length:** 0..65
                            
                            .. attribute:: lifetime
                            
                            	Client route lifetime
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: next_hop_addr
                            
                            	Next hop is our address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix
                            
                            	DHCPV6 IPv6 Prefix allotted to client
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: prefix_length
                            
                            	length of prefix
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: relay_profile_name
                            
                            	Relay Profile name
                            	**type**\:  str
                            
                            	**length:** 0..65
                            
                            .. attribute:: rem_life_time
                            
                            	Client route remaining lifetime
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: vrf_name
                            
                            	DHCPv6 client/subscriber Vrf name
                            	**type**\:  str
                            
                            	**length:** 0..33
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Relay.Binding.Clients.Client, self).__init__()

                                self.yang_name = "client"
                                self.yang_parent_name = "clients"

                                self.client_id = YLeaf(YType.str, "client-id")

                                self.client_id_xr = YLeaf(YType.uint32, "client-id-xr")

                                self.duid = YLeaf(YType.str, "duid")

                                self.ia_id = YLeaf(YType.uint32, "ia-id")

                                self.interface_name = YLeaf(YType.str, "interface-name")

                                self.lifetime = YLeaf(YType.uint32, "lifetime")

                                self.next_hop_addr = YLeaf(YType.str, "next-hop-addr")

                                self.prefix = YLeaf(YType.str, "prefix")

                                self.prefix_length = YLeaf(YType.uint8, "prefix-length")

                                self.relay_profile_name = YLeaf(YType.str, "relay-profile-name")

                                self.rem_life_time = YLeaf(YType.uint32, "rem-life-time")

                                self.vrf_name = YLeaf(YType.str, "vrf-name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("client_id",
                                                "client_id_xr",
                                                "duid",
                                                "ia_id",
                                                "interface_name",
                                                "lifetime",
                                                "next_hop_addr",
                                                "prefix",
                                                "prefix_length",
                                                "relay_profile_name",
                                                "rem_life_time",
                                                "vrf_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Dhcpv6.Nodes.Node.Relay.Binding.Clients.Client, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Dhcpv6.Nodes.Node.Relay.Binding.Clients.Client, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.client_id.is_set or
                                    self.client_id_xr.is_set or
                                    self.duid.is_set or
                                    self.ia_id.is_set or
                                    self.interface_name.is_set or
                                    self.lifetime.is_set or
                                    self.next_hop_addr.is_set or
                                    self.prefix.is_set or
                                    self.prefix_length.is_set or
                                    self.relay_profile_name.is_set or
                                    self.rem_life_time.is_set or
                                    self.vrf_name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.client_id.yfilter != YFilter.not_set or
                                    self.client_id_xr.yfilter != YFilter.not_set or
                                    self.duid.yfilter != YFilter.not_set or
                                    self.ia_id.yfilter != YFilter.not_set or
                                    self.interface_name.yfilter != YFilter.not_set or
                                    self.lifetime.yfilter != YFilter.not_set or
                                    self.next_hop_addr.yfilter != YFilter.not_set or
                                    self.prefix.yfilter != YFilter.not_set or
                                    self.prefix_length.yfilter != YFilter.not_set or
                                    self.relay_profile_name.yfilter != YFilter.not_set or
                                    self.rem_life_time.yfilter != YFilter.not_set or
                                    self.vrf_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "client" + "[client-id='" + self.client_id.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.client_id.is_set or self.client_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.client_id.get_name_leafdata())
                                if (self.client_id_xr.is_set or self.client_id_xr.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.client_id_xr.get_name_leafdata())
                                if (self.duid.is_set or self.duid.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.duid.get_name_leafdata())
                                if (self.ia_id.is_set or self.ia_id.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.ia_id.get_name_leafdata())
                                if (self.interface_name.is_set or self.interface_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.interface_name.get_name_leafdata())
                                if (self.lifetime.is_set or self.lifetime.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.lifetime.get_name_leafdata())
                                if (self.next_hop_addr.is_set or self.next_hop_addr.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.next_hop_addr.get_name_leafdata())
                                if (self.prefix.is_set or self.prefix.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.prefix.get_name_leafdata())
                                if (self.prefix_length.is_set or self.prefix_length.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.prefix_length.get_name_leafdata())
                                if (self.relay_profile_name.is_set or self.relay_profile_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.relay_profile_name.get_name_leafdata())
                                if (self.rem_life_time.is_set or self.rem_life_time.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.rem_life_time.get_name_leafdata())
                                if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.vrf_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "client-id" or name == "client-id-xr" or name == "duid" or name == "ia-id" or name == "interface-name" or name == "lifetime" or name == "next-hop-addr" or name == "prefix" or name == "prefix-length" or name == "relay-profile-name" or name == "rem-life-time" or name == "vrf-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "client-id"):
                                    self.client_id = value
                                    self.client_id.value_namespace = name_space
                                    self.client_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "client-id-xr"):
                                    self.client_id_xr = value
                                    self.client_id_xr.value_namespace = name_space
                                    self.client_id_xr.value_namespace_prefix = name_space_prefix
                                if(value_path == "duid"):
                                    self.duid = value
                                    self.duid.value_namespace = name_space
                                    self.duid.value_namespace_prefix = name_space_prefix
                                if(value_path == "ia-id"):
                                    self.ia_id = value
                                    self.ia_id.value_namespace = name_space
                                    self.ia_id.value_namespace_prefix = name_space_prefix
                                if(value_path == "interface-name"):
                                    self.interface_name = value
                                    self.interface_name.value_namespace = name_space
                                    self.interface_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "lifetime"):
                                    self.lifetime = value
                                    self.lifetime.value_namespace = name_space
                                    self.lifetime.value_namespace_prefix = name_space_prefix
                                if(value_path == "next-hop-addr"):
                                    self.next_hop_addr = value
                                    self.next_hop_addr.value_namespace = name_space
                                    self.next_hop_addr.value_namespace_prefix = name_space_prefix
                                if(value_path == "prefix"):
                                    self.prefix = value
                                    self.prefix.value_namespace = name_space
                                    self.prefix.value_namespace_prefix = name_space_prefix
                                if(value_path == "prefix-length"):
                                    self.prefix_length = value
                                    self.prefix_length.value_namespace = name_space
                                    self.prefix_length.value_namespace_prefix = name_space_prefix
                                if(value_path == "relay-profile-name"):
                                    self.relay_profile_name = value
                                    self.relay_profile_name.value_namespace = name_space
                                    self.relay_profile_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "rem-life-time"):
                                    self.rem_life_time = value
                                    self.rem_life_time.value_namespace = name_space
                                    self.rem_life_time.value_namespace_prefix = name_space_prefix
                                if(value_path == "vrf-name"):
                                    self.vrf_name = value
                                    self.vrf_name.value_namespace = name_space
                                    self.vrf_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.client:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.client:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "clients" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "client"):
                                for c in self.client:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = Dhcpv6.Nodes.Node.Relay.Binding.Clients.Client()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.client.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "client"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            (self.clients is not None and self.clients.has_data()) or
                            (self.summary is not None and self.summary.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            (self.clients is not None and self.clients.has_operation()) or
                            (self.summary is not None and self.summary.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "binding" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "clients"):
                            if (self.clients is None):
                                self.clients = Dhcpv6.Nodes.Node.Relay.Binding.Clients()
                                self.clients.parent = self
                                self._children_name_map["clients"] = "clients"
                            return self.clients

                        if (child_yang_name == "summary"):
                            if (self.summary is None):
                                self.summary = Dhcpv6.Nodes.Node.Relay.Binding.Summary()
                                self.summary.parent = self
                                self._children_name_map["summary"] = "summary"
                            return self.summary

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "clients" or name == "summary"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass


                class Vrfs(Entity):
                    """
                    DHCPV6 relay list of VRF names
                    
                    .. attribute:: vrf
                    
                    	IPv6 DHCP relay VRF name
                    	**type**\: list of    :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf>`
                    
                    

                    """

                    _prefix = 'ipv6-new-dhcpv6d-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Dhcpv6.Nodes.Node.Relay.Vrfs, self).__init__()

                        self.yang_name = "vrfs"
                        self.yang_parent_name = "relay"

                        self.vrf = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Dhcpv6.Nodes.Node.Relay.Vrfs, self).__setattr__(name, value)


                    class Vrf(Entity):
                        """
                        IPv6 DHCP relay VRF name
                        
                        .. attribute:: vrf_name  <key>
                        
                        	VRF name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: statistics
                        
                        	IPv6 DHCP relay statistics
                        	**type**\:   :py:class:`Statistics <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics>`
                        
                        

                        """

                        _prefix = 'ipv6-new-dhcpv6d-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf, self).__init__()

                            self.yang_name = "vrf"
                            self.yang_parent_name = "vrfs"

                            self.vrf_name = YLeaf(YType.str, "vrf-name")

                            self.statistics = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                            self._children_yang_names.add("statistics")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("vrf_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf, self).__setattr__(name, value)


                        class Statistics(Entity):
                            """
                            IPv6 DHCP relay statistics
                            
                            .. attribute:: advertise
                            
                            	DHCPV6 advertise packets
                            	**type**\:   :py:class:`Advertise <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Advertise>`
                            
                            .. attribute:: confirm
                            
                            	DHCPV6 confirm packets
                            	**type**\:   :py:class:`Confirm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Confirm>`
                            
                            .. attribute:: decline
                            
                            	DHCPV6 decline packets
                            	**type**\:   :py:class:`Decline <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Decline>`
                            
                            .. attribute:: inform
                            
                            	DHCPV6 inform packets
                            	**type**\:   :py:class:`Inform <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Inform>`
                            
                            .. attribute:: lease_query
                            
                            	DHCPV6 lease query packets
                            	**type**\:   :py:class:`LeaseQuery <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQuery>`
                            
                            .. attribute:: lease_query_data
                            
                            	DHCPV6 lease query data packets
                            	**type**\:   :py:class:`LeaseQueryData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryData>`
                            
                            .. attribute:: lease_query_done
                            
                            	DHCPV6 lease query done packets
                            	**type**\:   :py:class:`LeaseQueryDone <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryDone>`
                            
                            .. attribute:: lease_query_reply
                            
                            	DHCPV6 lease query reply packets
                            	**type**\:   :py:class:`LeaseQueryReply <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryReply>`
                            
                            .. attribute:: rebind
                            
                            	DHCPV6 rebind packets
                            	**type**\:   :py:class:`Rebind <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Rebind>`
                            
                            .. attribute:: reconfig
                            
                            	DHCPV6 reconfig packets
                            	**type**\:   :py:class:`Reconfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Reconfig>`
                            
                            .. attribute:: relay_forward
                            
                            	DHCPV6 relay forward packets
                            	**type**\:   :py:class:`RelayForward <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.RelayForward>`
                            
                            .. attribute:: relay_reply
                            
                            	DHCPV6 relay reply packets
                            	**type**\:   :py:class:`RelayReply <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.RelayReply>`
                            
                            .. attribute:: release
                            
                            	DHCPV6 release packets
                            	**type**\:   :py:class:`Release <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Release>`
                            
                            .. attribute:: renew
                            
                            	DHCPV6 renew packets
                            	**type**\:   :py:class:`Renew <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Renew>`
                            
                            .. attribute:: reply
                            
                            	DHCPV6 reply packets
                            	**type**\:   :py:class:`Reply <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Reply>`
                            
                            .. attribute:: request
                            
                            	DHCPV6 request packets
                            	**type**\:   :py:class:`Request <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Request>`
                            
                            .. attribute:: solicit
                            
                            	DHCPV6 solicit packets
                            	**type**\:   :py:class:`Solicit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_new_dhcpv6d_oper.Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Solicit>`
                            
                            

                            """

                            _prefix = 'ipv6-new-dhcpv6d-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics, self).__init__()

                                self.yang_name = "statistics"
                                self.yang_parent_name = "vrf"

                                self.advertise = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Advertise()
                                self.advertise.parent = self
                                self._children_name_map["advertise"] = "advertise"
                                self._children_yang_names.add("advertise")

                                self.confirm = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Confirm()
                                self.confirm.parent = self
                                self._children_name_map["confirm"] = "confirm"
                                self._children_yang_names.add("confirm")

                                self.decline = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Decline()
                                self.decline.parent = self
                                self._children_name_map["decline"] = "decline"
                                self._children_yang_names.add("decline")

                                self.inform = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Inform()
                                self.inform.parent = self
                                self._children_name_map["inform"] = "inform"
                                self._children_yang_names.add("inform")

                                self.lease_query = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQuery()
                                self.lease_query.parent = self
                                self._children_name_map["lease_query"] = "lease-query"
                                self._children_yang_names.add("lease-query")

                                self.lease_query_data = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryData()
                                self.lease_query_data.parent = self
                                self._children_name_map["lease_query_data"] = "lease-query-data"
                                self._children_yang_names.add("lease-query-data")

                                self.lease_query_done = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryDone()
                                self.lease_query_done.parent = self
                                self._children_name_map["lease_query_done"] = "lease-query-done"
                                self._children_yang_names.add("lease-query-done")

                                self.lease_query_reply = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryReply()
                                self.lease_query_reply.parent = self
                                self._children_name_map["lease_query_reply"] = "lease-query-reply"
                                self._children_yang_names.add("lease-query-reply")

                                self.rebind = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Rebind()
                                self.rebind.parent = self
                                self._children_name_map["rebind"] = "rebind"
                                self._children_yang_names.add("rebind")

                                self.reconfig = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Reconfig()
                                self.reconfig.parent = self
                                self._children_name_map["reconfig"] = "reconfig"
                                self._children_yang_names.add("reconfig")

                                self.relay_forward = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.RelayForward()
                                self.relay_forward.parent = self
                                self._children_name_map["relay_forward"] = "relay-forward"
                                self._children_yang_names.add("relay-forward")

                                self.relay_reply = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.RelayReply()
                                self.relay_reply.parent = self
                                self._children_name_map["relay_reply"] = "relay-reply"
                                self._children_yang_names.add("relay-reply")

                                self.release = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Release()
                                self.release.parent = self
                                self._children_name_map["release"] = "release"
                                self._children_yang_names.add("release")

                                self.renew = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Renew()
                                self.renew.parent = self
                                self._children_name_map["renew"] = "renew"
                                self._children_yang_names.add("renew")

                                self.reply = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Reply()
                                self.reply.parent = self
                                self._children_name_map["reply"] = "reply"
                                self._children_yang_names.add("reply")

                                self.request = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Request()
                                self.request.parent = self
                                self._children_name_map["request"] = "request"
                                self._children_yang_names.add("request")

                                self.solicit = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Solicit()
                                self.solicit.parent = self
                                self._children_name_map["solicit"] = "solicit"
                                self._children_yang_names.add("solicit")


                            class Solicit(Entity):
                                """
                                DHCPV6 solicit packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Solicit, self).__init__()

                                    self.yang_name = "solicit"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Solicit, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Solicit, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "solicit" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Advertise(Entity):
                                """
                                DHCPV6 advertise packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Advertise, self).__init__()

                                    self.yang_name = "advertise"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Advertise, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Advertise, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "advertise" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Request(Entity):
                                """
                                DHCPV6 request packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Request, self).__init__()

                                    self.yang_name = "request"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Request, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Request, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "request" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Reply(Entity):
                                """
                                DHCPV6 reply packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Reply, self).__init__()

                                    self.yang_name = "reply"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Reply, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Reply, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "reply" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Confirm(Entity):
                                """
                                DHCPV6 confirm packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Confirm, self).__init__()

                                    self.yang_name = "confirm"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Confirm, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Confirm, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "confirm" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Decline(Entity):
                                """
                                DHCPV6 decline packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Decline, self).__init__()

                                    self.yang_name = "decline"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Decline, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Decline, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "decline" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Renew(Entity):
                                """
                                DHCPV6 renew packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Renew, self).__init__()

                                    self.yang_name = "renew"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Renew, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Renew, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "renew" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Rebind(Entity):
                                """
                                DHCPV6 rebind packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Rebind, self).__init__()

                                    self.yang_name = "rebind"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Rebind, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Rebind, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "rebind" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Release(Entity):
                                """
                                DHCPV6 release packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Release, self).__init__()

                                    self.yang_name = "release"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Release, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Release, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "release" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Reconfig(Entity):
                                """
                                DHCPV6 reconfig packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Reconfig, self).__init__()

                                    self.yang_name = "reconfig"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Reconfig, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Reconfig, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "reconfig" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class Inform(Entity):
                                """
                                DHCPV6 inform packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Inform, self).__init__()

                                    self.yang_name = "inform"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Inform, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Inform, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "inform" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class RelayForward(Entity):
                                """
                                DHCPV6 relay forward packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.RelayForward, self).__init__()

                                    self.yang_name = "relay-forward"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.RelayForward, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.RelayForward, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "relay-forward" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class RelayReply(Entity):
                                """
                                DHCPV6 relay reply packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.RelayReply, self).__init__()

                                    self.yang_name = "relay-reply"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.RelayReply, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.RelayReply, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "relay-reply" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQuery(Entity):
                                """
                                DHCPV6 lease query packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQuery, self).__init__()

                                    self.yang_name = "lease-query"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQuery, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQuery, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQueryReply(Entity):
                                """
                                DHCPV6 lease query reply packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryReply, self).__init__()

                                    self.yang_name = "lease-query-reply"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryReply, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryReply, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query-reply" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQueryDone(Entity):
                                """
                                DHCPV6 lease query done packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryDone, self).__init__()

                                    self.yang_name = "lease-query-done"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryDone, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryDone, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query-done" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix


                            class LeaseQueryData(Entity):
                                """
                                DHCPV6 lease query data packets
                                
                                .. attribute:: dropped_packets
                                
                                	Dropped packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: received_packets
                                
                                	Received packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: transmitted_packets
                                
                                	Transmitted packets
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'ipv6-new-dhcpv6d-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryData, self).__init__()

                                    self.yang_name = "lease-query-data"
                                    self.yang_parent_name = "statistics"

                                    self.dropped_packets = YLeaf(YType.uint64, "dropped-packets")

                                    self.received_packets = YLeaf(YType.uint64, "received-packets")

                                    self.transmitted_packets = YLeaf(YType.uint64, "transmitted-packets")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("dropped_packets",
                                                    "received_packets",
                                                    "transmitted_packets") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryData, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryData, self).__setattr__(name, value)

                                def has_data(self):
                                    return (
                                        self.dropped_packets.is_set or
                                        self.received_packets.is_set or
                                        self.transmitted_packets.is_set)

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.dropped_packets.yfilter != YFilter.not_set or
                                        self.received_packets.yfilter != YFilter.not_set or
                                        self.transmitted_packets.yfilter != YFilter.not_set)

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "lease-query-data" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.dropped_packets.is_set or self.dropped_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.dropped_packets.get_name_leafdata())
                                    if (self.received_packets.is_set or self.received_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.received_packets.get_name_leafdata())
                                    if (self.transmitted_packets.is_set or self.transmitted_packets.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.transmitted_packets.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "dropped-packets" or name == "received-packets" or name == "transmitted-packets"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "dropped-packets"):
                                        self.dropped_packets = value
                                        self.dropped_packets.value_namespace = name_space
                                        self.dropped_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "received-packets"):
                                        self.received_packets = value
                                        self.received_packets.value_namespace = name_space
                                        self.received_packets.value_namespace_prefix = name_space_prefix
                                    if(value_path == "transmitted-packets"):
                                        self.transmitted_packets = value
                                        self.transmitted_packets.value_namespace = name_space
                                        self.transmitted_packets.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                return (
                                    (self.advertise is not None and self.advertise.has_data()) or
                                    (self.confirm is not None and self.confirm.has_data()) or
                                    (self.decline is not None and self.decline.has_data()) or
                                    (self.inform is not None and self.inform.has_data()) or
                                    (self.lease_query is not None and self.lease_query.has_data()) or
                                    (self.lease_query_data is not None and self.lease_query_data.has_data()) or
                                    (self.lease_query_done is not None and self.lease_query_done.has_data()) or
                                    (self.lease_query_reply is not None and self.lease_query_reply.has_data()) or
                                    (self.rebind is not None and self.rebind.has_data()) or
                                    (self.reconfig is not None and self.reconfig.has_data()) or
                                    (self.relay_forward is not None and self.relay_forward.has_data()) or
                                    (self.relay_reply is not None and self.relay_reply.has_data()) or
                                    (self.release is not None and self.release.has_data()) or
                                    (self.renew is not None and self.renew.has_data()) or
                                    (self.reply is not None and self.reply.has_data()) or
                                    (self.request is not None and self.request.has_data()) or
                                    (self.solicit is not None and self.solicit.has_data()))

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    (self.advertise is not None and self.advertise.has_operation()) or
                                    (self.confirm is not None and self.confirm.has_operation()) or
                                    (self.decline is not None and self.decline.has_operation()) or
                                    (self.inform is not None and self.inform.has_operation()) or
                                    (self.lease_query is not None and self.lease_query.has_operation()) or
                                    (self.lease_query_data is not None and self.lease_query_data.has_operation()) or
                                    (self.lease_query_done is not None and self.lease_query_done.has_operation()) or
                                    (self.lease_query_reply is not None and self.lease_query_reply.has_operation()) or
                                    (self.rebind is not None and self.rebind.has_operation()) or
                                    (self.reconfig is not None and self.reconfig.has_operation()) or
                                    (self.relay_forward is not None and self.relay_forward.has_operation()) or
                                    (self.relay_reply is not None and self.relay_reply.has_operation()) or
                                    (self.release is not None and self.release.has_operation()) or
                                    (self.renew is not None and self.renew.has_operation()) or
                                    (self.reply is not None and self.reply.has_operation()) or
                                    (self.request is not None and self.request.has_operation()) or
                                    (self.solicit is not None and self.solicit.has_operation()))

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "statistics" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "advertise"):
                                    if (self.advertise is None):
                                        self.advertise = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Advertise()
                                        self.advertise.parent = self
                                        self._children_name_map["advertise"] = "advertise"
                                    return self.advertise

                                if (child_yang_name == "confirm"):
                                    if (self.confirm is None):
                                        self.confirm = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Confirm()
                                        self.confirm.parent = self
                                        self._children_name_map["confirm"] = "confirm"
                                    return self.confirm

                                if (child_yang_name == "decline"):
                                    if (self.decline is None):
                                        self.decline = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Decline()
                                        self.decline.parent = self
                                        self._children_name_map["decline"] = "decline"
                                    return self.decline

                                if (child_yang_name == "inform"):
                                    if (self.inform is None):
                                        self.inform = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Inform()
                                        self.inform.parent = self
                                        self._children_name_map["inform"] = "inform"
                                    return self.inform

                                if (child_yang_name == "lease-query"):
                                    if (self.lease_query is None):
                                        self.lease_query = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQuery()
                                        self.lease_query.parent = self
                                        self._children_name_map["lease_query"] = "lease-query"
                                    return self.lease_query

                                if (child_yang_name == "lease-query-data"):
                                    if (self.lease_query_data is None):
                                        self.lease_query_data = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryData()
                                        self.lease_query_data.parent = self
                                        self._children_name_map["lease_query_data"] = "lease-query-data"
                                    return self.lease_query_data

                                if (child_yang_name == "lease-query-done"):
                                    if (self.lease_query_done is None):
                                        self.lease_query_done = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryDone()
                                        self.lease_query_done.parent = self
                                        self._children_name_map["lease_query_done"] = "lease-query-done"
                                    return self.lease_query_done

                                if (child_yang_name == "lease-query-reply"):
                                    if (self.lease_query_reply is None):
                                        self.lease_query_reply = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.LeaseQueryReply()
                                        self.lease_query_reply.parent = self
                                        self._children_name_map["lease_query_reply"] = "lease-query-reply"
                                    return self.lease_query_reply

                                if (child_yang_name == "rebind"):
                                    if (self.rebind is None):
                                        self.rebind = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Rebind()
                                        self.rebind.parent = self
                                        self._children_name_map["rebind"] = "rebind"
                                    return self.rebind

                                if (child_yang_name == "reconfig"):
                                    if (self.reconfig is None):
                                        self.reconfig = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Reconfig()
                                        self.reconfig.parent = self
                                        self._children_name_map["reconfig"] = "reconfig"
                                    return self.reconfig

                                if (child_yang_name == "relay-forward"):
                                    if (self.relay_forward is None):
                                        self.relay_forward = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.RelayForward()
                                        self.relay_forward.parent = self
                                        self._children_name_map["relay_forward"] = "relay-forward"
                                    return self.relay_forward

                                if (child_yang_name == "relay-reply"):
                                    if (self.relay_reply is None):
                                        self.relay_reply = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.RelayReply()
                                        self.relay_reply.parent = self
                                        self._children_name_map["relay_reply"] = "relay-reply"
                                    return self.relay_reply

                                if (child_yang_name == "release"):
                                    if (self.release is None):
                                        self.release = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Release()
                                        self.release.parent = self
                                        self._children_name_map["release"] = "release"
                                    return self.release

                                if (child_yang_name == "renew"):
                                    if (self.renew is None):
                                        self.renew = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Renew()
                                        self.renew.parent = self
                                        self._children_name_map["renew"] = "renew"
                                    return self.renew

                                if (child_yang_name == "reply"):
                                    if (self.reply is None):
                                        self.reply = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Reply()
                                        self.reply.parent = self
                                        self._children_name_map["reply"] = "reply"
                                    return self.reply

                                if (child_yang_name == "request"):
                                    if (self.request is None):
                                        self.request = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Request()
                                        self.request.parent = self
                                        self._children_name_map["request"] = "request"
                                    return self.request

                                if (child_yang_name == "solicit"):
                                    if (self.solicit is None):
                                        self.solicit = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics.Solicit()
                                        self.solicit.parent = self
                                        self._children_name_map["solicit"] = "solicit"
                                    return self.solicit

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "advertise" or name == "confirm" or name == "decline" or name == "inform" or name == "lease-query" or name == "lease-query-data" or name == "lease-query-done" or name == "lease-query-reply" or name == "rebind" or name == "reconfig" or name == "relay-forward" or name == "relay-reply" or name == "release" or name == "renew" or name == "reply" or name == "request" or name == "solicit"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                pass

                        def has_data(self):
                            return (
                                self.vrf_name.is_set or
                                (self.statistics is not None and self.statistics.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.vrf_name.yfilter != YFilter.not_set or
                                (self.statistics is not None and self.statistics.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "vrf" + "[vrf-name='" + self.vrf_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.vrf_name.is_set or self.vrf_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vrf_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "statistics"):
                                if (self.statistics is None):
                                    self.statistics = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf.Statistics()
                                    self.statistics.parent = self
                                    self._children_name_map["statistics"] = "statistics"
                                return self.statistics

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "statistics" or name == "vrf-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "vrf-name"):
                                self.vrf_name = value
                                self.vrf_name.value_namespace = name_space
                                self.vrf_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.vrf:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.vrf:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "vrfs" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "vrf"):
                            for c in self.vrf:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Dhcpv6.Nodes.Node.Relay.Vrfs.Vrf()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.vrf.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "vrf"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        (self.binding is not None and self.binding.has_data()) or
                        (self.statistics is not None and self.statistics.has_data()) or
                        (self.vrfs is not None and self.vrfs.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.binding is not None and self.binding.has_operation()) or
                        (self.statistics is not None and self.statistics.has_operation()) or
                        (self.vrfs is not None and self.vrfs.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "relay" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "binding"):
                        if (self.binding is None):
                            self.binding = Dhcpv6.Nodes.Node.Relay.Binding()
                            self.binding.parent = self
                            self._children_name_map["binding"] = "binding"
                        return self.binding

                    if (child_yang_name == "statistics"):
                        if (self.statistics is None):
                            self.statistics = Dhcpv6.Nodes.Node.Relay.Statistics()
                            self.statistics.parent = self
                            self._children_name_map["statistics"] = "statistics"
                        return self.statistics

                    if (child_yang_name == "vrfs"):
                        if (self.vrfs is None):
                            self.vrfs = Dhcpv6.Nodes.Node.Relay.Vrfs()
                            self.vrfs.parent = self
                            self._children_name_map["vrfs"] = "vrfs"
                        return self.vrfs

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "binding" or name == "statistics" or name == "vrfs"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    self.node_name.is_set or
                    (self.base is not None and self.base.has_data()) or
                    (self.proxy is not None and self.proxy.has_data()) or
                    (self.relay is not None and self.relay.has_data()) or
                    (self.server is not None and self.server.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.node_name.yfilter != YFilter.not_set or
                    (self.base is not None and self.base.has_operation()) or
                    (self.proxy is not None and self.proxy.has_operation()) or
                    (self.relay is not None and self.relay.has_operation()) or
                    (self.server is not None and self.server.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "node" + "[node-name='" + self.node_name.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-ipv6-new-dhcpv6d-oper:dhcpv6/nodes/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.node_name.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "base"):
                    if (self.base is None):
                        self.base = Dhcpv6.Nodes.Node.Base()
                        self.base.parent = self
                        self._children_name_map["base"] = "base"
                    return self.base

                if (child_yang_name == "proxy"):
                    if (self.proxy is None):
                        self.proxy = Dhcpv6.Nodes.Node.Proxy()
                        self.proxy.parent = self
                        self._children_name_map["proxy"] = "proxy"
                    return self.proxy

                if (child_yang_name == "relay"):
                    if (self.relay is None):
                        self.relay = Dhcpv6.Nodes.Node.Relay()
                        self.relay.parent = self
                        self._children_name_map["relay"] = "relay"
                    return self.relay

                if (child_yang_name == "server"):
                    if (self.server is None):
                        self.server = Dhcpv6.Nodes.Node.Server()
                        self.server.parent = self
                        self._children_name_map["server"] = "server"
                    return self.server

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "base" or name == "proxy" or name == "relay" or name == "server" or name == "node-name"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "node-name"):
                    self.node_name = value
                    self.node_name.value_namespace = name_space
                    self.node_name.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.node:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.node:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "nodes" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-ipv6-new-dhcpv6d-oper:dhcpv6/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "node"):
                for c in self.node:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = Dhcpv6.Nodes.Node()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.node.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "node"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (
            (self.issu_status is not None and self.issu_status.has_data()) or
            (self.nodes is not None and self.nodes.has_data()))

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            (self.issu_status is not None and self.issu_status.has_operation()) or
            (self.nodes is not None and self.nodes.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-ipv6-new-dhcpv6d-oper:dhcpv6" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "issu-status"):
            if (self.issu_status is None):
                self.issu_status = Dhcpv6.IssuStatus()
                self.issu_status.parent = self
                self._children_name_map["issu_status"] = "issu-status"
            return self.issu_status

        if (child_yang_name == "nodes"):
            if (self.nodes is None):
                self.nodes = Dhcpv6.Nodes()
                self.nodes.parent = self
                self._children_name_map["nodes"] = "nodes"
            return self.nodes

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "issu-status" or name == "nodes"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        pass

    def clone_ptr(self):
        self._top_entity = Dhcpv6()
        return self._top_entity

